#!/usr/bin/env python

import argparse
import os
import os.path
import signal
import subprocess
import sys
import time


def run():
    ndk_dir = r"${ANDROID_NDK}"
    sdk_dir = r"${WN_ANDROID_SDK}"
    runner = r"${ANDROID_RUNNER}"
    parser = argparse.ArgumentParser(
        prog="${WN_ACTIVITY_NAME}.py",
        description="Run android program")
    parser.add_argument("--run", action="store_true",
                        help="Default: Run the program")
    parser.add_argument("--install", action="store_true",
                        help="Install .apk")
    parser.add_argument("--debug", action="store_true",
                        help="Run the debugger")
    parser.add_argument("--sync", type=str, default=None)
    parser.add_argument("--sync_target", type=str, default="")
    parser.add_argument("--gdb_command",
                        help=("Arguments use for gdb. You can reference the original" +
                              " gdb executable with $gdb, and the original arguments with" +
                              " $args. \n Defaults to '$gdb $args'"),
                        required=False, default="$gdb $args")
    parser.add_argument("--delay", type=int,
                        help="Delay before run and between install and run")
    parser.add_argument("--remove", action="store_true",
                        help="Remove the package on completion")
    parser.add_argument('--target_arch', type=str, default='armeabi-v7a',
                            help="target architecture to debug on. Must be supplied if debugging",
                            required=False)
    parser.add_argument("--args", type=str, default=None, help="What args to pass to the application")

    args = parser.parse_args(sys.argv[1:])

    runner = os.path.expanduser(runner)
    run = (not args.remove and not args.sync) or args.run
    if args.install:
        if args.delay:
            time.sleep(args.delay)
        run_args = [sys.executable, runner, 'uninstall',
                    "${WN_PACKAGE_STRING}", '--sdk', sdk_dir, "--keep"]
        try:
            subprocess.check_output(run_args)
        except:
            pass
        run_args = [sys.executable, runner, 'install',
                    "${WN_APK_LOCATION}", '--sdk', sdk_dir,
                    '--package_name', '${WN_PACKAGE_STRING}']
        if subprocess.call(run_args) != 0:
            return(-1)
        run = False

    if args.sync:
        run_args = [sys.executable, runner, 'sync', "${WN_PACKAGE_STRING}",
            '--src', args.sync, '--dst', args.sync_target, '--sdk', sdk_dir]
        if subprocess.call(run_args) != 0:
            return(-1)
    if args.run or run:
        if args.delay:
            time.sleep(args.delay)
        run_args = [sys.executable, runner, 'run', "${WN_PACKAGE_STRING}", "${WN_PACKAGE_STRING}.${WN_ACTIVITY_NAME}",
                    '--ndk_dir', ndk_dir, '--sdk', sdk_dir, '--build_dir',
                    "\"${WNFramework_BINARY_DIR}\""]
        if args.debug:
            run_args.append('--debug')
            run_args.append("--target_arch")
            run_args.append(args.target_arch)
        if args.args:
            run_args.append("--args")
            run_args.append(args.args)
        print(run_args)

        ret = subprocess.call(run_args)
        if ret != 0:
            return(ret)

    if args.remove:
        if args.delay:
            time.sleep(args.delay)
        run_args = [sys.executable, runner, 'uninstall',
                    "${WN_PACKAGE_STRING}", '--sdk', sdk_dir]
        return(subprocess.call(run_args))


if __name__ == "__main__":
    sys.exit(run())
