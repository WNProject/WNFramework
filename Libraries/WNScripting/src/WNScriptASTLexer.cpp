// clang-format off
/** \file
 *  This C++ source file was generated by $ANTLR version 3.5.2
 *
 *     -                 for the lexer : WNScriptASTLexerLexer
 *
 * Editing it, at least manually, is not wise.
 *
 * C++ language generator and runtime by Gokulakannan Somasundaram ( heavy lifting from C Run-time by Jim Idle )
 *
 *
*/
// [The "BSD license"]
// Copyright (c) 2005-2009 Gokulakannan Somasundaram, ElectronDB
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF




#include    "WNScriptASTLexer.hpp"











static ANTLR_UCHAR	lit_1[]  = { 0x21, 0x3D,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_2[]  = { 0x25, 0x3D,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_3[]  = { 0x26, 0x26,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_4[]  = { 0x2A, 0x3D,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_5[]  = { 0x2B, 0x3D,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_6[]  = { 0x2D, 0x3D,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_7[]  = { 0x2F, 0x3D,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_8[]  = { 0x3C, 0x3D,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_9[]  = { 0x3D, 0x3D,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_10[]  = { 0x3E, 0x3D,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_11[]  = { 0x5B, 0x5B,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_12[]  = { 0x5D, 0x5D,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_13[]  = { 0x7C, 0x7C,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_14[]  = { 0x6C, 0x65, 0x6E, 0x67, 0x74, 0x68,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_15[]  = { 0x2B, 0x2B,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_16[]  = { 0x2D, 0x2D,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_17[]  = { 0x72, 0x65, 0x74, 0x75, 0x72, 0x6E,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_18[]  = { 0x62, 0x72, 0x65, 0x61, 0x6B,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_19[]  = { 0x63, 0x6F, 0x6E, 0x74, 0x69, 0x6E, 0x75, 0x65,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_20[]  = { 0x77, 0x68, 0x69, 0x6C, 0x65,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_21[]  = { 0x64, 0x6F,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_22[]  = { 0x69, 0x66,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_23[]  = { 0x65, 0x6C, 0x73, 0x65,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_24[]  = { 0x66, 0x6F, 0x72,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_25[]  = { 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_26[]  = { 0x63, 0x6C, 0x61, 0x73, 0x73,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_27[]  = { 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6C,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_28[]  = { 0x6F, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_29[]  = { 0x69, 0x6E, 0x63, 0x6C, 0x75, 0x64, 0x65,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_30[]  = { 0x56, 0x6F, 0x69, 0x64,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_31[]  = { 0x49, 0x6E, 0x74,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_32[]  = { 0x43, 0x70, 0x74, 0x72,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_33[]  = { 0x46, 0x6C, 0x6F, 0x61, 0x74,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_34[]  = { 0x42, 0x6F, 0x6F, 0x6C,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_35[]  = { 0x43, 0x53, 0x74, 0x72, 0x69, 0x6E, 0x67,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_36[]  = { 0x43, 0x68, 0x61, 0x72,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_37[]  = { 0x53, 0x69, 0x7A, 0x65,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_38[]  = { 0x77, 0x65, 0x61, 0x6B,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_39[]  = { 0x73, 0x68, 0x61, 0x72, 0x65, 0x64,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_40[]  = { 0x64, 0x65, 0x66, 0x61, 0x75, 0x6C, 0x74,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_41[]  = { 0x6E, 0x75, 0x6C, 0x6C,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_42[]  = { 0x2D, 0x3E,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_43[]  = { 0x2D, 0x3E, 0x6E, 0x65, 0x78, 0x74,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_44[]  = { 0x2D, 0x3E, 0x64, 0x65, 0x66, 0x65, 0x72,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_45[]  = { 0x2D, 0x3E, 0x62, 0x61, 0x63, 0x6B, 0x67, 0x72, 0x6F, 0x75, 0x6E, 0x64,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_46[]  = { 0x74, 0x68, 0x69, 0x73,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_47[]  = { 0x40, 0x73, 0x79, 0x6E, 0x63, 0x68, 0x72, 0x6F, 0x6E, 0x69, 0x7A, 0x65, 0x64,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_48[]  = { 0x40, 0x61, 0x63, 0x74, 0x69, 0x6F, 0x6E,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_49[]  = { 0x41, 0x63, 0x74, 0x6F, 0x72,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_50[]  = { 0x74, 0x72, 0x75, 0x65,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_51[]  = { 0x66, 0x61, 0x6C, 0x73, 0x65,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_52[]  = { 0x2F, 0x2F,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_53[]  = { 0x2F, 0x2A,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_54[]  = { 0x2A, 0x2F,  antlr3::ANTLR_STRING_TERMINATOR};









using namespace antlr3;









WNScriptASTLexer::~WNScriptASTLexer()
{
}

void
WNScriptASTLexer::reset()
{
    this->get_rec()->reset();
}



static const char fileName[] = "WNScriptAST.g";



const char* WNScriptASTLexer::getGrammarFileName()
{
	return fileName;
}








WNScriptASTLexer::WNScriptASTLexer(StreamType* instream)
:WNScriptASTLexerImplTraits::BaseLexerType(ANTLR_SIZE_HINT, instream, NULL)
{
	this->init(instream );
}









WNScriptASTLexer::WNScriptASTLexer(StreamType* instream, RecognizerSharedStateType* state)
:WNScriptASTLexerImplTraits::BaseLexerType(ANTLR_SIZE_HINT, instream, state)
{
	this->init(instream );
}

void WNScriptASTLexer::init(StreamType* instream)
{











}








static const ANTLR_INT32 dfa14_eot[5] =
    {
	-1, -1, -1, -1, -1
    };
static const ANTLR_INT32 dfa14_eof[5] =
    {
	-1, -1, -1, -1, -1
    };
static const ANTLR_INT32 dfa14_min[5] =
    {
	46, 46, -1, -1, -1
    };
static const ANTLR_INT32 dfa14_max[5] =
    {
	57, 101, -1, -1, -1
    };
static const ANTLR_INT32 dfa14_accept[5] =
    {
	-1, -1, 2, 1, 3
    };
static const ANTLR_INT32 dfa14_special[5] =
    {
	-1, -1, -1, -1, -1
    };


static const ANTLR_INT32* dfa14_T_empty	 =   NULL;

static const ANTLR_INT32 dfa14_T0[] =
    {
	3, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4
    };

static const ANTLR_INT32 dfa14_T1[] =
    {
	2, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
    };





static const ANTLR_INT32 * const dfa14_transitions[] =
{
    dfa14_T1, dfa14_T0, NULL, NULL, NULL
};




class WNScriptASTLexerCyclicDFA14 : public CyclicDFA< WNScriptASTLexerImplTraits, WNScriptASTLexer >, public WNScriptASTLexerTokens
{
public:
	typedef CyclicDFA< WNScriptASTLexerImplTraits, WNScriptASTLexer >  BaseType;
	typedef BaseType::ContextType CtxType;

private:


public:
	WNScriptASTLexerCyclicDFA14( ANTLR_INT32	decisionNumber
					, const ANTLR_UCHAR*	description
					, const ANTLR_INT32* const	eot
					, const ANTLR_INT32* const	eof
					, const ANTLR_INT32* const	min
					, const ANTLR_INT32* const	max
					, const ANTLR_INT32* const	accept
					, const ANTLR_INT32* const	special
					, const ANTLR_INT32* const *const	transition)
					:BaseType( decisionNumber, description, eot, eof, min, max, accept,
								special, transition )
	{

	}

};

static WNScriptASTLexerCyclicDFA14  cdfa14(
	    14,

	    (const ANTLR_UCHAR*)"237:1: FLOAT : ( ( '0' .. '9' )+ '.' ( '0' .. '9' )* ( EXPONENT )? | '.' ( '0' .. '9' )+ ( EXPONENT )? | ( '0' .. '9' )+ EXPONENT );",
	    dfa14_eot,
	    dfa14_eof,
	    dfa14_min,
	    dfa14_max,
	    dfa14_accept,
	    dfa14_special,
	    dfa14_transitions

	);







static const ANTLR_INT32 dfa26_eot[241] =
    {
	-1, 54, 56, 58, 60, 63, 67, 69, 73, 75, 77, 79, -1, 81, 83, 85, 46, -1,
	-1, -1, -1, -1, 46, 46, 46, -1, -1, 46, 46, 46, 46, 46, 46, 46, 46, 47,
	47, 47, 47, 47, 47, -1, 46, 46, -1, 47, -1, -1, 68, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 123, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 46, 46, 46, 46,
	46, 46, 46, 131, 46, 133, 46, 46, 46, 46, 46, 46, 46, 46, 47, 47, 47, 47,
	47, 47, 47, 47, 46, 46, 46, -1, -1, -1, 47, -1, -1, -1, -1, -1, 46, 46,
	46, 46, 46, 46, 46, -1, 46, -1, 46, 46, 164, 46, 46, 46, 46, 46, 47, 171,
	47, 47, 47, 47, 47, 47, 46, 46, 46, 47, 46, 46, 46, 46, 46, 46, 188, 46,
	46, 191, -1, 46, 46, 46, 46, 46, 197, -1, 198, 47, 200, 47, 202, 203, 204,
	205, 206, 47, 46, 46, 210, 46, 212, 213, -1, 46, 46, -1, 206, 46, 46, 46,
	46, -1, -1, 47, -1, 221, -1, -1, -1, -1, -1, 222, 223, 224, -1, 46, -1,
	-1, 46, 46, 228, 229, 46, 46, 47, -1, -1, -1, -1, 46, 234, 235, -1, -1,
	236, 46, 238, 239, -1, -1, -1, 240, -1, -1, -1
    };
static const ANTLR_INT32 dfa26_eof[241] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR_INT32 dfa26_min[241] =
    {
	9, 61, 61, 38, 61, 43, 45, 48, 42, 61, 61, 61, -1, 91, 93, 124, 101, -1,
	-1, -1, -1, -1, 101, 114, 108, -1, -1, 101, 101, 102, 108, 97, 104, 105,
	118, 111, 110, 83, 108, 111, 105, -1, 117, 104, 65, 99, -1, -1, 46, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 98, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	110, 116, 101, 110, 97, 105, 97, 48, 102, 48, 99, 115, 114, 108, 114, 97,
	114, 101, 105, 116, 116, 116, 97, 111, 111, 122, 108, 105, 117, -1, -1,
	-1, 116, -1, -1, -1, -1, -1, 103, 117, 97, 116, 115, 108, 107, -1, 97,
	-1, 108, 101, 48, 115, 117, 114, 116, 114, 100, 48, 114, 114, 114, 97,
	108, 101, 108, 115, 101, 111, 116, 114, 107, 105, 115, 101, 48, 117, 117,
	48, -1, 101, 99, 101, 117, 114, 48, -1, 48, 105, 48, 116, 48, 48, 48, 48,
	48, 114, 104, 110, 48, 110, 48, 48, -1, 108, 100, -1, 48, 116, 100, 97,
	105, -1, -1, 110, -1, 48, -1, -1, -1, -1, -1, 48, 48, 48, -1, 117, -1,
	-1, 116, 101, 48, 48, 108, 100, 103, -1, -1, -1, -1, 101, 48, 48, -1, -1,
	48, 101, 48, 48, -1, -1, -1, 48, -1, -1, -1
    };
static const ANTLR_INT32 dfa26_max[241] =
    {
	125, 61, 61, 38, 61, 61, 62, 57, 61, 61, 61, 61, -1, 91, 93, 124, 101,
	-1, -1, -1, -1, -1, 101, 114, 111, -1, -1, 104, 111, 110, 108, 111, 116,
	105, 118, 111, 110, 112, 108, 111, 105, -1, 117, 114, 115, 99, -1, -1,
	117, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	110, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, 110, 116, 101, 110, 97, 105, 97, 122, 102, 122, 99, 115, 114, 108,
	114, 97, 114, 101, 105, 116, 116, 116, 97, 111, 111, 122, 108, 105, 117,
	-1, -1, -1, 116, -1, -1, -1, -1, -1, 103, 117, 97, 116, 115, 108, 107,
	-1, 97, -1, 108, 101, 122, 115, 117, 114, 116, 114, 100, 122, 114, 114,
	114, 97, 108, 101, 108, 115, 101, 111, 116, 114, 107, 105, 115, 101, 122,
	117, 117, 122, -1, 101, 99, 101, 117, 114, 122, -1, 122, 105, 122, 116,
	122, 122, 122, 122, 122, 114, 104, 110, 122, 110, 122, 122, -1, 108, 100,
	-1, 122, 116, 100, 97, 105, -1, -1, 110, -1, 122, -1, -1, -1, -1, -1, 122,
	122, 122, -1, 117, -1, -1, 116, 101, 122, 122, 108, 100, 103, -1, -1, -1,
	-1, 101, 122, 122, -1, -1, 122, 101, 122, 122, -1, -1, -1, 122, -1, -1,
	-1
    };
static const ANTLR_INT32 dfa26_accept[241] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 22, -1, -1, -1, -1, 30,
	31, 32, 33, 34, -1, -1, -1, 40, 41, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, 60, -1, -1, -1, -1, 74, 76, -1, 81, 82, 83, 84, 2,
	1, 4, 3, 5, 6, 8, 7, 10, 35, 9, 12, 36, -1, 11, 77, 13, 79, 15, 80, 14,
	17, 16, 19, 18, 21, 20, 25, 23, 26, 24, 28, 27, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, 70, 71, 75, -1, 78, 66, 67, 68, 65, -1, -1, -1, -1,
	-1, -1, -1, 43, -1, 44, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	46, -1, -1, -1, -1, -1, -1, 53, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, 61, -1, -1, 45, -1, -1, -1, -1, -1, 52, 54, -1,
	58, -1, 56, 59, 64, 69, 73, -1, -1, -1, 38, -1, 48, 42, -1, -1, -1, -1,
	-1, -1, -1, 55, 72, 29, 37, -1, -1, -1, 47, 62, -1, -1, -1, -1, 63, 51,
	49, -1, 57, 39, 50
    };
static const ANTLR_INT32 dfa26_special[241] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1
    };


static const ANTLR_INT32* dfa26_T_empty	 =   NULL;

static const ANTLR_INT32 dfa26_T0[] =
    {
	231
    };

static const ANTLR_INT32 dfa26_T1[] =
    {
	237
    };

static const ANTLR_INT32 dfa26_T2[] =
    {
	46, 46, 46, 46, 46, 46, 46, 46, 46, 46, -1, -1, -1, -1, -1, -1, -1, 46,
	46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46,
	46, 46, 46, 46, 46, 46, 46, -1, -1, -1, -1, 46, -1, 46, 46, 46, 46, 46,
	46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46,
	46, 46, 46
    };

static const ANTLR_INT32 dfa26_T3[] =
    {
	134
    };

static const ANTLR_INT32 dfa26_T4[] =
    {
	162
    };

static const ANTLR_INT32 dfa26_T5[] =
    {
	190
    };

static const ANTLR_INT32 dfa26_T6[] =
    {
	215
    };

static const ANTLR_INT32 dfa26_T7[] =
    {
	227
    };

static const ANTLR_INT32 dfa26_T8[] =
    {
	47, 47, 47, 47, 47, 47, 47, 47, 47, 47, -1, -1, -1, -1, -1, -1, -1, 47,
	47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
	47, 47, 47, 47, 47, 47, 47, -1, -1, -1, -1, 47, -1, 47, 47, 47, 47, 47,
	47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
	47, 47, 47
    };

static const ANTLR_INT32 dfa26_T9[] =
    {
	74
    };

static const ANTLR_INT32 dfa26_T10[] =
    {
	113, -1, -1, -1, -1, -1, -1, -1, -1, -1, 114
    };

static const ANTLR_INT32 dfa26_T11[] =
    {
	76
    };

static const ANTLR_INT32 dfa26_T12[] =
    {
	130
    };

static const ANTLR_INT32 dfa26_T13[] =
    {
	160
    };

static const ANTLR_INT32 dfa26_T14[] =
    {
	139
    };

static const ANTLR_INT32 dfa26_T15[] =
    {
	167
    };

static const ANTLR_INT32 dfa26_T16[] =
    {
	194
    };

static const ANTLR_INT32 dfa26_T17[] =
    {
	217
    };

static const ANTLR_INT32 dfa26_T18[] =
    {
	132
    };

static const ANTLR_INT32 dfa26_T19[] =
    {
	161
    };

static const ANTLR_INT32 dfa26_T20[] =
    {
	189
    };

static const ANTLR_INT32 dfa26_T21[] =
    {
	214
    };

static const ANTLR_INT32 dfa26_T22[] =
    {
	226
    };

static const ANTLR_INT32 dfa26_T23[] =
    {
	150
    };

static const ANTLR_INT32 dfa26_T24[] =
    {
	118
    };

static const ANTLR_INT32 dfa26_T25[] =
    {
	178
    };

static const ANTLR_INT32 dfa26_T26[] =
    {
	78
    };

static const ANTLR_INT32 dfa26_T27[] =
    {
	90, -1, -1, 89
    };

static const ANTLR_INT32 dfa26_T28[] =
    {
	142
    };

static const ANTLR_INT32 dfa26_T29[] =
    {
	170
    };

static const ANTLR_INT32 dfa26_T30[] =
    {
	143
    };

static const ANTLR_INT32 dfa26_T31[] =
    {
	144
    };

static const ANTLR_INT32 dfa26_T32[] =
    {
	172
    };

static const ANTLR_INT32 dfa26_T33[] =
    {
	147
    };

static const ANTLR_INT32 dfa26_T34[] =
    {
	175
    };

static const ANTLR_INT32 dfa26_T35[] =
    {
	201
    };

static const ANTLR_INT32 dfa26_T36[] =
    {
	86
    };

static const ANTLR_INT32 dfa26_T37[] =
    {
	148
    };

static const ANTLR_INT32 dfa26_T38[] =
    {
	176
    };

static const ANTLR_INT32 dfa26_T39[] =
    {
	151
    };

static const ANTLR_INT32 dfa26_T40[] =
    {
	179
    };

static const ANTLR_INT32 dfa26_T41[] =
    {
	145
    };

static const ANTLR_INT32 dfa26_T42[] =
    {
	173
    };

static const ANTLR_INT32 dfa26_T43[] =
    {
	199
    };

static const ANTLR_INT32 dfa26_T44[] =
    {
	220
    };

static const ANTLR_INT32 dfa26_T45[] =
    {
	232
    };

static const ANTLR_INT32 dfa26_T46[] =
    {
	122, -1, 121, -1, -1, -1, -1, -1, -1, -1, -1, -1, 120
    };

static const ANTLR_INT32 dfa26_T47[] =
    {
	146
    };

static const ANTLR_INT32 dfa26_T48[] =
    {
	80
    };

static const ANTLR_INT32 dfa26_T49[] =
    {
	174
    };

static const ANTLR_INT32 dfa26_T50[] =
    {
	149
    };

static const ANTLR_INT32 dfa26_T51[] =
    {
	177
    };

static const ANTLR_INT32 dfa26_T52[] =
    {
	95, -1, -1, -1, -1, -1, -1, -1, 96
    };

static const ANTLR_INT32 dfa26_T53[] =
    {
	82
    };

static const ANTLR_INT32 dfa26_T54[] =
    {
	87
    };

static const ANTLR_INT32 dfa26_T55[] =
    {
	152
    };

static const ANTLR_INT32 dfa26_T56[] =
    {
	180
    };

static const ANTLR_INT32 dfa26_T57[] =
    {
	88
    };

static const ANTLR_INT32 dfa26_T58[] =
    {
	137
    };

static const ANTLR_INT32 dfa26_T59[] =
    {
	165
    };

static const ANTLR_INT32 dfa26_T60[] =
    {
	192
    };

static const ANTLR_INT32 dfa26_T61[] =
    {
	65, -1, -1, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, -1, -1, -1, 64, 66
    };

static const ANTLR_INT32 dfa26_T62[] =
    {
	84
    };

static const ANTLR_INT32 dfa26_T63[] =
    {
	92, -1, -1, 91
    };

static const ANTLR_INT32 dfa26_T64[] =
    {
	97
    };

static const ANTLR_INT32 dfa26_T65[] =
    {
	94, -1, -1, -1, -1, -1, -1, -1, -1, -1, 93
    };

static const ANTLR_INT32 dfa26_T66[] =
    {
	62, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	61
    };

static const ANTLR_INT32 dfa26_T67[] =
    {
	102
    };

static const ANTLR_INT32 dfa26_T68[] =
    {
	101, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 100
    };

static const ANTLR_INT32 dfa26_T69[] =
    {
	103
    };

static const ANTLR_INT32 dfa26_T70[] =
    {
	153
    };

static const ANTLR_INT32 dfa26_T71[] =
    {
	181
    };

static const ANTLR_INT32 dfa26_T72[] =
    {
	207
    };

static const ANTLR_INT32 dfa26_T73[] =
    {
	53
    };

static const ANTLR_INT32 dfa26_T74[] =
    {
	49, 49, -1, -1, 49, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, 49, 1, 50, -1, 52, 2, 3, 51, 17, 18, 4, 5, 21, 6, 7,
	8, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 26, 25, 9, 10, 11, 41, 44, 45,
	39, 37, 47, 47, 38, 47, 47, 36, 47, 47, 47, 47, 47, 47, 47, 47, 47, 40,
	47, 47, 35, 47, 47, 47, 47, 13, -1, 14, 12, -1, -1, 46, 23, 24, 28, 30,
	31, 46, 46, 29, 46, 46, 16, 46, 42, 34, 46, 46, 22, 32, 43, 46, 33, 27,
	46, 46, 46, 19, 15, 20
    };

static const ANTLR_INT32 dfa26_T75[] =
    {
	55
    };

static const ANTLR_INT32 dfa26_T76[] =
    {
	117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117,
	117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, -1, -1, -1, -1,
	-1, -1, 116, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, 115
    };

static const ANTLR_INT32 dfa26_T77[] =
    {
	124
    };

static const ANTLR_INT32 dfa26_T78[] =
    {
	154
    };

static const ANTLR_INT32 dfa26_T79[] =
    {
	182
    };

static const ANTLR_INT32 dfa26_T80[] =
    {
	208
    };

static const ANTLR_INT32 dfa26_T81[] =
    {
	99, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 98
    };

static const ANTLR_INT32 dfa26_T82[] =
    {
	57
    };

static const ANTLR_INT32 dfa26_T83[] =
    {
	70, 70, 70, 70, 70, 70, 70, 70, 70, 70
    };

static const ANTLR_INT32 dfa26_T84[] =
    {
	112
    };

static const ANTLR_INT32 dfa26_T85[] =
    {
	59
    };

static const ANTLR_INT32 dfa26_T86[] =
    {
	125
    };

static const ANTLR_INT32 dfa26_T87[] =
    {
	155
    };

static const ANTLR_INT32 dfa26_T88[] =
    {
	183
    };

static const ANTLR_INT32 dfa26_T89[] =
    {
	209
    };

static const ANTLR_INT32 dfa26_T90[] =
    {
	126
    };

static const ANTLR_INT32 dfa26_T91[] =
    {
	156
    };

static const ANTLR_INT32 dfa26_T92[] =
    {
	184
    };

static const ANTLR_INT32 dfa26_T93[] =
    {
	127
    };

static const ANTLR_INT32 dfa26_T94[] =
    {
	157
    };

static const ANTLR_INT32 dfa26_T95[] =
    {
	185
    };

static const ANTLR_INT32 dfa26_T96[] =
    {
	211
    };

static const ANTLR_INT32 dfa26_T97[] =
    {
	225
    };

static const ANTLR_INT32 dfa26_T98[] =
    {
	233
    };

static const ANTLR_INT32 dfa26_T99[] =
    {
	107, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, 108, -1, -1, -1, -1, -1, -1, -1, 106
    };

static const ANTLR_INT32 dfa26_T100[] =
    {
	129
    };

static const ANTLR_INT32 dfa26_T101[] =
    {
	104
    };

static const ANTLR_INT32 dfa26_T102[] =
    {
	159
    };

static const ANTLR_INT32 dfa26_T103[] =
    {
	187
    };

static const ANTLR_INT32 dfa26_T104[] =
    {
	105
    };

static const ANTLR_INT32 dfa26_T105[] =
    {
	70, -1, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, 70, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, 70, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 119
    };

static const ANTLR_INT32 dfa26_T106[] =
    {
	135
    };

static const ANTLR_INT32 dfa26_T107[] =
    {
	163
    };

static const ANTLR_INT32 dfa26_T108[] =
    {
	109
    };

static const ANTLR_INT32 dfa26_T109[] =
    {
	136
    };

static const ANTLR_INT32 dfa26_T110[] =
    {
	110
    };

static const ANTLR_INT32 dfa26_T111[] =
    {
	138
    };

static const ANTLR_INT32 dfa26_T112[] =
    {
	166
    };

static const ANTLR_INT32 dfa26_T113[] =
    {
	193
    };

static const ANTLR_INT32 dfa26_T114[] =
    {
	216
    };

static const ANTLR_INT32 dfa26_T115[] =
    {
	128
    };

static const ANTLR_INT32 dfa26_T116[] =
    {
	158
    };

static const ANTLR_INT32 dfa26_T117[] =
    {
	186
    };

static const ANTLR_INT32 dfa26_T118[] =
    {
	140
    };

static const ANTLR_INT32 dfa26_T119[] =
    {
	168
    };

static const ANTLR_INT32 dfa26_T120[] =
    {
	195
    };

static const ANTLR_INT32 dfa26_T121[] =
    {
	72, -1, -1, -1, -1, 72, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
	-1, 71
    };

static const ANTLR_INT32 dfa26_T122[] =
    {
	218
    };

static const ANTLR_INT32 dfa26_T123[] =
    {
	230
    };

static const ANTLR_INT32 dfa26_T124[] =
    {
	111
    };

static const ANTLR_INT32 dfa26_T125[] =
    {
	141
    };

static const ANTLR_INT32 dfa26_T126[] =
    {
	169
    };

static const ANTLR_INT32 dfa26_T127[] =
    {
	196
    };

static const ANTLR_INT32 dfa26_T128[] =
    {
	219
    };





static const ANTLR_INT32 * const dfa26_transitions[] =
{
    dfa26_T74, dfa26_T73, dfa26_T75, dfa26_T82, dfa26_T85, dfa26_T66, dfa26_T61,
    dfa26_T83, dfa26_T121, dfa26_T9, dfa26_T11, dfa26_T26, NULL, dfa26_T48,
    dfa26_T53, dfa26_T62, dfa26_T36, NULL, NULL, NULL, NULL, NULL, dfa26_T54,
    dfa26_T57, dfa26_T27, NULL, NULL, dfa26_T63, dfa26_T65, dfa26_T52, dfa26_T64,
    dfa26_T81, dfa26_T68, dfa26_T67, dfa26_T69, dfa26_T101, dfa26_T104,
    dfa26_T99, dfa26_T108, dfa26_T110, dfa26_T124, NULL, dfa26_T84, dfa26_T10,
    dfa26_T76, dfa26_T24, NULL, NULL, dfa26_T105, NULL, NULL, NULL, NULL,
    NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,
    NULL, dfa26_T46, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,
    NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, dfa26_T77,
    dfa26_T86, dfa26_T90, dfa26_T93, dfa26_T115, dfa26_T100, dfa26_T12,
    dfa26_T2, dfa26_T18, dfa26_T2, dfa26_T3, dfa26_T106, dfa26_T109, dfa26_T58,
    dfa26_T111, dfa26_T14, dfa26_T118, dfa26_T125, dfa26_T28, dfa26_T30,
    dfa26_T31, dfa26_T41, dfa26_T47, dfa26_T33, dfa26_T37, dfa26_T50, dfa26_T23,
    dfa26_T39, dfa26_T55, NULL, NULL, NULL, dfa26_T70, NULL, NULL, NULL,
    NULL, NULL, dfa26_T78, dfa26_T87, dfa26_T91, dfa26_T94, dfa26_T116,
    dfa26_T102, dfa26_T13, NULL, dfa26_T19, NULL, dfa26_T4, dfa26_T107,
    dfa26_T2, dfa26_T59, dfa26_T112, dfa26_T15, dfa26_T119, dfa26_T126,
    dfa26_T29, dfa26_T8, dfa26_T32, dfa26_T42, dfa26_T49, dfa26_T34, dfa26_T38,
    dfa26_T51, dfa26_T25, dfa26_T40, dfa26_T56, dfa26_T71, dfa26_T79, dfa26_T88,
    dfa26_T92, dfa26_T95, dfa26_T117, dfa26_T103, dfa26_T2, dfa26_T20, dfa26_T5,
    dfa26_T2, NULL, dfa26_T60, dfa26_T113, dfa26_T16, dfa26_T120, dfa26_T127,
    dfa26_T8, NULL, dfa26_T8, dfa26_T43, dfa26_T8, dfa26_T35, dfa26_T8,
    dfa26_T8, dfa26_T2, dfa26_T2, dfa26_T2, dfa26_T72, dfa26_T80, dfa26_T89,
    dfa26_T2, dfa26_T96, dfa26_T2, dfa26_T2, NULL, dfa26_T21, dfa26_T6,
    NULL, dfa26_T2, dfa26_T114, dfa26_T17, dfa26_T122, dfa26_T128, NULL,
    NULL, dfa26_T44, NULL, dfa26_T8, NULL, NULL, NULL, NULL, NULL, dfa26_T8,
    dfa26_T2, dfa26_T2, NULL, dfa26_T97, NULL, NULL, dfa26_T22, dfa26_T7,
    dfa26_T2, dfa26_T2, dfa26_T123, dfa26_T0, dfa26_T45, NULL, NULL, NULL,
    NULL, dfa26_T98, dfa26_T2, dfa26_T2, NULL, NULL, dfa26_T2, dfa26_T1,
    dfa26_T8, dfa26_T2, NULL, NULL, NULL, dfa26_T2, NULL, NULL, NULL
};




class WNScriptASTLexerCyclicDFA26 : public CyclicDFA< WNScriptASTLexerImplTraits, WNScriptASTLexer >, public WNScriptASTLexerTokens
{
public:
	typedef CyclicDFA< WNScriptASTLexerImplTraits, WNScriptASTLexer >  BaseType;
	typedef BaseType::ContextType CtxType;

private:


public:
	WNScriptASTLexerCyclicDFA26( ANTLR_INT32	decisionNumber
					, const ANTLR_UCHAR*	description
					, const ANTLR_INT32* const	eot
					, const ANTLR_INT32* const	eof
					, const ANTLR_INT32* const	min
					, const ANTLR_INT32* const	max
					, const ANTLR_INT32* const	accept
					, const ANTLR_INT32* const	special
					, const ANTLR_INT32* const *const	transition)
					:BaseType( decisionNumber, description, eot, eof, min, max, accept,
								special, transition )
	{

	}

};

static WNScriptASTLexerCyclicDFA26  cdfa26(
	    26,

	    (const ANTLR_UCHAR*)"1:1: Tokens : ( T__71 | T__72 | T__73 | T__74 | T__75 | T__76 | T__77 | T__78 | T__79 | T__80 | T__81 | T__82 | T__83 | T__84 | T__85 | T__86 | T__87 | T__88 | T__89 | T__90 | T__91 | T__92 | LSQBRACKET | RSQBRACKET | DLSQBRACKET | DRSQBRACKET | SLICETOK | SSOR | LENGTH | LBRACKET | RBRACKET | LBRACE | RBRACE | COMMA | DOUBINC | DOUBDEC | RETURN | BREAK | CONTINUE | SEMICOLON | COLON | WHILE | DO | IF | ELSE | FOR | STRUCT | CLASS | VIRTUAL | OVERRIDE | INCLUDE | VOID_TYPE | INT_TYPE | CPTR_TYPE | FLOAT_TYPE | BOOL_TYPE | STRING_TYPE | CHAR_TYPE | SIZE_TYPE | QUESTION | WEAK_REF | SHARED_REF | DEFAULT | NULLTOK | AT | DEFER | LOW_PRIORITY | BACKGROUND | THIS_TOK | SYNCHRONIZED | ACTION | ACTOR | BOOL | ID | RESOURCE | TYPE | INT | SIZE | FLOAT | COMMENT | WS | STRING | CHAR | T_TYPE );",
	    dfa26_eot,
	    dfa26_eof,
	    dfa26_min,
	    dfa26_max,
	    dfa26_accept,
	    dfa26_special,
	    dfa26_transitions

	);
























void WNScriptASTLexer::mT__71()
{
    ANTLR_UINT32	_type;


    _type	    = T__71;


    {
         this->matchc('!');
        if  (this->hasException())
        {
            goto ruleT__71Ex;
        }


    }

	this->get_lexstate()->set_type(_type);
    goto ruleT__71Ex;
    ruleT__71Ex: ;

}












void WNScriptASTLexer::mT__72()
{
    ANTLR_UINT32	_type;


    _type	    = T__72;


    {
        this->matchs(lit_1);
        if  (this->hasException())
        {
            goto ruleT__72Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    goto ruleT__72Ex;
    ruleT__72Ex: ;

}












void WNScriptASTLexer::mT__73()
{
    ANTLR_UINT32	_type;


    _type	    = T__73;


    {
         this->matchc('%');
        if  (this->hasException())
        {
            goto ruleT__73Ex;
        }


    }

	this->get_lexstate()->set_type(_type);
    goto ruleT__73Ex;
    ruleT__73Ex: ;

}












void WNScriptASTLexer::mT__74()
{
    ANTLR_UINT32	_type;


    _type	    = T__74;


    {
        this->matchs(lit_2);
        if  (this->hasException())
        {
            goto ruleT__74Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    goto ruleT__74Ex;
    ruleT__74Ex: ;

}












void WNScriptASTLexer::mT__75()
{
    ANTLR_UINT32	_type;


    _type	    = T__75;


    {
        this->matchs(lit_3);
        if  (this->hasException())
        {
            goto ruleT__75Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    goto ruleT__75Ex;
    ruleT__75Ex: ;

}












void WNScriptASTLexer::mT__76()
{
    ANTLR_UINT32	_type;


    _type	    = T__76;


    {
         this->matchc('&');
        if  (this->hasException())
        {
            goto ruleT__76Ex;
        }


    }

	this->get_lexstate()->set_type(_type);
    goto ruleT__76Ex;
    ruleT__76Ex: ;

}












void WNScriptASTLexer::mT__77()
{
    ANTLR_UINT32	_type;


    _type	    = T__77;


    {
         this->matchc('*');
        if  (this->hasException())
        {
            goto ruleT__77Ex;
        }


    }

	this->get_lexstate()->set_type(_type);
    goto ruleT__77Ex;
    ruleT__77Ex: ;

}












void WNScriptASTLexer::mT__78()
{
    ANTLR_UINT32	_type;


    _type	    = T__78;


    {
        this->matchs(lit_4);
        if  (this->hasException())
        {
            goto ruleT__78Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    goto ruleT__78Ex;
    ruleT__78Ex: ;

}












void WNScriptASTLexer::mT__79()
{
    ANTLR_UINT32	_type;


    _type	    = T__79;


    {
         this->matchc('+');
        if  (this->hasException())
        {
            goto ruleT__79Ex;
        }


    }

	this->get_lexstate()->set_type(_type);
    goto ruleT__79Ex;
    ruleT__79Ex: ;

}












void WNScriptASTLexer::mT__80()
{
    ANTLR_UINT32	_type;


    _type	    = T__80;


    {
        this->matchs(lit_5);
        if  (this->hasException())
        {
            goto ruleT__80Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    goto ruleT__80Ex;
    ruleT__80Ex: ;

}












void WNScriptASTLexer::mT__81()
{
    ANTLR_UINT32	_type;


    _type	    = T__81;


    {
         this->matchc('-');
        if  (this->hasException())
        {
            goto ruleT__81Ex;
        }


    }

	this->get_lexstate()->set_type(_type);
    goto ruleT__81Ex;
    ruleT__81Ex: ;

}












void WNScriptASTLexer::mT__82()
{
    ANTLR_UINT32	_type;


    _type	    = T__82;


    {
        this->matchs(lit_6);
        if  (this->hasException())
        {
            goto ruleT__82Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    goto ruleT__82Ex;
    ruleT__82Ex: ;

}












void WNScriptASTLexer::mT__83()
{
    ANTLR_UINT32	_type;


    _type	    = T__83;


    {
         this->matchc('.');
        if  (this->hasException())
        {
            goto ruleT__83Ex;
        }


    }

	this->get_lexstate()->set_type(_type);
    goto ruleT__83Ex;
    ruleT__83Ex: ;

}












void WNScriptASTLexer::mT__84()
{
    ANTLR_UINT32	_type;


    _type	    = T__84;


    {
         this->matchc('/');
        if  (this->hasException())
        {
            goto ruleT__84Ex;
        }


    }

	this->get_lexstate()->set_type(_type);
    goto ruleT__84Ex;
    ruleT__84Ex: ;

}












void WNScriptASTLexer::mT__85()
{
    ANTLR_UINT32	_type;


    _type	    = T__85;


    {
        this->matchs(lit_7);
        if  (this->hasException())
        {
            goto ruleT__85Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    goto ruleT__85Ex;
    ruleT__85Ex: ;

}












void WNScriptASTLexer::mT__86()
{
    ANTLR_UINT32	_type;


    _type	    = T__86;


    {
         this->matchc('<');
        if  (this->hasException())
        {
            goto ruleT__86Ex;
        }


    }

	this->get_lexstate()->set_type(_type);
    goto ruleT__86Ex;
    ruleT__86Ex: ;

}












void WNScriptASTLexer::mT__87()
{
    ANTLR_UINT32	_type;


    _type	    = T__87;


    {
        this->matchs(lit_8);
        if  (this->hasException())
        {
            goto ruleT__87Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    goto ruleT__87Ex;
    ruleT__87Ex: ;

}












void WNScriptASTLexer::mT__88()
{
    ANTLR_UINT32	_type;


    _type	    = T__88;


    {
         this->matchc('=');
        if  (this->hasException())
        {
            goto ruleT__88Ex;
        }


    }

	this->get_lexstate()->set_type(_type);
    goto ruleT__88Ex;
    ruleT__88Ex: ;

}












void WNScriptASTLexer::mT__89()
{
    ANTLR_UINT32	_type;


    _type	    = T__89;


    {
        this->matchs(lit_9);
        if  (this->hasException())
        {
            goto ruleT__89Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    goto ruleT__89Ex;
    ruleT__89Ex: ;

}












void WNScriptASTLexer::mT__90()
{
    ANTLR_UINT32	_type;


    _type	    = T__90;


    {
         this->matchc('>');
        if  (this->hasException())
        {
            goto ruleT__90Ex;
        }


    }

	this->get_lexstate()->set_type(_type);
    goto ruleT__90Ex;
    ruleT__90Ex: ;

}












void WNScriptASTLexer::mT__91()
{
    ANTLR_UINT32	_type;


    _type	    = T__91;


    {
        this->matchs(lit_10);
        if  (this->hasException())
        {
            goto ruleT__91Ex;
        }




    }

	this->get_lexstate()->set_type(_type);
    goto ruleT__91Ex;
    ruleT__91Ex: ;

}












void WNScriptASTLexer::mT__92()
{
    ANTLR_UINT32	_type;


    _type	    = T__92;


    {
         this->matchc('^');
        if  (this->hasException())
        {
            goto ruleT__92Ex;
        }


    }

	this->get_lexstate()->set_type(_type);
    goto ruleT__92Ex;
    ruleT__92Ex: ;

}












void WNScriptASTLexer::mLSQBRACKET()
{
    ANTLR_UINT32	_type;


    _type	    = LSQBRACKET;


    {
         this->matchc('[');
        if  (this->hasException())
        {
            goto ruleLSQBRACKETEx;
        }


    }

	this->get_lexstate()->set_type(_type);
    goto ruleLSQBRACKETEx;
    ruleLSQBRACKETEx: ;

}












void WNScriptASTLexer::mRSQBRACKET()
{
    ANTLR_UINT32	_type;


    _type	    = RSQBRACKET;


    {
         this->matchc(']');
        if  (this->hasException())
        {
            goto ruleRSQBRACKETEx;
        }


    }

	this->get_lexstate()->set_type(_type);
    goto ruleRSQBRACKETEx;
    ruleRSQBRACKETEx: ;

}












void WNScriptASTLexer::mDLSQBRACKET()
{
    ANTLR_UINT32	_type;


    _type	    = DLSQBRACKET;


    {
        this->matchs(lit_11);
        if  (this->hasException())
        {
            goto ruleDLSQBRACKETEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    goto ruleDLSQBRACKETEx;
    ruleDLSQBRACKETEx: ;

}












void WNScriptASTLexer::mDRSQBRACKET()
{
    ANTLR_UINT32	_type;


    _type	    = DRSQBRACKET;


    {
        this->matchs(lit_12);
        if  (this->hasException())
        {
            goto ruleDRSQBRACKETEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    goto ruleDRSQBRACKETEx;
    ruleDRSQBRACKETEx: ;

}












void WNScriptASTLexer::mSLICETOK()
{
    ANTLR_UINT32	_type;


    _type	    = SLICETOK;


    {
         this->matchc('|');
        if  (this->hasException())
        {
            goto ruleSLICETOKEx;
        }


    }

	this->get_lexstate()->set_type(_type);
    goto ruleSLICETOKEx;
    ruleSLICETOKEx: ;

}












void WNScriptASTLexer::mSSOR()
{
    ANTLR_UINT32	_type;


    _type	    = SSOR;


    {
        this->matchs(lit_13);
        if  (this->hasException())
        {
            goto ruleSSOREx;
        }




    }

	this->get_lexstate()->set_type(_type);
    goto ruleSSOREx;
    ruleSSOREx: ;

}












void WNScriptASTLexer::mLENGTH()
{
    ANTLR_UINT32	_type;


    _type	    = LENGTH;


    {
        this->matchs(lit_14);
        if  (this->hasException())
        {
            goto ruleLENGTHEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    goto ruleLENGTHEx;
    ruleLENGTHEx: ;

}












void WNScriptASTLexer::mLBRACKET()
{
    ANTLR_UINT32	_type;


    _type	    = LBRACKET;


    {
         this->matchc('(');
        if  (this->hasException())
        {
            goto ruleLBRACKETEx;
        }


    }

	this->get_lexstate()->set_type(_type);
    goto ruleLBRACKETEx;
    ruleLBRACKETEx: ;

}












void WNScriptASTLexer::mRBRACKET()
{
    ANTLR_UINT32	_type;


    _type	    = RBRACKET;


    {
         this->matchc(')');
        if  (this->hasException())
        {
            goto ruleRBRACKETEx;
        }


    }

	this->get_lexstate()->set_type(_type);
    goto ruleRBRACKETEx;
    ruleRBRACKETEx: ;

}












void WNScriptASTLexer::mLBRACE()
{
    ANTLR_UINT32	_type;


    _type	    = LBRACE;


    {
         this->matchc('{');
        if  (this->hasException())
        {
            goto ruleLBRACEEx;
        }


    }

	this->get_lexstate()->set_type(_type);
    goto ruleLBRACEEx;
    ruleLBRACEEx: ;

}












void WNScriptASTLexer::mRBRACE()
{
    ANTLR_UINT32	_type;


    _type	    = RBRACE;


    {
         this->matchc('}');
        if  (this->hasException())
        {
            goto ruleRBRACEEx;
        }


    }

	this->get_lexstate()->set_type(_type);
    goto ruleRBRACEEx;
    ruleRBRACEEx: ;

}












void WNScriptASTLexer::mCOMMA()
{
    ANTLR_UINT32	_type;


    _type	    = COMMA;


    {
         this->matchc(',');
        if  (this->hasException())
        {
            goto ruleCOMMAEx;
        }


    }

	this->get_lexstate()->set_type(_type);
    goto ruleCOMMAEx;
    ruleCOMMAEx: ;

}












void WNScriptASTLexer::mDOUBINC()
{
    ANTLR_UINT32	_type;


    _type	    = DOUBINC;


    {
        this->matchs(lit_15);
        if  (this->hasException())
        {
            goto ruleDOUBINCEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    goto ruleDOUBINCEx;
    ruleDOUBINCEx: ;

}












void WNScriptASTLexer::mDOUBDEC()
{
    ANTLR_UINT32	_type;


    _type	    = DOUBDEC;


    {
        this->matchs(lit_16);
        if  (this->hasException())
        {
            goto ruleDOUBDECEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    goto ruleDOUBDECEx;
    ruleDOUBDECEx: ;

}












void WNScriptASTLexer::mRETURN()
{
    ANTLR_UINT32	_type;


    _type	    = RETURN;


    {
        this->matchs(lit_17);
        if  (this->hasException())
        {
            goto ruleRETURNEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    goto ruleRETURNEx;
    ruleRETURNEx: ;

}












void WNScriptASTLexer::mBREAK()
{
    ANTLR_UINT32	_type;


    _type	    = BREAK;


    {
        this->matchs(lit_18);
        if  (this->hasException())
        {
            goto ruleBREAKEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    goto ruleBREAKEx;
    ruleBREAKEx: ;

}












void WNScriptASTLexer::mCONTINUE()
{
    ANTLR_UINT32	_type;


    _type	    = CONTINUE;


    {
        this->matchs(lit_19);
        if  (this->hasException())
        {
            goto ruleCONTINUEEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    goto ruleCONTINUEEx;
    ruleCONTINUEEx: ;

}












void WNScriptASTLexer::mSEMICOLON()
{
    ANTLR_UINT32	_type;


    _type	    = SEMICOLON;


    {
         this->matchc(';');
        if  (this->hasException())
        {
            goto ruleSEMICOLONEx;
        }


    }

	this->get_lexstate()->set_type(_type);
    goto ruleSEMICOLONEx;
    ruleSEMICOLONEx: ;

}












void WNScriptASTLexer::mCOLON()
{
    ANTLR_UINT32	_type;


    _type	    = COLON;


    {
         this->matchc(':');
        if  (this->hasException())
        {
            goto ruleCOLONEx;
        }


    }

	this->get_lexstate()->set_type(_type);
    goto ruleCOLONEx;
    ruleCOLONEx: ;

}












void WNScriptASTLexer::mWHILE()
{
    ANTLR_UINT32	_type;


    _type	    = WHILE;


    {
        this->matchs(lit_20);
        if  (this->hasException())
        {
            goto ruleWHILEEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    goto ruleWHILEEx;
    ruleWHILEEx: ;

}












void WNScriptASTLexer::mDO()
{
    ANTLR_UINT32	_type;


    _type	    = DO;


    {
        this->matchs(lit_21);
        if  (this->hasException())
        {
            goto ruleDOEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    goto ruleDOEx;
    ruleDOEx: ;

}












void WNScriptASTLexer::mIF()
{
    ANTLR_UINT32	_type;


    _type	    = IF;


    {
        this->matchs(lit_22);
        if  (this->hasException())
        {
            goto ruleIFEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    goto ruleIFEx;
    ruleIFEx: ;

}












void WNScriptASTLexer::mELSE()
{
    ANTLR_UINT32	_type;


    _type	    = ELSE;


    {
        this->matchs(lit_23);
        if  (this->hasException())
        {
            goto ruleELSEEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    goto ruleELSEEx;
    ruleELSEEx: ;

}












void WNScriptASTLexer::mFOR()
{
    ANTLR_UINT32	_type;


    _type	    = FOR;


    {
        this->matchs(lit_24);
        if  (this->hasException())
        {
            goto ruleFOREx;
        }




    }

	this->get_lexstate()->set_type(_type);
    goto ruleFOREx;
    ruleFOREx: ;

}












void WNScriptASTLexer::mSTRUCT()
{
    ANTLR_UINT32	_type;


    _type	    = STRUCT;


    {
        this->matchs(lit_25);
        if  (this->hasException())
        {
            goto ruleSTRUCTEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    goto ruleSTRUCTEx;
    ruleSTRUCTEx: ;

}












void WNScriptASTLexer::mCLASS()
{
    ANTLR_UINT32	_type;


    _type	    = CLASS;


    {
        this->matchs(lit_26);
        if  (this->hasException())
        {
            goto ruleCLASSEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    goto ruleCLASSEx;
    ruleCLASSEx: ;

}












void WNScriptASTLexer::mVIRTUAL()
{
    ANTLR_UINT32	_type;


    _type	    = VIRTUAL;


    {
        this->matchs(lit_27);
        if  (this->hasException())
        {
            goto ruleVIRTUALEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    goto ruleVIRTUALEx;
    ruleVIRTUALEx: ;

}












void WNScriptASTLexer::mOVERRIDE()
{
    ANTLR_UINT32	_type;


    _type	    = OVERRIDE;


    {
        this->matchs(lit_28);
        if  (this->hasException())
        {
            goto ruleOVERRIDEEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    goto ruleOVERRIDEEx;
    ruleOVERRIDEEx: ;

}












void WNScriptASTLexer::mINCLUDE()
{
    ANTLR_UINT32	_type;


    _type	    = INCLUDE;


    {
        this->matchs(lit_29);
        if  (this->hasException())
        {
            goto ruleINCLUDEEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    goto ruleINCLUDEEx;
    ruleINCLUDEEx: ;

}












void WNScriptASTLexer::mVOID_TYPE()
{
    ANTLR_UINT32	_type;


    _type	    = VOID_TYPE;


    {
        this->matchs(lit_30);
        if  (this->hasException())
        {
            goto ruleVOID_TYPEEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    goto ruleVOID_TYPEEx;
    ruleVOID_TYPEEx: ;

}












void WNScriptASTLexer::mINT_TYPE()
{
    ANTLR_UINT32	_type;


    _type	    = INT_TYPE;


    {
        this->matchs(lit_31);
        if  (this->hasException())
        {
            goto ruleINT_TYPEEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    goto ruleINT_TYPEEx;
    ruleINT_TYPEEx: ;

}












void WNScriptASTLexer::mCPTR_TYPE()
{
    ANTLR_UINT32	_type;


    _type	    = CPTR_TYPE;


    {
        this->matchs(lit_32);
        if  (this->hasException())
        {
            goto ruleCPTR_TYPEEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    goto ruleCPTR_TYPEEx;
    ruleCPTR_TYPEEx: ;

}












void WNScriptASTLexer::mFLOAT_TYPE()
{
    ANTLR_UINT32	_type;


    _type	    = FLOAT_TYPE;


    {
        this->matchs(lit_33);
        if  (this->hasException())
        {
            goto ruleFLOAT_TYPEEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    goto ruleFLOAT_TYPEEx;
    ruleFLOAT_TYPEEx: ;

}












void WNScriptASTLexer::mBOOL_TYPE()
{
    ANTLR_UINT32	_type;


    _type	    = BOOL_TYPE;


    {
        this->matchs(lit_34);
        if  (this->hasException())
        {
            goto ruleBOOL_TYPEEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    goto ruleBOOL_TYPEEx;
    ruleBOOL_TYPEEx: ;

}












void WNScriptASTLexer::mSTRING_TYPE()
{
    ANTLR_UINT32	_type;


    _type	    = STRING_TYPE;


    {
        this->matchs(lit_35);
        if  (this->hasException())
        {
            goto ruleSTRING_TYPEEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    goto ruleSTRING_TYPEEx;
    ruleSTRING_TYPEEx: ;

}












void WNScriptASTLexer::mCHAR_TYPE()
{
    ANTLR_UINT32	_type;


    _type	    = CHAR_TYPE;


    {
        this->matchs(lit_36);
        if  (this->hasException())
        {
            goto ruleCHAR_TYPEEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    goto ruleCHAR_TYPEEx;
    ruleCHAR_TYPEEx: ;

}












void WNScriptASTLexer::mSIZE_TYPE()
{
    ANTLR_UINT32	_type;


    _type	    = SIZE_TYPE;


    {
        this->matchs(lit_37);
        if  (this->hasException())
        {
            goto ruleSIZE_TYPEEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    goto ruleSIZE_TYPEEx;
    ruleSIZE_TYPEEx: ;

}












void WNScriptASTLexer::mQUESTION()
{
    ANTLR_UINT32	_type;


    _type	    = QUESTION;


    {
         this->matchc('?');
        if  (this->hasException())
        {
            goto ruleQUESTIONEx;
        }


    }

	this->get_lexstate()->set_type(_type);
    goto ruleQUESTIONEx;
    ruleQUESTIONEx: ;

}












void WNScriptASTLexer::mWEAK_REF()
{
    ANTLR_UINT32	_type;


    _type	    = WEAK_REF;


    {
        this->matchs(lit_38);
        if  (this->hasException())
        {
            goto ruleWEAK_REFEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    goto ruleWEAK_REFEx;
    ruleWEAK_REFEx: ;

}












void WNScriptASTLexer::mSHARED_REF()
{
    ANTLR_UINT32	_type;


    _type	    = SHARED_REF;


    {
        this->matchs(lit_39);
        if  (this->hasException())
        {
            goto ruleSHARED_REFEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    goto ruleSHARED_REFEx;
    ruleSHARED_REFEx: ;

}












void WNScriptASTLexer::mDEFAULT()
{
    ANTLR_UINT32	_type;


    _type	    = DEFAULT;


    {
        this->matchs(lit_40);
        if  (this->hasException())
        {
            goto ruleDEFAULTEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    goto ruleDEFAULTEx;
    ruleDEFAULTEx: ;

}












void WNScriptASTLexer::mNULLTOK()
{
    ANTLR_UINT32	_type;


    _type	    = NULLTOK;


    {
        this->matchs(lit_41);
        if  (this->hasException())
        {
            goto ruleNULLTOKEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    goto ruleNULLTOKEx;
    ruleNULLTOKEx: ;

}












void WNScriptASTLexer::mAT()
{
    ANTLR_UINT32	_type;


    _type	    = AT;


    {
        this->matchs(lit_42);
        if  (this->hasException())
        {
            goto ruleATEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    goto ruleATEx;
    ruleATEx: ;

}












void WNScriptASTLexer::mDEFER()
{
    ANTLR_UINT32	_type;


    _type	    = DEFER;


    {
        this->matchs(lit_43);
        if  (this->hasException())
        {
            goto ruleDEFEREx;
        }




    }

	this->get_lexstate()->set_type(_type);
    goto ruleDEFEREx;
    ruleDEFEREx: ;

}












void WNScriptASTLexer::mLOW_PRIORITY()
{
    ANTLR_UINT32	_type;


    _type	    = LOW_PRIORITY;


    {
        this->matchs(lit_44);
        if  (this->hasException())
        {
            goto ruleLOW_PRIORITYEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    goto ruleLOW_PRIORITYEx;
    ruleLOW_PRIORITYEx: ;

}












void WNScriptASTLexer::mBACKGROUND()
{
    ANTLR_UINT32	_type;


    _type	    = BACKGROUND;


    {
        this->matchs(lit_45);
        if  (this->hasException())
        {
            goto ruleBACKGROUNDEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    goto ruleBACKGROUNDEx;
    ruleBACKGROUNDEx: ;

}












void WNScriptASTLexer::mTHIS_TOK()
{
    ANTLR_UINT32	_type;


    _type	    = THIS_TOK;


    {
        this->matchs(lit_46);
        if  (this->hasException())
        {
            goto ruleTHIS_TOKEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    goto ruleTHIS_TOKEx;
    ruleTHIS_TOKEx: ;

}












void WNScriptASTLexer::mSYNCHRONIZED()
{
    ANTLR_UINT32	_type;


    _type	    = SYNCHRONIZED;


    {
        this->matchs(lit_47);
        if  (this->hasException())
        {
            goto ruleSYNCHRONIZEDEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    goto ruleSYNCHRONIZEDEx;
    ruleSYNCHRONIZEDEx: ;

}












void WNScriptASTLexer::mACTION()
{
    ANTLR_UINT32	_type;


    _type	    = ACTION;


    {
        this->matchs(lit_48);
        if  (this->hasException())
        {
            goto ruleACTIONEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    goto ruleACTIONEx;
    ruleACTIONEx: ;

}












void WNScriptASTLexer::mACTOR()
{
    ANTLR_UINT32	_type;


    _type	    = ACTOR;


    {
        this->matchs(lit_49);
        if  (this->hasException())
        {
            goto ruleACTOREx;
        }




    }

	this->get_lexstate()->set_type(_type);
    goto ruleACTOREx;
    ruleACTOREx: ;

}












void WNScriptASTLexer::mBOOL()
{
    ANTLR_UINT32	_type;


    _type	    = BOOL;


    {

        ANTLR_UINT32 alt1;

        alt1=2;

        switch ( this->LA(1) )
        {
        case 't':
        	{
        		alt1=1;
        	}
            break;
        case 'f':
        	{
        		alt1=2;
        	}
            break;

        default:
            ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTLexerImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            ex->set_decisionNum( 1 );
            ex->set_state( 0 );


            goto ruleBOOLEx;

        }

        switch (alt1)
        {
    	case 1:
    	    {
    	        this->matchs(lit_50);
    	        if  (this->hasException())
    	        {
    	            goto ruleBOOLEx;
    	        }




    	    }
    	    break;
    	case 2:
    	    {
    	        this->matchs(lit_51);
    	        if  (this->hasException())
    	        {
    	            goto ruleBOOLEx;
    	        }




    	    }
    	    break;

        }
    }
	this->get_lexstate()->set_type(_type);
    goto ruleBOOLEx;
    ruleBOOLEx: ;

}












void WNScriptASTLexer::mID()
{
    ANTLR_UINT32	_type;


    _type	    = ID;


    {
        if ( ((this->LA(1) >= 'a') && (this->LA(1) <= 'z')) )
        {
            this->consume();
        }
        else
        {
            new ANTLR_Exception< WNScriptASTLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

            this->recover();
            goto ruleIDEx;
        }



        for (;;)
        {
            int alt2=2;
            switch ( this->LA(1) )
            {
            case '0':
            case '1':
            case '2':
            case '3':
            case '4':
            case '5':
            case '6':
            case '7':
            case '8':
            case '9':
            case 'A':
            case 'B':
            case 'C':
            case 'D':
            case 'E':
            case 'F':
            case 'G':
            case 'H':
            case 'I':
            case 'J':
            case 'K':
            case 'L':
            case 'M':
            case 'N':
            case 'O':
            case 'P':
            case 'Q':
            case 'R':
            case 'S':
            case 'T':
            case 'U':
            case 'V':
            case 'W':
            case 'X':
            case 'Y':
            case 'Z':
            case '_':
            case 'a':
            case 'b':
            case 'c':
            case 'd':
            case 'e':
            case 'f':
            case 'g':
            case 'h':
            case 'i':
            case 'j':
            case 'k':
            case 'l':
            case 'm':
            case 'n':
            case 'o':
            case 'p':
            case 'q':
            case 'r':
            case 's':
            case 't':
            case 'u':
            case 'v':
            case 'w':
            case 'x':
            case 'y':
            case 'z':
            	{
            		alt2=1;
            	}
                break;

            }

            switch (alt2)
            {
        	case 1:
        	    {
        	        if ( ((this->LA(1) >= '0') && (this->LA(1) <= '9')) || ((this->LA(1) >= 'A') && (this->LA(1) <= 'Z')) || this->LA(1) == '_' || ((this->LA(1) >= 'a') && (this->LA(1) <= 'z')) )
        	        {
        	            this->consume();
        	        }
        	        else
        	        {
        	            new ANTLR_Exception< WNScriptASTLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

        	            this->recover();
        	            goto ruleIDEx;
        	        }


        	    }
        	    break;

        	default:
        	    goto loop2;
        	    break;
            }
        }
        loop2: ;


    }

	this->get_lexstate()->set_type(_type);
    goto ruleIDEx;
    ruleIDEx: ;

}












void WNScriptASTLexer::mRESOURCE()
{
    ANTLR_UINT32	_type;


    _type	    = RESOURCE;


    {
         this->matchc('@');
        if  (this->hasException())
        {
            goto ruleRESOURCEEx;
        }


        if ( ((this->LA(1) >= 'A') && (this->LA(1) <= 'Z')) )
        {
            this->consume();
        }
        else
        {
            new ANTLR_Exception< WNScriptASTLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

            this->recover();
            goto ruleRESOURCEEx;
        }



        for (;;)
        {
            int alt3=2;
            switch ( this->LA(1) )
            {
            case '0':
            case '1':
            case '2':
            case '3':
            case '4':
            case '5':
            case '6':
            case '7':
            case '8':
            case '9':
            case 'A':
            case 'B':
            case 'C':
            case 'D':
            case 'E':
            case 'F':
            case 'G':
            case 'H':
            case 'I':
            case 'J':
            case 'K':
            case 'L':
            case 'M':
            case 'N':
            case 'O':
            case 'P':
            case 'Q':
            case 'R':
            case 'S':
            case 'T':
            case 'U':
            case 'V':
            case 'W':
            case 'X':
            case 'Y':
            case 'Z':
            case '_':
            case 'a':
            case 'b':
            case 'c':
            case 'd':
            case 'e':
            case 'f':
            case 'g':
            case 'h':
            case 'i':
            case 'j':
            case 'k':
            case 'l':
            case 'm':
            case 'n':
            case 'o':
            case 'p':
            case 'q':
            case 'r':
            case 's':
            case 't':
            case 'u':
            case 'v':
            case 'w':
            case 'x':
            case 'y':
            case 'z':
            	{
            		alt3=1;
            	}
                break;

            }

            switch (alt3)
            {
        	case 1:
        	    {
        	        if ( ((this->LA(1) >= '0') && (this->LA(1) <= '9')) || ((this->LA(1) >= 'A') && (this->LA(1) <= 'Z')) || this->LA(1) == '_' || ((this->LA(1) >= 'a') && (this->LA(1) <= 'z')) )
        	        {
        	            this->consume();
        	        }
        	        else
        	        {
        	            new ANTLR_Exception< WNScriptASTLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

        	            this->recover();
        	            goto ruleRESOURCEEx;
        	        }


        	    }
        	    break;

        	default:
        	    goto loop3;
        	    break;
            }
        }
        loop3: ;


    }

	this->get_lexstate()->set_type(_type);
    goto ruleRESOURCEEx;
    ruleRESOURCEEx: ;

}












void WNScriptASTLexer::mTYPE()
{
    ANTLR_UINT32	_type;


    _type	    = TYPE;


    {
        if ( ((this->LA(1) >= 'A') && (this->LA(1) <= 'Z')) )
        {
            this->consume();
        }
        else
        {
            new ANTLR_Exception< WNScriptASTLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

            this->recover();
            goto ruleTYPEEx;
        }



        for (;;)
        {
            int alt4=2;
            switch ( this->LA(1) )
            {
            case '0':
            case '1':
            case '2':
            case '3':
            case '4':
            case '5':
            case '6':
            case '7':
            case '8':
            case '9':
            case 'A':
            case 'B':
            case 'C':
            case 'D':
            case 'E':
            case 'F':
            case 'G':
            case 'H':
            case 'I':
            case 'J':
            case 'K':
            case 'L':
            case 'M':
            case 'N':
            case 'O':
            case 'P':
            case 'Q':
            case 'R':
            case 'S':
            case 'T':
            case 'U':
            case 'V':
            case 'W':
            case 'X':
            case 'Y':
            case 'Z':
            case '_':
            case 'a':
            case 'b':
            case 'c':
            case 'd':
            case 'e':
            case 'f':
            case 'g':
            case 'h':
            case 'i':
            case 'j':
            case 'k':
            case 'l':
            case 'm':
            case 'n':
            case 'o':
            case 'p':
            case 'q':
            case 'r':
            case 's':
            case 't':
            case 'u':
            case 'v':
            case 'w':
            case 'x':
            case 'y':
            case 'z':
            	{
            		alt4=1;
            	}
                break;

            }

            switch (alt4)
            {
        	case 1:
        	    {
        	        if ( ((this->LA(1) >= '0') && (this->LA(1) <= '9')) || ((this->LA(1) >= 'A') && (this->LA(1) <= 'Z')) || this->LA(1) == '_' || ((this->LA(1) >= 'a') && (this->LA(1) <= 'z')) )
        	        {
        	            this->consume();
        	        }
        	        else
        	        {
        	            new ANTLR_Exception< WNScriptASTLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

        	            this->recover();
        	            goto ruleTYPEEx;
        	        }


        	    }
        	    break;

        	default:
        	    goto loop4;
        	    break;
            }
        }
        loop4: ;


    }

	this->get_lexstate()->set_type(_type);
    goto ruleTYPEEx;
    ruleTYPEEx: ;

}












void WNScriptASTLexer::mINT()
{
    ANTLR_UINT32	_type;


    _type	    = INT;


    {
        {
            int alt5=2;
            switch ( this->LA(1) )
            {
                case '-':
                	{
                		alt5=1;
                	}
                    break;
            }

            switch (alt5)
            {
        	case 1:
        	    {
        	         this->matchc('-');
        	        if  (this->hasException())
        	        {
        	            goto ruleINTEx;
        	        }


        	    }
        	    break;

            }
        }

        {
            int cnt6=0;

            for (;;)
            {
                int alt6=2;
        	switch ( this->LA(1) )
        	{
        	case '0':
        	case '1':
        	case '2':
        	case '3':
        	case '4':
        	case '5':
        	case '6':
        	case '7':
        	case '8':
        	case '9':
        		{
        			alt6=1;
        		}
        	    break;

        	}

        	switch (alt6)
        	{
        	    case 1:
        	        {
        	            if ( ((this->LA(1) >= '0') && (this->LA(1) <= '9')) )
        	            {
        	                this->consume();
        	            }
        	            else
        	            {
        	                new ANTLR_Exception< WNScriptASTLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

        	                this->recover();
        	                goto ruleINTEx;
        	            }


        	        }
        	        break;

        	    default:

        		if ( cnt6 >= 1 )
        		{
        		    goto loop6;
        		}


        		new ANTLR_Exception< WNScriptASTLexerImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


        		goto ruleINTEx;
        	}
        	cnt6++;
            }
            loop6: ;
        }

    }

	this->get_lexstate()->set_type(_type);
    goto ruleINTEx;
    ruleINTEx: ;

}












void WNScriptASTLexer::mSIZE()
{
    ANTLR_UINT32	_type;


    _type	    = SIZE;


    {
        {
            int cnt7=0;

            for (;;)
            {
                int alt7=2;
        	switch ( this->LA(1) )
        	{
        	case '0':
        	case '1':
        	case '2':
        	case '3':
        	case '4':
        	case '5':
        	case '6':
        	case '7':
        	case '8':
        	case '9':
        		{
        			alt7=1;
        		}
        	    break;

        	}

        	switch (alt7)
        	{
        	    case 1:
        	        {
        	            if ( ((this->LA(1) >= '0') && (this->LA(1) <= '9')) )
        	            {
        	                this->consume();
        	            }
        	            else
        	            {
        	                new ANTLR_Exception< WNScriptASTLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

        	                this->recover();
        	                goto ruleSIZEEx;
        	            }


        	        }
        	        break;

        	    default:

        		if ( cnt7 >= 1 )
        		{
        		    goto loop7;
        		}


        		new ANTLR_Exception< WNScriptASTLexerImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


        		goto ruleSIZEEx;
        	}
        	cnt7++;
            }
            loop7: ;
        }

         this->matchc('u');
        if  (this->hasException())
        {
            goto ruleSIZEEx;
        }


    }

	this->get_lexstate()->set_type(_type);
    goto ruleSIZEEx;
    ruleSIZEEx: ;

}












void WNScriptASTLexer::mFLOAT()
{
    ANTLR_UINT32	_type;


    _type	    = FLOAT;


    {

        ANTLR_UINT32 alt14;

        alt14=3;

        alt14 = cdfa14.predict(this, this->get_rec(), this->get_istream(), cdfa14 );
        if  (this->hasException())
        {
            goto ruleFLOATEx;
        }

        switch (alt14)
        {
    	case 1:
    	    {
    	        {
    	            int cnt8=0;

    	            for (;;)
    	            {
    	                int alt8=2;
    	        	switch ( this->LA(1) )
    	        	{
    	        	case '0':
    	        	case '1':
    	        	case '2':
    	        	case '3':
    	        	case '4':
    	        	case '5':
    	        	case '6':
    	        	case '7':
    	        	case '8':
    	        	case '9':
    	        		{
    	        			alt8=1;
    	        		}
    	        	    break;

    	        	}

    	        	switch (alt8)
    	        	{
    	        	    case 1:
    	        	        {
    	        	            if ( ((this->LA(1) >= '0') && (this->LA(1) <= '9')) )
    	        	            {
    	        	                this->consume();
    	        	            }
    	        	            else
    	        	            {
    	        	                new ANTLR_Exception< WNScriptASTLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

    	        	                this->recover();
    	        	                goto ruleFLOATEx;
    	        	            }


    	        	        }
    	        	        break;

    	        	    default:

    	        		if ( cnt8 >= 1 )
    	        		{
    	        		    goto loop8;
    	        		}


    	        		new ANTLR_Exception< WNScriptASTLexerImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


    	        		goto ruleFLOATEx;
    	        	}
    	        	cnt8++;
    	            }
    	            loop8: ;
    	        }

    	         this->matchc('.');
    	        if  (this->hasException())
    	        {
    	            goto ruleFLOATEx;
    	        }



    	        for (;;)
    	        {
    	            int alt9=2;
    	            switch ( this->LA(1) )
    	            {
    	            case '0':
    	            case '1':
    	            case '2':
    	            case '3':
    	            case '4':
    	            case '5':
    	            case '6':
    	            case '7':
    	            case '8':
    	            case '9':
    	            	{
    	            		alt9=1;
    	            	}
    	                break;

    	            }

    	            switch (alt9)
    	            {
    	        	case 1:
    	        	    {
    	        	        if ( ((this->LA(1) >= '0') && (this->LA(1) <= '9')) )
    	        	        {
    	        	            this->consume();
    	        	        }
    	        	        else
    	        	        {
    	        	            new ANTLR_Exception< WNScriptASTLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

    	        	            this->recover();
    	        	            goto ruleFLOATEx;
    	        	        }


    	        	    }
    	        	    break;

    	        	default:
    	        	    goto loop9;
    	        	    break;
    	            }
    	        }
    	        loop9: ;


    	        {
    	            int alt10=2;
    	            switch ( this->LA(1) )
    	            {
    	                case 'E':
    	                case 'e':
    	                	{
    	                		alt10=1;
    	                	}
    	                    break;
    	            }

    	            switch (alt10)
    	            {
    	        	case 1:
    	        	    {

    	        	        mEXPONENT();
    	        	        if  (this->hasException())
    	        	        {
    	        	            goto ruleFLOATEx;
    	        	        }



    	        	    }
    	        	    break;

    	            }
    	        }

    	    }
    	    break;
    	case 2:
    	    {
    	         this->matchc('.');
    	        if  (this->hasException())
    	        {
    	            goto ruleFLOATEx;
    	        }


    	        {
    	            int cnt11=0;

    	            for (;;)
    	            {
    	                int alt11=2;
    	        	switch ( this->LA(1) )
    	        	{
    	        	case '0':
    	        	case '1':
    	        	case '2':
    	        	case '3':
    	        	case '4':
    	        	case '5':
    	        	case '6':
    	        	case '7':
    	        	case '8':
    	        	case '9':
    	        		{
    	        			alt11=1;
    	        		}
    	        	    break;

    	        	}

    	        	switch (alt11)
    	        	{
    	        	    case 1:
    	        	        {
    	        	            if ( ((this->LA(1) >= '0') && (this->LA(1) <= '9')) )
    	        	            {
    	        	                this->consume();
    	        	            }
    	        	            else
    	        	            {
    	        	                new ANTLR_Exception< WNScriptASTLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

    	        	                this->recover();
    	        	                goto ruleFLOATEx;
    	        	            }


    	        	        }
    	        	        break;

    	        	    default:

    	        		if ( cnt11 >= 1 )
    	        		{
    	        		    goto loop11;
    	        		}


    	        		new ANTLR_Exception< WNScriptASTLexerImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


    	        		goto ruleFLOATEx;
    	        	}
    	        	cnt11++;
    	            }
    	            loop11: ;
    	        }

    	        {
    	            int alt12=2;
    	            switch ( this->LA(1) )
    	            {
    	                case 'E':
    	                case 'e':
    	                	{
    	                		alt12=1;
    	                	}
    	                    break;
    	            }

    	            switch (alt12)
    	            {
    	        	case 1:
    	        	    {

    	        	        mEXPONENT();
    	        	        if  (this->hasException())
    	        	        {
    	        	            goto ruleFLOATEx;
    	        	        }



    	        	    }
    	        	    break;

    	            }
    	        }

    	    }
    	    break;
    	case 3:
    	    {
    	        {
    	            int cnt13=0;

    	            for (;;)
    	            {
    	                int alt13=2;
    	        	switch ( this->LA(1) )
    	        	{
    	        	case '0':
    	        	case '1':
    	        	case '2':
    	        	case '3':
    	        	case '4':
    	        	case '5':
    	        	case '6':
    	        	case '7':
    	        	case '8':
    	        	case '9':
    	        		{
    	        			alt13=1;
    	        		}
    	        	    break;

    	        	}

    	        	switch (alt13)
    	        	{
    	        	    case 1:
    	        	        {
    	        	            if ( ((this->LA(1) >= '0') && (this->LA(1) <= '9')) )
    	        	            {
    	        	                this->consume();
    	        	            }
    	        	            else
    	        	            {
    	        	                new ANTLR_Exception< WNScriptASTLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

    	        	                this->recover();
    	        	                goto ruleFLOATEx;
    	        	            }


    	        	        }
    	        	        break;

    	        	    default:

    	        		if ( cnt13 >= 1 )
    	        		{
    	        		    goto loop13;
    	        		}


    	        		new ANTLR_Exception< WNScriptASTLexerImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


    	        		goto ruleFLOATEx;
    	        	}
    	        	cnt13++;
    	            }
    	            loop13: ;
    	        }


    	        mEXPONENT();
    	        if  (this->hasException())
    	        {
    	            goto ruleFLOATEx;
    	        }



    	    }
    	    break;

        }
    }
	this->get_lexstate()->set_type(_type);
    goto ruleFLOATEx;
    ruleFLOATEx: ;

}












void WNScriptASTLexer::mCOMMENT()
{
    ANTLR_UINT32	_type;


    _type	    = COMMENT;


    {

        ANTLR_UINT32 alt18;

        alt18=2;

        switch ( this->LA(1) )
        {
        case '/':
        	{
        		switch ( this->LA(2) )
        		{
        		case '/':
        			{
        				alt18=1;
        			}
        		    break;
        		case '*':
        			{
        				alt18=2;
        			}
        		    break;

        		default:
        		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTLexerImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
        		    ex->set_decisionNum( 18 );
        		    ex->set_state( 1 );


        		    goto ruleCOMMENTEx;

        		}

        	}
            break;

        default:
            ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTLexerImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            ex->set_decisionNum( 18 );
            ex->set_state( 0 );


            goto ruleCOMMENTEx;

        }

        switch (alt18)
        {
    	case 1:
    	    {
    	        this->matchs(lit_52);
    	        if  (this->hasException())
    	        {
    	            goto ruleCOMMENTEx;
    	        }





    	        for (;;)
    	        {
    	            int alt15=2;
    	            {


    	                int LA15_0 = this->LA(1);
    	                if ( (((LA15_0 >= 0x0000) && (LA15_0 <= '\t')) || ((LA15_0 >= 0x000B) && (LA15_0 <= '\f')) || ((LA15_0 >= 0x000E) && (LA15_0 <= 0xFFFF))))
    	                {
    	                    alt15=1;
    	                }

    	            }
    	            switch (alt15)
    	            {
    	        	case 1:
    	        	    {
    	        	        if ( ((this->LA(1) >= 0x0000) && (this->LA(1) <= '\t')) || ((this->LA(1) >= 0x000B) && (this->LA(1) <= '\f')) || ((this->LA(1) >= 0x000E) && (this->LA(1) <= 0xFFFF)) )
    	        	        {
    	        	            this->consume();
    	        	        }
    	        	        else
    	        	        {
    	        	            new ANTLR_Exception< WNScriptASTLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

    	        	            this->recover();
    	        	            goto ruleCOMMENTEx;
    	        	        }


    	        	    }
    	        	    break;

    	        	default:
    	        	    goto loop15;
    	        	    break;
    	            }
    	        }
    	        loop15: ;


    	        {
    	            int alt16=2;
    	            switch ( this->LA(1) )
    	            {
    	                case '\r':
    	                	{
    	                		alt16=1;
    	                	}
    	                    break;
    	            }

    	            switch (alt16)
    	            {
    	        	case 1:
    	        	    {
    	        	         this->matchc('\r');
    	        	        if  (this->hasException())
    	        	        {
    	        	            goto ruleCOMMENTEx;
    	        	        }


    	        	    }
    	        	    break;

    	            }
    	        }

    	         this->matchc('\n');
    	        if  (this->hasException())
    	        {
    	            goto ruleCOMMENTEx;
    	        }


    	        {
    	            this->get_state()->get_channel()=HIDDEN;
    	        }


    	    }
    	    break;
    	case 2:
    	    {
    	        this->matchs(lit_53);
    	        if  (this->hasException())
    	        {
    	            goto ruleCOMMENTEx;
    	        }





    	        for (;;)
    	        {
    	            int alt17=2;
    	            {


    	                int LA17_0 = this->LA(1);
    	                if ( (LA17_0 == '*'))
    	                {
    	                    {


    	                        int LA17_1 = this->LA(2);
    	                        if ( (LA17_1 == '/'))
    	                        {
    	                            alt17=2;
    	                        }
    	                        else if ( (((LA17_1 >= 0x0000) && (LA17_1 <= '.')) || ((LA17_1 >= '0') && (LA17_1 <= 0xFFFF))))
    	                        {
    	                            alt17=1;
    	                        }

    	                    }
    	                }
    	                else if ( (((LA17_0 >= 0x0000) && (LA17_0 <= ')')) || ((LA17_0 >= '+') && (LA17_0 <= 0xFFFF))))
    	                {
    	                    alt17=1;
    	                }

    	            }
    	            switch (alt17)
    	            {
    	        	case 1:
    	        	    {
    	        	        this->matchAny();
    	        	        if  (this->hasException())
    	        	        {
    	        	            goto ruleCOMMENTEx;
    	        	        }


    	        	    }
    	        	    break;

    	        	default:
    	        	    goto loop17;
    	        	    break;
    	            }
    	        }
    	        loop17: ;


    	        this->matchs(lit_54);
    	        if  (this->hasException())
    	        {
    	            goto ruleCOMMENTEx;
    	        }




    	        {
    	            this->get_state()->get_channel()=HIDDEN;
    	        }


    	    }
    	    break;

        }
    }
	this->get_lexstate()->set_type(_type);
    goto ruleCOMMENTEx;
    ruleCOMMENTEx: ;

}












void WNScriptASTLexer::mWS()
{
    ANTLR_UINT32	_type;


    _type	    = WS;


    {
        if ( ((this->LA(1) >= '\t') && (this->LA(1) <= '\n')) || this->LA(1) == '\r' || this->LA(1) == ' ' )
        {
            this->consume();
        }
        else
        {
            new ANTLR_Exception< WNScriptASTLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

            this->recover();
            goto ruleWSEx;
        }


        {
            this->get_state()->get_channel()=HIDDEN;
        }


    }

	this->get_lexstate()->set_type(_type);
    goto ruleWSEx;
    ruleWSEx: ;

}












void WNScriptASTLexer::mSTRING()
{
    ANTLR_UINT32	_type;


    _type	    = STRING;


    {
         this->matchc('"');
        if  (this->hasException())
        {
            goto ruleSTRINGEx;
        }



        for (;;)
        {
            int alt19=3;
            {


                int LA19_0 = this->LA(1);
                if ( (LA19_0 == '\\'))
                {
                    alt19=1;
                }
                else if ( (((LA19_0 >= 0x0000) && (LA19_0 <= '!')) || ((LA19_0 >= '#') && (LA19_0 <= '[')) || ((LA19_0 >= ']') && (LA19_0 <= 0xFFFF))))
                {
                    alt19=2;
                }

            }
            switch (alt19)
            {
        	case 1:
        	    {

        	        mESC_SEQ();
        	        if  (this->hasException())
        	        {
        	            goto ruleSTRINGEx;
        	        }



        	    }
        	    break;
        	case 2:
        	    {
        	        if ( ((this->LA(1) >= 0x0000) && (this->LA(1) <= '!')) || ((this->LA(1) >= '#') && (this->LA(1) <= '[')) || ((this->LA(1) >= ']') && (this->LA(1) <= 0xFFFF)) )
        	        {
        	            this->consume();
        	        }
        	        else
        	        {
        	            new ANTLR_Exception< WNScriptASTLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

        	            this->recover();
        	            goto ruleSTRINGEx;
        	        }


        	    }
        	    break;

        	default:
        	    goto loop19;
        	    break;
            }
        }
        loop19: ;


         this->matchc('"');
        if  (this->hasException())
        {
            goto ruleSTRINGEx;
        }


    }

	this->get_lexstate()->set_type(_type);
    goto ruleSTRINGEx;
    ruleSTRINGEx: ;

}












void WNScriptASTLexer::mCHAR()
{
    ANTLR_UINT32	_type;


    _type	    = CHAR;


    {
         this->matchc('\'');
        if  (this->hasException())
        {
            goto ruleCHAREx;
        }


        {
            int alt20=2;
            {
                int LA20_0 = this->LA(1);
                if ( (LA20_0 == '\\'))
                {
                    alt20=1;
                }
                else if ( (((LA20_0 >= 0x0000) && (LA20_0 <= '&')) || ((LA20_0 >= '(') && (LA20_0 <= '[')) || ((LA20_0 >= ']') && (LA20_0 <= 0xFFFF))))
                {
                    alt20=2;
                }
                else
                {

                    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTLexerImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 20 );
                    ex->set_state( 0 );


                    goto ruleCHAREx;

                }
            }
            switch (alt20)
            {
        	case 1:
        	    {

        	        mESC_SEQ();
        	        if  (this->hasException())
        	        {
        	            goto ruleCHAREx;
        	        }



        	    }
        	    break;
        	case 2:
        	    {
        	        if ( ((this->LA(1) >= 0x0000) && (this->LA(1) <= '&')) || ((this->LA(1) >= '(') && (this->LA(1) <= '[')) || ((this->LA(1) >= ']') && (this->LA(1) <= 0xFFFF)) )
        	        {
        	            this->consume();
        	        }
        	        else
        	        {
        	            new ANTLR_Exception< WNScriptASTLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

        	            this->recover();
        	            goto ruleCHAREx;
        	        }


        	    }
        	    break;

            }
        }

         this->matchc('\'');
        if  (this->hasException())
        {
            goto ruleCHAREx;
        }


    }

	this->get_lexstate()->set_type(_type);
    goto ruleCHAREx;
    ruleCHAREx: ;

}












void WNScriptASTLexer::mT_TYPE()
{
    ANTLR_UINT32	_type;


    _type	    = T_TYPE;


    {
         this->matchc('$');
        if  (this->hasException())
        {
            goto ruleT_TYPEEx;
        }


        if ( ((this->LA(1) >= 'A') && (this->LA(1) <= 'Z')) )
        {
            this->consume();
        }
        else
        {
            new ANTLR_Exception< WNScriptASTLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

            this->recover();
            goto ruleT_TYPEEx;
        }



        for (;;)
        {
            int alt21=2;
            switch ( this->LA(1) )
            {
            case '0':
            case '1':
            case '2':
            case '3':
            case '4':
            case '5':
            case '6':
            case '7':
            case '8':
            case '9':
            case 'A':
            case 'B':
            case 'C':
            case 'D':
            case 'E':
            case 'F':
            case 'G':
            case 'H':
            case 'I':
            case 'J':
            case 'K':
            case 'L':
            case 'M':
            case 'N':
            case 'O':
            case 'P':
            case 'Q':
            case 'R':
            case 'S':
            case 'T':
            case 'U':
            case 'V':
            case 'W':
            case 'X':
            case 'Y':
            case 'Z':
            case '_':
            case 'a':
            case 'b':
            case 'c':
            case 'd':
            case 'e':
            case 'f':
            case 'g':
            case 'h':
            case 'i':
            case 'j':
            case 'k':
            case 'l':
            case 'm':
            case 'n':
            case 'o':
            case 'p':
            case 'q':
            case 'r':
            case 's':
            case 't':
            case 'u':
            case 'v':
            case 'w':
            case 'x':
            case 'y':
            case 'z':
            	{
            		alt21=1;
            	}
                break;

            }

            switch (alt21)
            {
        	case 1:
        	    {
        	        if ( ((this->LA(1) >= '0') && (this->LA(1) <= '9')) || ((this->LA(1) >= 'A') && (this->LA(1) <= 'Z')) || this->LA(1) == '_' || ((this->LA(1) >= 'a') && (this->LA(1) <= 'z')) )
        	        {
        	            this->consume();
        	        }
        	        else
        	        {
        	            new ANTLR_Exception< WNScriptASTLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

        	            this->recover();
        	            goto ruleT_TYPEEx;
        	        }


        	    }
        	    break;

        	default:
        	    goto loop21;
        	    break;
            }
        }
        loop21: ;


    }

	this->get_lexstate()->set_type(_type);
    goto ruleT_TYPEEx;
    ruleT_TYPEEx: ;

}












void WNScriptASTLexer::mEXPONENT()
{
    ANTLR_UINT32	_type;



    {
        if ( this->LA(1) == 'E' || this->LA(1) == 'e' )
        {
            this->consume();
        }
        else
        {
            new ANTLR_Exception< WNScriptASTLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

            this->recover();
            goto ruleEXPONENTEx;
        }


        {
            int alt22=2;
            switch ( this->LA(1) )
            {
                case '+':
                case '-':
                	{
                		alt22=1;
                	}
                    break;
            }

            switch (alt22)
            {
        	case 1:
        	    {
        	        if ( this->LA(1) == '+' || this->LA(1) == '-' )
        	        {
        	            this->consume();
        	        }
        	        else
        	        {
        	            new ANTLR_Exception< WNScriptASTLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

        	            this->recover();
        	            goto ruleEXPONENTEx;
        	        }


        	    }
        	    break;

            }
        }

        {
            int cnt23=0;

            for (;;)
            {
                int alt23=2;
        	switch ( this->LA(1) )
        	{
        	case '0':
        	case '1':
        	case '2':
        	case '3':
        	case '4':
        	case '5':
        	case '6':
        	case '7':
        	case '8':
        	case '9':
        		{
        			alt23=1;
        		}
        	    break;

        	}

        	switch (alt23)
        	{
        	    case 1:
        	        {
        	            if ( ((this->LA(1) >= '0') && (this->LA(1) <= '9')) )
        	            {
        	                this->consume();
        	            }
        	            else
        	            {
        	                new ANTLR_Exception< WNScriptASTLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

        	                this->recover();
        	                goto ruleEXPONENTEx;
        	            }


        	        }
        	        break;

        	    default:

        		if ( cnt23 >= 1 )
        		{
        		    goto loop23;
        		}


        		new ANTLR_Exception< WNScriptASTLexerImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


        		goto ruleEXPONENTEx;
        	}
        	cnt23++;
            }
            loop23: ;
        }

    }


    goto ruleEXPONENTEx;
    ruleEXPONENTEx: ;

}












void WNScriptASTLexer::mHEX_DIGIT()
{
    ANTLR_UINT32	_type;



    {
        if ( ((this->LA(1) >= '0') && (this->LA(1) <= '9')) || ((this->LA(1) >= 'A') && (this->LA(1) <= 'F')) || ((this->LA(1) >= 'a') && (this->LA(1) <= 'f')) )
        {
            this->consume();
        }
        else
        {
            new ANTLR_Exception< WNScriptASTLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

            this->recover();
            goto ruleHEX_DIGITEx;
        }


    }


    goto ruleHEX_DIGITEx;
    ruleHEX_DIGITEx: ;

}












void WNScriptASTLexer::mESC_SEQ()
{
    ANTLR_UINT32	_type;



    {

        ANTLR_UINT32 alt24;

        alt24=3;

        switch ( this->LA(1) )
        {
        case '\\':
        	{
        		switch ( this->LA(2) )
        		{
        		case 'u':
        			{
        				alt24=1;
        			}
        		    break;
        		case '0':
        		case '1':
        		case '2':
        		case '3':
        		case '4':
        		case '5':
        		case '6':
        		case '7':
        			{
        				alt24=2;
        			}
        		    break;
        		case '"':
        		case '\'':
        		case '\\':
        		case 'b':
        		case 'f':
        		case 'n':
        		case 'r':
        		case 't':
        			{
        				alt24=3;
        			}
        		    break;

        		default:
        		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTLexerImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
        		    ex->set_decisionNum( 24 );
        		    ex->set_state( 1 );


        		    goto ruleESC_SEQEx;

        		}

        	}
            break;

        default:
            ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTLexerImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            ex->set_decisionNum( 24 );
            ex->set_state( 0 );


            goto ruleESC_SEQEx;

        }

        switch (alt24)
        {
    	case 1:
    	    {

    	        mUNICODE_ESC();
    	        if  (this->hasException())
    	        {
    	            goto ruleESC_SEQEx;
    	        }



    	    }
    	    break;
    	case 2:
    	    {

    	        mOCTAL_ESC();
    	        if  (this->hasException())
    	        {
    	            goto ruleESC_SEQEx;
    	        }



    	    }
    	    break;
    	case 3:
    	    {
    	         this->matchc('\\');
    	        if  (this->hasException())
    	        {
    	            goto ruleESC_SEQEx;
    	        }


    	        if ( this->LA(1) == '"' || this->LA(1) == '\'' || this->LA(1) == '\\' || this->LA(1) == 'b' || this->LA(1) == 'f' || this->LA(1) == 'n' || this->LA(1) == 'r' || this->LA(1) == 't' )
    	        {
    	            this->consume();
    	        }
    	        else
    	        {
    	            new ANTLR_Exception< WNScriptASTLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

    	            this->recover();
    	            goto ruleESC_SEQEx;
    	        }


    	    }
    	    break;

        }
    }

    goto ruleESC_SEQEx;
    ruleESC_SEQEx: ;

}












void WNScriptASTLexer::mOCTAL_ESC()
{
    ANTLR_UINT32	_type;



    {

        ANTLR_UINT32 alt25;

        alt25=3;

        switch ( this->LA(1) )
        {
        case '\\':
        	{
        		switch ( this->LA(2) )
        		{
        		case '0':
        		case '1':
        		case '2':
        		case '3':
        			{
        				switch ( this->LA(3) )
        				{
        				case '0':
        				case '1':
        				case '2':
        				case '3':
        				case '4':
        				case '5':
        				case '6':
        				case '7':
        					{
        						switch ( this->LA(4) )
        						{
        						case '0':
        						case '1':
        						case '2':
        						case '3':
        						case '4':
        						case '5':
        						case '6':
        						case '7':
        							{
        								alt25=1;
        							}
        						    break;

        						default:
        						    alt25=2;
        						}

        					}
        				    break;

        				default:
        				    alt25=3;
        				}

        			}
        		    break;
        		case '4':
        		case '5':
        		case '6':
        		case '7':
        			{
        				switch ( this->LA(3) )
        				{
        				case '0':
        				case '1':
        				case '2':
        				case '3':
        				case '4':
        				case '5':
        				case '6':
        				case '7':
        					{
        						alt25=2;
        					}
        				    break;

        				default:
        				    alt25=3;
        				}

        			}
        		    break;

        		default:
        		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTLexerImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
        		    ex->set_decisionNum( 25 );
        		    ex->set_state( 1 );


        		    goto ruleOCTAL_ESCEx;

        		}

        	}
            break;

        default:
            ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTLexerImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            ex->set_decisionNum( 25 );
            ex->set_state( 0 );


            goto ruleOCTAL_ESCEx;

        }

        switch (alt25)
        {
    	case 1:
    	    {
    	         this->matchc('\\');
    	        if  (this->hasException())
    	        {
    	            goto ruleOCTAL_ESCEx;
    	        }


    	        if ( ((this->LA(1) >= '0') && (this->LA(1) <= '3')) )
    	        {
    	            this->consume();
    	        }
    	        else
    	        {
    	            new ANTLR_Exception< WNScriptASTLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

    	            this->recover();
    	            goto ruleOCTAL_ESCEx;
    	        }


    	        if ( ((this->LA(1) >= '0') && (this->LA(1) <= '7')) )
    	        {
    	            this->consume();
    	        }
    	        else
    	        {
    	            new ANTLR_Exception< WNScriptASTLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

    	            this->recover();
    	            goto ruleOCTAL_ESCEx;
    	        }


    	        if ( ((this->LA(1) >= '0') && (this->LA(1) <= '7')) )
    	        {
    	            this->consume();
    	        }
    	        else
    	        {
    	            new ANTLR_Exception< WNScriptASTLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

    	            this->recover();
    	            goto ruleOCTAL_ESCEx;
    	        }


    	    }
    	    break;
    	case 2:
    	    {
    	         this->matchc('\\');
    	        if  (this->hasException())
    	        {
    	            goto ruleOCTAL_ESCEx;
    	        }


    	        if ( ((this->LA(1) >= '0') && (this->LA(1) <= '7')) )
    	        {
    	            this->consume();
    	        }
    	        else
    	        {
    	            new ANTLR_Exception< WNScriptASTLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

    	            this->recover();
    	            goto ruleOCTAL_ESCEx;
    	        }


    	        if ( ((this->LA(1) >= '0') && (this->LA(1) <= '7')) )
    	        {
    	            this->consume();
    	        }
    	        else
    	        {
    	            new ANTLR_Exception< WNScriptASTLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

    	            this->recover();
    	            goto ruleOCTAL_ESCEx;
    	        }


    	    }
    	    break;
    	case 3:
    	    {
    	         this->matchc('\\');
    	        if  (this->hasException())
    	        {
    	            goto ruleOCTAL_ESCEx;
    	        }


    	        if ( ((this->LA(1) >= '0') && (this->LA(1) <= '7')) )
    	        {
    	            this->consume();
    	        }
    	        else
    	        {
    	            new ANTLR_Exception< WNScriptASTLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

    	            this->recover();
    	            goto ruleOCTAL_ESCEx;
    	        }


    	    }
    	    break;

        }
    }

    goto ruleOCTAL_ESCEx;
    ruleOCTAL_ESCEx: ;

}












void WNScriptASTLexer::mUNICODE_ESC()
{
    ANTLR_UINT32	_type;



    {
         this->matchc('\\');
        if  (this->hasException())
        {
            goto ruleUNICODE_ESCEx;
        }


         this->matchc('u');
        if  (this->hasException())
        {
            goto ruleUNICODE_ESCEx;
        }



        mHEX_DIGIT();
        if  (this->hasException())
        {
            goto ruleUNICODE_ESCEx;
        }




        mHEX_DIGIT();
        if  (this->hasException())
        {
            goto ruleUNICODE_ESCEx;
        }




        mHEX_DIGIT();
        if  (this->hasException())
        {
            goto ruleUNICODE_ESCEx;
        }




        mHEX_DIGIT();
        if  (this->hasException())
        {
            goto ruleUNICODE_ESCEx;
        }



    }


    goto ruleUNICODE_ESCEx;
    ruleUNICODE_ESCEx: ;

}




void
WNScriptASTLexer::mTokens()
{
    {

        ANTLR_UINT32 alt26;

        alt26=84;

        alt26 = cdfa26.predict(this, this->get_rec(), this->get_istream(), cdfa26 );
        if  (this->hasException())
        {
            goto ruleTokensEx;
        }

        switch (alt26)
        {
    	case 1:
    	    {

    	        mT__71();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 2:
    	    {

    	        mT__72();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 3:
    	    {

    	        mT__73();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 4:
    	    {

    	        mT__74();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 5:
    	    {

    	        mT__75();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 6:
    	    {

    	        mT__76();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 7:
    	    {

    	        mT__77();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 8:
    	    {

    	        mT__78();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 9:
    	    {

    	        mT__79();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 10:
    	    {

    	        mT__80();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 11:
    	    {

    	        mT__81();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 12:
    	    {

    	        mT__82();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 13:
    	    {

    	        mT__83();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 14:
    	    {

    	        mT__84();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 15:
    	    {

    	        mT__85();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 16:
    	    {

    	        mT__86();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 17:
    	    {

    	        mT__87();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 18:
    	    {

    	        mT__88();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 19:
    	    {

    	        mT__89();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 20:
    	    {

    	        mT__90();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 21:
    	    {

    	        mT__91();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 22:
    	    {

    	        mT__92();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 23:
    	    {

    	        mLSQBRACKET();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 24:
    	    {

    	        mRSQBRACKET();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 25:
    	    {

    	        mDLSQBRACKET();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 26:
    	    {

    	        mDRSQBRACKET();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 27:
    	    {

    	        mSLICETOK();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 28:
    	    {

    	        mSSOR();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 29:
    	    {

    	        mLENGTH();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 30:
    	    {

    	        mLBRACKET();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 31:
    	    {

    	        mRBRACKET();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 32:
    	    {

    	        mLBRACE();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 33:
    	    {

    	        mRBRACE();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 34:
    	    {

    	        mCOMMA();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 35:
    	    {

    	        mDOUBINC();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 36:
    	    {

    	        mDOUBDEC();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 37:
    	    {

    	        mRETURN();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 38:
    	    {

    	        mBREAK();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 39:
    	    {

    	        mCONTINUE();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 40:
    	    {

    	        mSEMICOLON();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 41:
    	    {

    	        mCOLON();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 42:
    	    {

    	        mWHILE();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 43:
    	    {

    	        mDO();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 44:
    	    {

    	        mIF();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 45:
    	    {

    	        mELSE();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 46:
    	    {

    	        mFOR();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 47:
    	    {

    	        mSTRUCT();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 48:
    	    {

    	        mCLASS();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 49:
    	    {

    	        mVIRTUAL();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 50:
    	    {

    	        mOVERRIDE();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 51:
    	    {

    	        mINCLUDE();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 52:
    	    {

    	        mVOID_TYPE();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 53:
    	    {

    	        mINT_TYPE();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 54:
    	    {

    	        mCPTR_TYPE();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 55:
    	    {

    	        mFLOAT_TYPE();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 56:
    	    {

    	        mBOOL_TYPE();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 57:
    	    {

    	        mSTRING_TYPE();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 58:
    	    {

    	        mCHAR_TYPE();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 59:
    	    {

    	        mSIZE_TYPE();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 60:
    	    {

    	        mQUESTION();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 61:
    	    {

    	        mWEAK_REF();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 62:
    	    {

    	        mSHARED_REF();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 63:
    	    {

    	        mDEFAULT();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 64:
    	    {

    	        mNULLTOK();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 65:
    	    {

    	        mAT();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 66:
    	    {

    	        mDEFER();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 67:
    	    {

    	        mLOW_PRIORITY();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 68:
    	    {

    	        mBACKGROUND();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 69:
    	    {

    	        mTHIS_TOK();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 70:
    	    {

    	        mSYNCHRONIZED();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 71:
    	    {

    	        mACTION();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 72:
    	    {

    	        mACTOR();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 73:
    	    {

    	        mBOOL();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 74:
    	    {

    	        mID();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 75:
    	    {

    	        mRESOURCE();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 76:
    	    {

    	        mTYPE();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 77:
    	    {

    	        mINT();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 78:
    	    {

    	        mSIZE();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 79:
    	    {

    	        mFLOAT();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 80:
    	    {

    	        mCOMMENT();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 81:
    	    {

    	        mWS();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 82:
    	    {

    	        mSTRING();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 83:
    	    {

    	        mCHAR();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 84:
    	    {

    	        mT_TYPE();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;

        }
    }


    goto ruleTokensEx;
ruleTokensEx: ;
}















