/** \file
 *  This C++ source file was generated by $ANTLR version 3.5.3-SNAPSHOT
 *
 *     -  From the grammar source file : C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g
 *     -                            On : 2015-09-16 18:54:30
 *     -                for the parser : WNScriptASTParserParser
 *
 * Editing it, at least manually, is not wise.
 *
 * C++ language generator and runtime by Gokulakannan Somasundaram ( heavy lifting from C Run-time by Jim Idle )
 *
 *
*/
// [The "BSD license"]
// Copyright (c) 2005-2009 Gokulakannan Somasundaram, ElectronDB
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


/* =============================================================================
 * This is what the grammar programmer asked us to put at the top of every file.
 */

    #include "WNCore/inc/WNBase.h"
#ifdef _WN_MSVC
    #pragma warning(disable: 4100)
    #pragma warning(disable: 4459)
    #pragma warning(disable: 4703)
#endif
    #include "WNLogging/inc/WNLog.h"
    #include "WNMemory/inc/WNAllocator.h"
	  #include "WNScripting/src/WNScriptASTLexer.hpp"
    #include "WNScripting/inc/WNNodeTypes.h"
	
    using namespace wn;
    //
    //

    #ifndef SET_LOCATION
    #define SET_LOCATION(node, tok) { scripting::source_location loc; \
                                     loc.m_start_index = tok->get_startIndex();\
                                     loc.m_end_index = tok->get_stopIndex();\
                                     loc.m_line_start = tok->get_lineStart();\
                                     loc.m_line_number = tok->get_line();\
                                     loc.m_char_number = tok->get_charPositionInLine();\
                                     node->set_start_location(loc); \
                                   }

    #define SET_LOCATION_FROM_NODE(node, node2) { \
                                        if(node2) { \
                                        node->set_start_location(node2->get_start_location()); \
                                        } \
                                   }
    #define SET_START_LOCATION_FROM_NODE(node, node2) { \
                                        if(node2) { \
                                        scripting::source_location loc = node->get_start_location(); \
                                        scripting::source_location loc2 = node2->get_start_location(); \
                                        loc.m_start_index = loc2.m_start_index; \
                                        loc.m_line_start = loc2.m_line_start; \
                                        loc.m_line_number = loc2.m_line_number; \
                                        loc.m_char_number = loc2.m_char_number; \
                                        node->set_start_location(loc); \
                                        } \
                                    }
    #define SET_END_LOCATION(node, tok) { \
                                        node->set_end_index(tok->get_stopIndex()); \
                                      }
    #define SET_END_LOCATION_FROM_NODE(node, node2) { \
                                            if(node2) { \
                                            node->set_end_index(node2->get_start_location().m_end_index); \
                                            } \
                                            }
    #endif

/* End of Header action.
 * =============================================================================
 */

/* -----------------------------------------
 * Include the ANTLR3 generated header file.
 */
#include    "WNScriptASTParser.hpp"
/* ----------------------------------------- */


/* ============================================================================= */

/* =============================================================================
 * Start of recognizer
 */

using namespace antlr3;
/** \brief Table of all token names in symbolic order, mainly used for
 *         error reporting.
 */
ANTLR_UINT8* WNScriptASTParserTokenNames[66+4]
     = {
        (ANTLR_UINT8*) "<invalid>",       /* String to print to indicate an invalid token */
        (ANTLR_UINT8*) "<EOR>",
        (ANTLR_UINT8*) "<DOWN>",
        (ANTLR_UINT8*) "<UP>",
        (ANTLR_UINT8*) "BOOL",
        (ANTLR_UINT8*) "BOOL_TYPE",
        (ANTLR_UINT8*) "CHAR",
        (ANTLR_UINT8*) "CHAR_TYPE",
        (ANTLR_UINT8*) "CHOWN",
        (ANTLR_UINT8*) "CLASS",
        (ANTLR_UINT8*) "COLON",
        (ANTLR_UINT8*) "COMMA",
        (ANTLR_UINT8*) "COMMENT",
        (ANTLR_UINT8*) "DO",
        (ANTLR_UINT8*) "DOUBDEC",
        (ANTLR_UINT8*) "DOUBINC",
        (ANTLR_UINT8*) "ELSE",
        (ANTLR_UINT8*) "ESC_SEQ",
        (ANTLR_UINT8*) "EXPONENT",
        (ANTLR_UINT8*) "FLOAT",
        (ANTLR_UINT8*) "FLOAT_TYPE",
        (ANTLR_UINT8*) "FOR",
        (ANTLR_UINT8*) "HEX_DIGIT",
        (ANTLR_UINT8*) "ID",
        (ANTLR_UINT8*) "IF",
        (ANTLR_UINT8*) "INCLUDE",
        (ANTLR_UINT8*) "INT",
        (ANTLR_UINT8*) "INT_TYPE",
        (ANTLR_UINT8*) "LBRACE",
        (ANTLR_UINT8*) "LBRACKET",
        (ANTLR_UINT8*) "LSQBRACKET",
        (ANTLR_UINT8*) "NULLTOK",
        (ANTLR_UINT8*) "OCTAL_ESC",
        (ANTLR_UINT8*) "OVERRIDE",
        (ANTLR_UINT8*) "RBRACE",
        (ANTLR_UINT8*) "RBRACKET",
        (ANTLR_UINT8*) "RETURN",
        (ANTLR_UINT8*) "RETURN_OWN",
        (ANTLR_UINT8*) "RSQBRACKET",
        (ANTLR_UINT8*) "SEMICOLON",
        (ANTLR_UINT8*) "STRING",
        (ANTLR_UINT8*) "STRING_TYPE",
        (ANTLR_UINT8*) "STRUCT",
        (ANTLR_UINT8*) "TYPE",
        (ANTLR_UINT8*) "UNICODE_ESC",
        (ANTLR_UINT8*) "VIRTUAL",
        (ANTLR_UINT8*) "VOID_TYPE",
        (ANTLR_UINT8*) "WHILE",
        (ANTLR_UINT8*) "WS",
        (ANTLR_UINT8*) "'!='",
        (ANTLR_UINT8*) "'%'",
        (ANTLR_UINT8*) "'%='",
        (ANTLR_UINT8*) "'&&'",
        (ANTLR_UINT8*) "'*'",
        (ANTLR_UINT8*) "'*='",
        (ANTLR_UINT8*) "'+'",
        (ANTLR_UINT8*) "'+='",
        (ANTLR_UINT8*) "'-'",
        (ANTLR_UINT8*) "'-='",
        (ANTLR_UINT8*) "'.'",
        (ANTLR_UINT8*) "'/'",
        (ANTLR_UINT8*) "'/='",
        (ANTLR_UINT8*) "'<'",
        (ANTLR_UINT8*) "'<='",
        (ANTLR_UINT8*) "'='",
        (ANTLR_UINT8*) "'=='",
        (ANTLR_UINT8*) "'>'",
        (ANTLR_UINT8*) "'>='",
        (ANTLR_UINT8*) "'?'",
        (ANTLR_UINT8*) "'||'"
       };


/** \brief Name of the grammar file that generated this code
 */
static const char fileName[] = "C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g";

/** \brief Return the name of the grammar file that generated this code.
 */
const char* WNScriptASTParser::getGrammarFileName()
{
	return fileName;
}
/** \brief Create a new WNScriptASTParser parser and return a context for it.
 *
 * \param[in] instream Pointer to an input stream interface.
 *
 * \return Pointer to new parser context upon success.
 */
WNScriptASTParser::WNScriptASTParser( StreamType* instream)
    :ImplTraits::BaseParserType(ANTLR_SIZE_HINT, instream, NULL)

{
	// See if we can create a new parser with the standard constructor
	//
	this->init(instream);
}

/** \brief Create a new WNScriptASTParser parser and return a context for it.
 *
 * \param[in] instream Pointer to an input stream interface.
 *
 * \return Pointer to new parser context upon success.
 */
WNScriptASTParser::WNScriptASTParser( StreamType* instream, RecognizerSharedStateType* state)
    :ImplTraits::BaseParserType(ANTLR_SIZE_HINT, instream, state)

{
	this->init(instream );
}

void WNScriptASTParser::init(StreamType* instream)
{
	/* Install the token table
	*/
	this->get_psrstate()->set_tokenNames( WNScriptASTParserTokenNames );


}

void
WNScriptASTParser::reset()
{
    this->get_rec()->reset();
}

/** Free the parser resources
 */
WNScriptASTParser::~WNScriptASTParser()
 {
}

/** Return token names used by this parser
 *
 * The returned pointer is used as an index into the token names table (using the token
 * number as the index).
 *
 * \return Pointer to first char * in the table.
 */
static ANTLR_UINT8**	getTokenNames()
{
        return WNScriptASTParserTokenNames;
}


/* Declare the bitsets
 */
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_TYPE_in_scalarType1153_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_TYPE_in_scalarType1153( FOLLOW_TYPE_in_scalarType1153_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_VOID_TYPE_in_scalarType1168_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_VOID_TYPE_in_scalarType1168( FOLLOW_VOID_TYPE_in_scalarType1168_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_INT_TYPE_in_scalarType1180_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_INT_TYPE_in_scalarType1180( FOLLOW_INT_TYPE_in_scalarType1180_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_FLOAT_TYPE_in_scalarType1192_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_FLOAT_TYPE_in_scalarType1192( FOLLOW_FLOAT_TYPE_in_scalarType1192_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_CHAR_TYPE_in_scalarType1204_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_CHAR_TYPE_in_scalarType1204( FOLLOW_CHAR_TYPE_in_scalarType1204_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_STRING_TYPE_in_scalarType1216_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_STRING_TYPE_in_scalarType1216( FOLLOW_STRING_TYPE_in_scalarType1216_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_BOOL_TYPE_in_scalarType1228_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_BOOL_TYPE_in_scalarType1228( FOLLOW_BOOL_TYPE_in_scalarType1228_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_scalarType_in_type1261_bits[]	= { ANTLR_UINT64_LIT(0x0000000040000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_scalarType_in_type1261( FOLLOW_scalarType_in_type1261_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_LSQBRACKET_in_type1282_bits[]	= { ANTLR_UINT64_LIT(0x0000004000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LSQBRACKET_in_type1282( FOLLOW_LSQBRACKET_in_type1282_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_RSQBRACKET_in_type1284_bits[]	= { ANTLR_UINT64_LIT(0x0000000040000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RSQBRACKET_in_type1284( FOLLOW_RSQBRACKET_in_type1284_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_type_in_param1316_bits[]	= { ANTLR_UINT64_LIT(0x0000000000800000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_type_in_param1316( FOLLOW_type_in_param1316_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_param1318_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_ID_in_param1318( FOLLOW_ID_in_param1318_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_param_in_paramList1350_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000802) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_param_in_paramList1350( FOLLOW_param_in_paramList1350_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_paramList1363_bits[]	= { ANTLR_UINT64_LIT(0x00004A00081000A0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_COMMA_in_paramList1363( FOLLOW_COMMA_in_paramList1363_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_param_in_paramList1367_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000802) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_param_in_paramList1367( FOLLOW_param_in_paramList1367_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_LBRACKET_in_parameterList1399_bits[]	= { ANTLR_UINT64_LIT(0x00004A00081000A0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_parameterList1399( FOLLOW_LBRACKET_in_parameterList1399_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_paramList_in_parameterList1401_bits[]	= { ANTLR_UINT64_LIT(0x0000000800000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_paramList_in_parameterList1401( FOLLOW_paramList_in_parameterList1401_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_RBRACKET_in_parameterList1403_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_parameterList1403( FOLLOW_RBRACKET_in_parameterList1403_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_LBRACKET_in_parameterList1420_bits[]	= { ANTLR_UINT64_LIT(0x0000000800000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_parameterList1420( FOLLOW_LBRACKET_in_parameterList1420_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_RBRACKET_in_parameterList1422_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_parameterList1422( FOLLOW_RBRACKET_in_parameterList1422_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_64_in_assign_type1458_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_64_in_assign_type1458( FOLLOW_64_in_assign_type1458_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_56_in_assign_type1472_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_56_in_assign_type1472( FOLLOW_56_in_assign_type1472_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_58_in_assign_type1485_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_58_in_assign_type1485( FOLLOW_58_in_assign_type1485_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_54_in_assign_type1498_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_54_in_assign_type1498( FOLLOW_54_in_assign_type1498_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_61_in_assign_type1511_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_61_in_assign_type1511( FOLLOW_61_in_assign_type1511_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_51_in_assign_type1524_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_51_in_assign_type1524( FOLLOW_51_in_assign_type1524_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_CHOWN_in_assign_type1537_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_CHOWN_in_assign_type1537( FOLLOW_CHOWN_in_assign_type1537_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_unary_ex_in_lvalue1567_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_unary_ex_in_lvalue1567( FOLLOW_unary_ex_in_lvalue1567_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_expr_in_arglist1625_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000802) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_arglist1625( FOLLOW_expr_in_arglist1625_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_CHOWN_in_arglist1651_bits[]	= { ANTLR_UINT64_LIT(0x02004B00AC98C0F0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_CHOWN_in_arglist1651( FOLLOW_CHOWN_in_arglist1651_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_expr_in_arglist1655_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000802) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_arglist1655( FOLLOW_expr_in_arglist1655_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_arglist1688_bits[]	= { ANTLR_UINT64_LIT(0x02004B00AC98C9F2) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_COMMA_in_arglist1688( FOLLOW_COMMA_in_arglist1688_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_CHOWN_in_arglist1730_bits[]	= { ANTLR_UINT64_LIT(0x02004B00AC98C0F0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_CHOWN_in_arglist1730( FOLLOW_CHOWN_in_arglist1730_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_expr_in_arglist1734_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000802) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_arglist1734( FOLLOW_expr_in_arglist1734_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_expr_in_arglist1766_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000802) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_arglist1766( FOLLOW_expr_in_arglist1766_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_cond_ex_in_expr1841_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_cond_ex_in_expr1841( FOLLOW_cond_ex_in_expr1841_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_or_ex_in_cond_ex1879_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000010) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_or_ex_in_cond_ex1879( FOLLOW_or_ex_in_cond_ex1879_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_68_in_cond_ex1902_bits[]	= { ANTLR_UINT64_LIT(0x02004B00AC98C0F0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_68_in_cond_ex1902( FOLLOW_68_in_cond_ex1902_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_expr_in_cond_ex1906_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000400) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_cond_ex1906( FOLLOW_expr_in_cond_ex1906_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_COLON_in_cond_ex1908_bits[]	= { ANTLR_UINT64_LIT(0x02004B00AC98C0F0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_COLON_in_cond_ex1908( FOLLOW_COLON_in_cond_ex1908_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_cond_ex_in_cond_ex1912_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_cond_ex_in_cond_ex1912( FOLLOW_cond_ex_in_cond_ex1912_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_and_ex_in_or_ex1959_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000020) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_and_ex_in_or_ex1959( FOLLOW_and_ex_in_or_ex1959_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_69_in_or_ex1976_bits[]	= { ANTLR_UINT64_LIT(0x02004B00AC98C0F0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_69_in_or_ex1976( FOLLOW_69_in_or_ex1976_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_and_ex_in_or_ex1980_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000020) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_and_ex_in_or_ex1980( FOLLOW_and_ex_in_or_ex1980_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_eq_ex_in_and_ex2023_bits[]	= { ANTLR_UINT64_LIT(0x0010000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_eq_ex_in_and_ex2023( FOLLOW_eq_ex_in_and_ex2023_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_52_in_and_ex2040_bits[]	= { ANTLR_UINT64_LIT(0x02004B00AC98C0F0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_52_in_and_ex2040( FOLLOW_52_in_and_ex2040_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_eq_ex_in_and_ex2044_bits[]	= { ANTLR_UINT64_LIT(0x0010000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_eq_ex_in_and_ex2044( FOLLOW_eq_ex_in_and_ex2044_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_rel_ex_in_eq_ex2080_bits[]	= { ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_rel_ex_in_eq_ex2080( FOLLOW_rel_ex_in_eq_ex2080_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_65_in_eq_ex2115_bits[]	= { ANTLR_UINT64_LIT(0x02004B00AC98C0F0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_65_in_eq_ex2115( FOLLOW_65_in_eq_ex2115_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_rel_ex_in_eq_ex2119_bits[]	= { ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_rel_ex_in_eq_ex2119( FOLLOW_rel_ex_in_eq_ex2119_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_49_in_eq_ex2142_bits[]	= { ANTLR_UINT64_LIT(0x02004B00AC98C0F0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_49_in_eq_ex2142( FOLLOW_49_in_eq_ex2142_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_rel_ex_in_eq_ex2146_bits[]	= { ANTLR_UINT64_LIT(0x0002000000000002), ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_rel_ex_in_eq_ex2146( FOLLOW_rel_ex_in_eq_ex2146_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_add_ex_in_rel_ex2204_bits[]	= { ANTLR_UINT64_LIT(0xC000000000000002), ANTLR_UINT64_LIT(0x000000000000000C) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_add_ex_in_rel_ex2204( FOLLOW_add_ex_in_rel_ex2204_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_62_in_rel_ex2240_bits[]	= { ANTLR_UINT64_LIT(0x02004B00AC98C0F0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_62_in_rel_ex2240( FOLLOW_62_in_rel_ex2240_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_add_ex_in_rel_ex2244_bits[]	= { ANTLR_UINT64_LIT(0xC000000000000002), ANTLR_UINT64_LIT(0x000000000000000C) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_add_ex_in_rel_ex2244( FOLLOW_add_ex_in_rel_ex2244_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_66_in_rel_ex2268_bits[]	= { ANTLR_UINT64_LIT(0x02004B00AC98C0F0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_66_in_rel_ex2268( FOLLOW_66_in_rel_ex2268_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_add_ex_in_rel_ex2272_bits[]	= { ANTLR_UINT64_LIT(0xC000000000000002), ANTLR_UINT64_LIT(0x000000000000000C) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_add_ex_in_rel_ex2272( FOLLOW_add_ex_in_rel_ex2272_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_63_in_rel_ex2296_bits[]	= { ANTLR_UINT64_LIT(0x02004B00AC98C0F0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_63_in_rel_ex2296( FOLLOW_63_in_rel_ex2296_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_add_ex_in_rel_ex2300_bits[]	= { ANTLR_UINT64_LIT(0xC000000000000002), ANTLR_UINT64_LIT(0x000000000000000C) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_add_ex_in_rel_ex2300( FOLLOW_add_ex_in_rel_ex2300_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_67_in_rel_ex2324_bits[]	= { ANTLR_UINT64_LIT(0x02004B00AC98C0F0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_67_in_rel_ex2324( FOLLOW_67_in_rel_ex2324_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_add_ex_in_rel_ex2328_bits[]	= { ANTLR_UINT64_LIT(0xC000000000000002), ANTLR_UINT64_LIT(0x000000000000000C) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_add_ex_in_rel_ex2328( FOLLOW_add_ex_in_rel_ex2328_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_mult_ex_in_add_ex2389_bits[]	= { ANTLR_UINT64_LIT(0x0280000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_mult_ex_in_add_ex2389( FOLLOW_mult_ex_in_add_ex2389_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_55_in_add_ex2424_bits[]	= { ANTLR_UINT64_LIT(0x02004B00AC98C0F0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_55_in_add_ex2424( FOLLOW_55_in_add_ex2424_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_mult_ex_in_add_ex2428_bits[]	= { ANTLR_UINT64_LIT(0x0280000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_mult_ex_in_add_ex2428( FOLLOW_mult_ex_in_add_ex2428_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_57_in_add_ex2450_bits[]	= { ANTLR_UINT64_LIT(0x02004B00AC98C0F0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_57_in_add_ex2450( FOLLOW_57_in_add_ex2450_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_mult_ex_in_add_ex2454_bits[]	= { ANTLR_UINT64_LIT(0x0280000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_mult_ex_in_add_ex2454( FOLLOW_mult_ex_in_add_ex2454_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_unary_ex_in_mult_ex2513_bits[]	= { ANTLR_UINT64_LIT(0x1024000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_unary_ex_in_mult_ex2513( FOLLOW_unary_ex_in_mult_ex2513_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_53_in_mult_ex2552_bits[]	= { ANTLR_UINT64_LIT(0x02004B00AC98C0F0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_53_in_mult_ex2552( FOLLOW_53_in_mult_ex2552_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_unary_ex_in_mult_ex2556_bits[]	= { ANTLR_UINT64_LIT(0x1024000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_unary_ex_in_mult_ex2556( FOLLOW_unary_ex_in_mult_ex2556_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_60_in_mult_ex2582_bits[]	= { ANTLR_UINT64_LIT(0x02004B00AC98C0F0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_60_in_mult_ex2582( FOLLOW_60_in_mult_ex2582_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_unary_ex_in_mult_ex2586_bits[]	= { ANTLR_UINT64_LIT(0x1024000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_unary_ex_in_mult_ex2586( FOLLOW_unary_ex_in_mult_ex2586_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_50_in_mult_ex2612_bits[]	= { ANTLR_UINT64_LIT(0x02004B00AC98C0F0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_50_in_mult_ex2612( FOLLOW_50_in_mult_ex2612_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_unary_ex_in_mult_ex2616_bits[]	= { ANTLR_UINT64_LIT(0x1024000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_unary_ex_in_mult_ex2616( FOLLOW_unary_ex_in_mult_ex2616_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_post_ex_in_unary_ex2668_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_post_ex_in_unary_ex2668( FOLLOW_post_ex_in_unary_ex2668_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_DOUBINC_in_unary_ex2681_bits[]	= { ANTLR_UINT64_LIT(0x02004B00AC98C0F0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_DOUBINC_in_unary_ex2681( FOLLOW_DOUBINC_in_unary_ex2681_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_unary_ex_in_unary_ex2685_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_unary_ex_in_unary_ex2685( FOLLOW_unary_ex_in_unary_ex2685_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_DOUBDEC_in_unary_ex2698_bits[]	= { ANTLR_UINT64_LIT(0x02004B00AC98C0F0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_DOUBDEC_in_unary_ex2698( FOLLOW_DOUBDEC_in_unary_ex2698_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_unary_ex_in_unary_ex2702_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_unary_ex_in_unary_ex2702( FOLLOW_unary_ex_in_unary_ex2702_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_57_in_unary_ex2715_bits[]	= { ANTLR_UINT64_LIT(0x02004B00AC98C0F0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_57_in_unary_ex2715( FOLLOW_57_in_unary_ex2715_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_unary_ex_in_unary_ex2719_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_unary_ex_in_unary_ex2719( FOLLOW_unary_ex_in_unary_ex2719_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_LSQBRACKET_in_post_ex_proper2757_bits[]	= { ANTLR_UINT64_LIT(0x02004B00AC98C0F0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LSQBRACKET_in_post_ex_proper2757( FOLLOW_LSQBRACKET_in_post_ex_proper2757_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_expr_in_post_ex_proper2761_bits[]	= { ANTLR_UINT64_LIT(0x0000004000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_post_ex_proper2761( FOLLOW_expr_in_post_ex_proper2761_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_RSQBRACKET_in_post_ex_proper2765_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RSQBRACKET_in_post_ex_proper2765( FOLLOW_RSQBRACKET_in_post_ex_proper2765_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_LBRACKET_in_post_ex_proper2780_bits[]	= { ANTLR_UINT64_LIT(0x0000000800000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_post_ex_proper2780( FOLLOW_LBRACKET_in_post_ex_proper2780_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_RBRACKET_in_post_ex_proper2784_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_post_ex_proper2784( FOLLOW_RBRACKET_in_post_ex_proper2784_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_LBRACKET_in_post_ex_proper2812_bits[]	= { ANTLR_UINT64_LIT(0x02004B00AC98C1F0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_post_ex_proper2812( FOLLOW_LBRACKET_in_post_ex_proper2812_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_arglist_in_post_ex_proper2818_bits[]	= { ANTLR_UINT64_LIT(0x0000000800000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_arglist_in_post_ex_proper2818( FOLLOW_arglist_in_post_ex_proper2818_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_RBRACKET_in_post_ex_proper2822_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_post_ex_proper2822( FOLLOW_RBRACKET_in_post_ex_proper2822_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_59_in_post_ex_proper2835_bits[]	= { ANTLR_UINT64_LIT(0x0000000000800000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_59_in_post_ex_proper2835( FOLLOW_59_in_post_ex_proper2835_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_post_ex_proper2839_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_ID_in_post_ex_proper2839( FOLLOW_ID_in_post_ex_proper2839_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_DOUBINC_in_post_ex_proper2866_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_DOUBINC_in_post_ex_proper2866( FOLLOW_DOUBINC_in_post_ex_proper2866_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_DOUBDEC_in_post_ex_proper2895_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_DOUBDEC_in_post_ex_proper2895( FOLLOW_DOUBDEC_in_post_ex_proper2895_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_prim_ex_in_post_ex2948_bits[]	= { ANTLR_UINT64_LIT(0x080000006000C002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_prim_ex_in_post_ex2948( FOLLOW_prim_ex_in_post_ex2948_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_post_ex_proper_in_post_ex2967_bits[]	= { ANTLR_UINT64_LIT(0x080000006000C002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_post_ex_proper_in_post_ex2967( FOLLOW_post_ex_proper_in_post_ex2967_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_lvalue_in_assignment2996_bits[]	= { ANTLR_UINT64_LIT(0x2548000000000102), ANTLR_UINT64_LIT(0x0000000000000001) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_lvalue_in_assignment2996( FOLLOW_lvalue_in_assignment2996_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_assign_type_in_assignment3009_bits[]	= { ANTLR_UINT64_LIT(0x02004B00AC98C0F0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_assign_type_in_assignment3009( FOLLOW_assign_type_in_assignment3009_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_expr_in_assignment3011_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_assignment3011( FOLLOW_expr_in_assignment3011_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_INT_in_constant3046_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_INT_in_constant3046( FOLLOW_INT_in_constant3046_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_FLOAT_in_constant3064_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_FLOAT_in_constant3064( FOLLOW_FLOAT_in_constant3064_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_CHAR_in_constant3080_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_CHAR_in_constant3080( FOLLOW_CHAR_in_constant3080_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_STRING_in_constant3097_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_STRING_in_constant3097( FOLLOW_STRING_in_constant3097_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_BOOL_in_constant3112_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_BOOL_in_constant3112( FOLLOW_BOOL_in_constant3112_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_scalarType_in_constant3129_bits[]	= { ANTLR_UINT64_LIT(0x0000000010000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_scalarType_in_constant3129( FOLLOW_scalarType_in_constant3129_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_LBRACE_in_constant3133_bits[]	= { ANTLR_UINT64_LIT(0x0000010000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACE_in_constant3133( FOLLOW_LBRACE_in_constant3133_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_STRING_in_constant3137_bits[]	= { ANTLR_UINT64_LIT(0x0000000400000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_STRING_in_constant3137( FOLLOW_STRING_in_constant3137_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_RBRACE_in_constant3141_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACE_in_constant3141( FOLLOW_RBRACE_in_constant3141_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_prim_ex3171_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_ID_in_prim_ex3171( FOLLOW_ID_in_prim_ex3171_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_LBRACKET_in_prim_ex3186_bits[]	= { ANTLR_UINT64_LIT(0x02004B00AC98C0F0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_prim_ex3186( FOLLOW_LBRACKET_in_prim_ex3186_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_expr_in_prim_ex3190_bits[]	= { ANTLR_UINT64_LIT(0x0000000800000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_prim_ex3190( FOLLOW_expr_in_prim_ex3190_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_RBRACKET_in_prim_ex3194_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_prim_ex3194( FOLLOW_RBRACKET_in_prim_ex3194_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_constant_in_prim_ex3209_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_constant_in_prim_ex3209( FOLLOW_constant_in_prim_ex3209_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_scalarType_in_prim_ex3224_bits[]	= { ANTLR_UINT64_LIT(0x0000000060000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_scalarType_in_prim_ex3224( FOLLOW_scalarType_in_prim_ex3224_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_structInit_in_prim_ex3256_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_structInit_in_prim_ex3256( FOLLOW_structInit_in_prim_ex3256_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_cast_in_prim_ex3281_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_cast_in_prim_ex3281( FOLLOW_cast_in_prim_ex3281_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_arrayInit_in_prim_ex3304_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_arrayInit_in_prim_ex3304( FOLLOW_arrayInit_in_prim_ex3304_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_NULLTOK_in_prim_ex3333_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_NULLTOK_in_prim_ex3333( FOLLOW_NULLTOK_in_prim_ex3333_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_LBRACKET_in_cast3362_bits[]	= { ANTLR_UINT64_LIT(0x02004B00AC98C0F0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_cast3362( FOLLOW_LBRACKET_in_cast3362_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_expr_in_cast3366_bits[]	= { ANTLR_UINT64_LIT(0x0000000800000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_cast3366( FOLLOW_expr_in_cast3366_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_RBRACKET_in_cast3370_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_cast3370( FOLLOW_RBRACKET_in_cast3370_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_LBRACKET_in_structInit3399_bits[]	= { ANTLR_UINT64_LIT(0x0000000800000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_structInit3399( FOLLOW_LBRACKET_in_structInit3399_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_RBRACKET_in_structInit3403_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_structInit3403( FOLLOW_RBRACKET_in_structInit3403_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_LSQBRACKET_in_arrayInit3465_bits[]	= { ANTLR_UINT64_LIT(0x02004B00AC98C0F0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LSQBRACKET_in_arrayInit3465( FOLLOW_LSQBRACKET_in_arrayInit3465_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_expr_in_arrayInit3469_bits[]	= { ANTLR_UINT64_LIT(0x0000004000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_arrayInit3469( FOLLOW_expr_in_arrayInit3469_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_RSQBRACKET_in_arrayInit3471_bits[]	= { ANTLR_UINT64_LIT(0x0000000060000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RSQBRACKET_in_arrayInit3471( FOLLOW_RSQBRACKET_in_arrayInit3471_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_LSQBRACKET_in_arrayInit3495_bits[]	= { ANTLR_UINT64_LIT(0x0000004000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LSQBRACKET_in_arrayInit3495( FOLLOW_LSQBRACKET_in_arrayInit3495_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_RSQBRACKET_in_arrayInit3497_bits[]	= { ANTLR_UINT64_LIT(0x0000000060000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RSQBRACKET_in_arrayInit3497( FOLLOW_RSQBRACKET_in_arrayInit3497_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_LSQBRACKET_in_arrayInit3535_bits[]	= { ANTLR_UINT64_LIT(0x0000004000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LSQBRACKET_in_arrayInit3535( FOLLOW_LSQBRACKET_in_arrayInit3535_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_RSQBRACKET_in_arrayInit3537_bits[]	= { ANTLR_UINT64_LIT(0x0000000060000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RSQBRACKET_in_arrayInit3537( FOLLOW_RSQBRACKET_in_arrayInit3537_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_LBRACKET_in_arrayInit3578_bits[]	= { ANTLR_UINT64_LIT(0x0000000800000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_arrayInit3578( FOLLOW_LBRACKET_in_arrayInit3578_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_RBRACKET_in_arrayInit3582_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_arrayInit3582( FOLLOW_RBRACKET_in_arrayInit3582_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_LBRACKET_in_arrayInit3616_bits[]	= { ANTLR_UINT64_LIT(0x02004B00AC98C0F0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_arrayInit3616( FOLLOW_LBRACKET_in_arrayInit3616_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_expr_in_arrayInit3620_bits[]	= { ANTLR_UINT64_LIT(0x0000000800000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_arrayInit3620( FOLLOW_expr_in_arrayInit3620_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_RBRACKET_in_arrayInit3624_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_arrayInit3624( FOLLOW_RBRACKET_in_arrayInit3624_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_param_in_declaration3669_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000100), ANTLR_UINT64_LIT(0x0000000000000001) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_param_in_declaration3669( FOLLOW_param_in_declaration3669_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_64_in_declaration3704_bits[]	= { ANTLR_UINT64_LIT(0x02004B00AC98C0F0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_64_in_declaration3704( FOLLOW_64_in_declaration3704_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_expr_in_declaration3711_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_declaration3711( FOLLOW_expr_in_declaration3711_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_CHOWN_in_declaration3737_bits[]	= { ANTLR_UINT64_LIT(0x02004B00AC98C0F0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_CHOWN_in_declaration3737( FOLLOW_CHOWN_in_declaration3737_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_expr_in_declaration3744_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_declaration3744( FOLLOW_expr_in_declaration3744_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_declaration_in_instructionScalar3793_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_declaration_in_instructionScalar3793( FOLLOW_declaration_in_instructionScalar3793_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_assignment_in_instructionScalar3806_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_assignment_in_instructionScalar3806( FOLLOW_assignment_in_instructionScalar3806_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_RETURN_in_returnInst3838_bits[]	= { ANTLR_UINT64_LIT(0x02004B00AC98C0F0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RETURN_in_returnInst3838( FOLLOW_RETURN_in_returnInst3838_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_expr_in_returnInst3840_bits[]	= { ANTLR_UINT64_LIT(0x0000008000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_returnInst3840( FOLLOW_expr_in_returnInst3840_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_SEMICOLON_in_returnInst3844_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SEMICOLON_in_returnInst3844( FOLLOW_SEMICOLON_in_returnInst3844_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_RETURN_in_returnInst3858_bits[]	= { ANTLR_UINT64_LIT(0x0000008000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RETURN_in_returnInst3858( FOLLOW_RETURN_in_returnInst3858_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_SEMICOLON_in_returnInst3862_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SEMICOLON_in_returnInst3862( FOLLOW_SEMICOLON_in_returnInst3862_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_RETURN_OWN_in_returnInst3876_bits[]	= { ANTLR_UINT64_LIT(0x02004B00AC98C0F0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RETURN_OWN_in_returnInst3876( FOLLOW_RETURN_OWN_in_returnInst3876_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_expr_in_returnInst3878_bits[]	= { ANTLR_UINT64_LIT(0x0000008000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_returnInst3878( FOLLOW_expr_in_returnInst3878_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_SEMICOLON_in_returnInst3882_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SEMICOLON_in_returnInst3882( FOLLOW_SEMICOLON_in_returnInst3882_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_WHILE_in_whileInst3920_bits[]	= { ANTLR_UINT64_LIT(0x0000000020000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_WHILE_in_whileInst3920( FOLLOW_WHILE_in_whileInst3920_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_LBRACKET_in_whileInst3922_bits[]	= { ANTLR_UINT64_LIT(0x02004B00AC98C0F0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_whileInst3922( FOLLOW_LBRACKET_in_whileInst3922_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_expr_in_whileInst3924_bits[]	= { ANTLR_UINT64_LIT(0x0000000800000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_whileInst3924( FOLLOW_expr_in_whileInst3924_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_RBRACKET_in_whileInst3926_bits[]	= { ANTLR_UINT64_LIT(0x0000000010000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_whileInst3926( FOLLOW_RBRACKET_in_whileInst3926_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_body_in_whileInst3928_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_body_in_whileInst3928( FOLLOW_body_in_whileInst3928_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_DO_in_doInst3964_bits[]	= { ANTLR_UINT64_LIT(0x0000000010000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_DO_in_doInst3964( FOLLOW_DO_in_doInst3964_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_body_in_doInst3966_bits[]	= { ANTLR_UINT64_LIT(0x0000800000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_body_in_doInst3966( FOLLOW_body_in_doInst3966_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_WHILE_in_doInst3968_bits[]	= { ANTLR_UINT64_LIT(0x0000000020000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_WHILE_in_doInst3968( FOLLOW_WHILE_in_doInst3968_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_LBRACKET_in_doInst3970_bits[]	= { ANTLR_UINT64_LIT(0x02004B00AC98C0F0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_doInst3970( FOLLOW_LBRACKET_in_doInst3970_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_expr_in_doInst3972_bits[]	= { ANTLR_UINT64_LIT(0x0000000800000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_doInst3972( FOLLOW_expr_in_doInst3972_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_RBRACKET_in_doInst3974_bits[]	= { ANTLR_UINT64_LIT(0x0000008000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_doInst3974( FOLLOW_RBRACKET_in_doInst3974_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_SEMICOLON_in_doInst3976_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SEMICOLON_in_doInst3976( FOLLOW_SEMICOLON_in_doInst3976_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_FOR_in_forInst4008_bits[]	= { ANTLR_UINT64_LIT(0x0000000020000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_FOR_in_forInst4008( FOLLOW_FOR_in_forInst4008_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_LBRACKET_in_forInst4010_bits[]	= { ANTLR_UINT64_LIT(0x02004B80AC98C0F0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_forInst4010( FOLLOW_LBRACKET_in_forInst4010_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_instructionScalar_in_forInst4038_bits[]	= { ANTLR_UINT64_LIT(0x0000008000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_instructionScalar_in_forInst4038( FOLLOW_instructionScalar_in_forInst4038_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_SEMICOLON_in_forInst4044_bits[]	= { ANTLR_UINT64_LIT(0x02004B80AC98C0F0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SEMICOLON_in_forInst4044( FOLLOW_SEMICOLON_in_forInst4044_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_expr_in_forInst4069_bits[]	= { ANTLR_UINT64_LIT(0x0000008000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_forInst4069( FOLLOW_expr_in_forInst4069_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_SEMICOLON_in_forInst4083_bits[]	= { ANTLR_UINT64_LIT(0x02004B08AC98C0F0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SEMICOLON_in_forInst4083( FOLLOW_SEMICOLON_in_forInst4083_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_instructionScalar_in_forInst4108_bits[]	= { ANTLR_UINT64_LIT(0x0000000800000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_instructionScalar_in_forInst4108( FOLLOW_instructionScalar_in_forInst4108_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_RBRACKET_in_forInst4114_bits[]	= { ANTLR_UINT64_LIT(0x0000000010000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_forInst4114( FOLLOW_RBRACKET_in_forInst4114_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_body_in_forInst4139_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_body_in_forInst4139( FOLLOW_body_in_forInst4139_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_ELSE_in_elsemiddle4187_bits[]	= { ANTLR_UINT64_LIT(0x0000000001000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_ELSE_in_elsemiddle4187( FOLLOW_ELSE_in_elsemiddle4187_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_IF_in_elsemiddle4189_bits[]	= { ANTLR_UINT64_LIT(0x0000000020000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_IF_in_elsemiddle4189( FOLLOW_IF_in_elsemiddle4189_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_LBRACKET_in_elsemiddle4191_bits[]	= { ANTLR_UINT64_LIT(0x02004B00AC98C0F0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_elsemiddle4191( FOLLOW_LBRACKET_in_elsemiddle4191_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_expr_in_elsemiddle4193_bits[]	= { ANTLR_UINT64_LIT(0x0000000800000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_elsemiddle4193( FOLLOW_expr_in_elsemiddle4193_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_RBRACKET_in_elsemiddle4195_bits[]	= { ANTLR_UINT64_LIT(0x0000000010000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_elsemiddle4195( FOLLOW_RBRACKET_in_elsemiddle4195_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_body_in_elsemiddle4197_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_body_in_elsemiddle4197( FOLLOW_body_in_elsemiddle4197_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_ELSE_in_endif4230_bits[]	= { ANTLR_UINT64_LIT(0x0000000010000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_ELSE_in_endif4230( FOLLOW_ELSE_in_endif4230_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_body_in_endif4232_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_body_in_endif4232( FOLLOW_body_in_endif4232_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_IF_in_ifInst4262_bits[]	= { ANTLR_UINT64_LIT(0x0000000020000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_IF_in_ifInst4262( FOLLOW_IF_in_ifInst4262_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_LBRACKET_in_ifInst4264_bits[]	= { ANTLR_UINT64_LIT(0x02004B00AC98C0F0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_ifInst4264( FOLLOW_LBRACKET_in_ifInst4264_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_expr_in_ifInst4266_bits[]	= { ANTLR_UINT64_LIT(0x0000000800000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_ifInst4266( FOLLOW_expr_in_ifInst4266_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_RBRACKET_in_ifInst4268_bits[]	= { ANTLR_UINT64_LIT(0x0000000010000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_ifInst4268( FOLLOW_RBRACKET_in_ifInst4268_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_body_in_ifInst4270_bits[]	= { ANTLR_UINT64_LIT(0x0000000000010002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_body_in_ifInst4270( FOLLOW_body_in_ifInst4270_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_elsemiddle_in_ifInst4287_bits[]	= { ANTLR_UINT64_LIT(0x0000000000010002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_elsemiddle_in_ifInst4287( FOLLOW_elsemiddle_in_ifInst4287_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_endif_in_ifInst4307_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_endif_in_ifInst4307( FOLLOW_endif_in_ifInst4307_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_ifInst_in_instruction4341_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_ifInst_in_instruction4341( FOLLOW_ifInst_in_instruction4341_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_whileInst_in_instruction4362_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_whileInst_in_instruction4362( FOLLOW_whileInst_in_instruction4362_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_doInst_in_instruction4379_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_doInst_in_instruction4379( FOLLOW_doInst_in_instruction4379_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_forInst_in_instruction4399_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_forInst_in_instruction4399( FOLLOW_forInst_in_instruction4399_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_instructionScalar_in_instruction4419_bits[]	= { ANTLR_UINT64_LIT(0x0000008000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_instructionScalar_in_instruction4419( FOLLOW_instructionScalar_in_instruction4419_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_SEMICOLON_in_instruction4421_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SEMICOLON_in_instruction4421( FOLLOW_SEMICOLON_in_instruction4421_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_returnInst_in_instruction4434_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_returnInst_in_instruction4434( FOLLOW_returnInst_in_instruction4434_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_instruction_in_instruction_list4466_bits[]	= { ANTLR_UINT64_LIT(0x0200CB30ADB8E0F2) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_instruction_in_instruction_list4466( FOLLOW_instruction_in_instruction_list4466_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_instruction_in_instruction_list4482_bits[]	= { ANTLR_UINT64_LIT(0x0200CB30ADB8E0F2) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_instruction_in_instruction_list4482( FOLLOW_instruction_in_instruction_list4482_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_LBRACE_in_body4516_bits[]	= { ANTLR_UINT64_LIT(0x0000000400000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACE_in_body4516( FOLLOW_LBRACE_in_body4516_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_RBRACE_in_body4520_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACE_in_body4520( FOLLOW_RBRACE_in_body4520_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_LBRACE_in_body4535_bits[]	= { ANTLR_UINT64_LIT(0x0200CB30ADB8E0F0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACE_in_body4535( FOLLOW_LBRACE_in_body4535_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_instruction_list_in_body4537_bits[]	= { ANTLR_UINT64_LIT(0x0000000400000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_instruction_list_in_body4537( FOLLOW_instruction_list_in_body4537_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_RBRACE_in_body4541_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACE_in_body4541( FOLLOW_RBRACE_in_body4541_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_param_in_function4571_bits[]	= { ANTLR_UINT64_LIT(0x0000000020000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_param_in_function4571( FOLLOW_param_in_function4571_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_parameterList_in_function4573_bits[]	= { ANTLR_UINT64_LIT(0x0000000010000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_parameterList_in_function4573( FOLLOW_parameterList_in_function4573_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_body_in_function4575_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_body_in_function4575( FOLLOW_body_in_function4575_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_STRUCT_in_structDecl4605_bits[]	= { ANTLR_UINT64_LIT(0x0000080000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_STRUCT_in_structDecl4605( FOLLOW_STRUCT_in_structDecl4605_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_TYPE_in_structDecl4607_bits[]	= { ANTLR_UINT64_LIT(0x0000000010000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_TYPE_in_structDecl4607( FOLLOW_TYPE_in_structDecl4607_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_LBRACE_in_structDecl4623_bits[]	= { ANTLR_UINT64_LIT(0x00004A04081000A0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACE_in_structDecl4623( FOLLOW_LBRACE_in_structDecl4623_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_declaration_in_structDecl4628_bits[]	= { ANTLR_UINT64_LIT(0x0000008000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_declaration_in_structDecl4628( FOLLOW_declaration_in_structDecl4628_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_SEMICOLON_in_structDecl4632_bits[]	= { ANTLR_UINT64_LIT(0x00004A04081000A0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SEMICOLON_in_structDecl4632( FOLLOW_SEMICOLON_in_structDecl4632_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_RBRACE_in_structDecl4637_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACE_in_structDecl4637( FOLLOW_RBRACE_in_structDecl4637_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_CLASS_in_classDecl4690_bits[]	= { ANTLR_UINT64_LIT(0x0000080000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_CLASS_in_classDecl4690( FOLLOW_CLASS_in_classDecl4690_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_TYPE_in_classDecl4694_bits[]	= { ANTLR_UINT64_LIT(0x0000000010000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_TYPE_in_classDecl4694( FOLLOW_TYPE_in_classDecl4694_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_CLASS_in_classDecl4714_bits[]	= { ANTLR_UINT64_LIT(0x0000080000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_CLASS_in_classDecl4714( FOLLOW_CLASS_in_classDecl4714_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_TYPE_in_classDecl4718_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000400) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_TYPE_in_classDecl4718( FOLLOW_TYPE_in_classDecl4718_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_COLON_in_classDecl4720_bits[]	= { ANTLR_UINT64_LIT(0x0000080000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_COLON_in_classDecl4720( FOLLOW_COLON_in_classDecl4720_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_TYPE_in_classDecl4724_bits[]	= { ANTLR_UINT64_LIT(0x0000000010000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_TYPE_in_classDecl4724( FOLLOW_TYPE_in_classDecl4724_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_LBRACE_in_classDecl4751_bits[]	= { ANTLR_UINT64_LIT(0x00006A06081000A0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACE_in_classDecl4751( FOLLOW_LBRACE_in_classDecl4751_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_declaration_in_classDecl4794_bits[]	= { ANTLR_UINT64_LIT(0x0000008000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_declaration_in_classDecl4794( FOLLOW_declaration_in_classDecl4794_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_SEMICOLON_in_classDecl4798_bits[]	= { ANTLR_UINT64_LIT(0x00006A06081000A0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SEMICOLON_in_classDecl4798( FOLLOW_SEMICOLON_in_classDecl4798_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_function_in_classDecl4824_bits[]	= { ANTLR_UINT64_LIT(0x00006A06081000A0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_function_in_classDecl4824( FOLLOW_function_in_classDecl4824_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_VIRTUAL_in_classDecl4853_bits[]	= { ANTLR_UINT64_LIT(0x00004A00081000A0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_VIRTUAL_in_classDecl4853( FOLLOW_VIRTUAL_in_classDecl4853_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_function_in_classDecl4857_bits[]	= { ANTLR_UINT64_LIT(0x00006A06081000A0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_function_in_classDecl4857( FOLLOW_function_in_classDecl4857_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_OVERRIDE_in_classDecl4883_bits[]	= { ANTLR_UINT64_LIT(0x00004A00081000A0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_OVERRIDE_in_classDecl4883( FOLLOW_OVERRIDE_in_classDecl4883_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_function_in_classDecl4887_bits[]	= { ANTLR_UINT64_LIT(0x00006A06081000A0) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_function_in_classDecl4887( FOLLOW_function_in_classDecl4887_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_RBRACE_in_classDecl4923_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACE_in_classDecl4923( FOLLOW_RBRACE_in_classDecl4923_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_INCLUDE_in_inc4953_bits[]	= { ANTLR_UINT64_LIT(0x0000010000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_INCLUDE_in_inc4953( FOLLOW_INCLUDE_in_inc4953_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_STRING_in_inc4955_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_STRING_in_inc4955( FOLLOW_STRING_in_inc4955_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_function_in_program5001_bits[]	= { ANTLR_UINT64_LIT(0x00004E000A1002A2) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_function_in_program5001( FOLLOW_function_in_program5001_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_structDecl_in_program5023_bits[]	= { ANTLR_UINT64_LIT(0x00004E000A1002A2) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_structDecl_in_program5023( FOLLOW_structDecl_in_program5023_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_classDecl_in_program5043_bits[]	= { ANTLR_UINT64_LIT(0x00004E000A1002A2) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_classDecl_in_program5043( FOLLOW_classDecl_in_program5043_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_inc_in_program5064_bits[]	= { ANTLR_UINT64_LIT(0x00004E000A1002A2) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_inc_in_program5064( FOLLOW_inc_in_program5064_bits, 1 );



/* =========================================================================
 * DFA tables for the parser
 */
/** Static dfa state tables for Cyclic dfa:
 *    511:1: instructionScalar returns [scripting::instruction* node] : ( declaration | assignment );
 */
static const ANTLR_INT32 dfa29_eot[13] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR_INT32 dfa29_eof[13] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR_INT32 dfa29_min[13] =
    {
	4, 23, 23, 23, 23, 23, 23, 23, -1, 4, -1, 23, 38
    };
static const ANTLR_INT32 dfa29_max[13] =
    {
	57, 30, 30, 30, 30, 30, 30, 30, -1, 57, -1, 30, 38
    };
static const ANTLR_INT32 dfa29_accept[13] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, 2, -1, 1, -1, -1
    };
static const ANTLR_INT32 dfa29_special[13] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
static const ANTLR_INT32* dfa29_T_empty	 =   NULL;

static const ANTLR_INT32 dfa29_T0[] =
    {
	10, -1, -1, -1, -1, 8, 8, 9
    };
static const ANTLR_INT32 dfa29_T1[] =
    {
	11
    };
static const ANTLR_INT32 dfa29_T2[] =
    {
	8, 8, 8, 8, -1, -1, -1, -1, -1, -1, 8, 8, -1, -1, -1, 8, 8, -1, -1, 8, 
	-1, -1, 8, 8, -1, 8, -1, 8, -1, -1, -1, -1, -1, -1, 11, -1, 8, 8, -1, 8, 
	-1, -1, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8
    };
static const ANTLR_INT32 dfa29_T3[] =
    {
	10, -1, -1, -1, -1, -1, 8, 12
    };
static const ANTLR_INT32 dfa29_T4[] =
    {
	8, 7, 8, 5, -1, -1, -1, -1, -1, -1, 8, 8, -1, -1, -1, 8, 4, -1, -1, 8, 
	-1, -1, 8, 3, -1, 8, -1, 8, -1, -1, -1, -1, -1, -1, -1, -1, 8, 6, -1, 1, 
	-1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8
    };


/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR_INT32 * const dfa29_transitions[] =
{
    dfa29_T4, dfa29_T0, dfa29_T0, dfa29_T0, dfa29_T0, dfa29_T0, dfa29_T0, 
    dfa29_T0, NULL, dfa29_T2, NULL, dfa29_T3, dfa29_T1
};


/* Declare tracking structure for Cyclic DFA 29
 */
class WNScriptASTParserCyclicDFA29 : public CyclicDFA< WNScriptASTParserImplTraits, WNScriptASTParser >, public WNScriptASTParserTokens
{
public:
	typedef CyclicDFA< WNScriptASTParserImplTraits, WNScriptASTParser >  BaseType;
	typedef BaseType::ContextType CtxType;

private:
	

public:
	WNScriptASTParserCyclicDFA29( ANTLR_INT32	decisionNumber
					, const ANTLR_UCHAR*	description
					, const ANTLR_INT32* const	eot
					, const ANTLR_INT32* const	eof
					, const ANTLR_INT32* const	min
					, const ANTLR_INT32* const	max
					, const ANTLR_INT32* const	accept
					, const ANTLR_INT32* const	special
					, const ANTLR_INT32* const *const	transition)
					:BaseType( decisionNumber, description, eot, eof, min, max, accept,
								special, transition )
	{
		
	}

};

static WNScriptASTParserCyclicDFA29  cdfa29(
	    29,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const ANTLR_UCHAR*)"511:1: instructionScalar returns [scripting::instruction* node] : ( declaration | assignment );",
	    dfa29_eot,	    /* EOT table			    */
	    dfa29_eof,	    /* EOF table			    */
	    dfa29_min,	    /* Minimum tokens for each state    */
	    dfa29_max,	    /* Maximum tokens for each state    */
	    dfa29_accept,	/* Accept table			    */
	    dfa29_special,	/* Special transition states	    */
	    dfa29_transitions	/* Table of transition tables	    */

	);


/* End of Cyclic DFA 29
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 629:17: ( (a= declaration SEMICOLON ) | (b= function ) | ( VIRTUAL h= function ) | ( OVERRIDE i= function ) )*
 */
static const ANTLR_INT32 dfa41_eot[16] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR_INT32 dfa41_eof[16] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR_INT32 dfa41_min[16] =
    {
	5, -1, 23, 23, 23, 23, 23, 23, 23, -1, -1, 38, 8, 23, -1, -1
    };
static const ANTLR_INT32 dfa41_max[16] =
    {
	46, -1, 30, 30, 30, 30, 30, 30, 30, -1, -1, 38, 64, 30, -1, -1
    };
static const ANTLR_INT32 dfa41_accept[16] =
    {
	-1, 5, -1, -1, -1, -1, -1, -1, -1, 3, 4, -1, -1, -1, 1, 2
    };
static const ANTLR_INT32 dfa41_special[16] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
static const ANTLR_INT32* dfa41_T_empty	 =   NULL;

static const ANTLR_INT32 dfa41_T0[] =
    {
	12, -1, -1, -1, -1, -1, -1, 11
    };
static const ANTLR_INT32 dfa41_T1[] =
    {
	14, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, 14
    };
static const ANTLR_INT32 dfa41_T2[] =
    {
	8, -1, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5, -1, -1, -1, 
	-1, -1, -1, 4, -1, -1, -1, -1, -1, 10, 1, -1, -1, -1, -1, -1, -1, 7, -1, 
	2, -1, 9, 3
    };
static const ANTLR_INT32 dfa41_T3[] =
    {
	13
    };


/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR_INT32 * const dfa41_transitions[] =
{
    dfa41_T2, NULL, dfa41_T0, dfa41_T0, dfa41_T0, dfa41_T0, dfa41_T0, dfa41_T0, 
    dfa41_T0, NULL, NULL, dfa41_T3, dfa41_T1, dfa41_T0, NULL, NULL
};


/* Declare tracking structure for Cyclic DFA 41
 */
class WNScriptASTParserCyclicDFA41 : public CyclicDFA< WNScriptASTParserImplTraits, WNScriptASTParser >, public WNScriptASTParserTokens
{
public:
	typedef CyclicDFA< WNScriptASTParserImplTraits, WNScriptASTParser >  BaseType;
	typedef BaseType::ContextType CtxType;

private:
	

public:
	WNScriptASTParserCyclicDFA41( ANTLR_INT32	decisionNumber
					, const ANTLR_UCHAR*	description
					, const ANTLR_INT32* const	eot
					, const ANTLR_INT32* const	eof
					, const ANTLR_INT32* const	min
					, const ANTLR_INT32* const	max
					, const ANTLR_INT32* const	accept
					, const ANTLR_INT32* const	special
					, const ANTLR_INT32* const *const	transition)
					:BaseType( decisionNumber, description, eot, eof, min, max, accept,
								special, transition )
	{
		
	}

};

static WNScriptASTParserCyclicDFA41  cdfa41(
	    41,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const ANTLR_UCHAR*)"()* loopback of 629:17: ( (a= declaration SEMICOLON ) | (b= function ) | ( VIRTUAL h= function ) | ( OVERRIDE i= function ) )*",
	    dfa41_eot,	    /* EOT table			    */
	    dfa41_eof,	    /* EOF table			    */
	    dfa41_min,	    /* Minimum tokens for each state    */
	    dfa41_max,	    /* Maximum tokens for each state    */
	    dfa41_accept,	/* Accept table			    */
	    dfa41_special,	/* Special transition states	    */
	    dfa41_transitions	/* Table of transition tables	    */

	);


/* End of Cyclic DFA 41
 * ---------------------
 */ 
/* =========================================================================
 * End of DFA tables for the parser
 */

/* ==============================================
 * Parsing rules
 */
/**
 * $ANTLR start scalarType
 * C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:242:1: scalarType returns [scripting::type* node] : ( TYPE | VOID_TYPE | INT_TYPE | FLOAT_TYPE | CHAR_TYPE | STRING_TYPE | BOOL_TYPE );
 */
scripting::type*
WNScriptASTParser::scalarType()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    scripting::type* node;


    const ImplTraits::CommonTokenType* TYPE1 = NULL;
    const ImplTraits::CommonTokenType* VOID_TYPE2 = NULL;
    const ImplTraits::CommonTokenType* INT_TYPE3 = NULL;
    const ImplTraits::CommonTokenType* FLOAT_TYPE4 = NULL;
    const ImplTraits::CommonTokenType* CHAR_TYPE5 = NULL;
    const ImplTraits::CommonTokenType* STRING_TYPE6 = NULL;
    const ImplTraits::CommonTokenType* BOOL_TYPE7 = NULL;

    /* Initialize rule variables
     */
     


        node = wn_nullptr;


 
    {
        {
            //  C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:246:5: ( TYPE | VOID_TYPE | INT_TYPE | FLOAT_TYPE | CHAR_TYPE | STRING_TYPE | BOOL_TYPE )

            ANTLR_UINT32 alt1;

            alt1=7;

            switch ( this->LA(1) )
            {
            case TYPE:
            	{
            		alt1=1;
            	}
                break;
            case VOID_TYPE:
            	{
            		alt1=2;
            	}
                break;
            case INT_TYPE:
            	{
            		alt1=3;
            	}
                break;
            case FLOAT_TYPE:
            	{
            		alt1=4;
            	}
                break;
            case CHAR_TYPE:
            	{
            		alt1=5;
            	}
                break;
            case STRING_TYPE:
            	{
            		alt1=6;
            	}
                break;
            case BOOL_TYPE:
            	{
            		alt1=7;
            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 1 );
                ex->set_state( 0 );


                goto rulescalarTypeEx;

            }

            switch (alt1)
            {
        	case 1:
        	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:246:9: TYPE
        	    {
        	        TYPE1 =  this->matchToken(TYPE, &FOLLOW_TYPE_in_scalarType1153);
        	        if  (this->hasException())
        	        {
        	            goto rulescalarTypeEx;
        	        }


        	        {
        	             node = m_allocator->make_allocated<scripting::type>(m_allocator, (TYPE1->getText()).c_str()); SET_LOCATION(node, TYPE1); 
        	        }


        	    }
        	    break;
        	case 2:
        	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:247:9: VOID_TYPE
        	    {
        	        VOID_TYPE2 =  this->matchToken(VOID_TYPE, &FOLLOW_VOID_TYPE_in_scalarType1168);
        	        if  (this->hasException())
        	        {
        	            goto rulescalarTypeEx;
        	        }


        	        {
        	             node = m_allocator->make_allocated<scripting::type>(m_allocator, scripting::type_classification::void_type); SET_LOCATION(node, VOID_TYPE2); 
        	        }


        	    }
        	    break;
        	case 3:
        	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:248:9: INT_TYPE
        	    {
        	        INT_TYPE3 =  this->matchToken(INT_TYPE, &FOLLOW_INT_TYPE_in_scalarType1180);
        	        if  (this->hasException())
        	        {
        	            goto rulescalarTypeEx;
        	        }


        	        {
        	             node = m_allocator->make_allocated<scripting::type>(m_allocator, scripting::type_classification::int_type); SET_LOCATION(node, INT_TYPE3); 
        	        }


        	    }
        	    break;
        	case 4:
        	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:249:9: FLOAT_TYPE
        	    {
        	        FLOAT_TYPE4 =  this->matchToken(FLOAT_TYPE, &FOLLOW_FLOAT_TYPE_in_scalarType1192);
        	        if  (this->hasException())
        	        {
        	            goto rulescalarTypeEx;
        	        }


        	        {
        	             node = m_allocator->make_allocated<scripting::type>(m_allocator, scripting::type_classification::float_type); SET_LOCATION(node, FLOAT_TYPE4); 
        	        }


        	    }
        	    break;
        	case 5:
        	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:250:9: CHAR_TYPE
        	    {
        	        CHAR_TYPE5 =  this->matchToken(CHAR_TYPE, &FOLLOW_CHAR_TYPE_in_scalarType1204);
        	        if  (this->hasException())
        	        {
        	            goto rulescalarTypeEx;
        	        }


        	        {
        	             node = m_allocator->make_allocated<scripting::type>(m_allocator, scripting::type_classification::char_type); SET_LOCATION(node, CHAR_TYPE5); 
        	        }


        	    }
        	    break;
        	case 6:
        	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:251:9: STRING_TYPE
        	    {
        	        STRING_TYPE6 =  this->matchToken(STRING_TYPE, &FOLLOW_STRING_TYPE_in_scalarType1216);
        	        if  (this->hasException())
        	        {
        	            goto rulescalarTypeEx;
        	        }


        	        {
        	             node = m_allocator->make_allocated<scripting::type>(m_allocator, scripting::type_classification::string_type); SET_LOCATION(node, STRING_TYPE6); 
        	        }


        	    }
        	    break;
        	case 7:
        	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:252:9: BOOL_TYPE
        	    {
        	        BOOL_TYPE7 =  this->matchToken(BOOL_TYPE, &FOLLOW_BOOL_TYPE_in_scalarType1228);
        	        if  (this->hasException())
        	        {
        	            goto rulescalarTypeEx;
        	        }


        	        {
        	             node = m_allocator->make_allocated<scripting::type>(m_allocator, scripting::type_classification::bool_type); SET_LOCATION(node, BOOL_TYPE7); 
        	        }


        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto rulescalarTypeEx; /* Prevent compiler warnings */
    rulescalarTypeEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}
/* $ANTLR end scalarType */

/**
 * $ANTLR start type
 * C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:255:1: type returns [scripting::type* node] : scalarType ( LSQBRACKET RSQBRACKET )* ;
 */
scripting::type*
WNScriptASTParser::type()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    scripting::type* node;


    const ImplTraits::CommonTokenType* RSQBRACKET9 = NULL;
    scripting::type* scalarType8;
    /* Initialize rule variables
     */
     


        node = wn_nullptr;


 
    {
        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:259:5: ( scalarType ( LSQBRACKET RSQBRACKET )* )
        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:259:10: scalarType ( LSQBRACKET RSQBRACKET )*
        {
            this->followPush(FOLLOW_scalarType_in_type1261);
            scalarType8=scalarType();

            this->followPop();
            if  (this->hasException())
            {
                goto ruletypeEx;
            }


            {
                 node = scalarType8
                ; SET_LOCATION_FROM_NODE(node, scalarType8
                ); 
            }


            // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:260:17: ( LSQBRACKET RSQBRACKET )*

            for (;;)
            {
                int alt2=2;
                switch ( this->LA(1) )
                {
                case LSQBRACKET:
                	{
                		alt2=1;
                	}
                    break;

                }

                switch (alt2)
                {
            	case 1:
            	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:260:18: LSQBRACKET RSQBRACKET
            	    {
            	         this->matchToken(LSQBRACKET, &FOLLOW_LSQBRACKET_in_type1282);
            	        if  (this->hasException())
            	        {
            	            goto ruletypeEx;
            	        }


            	        RSQBRACKET9 =  this->matchToken(RSQBRACKET, &FOLLOW_RSQBRACKET_in_type1284);
            	        if  (this->hasException())
            	        {
            	            goto ruletypeEx;
            	        }


            	        {
            	             node->add_array_level(); SET_END_LOCATION(node, RSQBRACKET9); 
            	        }


            	    }
            	    break;

            	default:
            	    goto loop2;	/* break out of the loop */
            	    break;
                }
            }
            loop2: ; /* Jump out to here if this rule does not match */


        }

    }
    // This is where rules clean up and exit
    //
    goto ruletypeEx; /* Prevent compiler warnings */
    ruletypeEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}
/* $ANTLR end type */

/**
 * $ANTLR start param
 * C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:263:1: param returns [scripting::parameter* node] : type ID ;
 */
scripting::parameter*
WNScriptASTParser::param()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    scripting::parameter* node;


    const ImplTraits::CommonTokenType* ID11 = NULL;
    scripting::type* type10;
    /* Initialize rule variables
     */
     


        node = wn_nullptr;


 
    {
        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:267:5: ( type ID )
        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:267:10: type ID
        {
            this->followPush(FOLLOW_type_in_param1316);
            type10=type();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleparamEx;
            }


            ID11 =  this->matchToken(ID, &FOLLOW_ID_in_param1318);
            if  (this->hasException())
            {
                goto ruleparamEx;
            }


            {
                node = m_allocator->make_allocated<scripting::parameter>(m_allocator, type10
                , (ID11->getText()).c_str()); SET_LOCATION_FROM_NODE(node, 
                type10
                ); SET_END_LOCATION(node, ID11); 
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleparamEx; /* Prevent compiler warnings */
    ruleparamEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}
/* $ANTLR end param */

/**
 * $ANTLR start paramList
 * C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:270:1: paramList returns [scripting::parameter_list* node] : a= param ( COMMA b= param )* ;
 */
scripting::parameter_list*
WNScriptASTParser::paramList()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    scripting::parameter_list* node;


    scripting::parameter* a;
    scripting::parameter* b;
    /* Initialize rule variables
     */
     


        node = wn_nullptr;


 
    {
        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:274:5: (a= param ( COMMA b= param )* )
        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:274:10: a= param ( COMMA b= param )*
        {
            this->followPush(FOLLOW_param_in_paramList1350);
            a=param();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleparamListEx;
            }


            {
                 node = m_allocator->make_allocated<scripting::parameter_list>(m_allocator, a
                ); SET_LOCATION_FROM_NODE(node, a
                ); 
            }


            // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:275:9: ( COMMA b= param )*

            for (;;)
            {
                int alt3=2;
                switch ( this->LA(1) )
                {
                case COMMA:
                	{
                		alt3=1;
                	}
                    break;

                }

                switch (alt3)
                {
            	case 1:
            	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:275:10: COMMA b= param
            	    {
            	         this->matchToken(COMMA, &FOLLOW_COMMA_in_paramList1363);
            	        if  (this->hasException())
            	        {
            	            goto ruleparamListEx;
            	        }


            	        this->followPush(FOLLOW_param_in_paramList1367);
            	        b=param();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleparamListEx;
            	        }


            	        {
            	             node
            	            ->add_parameter(b
            	            ); SET_END_LOCATION_FROM_NODE(node, b
            	            ); 
            	        }


            	    }
            	    break;

            	default:
            	    goto loop3;	/* break out of the loop */
            	    break;
                }
            }
            loop3: ; /* Jump out to here if this rule does not match */


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleparamListEx; /* Prevent compiler warnings */
    ruleparamListEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}
/* $ANTLR end paramList */

/**
 * $ANTLR start parameterList
 * C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:278:1: parameterList returns [scripting::parameter_list* node] : ( LBRACKET paramList RBRACKET | LBRACKET RBRACKET );
 */
scripting::parameter_list*
WNScriptASTParser::parameterList()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    scripting::parameter_list* node;


    const ImplTraits::CommonTokenType* LBRACKET13 = NULL;
    const ImplTraits::CommonTokenType* RBRACKET14 = NULL;
    scripting::parameter_list* paramList12;
    /* Initialize rule variables
     */
     


        node = wn_nullptr;


 
    {
        {
            //  C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:282:5: ( LBRACKET paramList RBRACKET | LBRACKET RBRACKET )

            ANTLR_UINT32 alt4;

            alt4=2;

            switch ( this->LA(1) )
            {
            case LBRACKET:
            	{
            		switch ( this->LA(2) )
            		{
            		case RBRACKET:
            			{
            				alt4=2;
            			}
            		    break;
            		case BOOL_TYPE:
            		case CHAR_TYPE:
            		case FLOAT_TYPE:
            		case INT_TYPE:
            		case STRING_TYPE:
            		case TYPE:
            		case VOID_TYPE:
            			{
            				alt4=1;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 4 );
            		    ex->set_state( 1 );


            		    goto ruleparameterListEx;

            		}

            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 4 );
                ex->set_state( 0 );


                goto ruleparameterListEx;

            }

            switch (alt4)
            {
        	case 1:
        	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:282:10: LBRACKET paramList RBRACKET
        	    {
        	        LBRACKET13 =  this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_parameterList1399);
        	        if  (this->hasException())
        	        {
        	            goto ruleparameterListEx;
        	        }


        	        this->followPush(FOLLOW_paramList_in_parameterList1401);
        	        paramList12=paramList();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleparameterListEx;
        	        }


        	        RBRACKET14 =  this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_parameterList1403);
        	        if  (this->hasException())
        	        {
        	            goto ruleparameterListEx;
        	        }


        	        {
        	             node = paramList12
        	            ; SET_LOCATION(node, LBRACKET13); SET_END_LOCATION(node, RBRACKET14); 
        	        }


        	    }
        	    break;
        	case 2:
        	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:283:14: LBRACKET RBRACKET
        	    {
        	         this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_parameterList1420);
        	        if  (this->hasException())
        	        {
        	            goto ruleparameterListEx;
        	        }


        	         this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_parameterList1422);
        	        if  (this->hasException())
        	        {
        	            goto ruleparameterListEx;
        	        }


        	        {
        	             node = wn_nullptr; 
        	        }


        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto ruleparameterListEx; /* Prevent compiler warnings */
    ruleparameterListEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}
/* $ANTLR end parameterList */

/**
 * $ANTLR start assign_type
 * C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:287:1: assign_type returns [scripting::assign_type node] : ( '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '<==' );
 */
scripting::assign_type
WNScriptASTParser::assign_type()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    scripting::assign_type node;


    /* Initialize rule variables
     */
     


        node = scripting::assign_type::equal;


 
    {
        {
            //  C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:291:5: ( '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '<==' )

            ANTLR_UINT32 alt5;

            alt5=7;

            switch ( this->LA(1) )
            {
            case 64:
            	{
            		alt5=1;
            	}
                break;
            case 56:
            	{
            		alt5=2;
            	}
                break;
            case 58:
            	{
            		alt5=3;
            	}
                break;
            case 54:
            	{
            		alt5=4;
            	}
                break;
            case 61:
            	{
            		alt5=5;
            	}
                break;
            case 51:
            	{
            		alt5=6;
            	}
                break;
            case CHOWN:
            	{
            		alt5=7;
            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 5 );
                ex->set_state( 0 );


                goto ruleassign_typeEx;

            }

            switch (alt5)
            {
        	case 1:
        	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:291:10: '='
        	    {
        	         this->matchToken(64, &FOLLOW_64_in_assign_type1458);
        	        if  (this->hasException())
        	        {
        	            goto ruleassign_typeEx;
        	        }


        	        {
        	             node = scripting::assign_type::equal; 
        	        }


        	    }
        	    break;
        	case 2:
        	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:292:10: '+='
        	    {
        	         this->matchToken(56, &FOLLOW_56_in_assign_type1472);
        	        if  (this->hasException())
        	        {
        	            goto ruleassign_typeEx;
        	        }


        	        {
        	             node = scripting::assign_type::add_equal; 
        	        }


        	    }
        	    break;
        	case 3:
        	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:293:10: '-='
        	    {
        	         this->matchToken(58, &FOLLOW_58_in_assign_type1485);
        	        if  (this->hasException())
        	        {
        	            goto ruleassign_typeEx;
        	        }


        	        {
        	             node = scripting::assign_type::sub_equal; 
        	        }


        	    }
        	    break;
        	case 4:
        	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:294:10: '*='
        	    {
        	         this->matchToken(54, &FOLLOW_54_in_assign_type1498);
        	        if  (this->hasException())
        	        {
        	            goto ruleassign_typeEx;
        	        }


        	        {
        	             node = scripting::assign_type::mult_equal; 
        	        }


        	    }
        	    break;
        	case 5:
        	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:295:10: '/='
        	    {
        	         this->matchToken(61, &FOLLOW_61_in_assign_type1511);
        	        if  (this->hasException())
        	        {
        	            goto ruleassign_typeEx;
        	        }


        	        {
        	             node = scripting::assign_type::div_equal; 
        	        }


        	    }
        	    break;
        	case 6:
        	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:296:10: '%='
        	    {
        	         this->matchToken(51, &FOLLOW_51_in_assign_type1524);
        	        if  (this->hasException())
        	        {
        	            goto ruleassign_typeEx;
        	        }


        	        {
        	             node = scripting::assign_type::mod_equal; 
        	        }


        	    }
        	    break;
        	case 7:
        	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:297:10: '<=='
        	    {
        	         this->matchToken(CHOWN, &FOLLOW_CHOWN_in_assign_type1537);
        	        if  (this->hasException())
        	        {
        	            goto ruleassign_typeEx;
        	        }


        	        {
        	             node = scripting::assign_type::change_owner; 
        	        }


        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto ruleassign_typeEx; /* Prevent compiler warnings */
    ruleassign_typeEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}
/* $ANTLR end assign_type */

/**
 * $ANTLR start lvalue
 * C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:300:1: lvalue returns [scripting::lvalue* node] : unary_ex ;
 */
scripting::lvalue*
WNScriptASTParser::lvalue()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    scripting::lvalue* node;


    scripting::expression* unary_ex15;
    /* Initialize rule variables
     */
     


        node = wn_nullptr;


 
    {
        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:304:5: ( unary_ex )
        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:304:10: unary_ex
        {
            this->followPush(FOLLOW_unary_ex_in_lvalue1567);
            unary_ex15=unary_ex();

            this->followPop();
            if  (this->hasException())
            {
                goto rulelvalueEx;
            }


            {
                 node = m_allocator->make_allocated<scripting::lvalue>(m_allocator, unary_ex15
                ); SET_LOCATION_FROM_NODE(node, unary_ex15
                ); 
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto rulelvalueEx; /* Prevent compiler warnings */
    rulelvalueEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}
/* $ANTLR end lvalue */

/**
 * $ANTLR start arglist
 * C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:307:1: arglist returns [scripting::arg_list* node] : ( (a= expr ) | ( '<==' b= expr ) ) ( ',' ( ( '<==' c= expr ) | (d= expr ) |) )* ;
 */
scripting::arg_list*
WNScriptASTParser::arglist()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    scripting::arg_list* node;


    scripting::expression* a;
    scripting::expression* b;
    scripting::expression* c;
    scripting::expression* d;
    /* Initialize rule variables
     */
     


        node = m_allocator->make_allocated<scripting::arg_list>(m_allocator);


 
    {
        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:311:9: ( ( (a= expr ) | ( '<==' b= expr ) ) ( ',' ( ( '<==' c= expr ) | (d= expr ) |) )* )
        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:311:13: ( (a= expr ) | ( '<==' b= expr ) ) ( ',' ( ( '<==' c= expr ) | (d= expr ) |) )*
        {
            // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:311:13: ( (a= expr ) | ( '<==' b= expr ) )
            {
                int alt6=2;
                switch ( this->LA(1) )
                {
                case BOOL:
                case BOOL_TYPE:
                case CHAR:
                case CHAR_TYPE:
                case DOUBDEC:
                case DOUBINC:
                case FLOAT:
                case FLOAT_TYPE:
                case ID:
                case INT:
                case INT_TYPE:
                case LBRACKET:
                case NULLTOK:
                case STRING:
                case STRING_TYPE:
                case TYPE:
                case VOID_TYPE:
                case 57:
                	{
                		alt6=1;
                	}
                    break;
                case CHOWN:
                	{
                		alt6=2;
                	}
                    break;

                default:
                    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 6 );
                    ex->set_state( 0 );


                    goto rulearglistEx;

                }

                switch (alt6)
                {
            	case 1:
            	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:312:21: (a= expr )
            	    {
            	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:312:21: (a= expr )
            	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:312:22: a= expr
            	        {
            	            this->followPush(FOLLOW_expr_in_arglist1625);
            	            a=expr();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulearglistEx;
            	            }


            	            {
            	                 node->add_expression(a
            	                ); SET_LOCATION_FROM_NODE(node, a
            	                ); 
            	            }


            	        }


            	    }
            	    break;
            	case 2:
            	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:313:21: ( '<==' b= expr )
            	    {
            	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:313:21: ( '<==' b= expr )
            	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:313:22: '<==' b= expr
            	        {
            	             this->matchToken(CHOWN, &FOLLOW_CHOWN_in_arglist1651);
            	            if  (this->hasException())
            	            {
            	                goto rulearglistEx;
            	            }


            	            this->followPush(FOLLOW_expr_in_arglist1655);
            	            b=expr();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulearglistEx;
            	            }


            	            {
            	                node->add_expression(b
            	                , wn_true); SET_LOCATION_FROM_NODE(node, b
            	                ); 
            	            }


            	        }


            	    }
            	    break;

                }
            }

            // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:316:13: ( ',' ( ( '<==' c= expr ) | (d= expr ) |) )*

            for (;;)
            {
                int alt8=2;
                switch ( this->LA(1) )
                {
                case COMMA:
                	{
                		alt8=1;
                	}
                    break;

                }

                switch (alt8)
                {
            	case 1:
            	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:316:14: ',' ( ( '<==' c= expr ) | (d= expr ) |)
            	    {
            	         this->matchToken(COMMA, &FOLLOW_COMMA_in_arglist1688);
            	        if  (this->hasException())
            	        {
            	            goto rulearglistEx;
            	        }


            	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:317:17: ( ( '<==' c= expr ) | (d= expr ) |)
            	        {
            	            int alt7=3;
            	            switch ( this->LA(1) )
            	            {
            	            case CHOWN:
            	            	{
            	            		alt7=1;
            	            	}
            	                break;
            	            case BOOL:
            	            case BOOL_TYPE:
            	            case CHAR:
            	            case CHAR_TYPE:
            	            case DOUBDEC:
            	            case DOUBINC:
            	            case FLOAT:
            	            case FLOAT_TYPE:
            	            case ID:
            	            case INT:
            	            case INT_TYPE:
            	            case LBRACKET:
            	            case NULLTOK:
            	            case STRING:
            	            case STRING_TYPE:
            	            case TYPE:
            	            case VOID_TYPE:
            	            case 57:
            	            	{
            	            		alt7=2;
            	            	}
            	                break;
            	            case COMMA:
            	            case RBRACKET:
            	            	{
            	            		alt7=3;
            	            	}
            	                break;

            	            default:
            	                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            	                ex->set_decisionNum( 7 );
            	                ex->set_state( 0 );


            	                goto rulearglistEx;

            	            }

            	            switch (alt7)
            	            {
            	        	case 1:
            	        	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:318:21: ( '<==' c= expr )
            	        	    {
            	        	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:318:21: ( '<==' c= expr )
            	        	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:318:23: '<==' c= expr
            	        	        {
            	        	             this->matchToken(CHOWN, &FOLLOW_CHOWN_in_arglist1730);
            	        	            if  (this->hasException())
            	        	            {
            	        	                goto rulearglistEx;
            	        	            }


            	        	            this->followPush(FOLLOW_expr_in_arglist1734);
            	        	            c=expr();

            	        	            this->followPop();
            	        	            if  (this->hasException())
            	        	            {
            	        	                goto rulearglistEx;
            	        	            }


            	        	            {
            	        	                 node->add_expression(c
            	        	                ); SET_END_LOCATION_FROM_NODE(node, c
            	        	                ); 
            	        	            }


            	        	        }


            	        	    }
            	        	    break;
            	        	case 2:
            	        	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:319:21: (d= expr )
            	        	    {
            	        	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:319:21: (d= expr )
            	        	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:319:23: d= expr
            	        	        {
            	        	            this->followPush(FOLLOW_expr_in_arglist1766);
            	        	            d=expr();

            	        	            this->followPop();
            	        	            if  (this->hasException())
            	        	            {
            	        	                goto rulearglistEx;
            	        	            }


            	        	            {
            	        	                 node->add_expression(d
            	        	                , wn_true); SET_END_LOCATION_FROM_NODE(node, d
            	        	                ); 
            	        	            }


            	        	        }


            	        	    }
            	        	    break;
            	        	case 3:
            	        	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:320:17: 
            	        	    {
            	        	    }
            	        	    break;

            	            }
            	        }

            	    }
            	    break;

            	default:
            	    goto loop8;	/* break out of the loop */
            	    break;
                }
            }
            loop8: ; /* Jump out to here if this rule does not match */


        }

    }
    // This is where rules clean up and exit
    //
    goto rulearglistEx; /* Prevent compiler warnings */
    rulearglistEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}
/* $ANTLR end arglist */

/**
 * $ANTLR start expr
 * C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:324:1: expr returns [scripting::expression* node] : cond_ex ;
 */
scripting::expression*
WNScriptASTParser::expr()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    scripting::expression* node;


    scripting::expression* cond_ex16;
    /* Initialize rule variables
     */
     


        node = wn_nullptr;


 
    {
        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:328:9: ( cond_ex )
        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:328:14: cond_ex
        {
            this->followPush(FOLLOW_cond_ex_in_expr1841);
            cond_ex16=cond_ex();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleexprEx;
            }


            {
                 node = cond_ex16
                ; 
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleexprEx; /* Prevent compiler warnings */
    ruleexprEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}
/* $ANTLR end expr */

/**
 * $ANTLR start cond_ex
 * C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:331:1: cond_ex returns [scripting::expression* node] : or_ex ( '?' b= expr ':' c= cond_ex )? ;
 */
scripting::expression*
WNScriptASTParser::cond_ex()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    scripting::expression* node;


    scripting::expression* b;
    scripting::expression* c;
    scripting::expression* or_ex17;
    /* Initialize rule variables
     */
     


        node = wn_nullptr;


 
    {
        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:335:9: ( or_ex ( '?' b= expr ':' c= cond_ex )? )
        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:335:14: or_ex ( '?' b= expr ':' c= cond_ex )?
        {
            this->followPush(FOLLOW_or_ex_in_cond_ex1879);
            or_ex17=or_ex();

            this->followPop();
            if  (this->hasException())
            {
                goto rulecond_exEx;
            }


            {
                 node = or_ex17
                ; 
            }


            // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:337:17: ( '?' b= expr ':' c= cond_ex )?
            {
                int alt9=2;
                switch ( this->LA(1) )
                {
                    case 68:
                    	{
                    		alt9=1;
                    	}
                        break;
                }

                switch (alt9)
                {
            	case 1:
            	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:337:18: '?' b= expr ':' c= cond_ex
            	    {
            	         this->matchToken(68, &FOLLOW_68_in_cond_ex1902);
            	        if  (this->hasException())
            	        {
            	            goto rulecond_exEx;
            	        }


            	        this->followPush(FOLLOW_expr_in_cond_ex1906);
            	        b=expr();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulecond_exEx;
            	        }


            	         this->matchToken(COLON, &FOLLOW_COLON_in_cond_ex1908);
            	        if  (this->hasException())
            	        {
            	            goto rulecond_exEx;
            	        }


            	        this->followPush(FOLLOW_cond_ex_in_cond_ex1912);
            	        c=cond_ex();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulecond_exEx;
            	        }


            	        {
            	             node = m_allocator->make_allocated<scripting::cond_expression>(m_allocator, node, b
            	            , c
            	            );  SET_LOCATION_FROM_NODE(node, or_ex17
            	            ); SET_END_LOCATION_FROM_NODE(node, c
            	            ); 
            	        }


            	    }
            	    break;

                }
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto rulecond_exEx; /* Prevent compiler warnings */
    rulecond_exEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}
/* $ANTLR end cond_ex */

/**
 * $ANTLR start or_ex
 * C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:340:1: or_ex returns [scripting::expression* node] : a= and_ex ( '||' b= and_ex )* ;
 */
scripting::expression*
WNScriptASTParser::or_ex()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    scripting::expression* node;


    scripting::expression* a;
    scripting::expression* b;
    /* Initialize rule variables
     */
     


        node = wn_nullptr;


 
    {
        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:344:9: (a= and_ex ( '||' b= and_ex )* )
        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:344:14: a= and_ex ( '||' b= and_ex )*
        {
            this->followPush(FOLLOW_and_ex_in_or_ex1959);
            a=and_ex();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleor_exEx;
            }


            {
                 node = a
                ; 
            }


            // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:345:13: ( '||' b= and_ex )*

            for (;;)
            {
                int alt10=2;
                switch ( this->LA(1) )
                {
                case 69:
                	{
                		alt10=1;
                	}
                    break;

                }

                switch (alt10)
                {
            	case 1:
            	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:345:14: '||' b= and_ex
            	    {
            	         this->matchToken(69, &FOLLOW_69_in_or_ex1976);
            	        if  (this->hasException())
            	        {
            	            goto ruleor_exEx;
            	        }


            	        this->followPush(FOLLOW_and_ex_in_or_ex1980);
            	        b=and_ex();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleor_exEx;
            	        }


            	        {
            	             node = m_allocator->make_allocated<scripting::short_circuit_expression>(m_allocator, scripting::short_circuit_type::or_operator, node, b
            	            ); SET_LOCATION_FROM_NODE(node, a
            	            ); SET_END_LOCATION_FROM_NODE(node, b
            	            ); 
            	        }


            	    }
            	    break;

            	default:
            	    goto loop10;	/* break out of the loop */
            	    break;
                }
            }
            loop10: ; /* Jump out to here if this rule does not match */


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleor_exEx; /* Prevent compiler warnings */
    ruleor_exEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}
/* $ANTLR end or_ex */

/**
 * $ANTLR start and_ex
 * C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:348:1: and_ex returns [scripting::expression* node] : a= eq_ex ( '&&' b= eq_ex )* ;
 */
scripting::expression*
WNScriptASTParser::and_ex()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    scripting::expression* node;


    scripting::expression* a;
    scripting::expression* b;
    /* Initialize rule variables
     */
     


        node = wn_nullptr;


 
    {
        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:352:9: (a= eq_ex ( '&&' b= eq_ex )* )
        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:352:14: a= eq_ex ( '&&' b= eq_ex )*
        {
            this->followPush(FOLLOW_eq_ex_in_and_ex2023);
            a=eq_ex();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleand_exEx;
            }


            {
                 node = a
                ; 
            }


            // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:353:13: ( '&&' b= eq_ex )*

            for (;;)
            {
                int alt11=2;
                switch ( this->LA(1) )
                {
                case 52:
                	{
                		alt11=1;
                	}
                    break;

                }

                switch (alt11)
                {
            	case 1:
            	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:353:14: '&&' b= eq_ex
            	    {
            	         this->matchToken(52, &FOLLOW_52_in_and_ex2040);
            	        if  (this->hasException())
            	        {
            	            goto ruleand_exEx;
            	        }


            	        this->followPush(FOLLOW_eq_ex_in_and_ex2044);
            	        b=eq_ex();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleand_exEx;
            	        }


            	        {
            	            node = m_allocator->make_allocated<scripting::short_circuit_expression>(m_allocator, scripting::short_circuit_type::and_operator, node, b
            	            ); SET_LOCATION_FROM_NODE(node, a
            	            ); SET_END_LOCATION_FROM_NODE(node, b
            	            ); 
            	        }


            	    }
            	    break;

            	default:
            	    goto loop11;	/* break out of the loop */
            	    break;
                }
            }
            loop11: ; /* Jump out to here if this rule does not match */


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleand_exEx; /* Prevent compiler warnings */
    ruleand_exEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}
/* $ANTLR end and_ex */

/**
 * $ANTLR start eq_ex
 * C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:355:1: eq_ex returns [scripting::expression* node] : a= rel_ex ( ( '==' b= rel_ex ) | ( '!=' c= rel_ex ) )* ;
 */
scripting::expression*
WNScriptASTParser::eq_ex()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    scripting::expression* node;


    scripting::expression* a;
    scripting::expression* b;
    scripting::expression* c;
    /* Initialize rule variables
     */
     


        node = wn_nullptr;


 
    {
        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:359:9: (a= rel_ex ( ( '==' b= rel_ex ) | ( '!=' c= rel_ex ) )* )
        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:359:14: a= rel_ex ( ( '==' b= rel_ex ) | ( '!=' c= rel_ex ) )*
        {
            this->followPush(FOLLOW_rel_ex_in_eq_ex2080);
            a=rel_ex();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleeq_exEx;
            }


            {
                 node = a
                ; 
            }


            // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:360:13: ( ( '==' b= rel_ex ) | ( '!=' c= rel_ex ) )*

            for (;;)
            {
                int alt12=3;
                switch ( this->LA(1) )
                {
                case 65:
                	{
                		alt12=1;
                	}
                    break;
                case 49:
                	{
                		alt12=2;
                	}
                    break;

                }

                switch (alt12)
                {
            	case 1:
            	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:361:17: ( '==' b= rel_ex )
            	    {
            	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:361:17: ( '==' b= rel_ex )
            	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:361:18: '==' b= rel_ex
            	        {
            	             this->matchToken(65, &FOLLOW_65_in_eq_ex2115);
            	            if  (this->hasException())
            	            {
            	                goto ruleeq_exEx;
            	            }


            	            this->followPush(FOLLOW_rel_ex_in_eq_ex2119);
            	            b=rel_ex();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleeq_exEx;
            	            }


            	            {
            	                node = m_allocator->make_allocated<scripting::binary_expression>(m_allocator, scripting::arithmetic_type::arithmetic_equal, node, b
            	                );  SET_LOCATION_FROM_NODE(node, a
            	                ); SET_END_LOCATION_FROM_NODE(node, b
            	                ); 
            	            }


            	        }


            	    }
            	    break;
            	case 2:
            	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:362:17: ( '!=' c= rel_ex )
            	    {
            	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:362:17: ( '!=' c= rel_ex )
            	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:362:18: '!=' c= rel_ex
            	        {
            	             this->matchToken(49, &FOLLOW_49_in_eq_ex2142);
            	            if  (this->hasException())
            	            {
            	                goto ruleeq_exEx;
            	            }


            	            this->followPush(FOLLOW_rel_ex_in_eq_ex2146);
            	            c=rel_ex();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleeq_exEx;
            	            }


            	            {
            	                node = m_allocator->make_allocated<scripting::binary_expression>(m_allocator, scripting::arithmetic_type::arithmetic_not_equal, node, c
            	                ); SET_LOCATION_FROM_NODE(node, a
            	                ); SET_END_LOCATION_FROM_NODE(node, c
            	                ); 
            	            }


            	        }


            	    }
            	    break;

            	default:
            	    goto loop12;	/* break out of the loop */
            	    break;
                }
            }
            loop12: ; /* Jump out to here if this rule does not match */


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleeq_exEx; /* Prevent compiler warnings */
    ruleeq_exEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}
/* $ANTLR end eq_ex */

/**
 * $ANTLR start rel_ex
 * C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:366:1: rel_ex returns [scripting::expression* node] : a= add_ex ( ( '<' b= add_ex ) | ( '>' c= add_ex ) | ( '<=' d= add_ex ) | ( '>=' e= add_ex ) )* ;
 */
scripting::expression*
WNScriptASTParser::rel_ex()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    scripting::expression* node;


    scripting::expression* a;
    scripting::expression* b;
    scripting::expression* c;
    scripting::expression* d;
    scripting::expression* e;
    /* Initialize rule variables
     */
     


        node = wn_nullptr;


 
    {
        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:370:9: (a= add_ex ( ( '<' b= add_ex ) | ( '>' c= add_ex ) | ( '<=' d= add_ex ) | ( '>=' e= add_ex ) )* )
        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:370:14: a= add_ex ( ( '<' b= add_ex ) | ( '>' c= add_ex ) | ( '<=' d= add_ex ) | ( '>=' e= add_ex ) )*
        {
            this->followPush(FOLLOW_add_ex_in_rel_ex2204);
            a=add_ex();

            this->followPop();
            if  (this->hasException())
            {
                goto rulerel_exEx;
            }


            {
                 node=a
                ; 
            }


            // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:371:13: ( ( '<' b= add_ex ) | ( '>' c= add_ex ) | ( '<=' d= add_ex ) | ( '>=' e= add_ex ) )*

            for (;;)
            {
                int alt13=5;
                switch ( this->LA(1) )
                {
                case 62:
                	{
                		alt13=1;
                	}
                    break;
                case 66:
                	{
                		alt13=2;
                	}
                    break;
                case 63:
                	{
                		alt13=3;
                	}
                    break;
                case 67:
                	{
                		alt13=4;
                	}
                    break;

                }

                switch (alt13)
                {
            	case 1:
            	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:372:17: ( '<' b= add_ex )
            	    {
            	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:372:17: ( '<' b= add_ex )
            	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:372:19: '<' b= add_ex
            	        {
            	             this->matchToken(62, &FOLLOW_62_in_rel_ex2240);
            	            if  (this->hasException())
            	            {
            	                goto rulerel_exEx;
            	            }


            	            this->followPush(FOLLOW_add_ex_in_rel_ex2244);
            	            b=add_ex();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulerel_exEx;
            	            }


            	            {
            	                node = m_allocator->make_allocated<scripting::binary_expression>(m_allocator, scripting::arithmetic_type::arithmetic_less_than, node, b
            	                );   SET_LOCATION_FROM_NODE(node, a
            	                ); SET_END_LOCATION_FROM_NODE(node, b
            	                ); 
            	            }


            	        }


            	    }
            	    break;
            	case 2:
            	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:373:17: ( '>' c= add_ex )
            	    {
            	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:373:17: ( '>' c= add_ex )
            	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:373:19: '>' c= add_ex
            	        {
            	             this->matchToken(66, &FOLLOW_66_in_rel_ex2268);
            	            if  (this->hasException())
            	            {
            	                goto rulerel_exEx;
            	            }


            	            this->followPush(FOLLOW_add_ex_in_rel_ex2272);
            	            c=add_ex();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulerel_exEx;
            	            }


            	            {
            	                node = m_allocator->make_allocated<scripting::binary_expression>(m_allocator, scripting::arithmetic_type::arithmetic_greater_than, node, c
            	                );   SET_LOCATION_FROM_NODE(node, a
            	                ); SET_END_LOCATION_FROM_NODE(node, c
            	                ); 
            	            }


            	        }


            	    }
            	    break;
            	case 3:
            	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:374:17: ( '<=' d= add_ex )
            	    {
            	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:374:17: ( '<=' d= add_ex )
            	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:374:19: '<=' d= add_ex
            	        {
            	             this->matchToken(63, &FOLLOW_63_in_rel_ex2296);
            	            if  (this->hasException())
            	            {
            	                goto rulerel_exEx;
            	            }


            	            this->followPush(FOLLOW_add_ex_in_rel_ex2300);
            	            d=add_ex();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulerel_exEx;
            	            }


            	            {
            	                node = m_allocator->make_allocated<scripting::binary_expression>(m_allocator, scripting::arithmetic_type::arithmetic_less_than_or_equal, node, d
            	                );   SET_LOCATION_FROM_NODE(node, a
            	                ); SET_END_LOCATION_FROM_NODE(node, d
            	                ); 
            	            }


            	        }


            	    }
            	    break;
            	case 4:
            	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:375:17: ( '>=' e= add_ex )
            	    {
            	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:375:17: ( '>=' e= add_ex )
            	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:375:19: '>=' e= add_ex
            	        {
            	             this->matchToken(67, &FOLLOW_67_in_rel_ex2324);
            	            if  (this->hasException())
            	            {
            	                goto rulerel_exEx;
            	            }


            	            this->followPush(FOLLOW_add_ex_in_rel_ex2328);
            	            e=add_ex();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulerel_exEx;
            	            }


            	            {
            	                node = m_allocator->make_allocated<scripting::binary_expression>(m_allocator, scripting::arithmetic_type::arithmetic_greater_than_or_equal, node, e
            	                );   SET_LOCATION_FROM_NODE(node, a
            	                ); SET_END_LOCATION_FROM_NODE(node, e
            	                ); 
            	            }


            	        }


            	    }
            	    break;

            	default:
            	    goto loop13;	/* break out of the loop */
            	    break;
                }
            }
            loop13: ; /* Jump out to here if this rule does not match */


        }

    }
    // This is where rules clean up and exit
    //
    goto rulerel_exEx; /* Prevent compiler warnings */
    rulerel_exEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}
/* $ANTLR end rel_ex */

/**
 * $ANTLR start add_ex
 * C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:379:1: add_ex returns [scripting::expression* node] : a= mult_ex ( ( '+' b= mult_ex ) | ( '-' c= mult_ex ) )* ;
 */
scripting::expression*
WNScriptASTParser::add_ex()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    scripting::expression* node;


    scripting::expression* a;
    scripting::expression* b;
    scripting::expression* c;
    /* Initialize rule variables
     */
     


        node = wn_nullptr;


 
    {
        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:383:9: (a= mult_ex ( ( '+' b= mult_ex ) | ( '-' c= mult_ex ) )* )
        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:383:14: a= mult_ex ( ( '+' b= mult_ex ) | ( '-' c= mult_ex ) )*
        {
            this->followPush(FOLLOW_mult_ex_in_add_ex2389);
            a=mult_ex();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleadd_exEx;
            }


            {
                node = a
                ; 
            }


            // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:384:13: ( ( '+' b= mult_ex ) | ( '-' c= mult_ex ) )*

            for (;;)
            {
                int alt14=3;
                switch ( this->LA(1) )
                {
                case 55:
                	{
                		alt14=1;
                	}
                    break;
                case 57:
                	{
                		alt14=2;
                	}
                    break;

                }

                switch (alt14)
                {
            	case 1:
            	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:385:17: ( '+' b= mult_ex )
            	    {
            	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:385:17: ( '+' b= mult_ex )
            	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:385:18: '+' b= mult_ex
            	        {
            	             this->matchToken(55, &FOLLOW_55_in_add_ex2424);
            	            if  (this->hasException())
            	            {
            	                goto ruleadd_exEx;
            	            }


            	            this->followPush(FOLLOW_mult_ex_in_add_ex2428);
            	            b=mult_ex();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleadd_exEx;
            	            }


            	            {
            	                node = m_allocator->make_allocated<scripting::binary_expression>(m_allocator, scripting::arithmetic_type::arithmetic_add, node, b
            	                );   SET_LOCATION_FROM_NODE(node, a
            	                ); SET_END_LOCATION_FROM_NODE(node, b
            	                ); 
            	            }


            	        }


            	    }
            	    break;
            	case 2:
            	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:386:17: ( '-' c= mult_ex )
            	    {
            	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:386:17: ( '-' c= mult_ex )
            	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:386:18: '-' c= mult_ex
            	        {
            	             this->matchToken(57, &FOLLOW_57_in_add_ex2450);
            	            if  (this->hasException())
            	            {
            	                goto ruleadd_exEx;
            	            }


            	            this->followPush(FOLLOW_mult_ex_in_add_ex2454);
            	            c=mult_ex();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleadd_exEx;
            	            }


            	            {
            	                node = m_allocator->make_allocated<scripting::binary_expression>(m_allocator, scripting::arithmetic_type::arithmetic_sub, node, c
            	                );   SET_LOCATION_FROM_NODE(node, a
            	                ); SET_END_LOCATION_FROM_NODE(node, c
            	                ); 
            	            }


            	        }


            	    }
            	    break;

            	default:
            	    goto loop14;	/* break out of the loop */
            	    break;
                }
            }
            loop14: ; /* Jump out to here if this rule does not match */


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleadd_exEx; /* Prevent compiler warnings */
    ruleadd_exEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}
/* $ANTLR end add_ex */

/**
 * $ANTLR start mult_ex
 * C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:390:1: mult_ex returns [scripting::expression* node] : a= unary_ex ( ( '*' b= unary_ex ) | ( '/' c= unary_ex ) | ( '%' d= unary_ex ) )* ;
 */
scripting::expression*
WNScriptASTParser::mult_ex()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    scripting::expression* node;


    scripting::expression* a;
    scripting::expression* b;
    scripting::expression* c;
    scripting::expression* d;
    /* Initialize rule variables
     */
     


        node = wn_nullptr;


 
    {
        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:394:9: (a= unary_ex ( ( '*' b= unary_ex ) | ( '/' c= unary_ex ) | ( '%' d= unary_ex ) )* )
        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:394:14: a= unary_ex ( ( '*' b= unary_ex ) | ( '/' c= unary_ex ) | ( '%' d= unary_ex ) )*
        {
            this->followPush(FOLLOW_unary_ex_in_mult_ex2513);
            a=unary_ex();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemult_exEx;
            }


            {
                 node = a
                ; 
            }


            // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:395:13: ( ( '*' b= unary_ex ) | ( '/' c= unary_ex ) | ( '%' d= unary_ex ) )*

            for (;;)
            {
                int alt15=4;
                switch ( this->LA(1) )
                {
                case 53:
                	{
                		alt15=1;
                	}
                    break;
                case 60:
                	{
                		alt15=2;
                	}
                    break;
                case 50:
                	{
                		alt15=3;
                	}
                    break;

                }

                switch (alt15)
                {
            	case 1:
            	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:396:21: ( '*' b= unary_ex )
            	    {
            	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:396:21: ( '*' b= unary_ex )
            	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:396:22: '*' b= unary_ex
            	        {
            	             this->matchToken(53, &FOLLOW_53_in_mult_ex2552);
            	            if  (this->hasException())
            	            {
            	                goto rulemult_exEx;
            	            }


            	            this->followPush(FOLLOW_unary_ex_in_mult_ex2556);
            	            b=unary_ex();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulemult_exEx;
            	            }


            	            {
            	                node = m_allocator->make_allocated<scripting::binary_expression>(m_allocator, scripting::arithmetic_type::arithmetic_mult, node, b
            	                );   SET_LOCATION_FROM_NODE(node, a
            	                ); SET_END_LOCATION_FROM_NODE(node, b
            	                ); 
            	            }


            	        }


            	    }
            	    break;
            	case 2:
            	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:397:21: ( '/' c= unary_ex )
            	    {
            	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:397:21: ( '/' c= unary_ex )
            	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:397:22: '/' c= unary_ex
            	        {
            	             this->matchToken(60, &FOLLOW_60_in_mult_ex2582);
            	            if  (this->hasException())
            	            {
            	                goto rulemult_exEx;
            	            }


            	            this->followPush(FOLLOW_unary_ex_in_mult_ex2586);
            	            c=unary_ex();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulemult_exEx;
            	            }


            	            {
            	                node = m_allocator->make_allocated<scripting::binary_expression>(m_allocator, scripting::arithmetic_type::arithmetic_div, node, c
            	                );   SET_LOCATION_FROM_NODE(node, a
            	                ); SET_END_LOCATION_FROM_NODE(node, c
            	                ); 
            	            }


            	        }


            	    }
            	    break;
            	case 3:
            	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:398:21: ( '%' d= unary_ex )
            	    {
            	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:398:21: ( '%' d= unary_ex )
            	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:398:22: '%' d= unary_ex
            	        {
            	             this->matchToken(50, &FOLLOW_50_in_mult_ex2612);
            	            if  (this->hasException())
            	            {
            	                goto rulemult_exEx;
            	            }


            	            this->followPush(FOLLOW_unary_ex_in_mult_ex2616);
            	            d=unary_ex();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulemult_exEx;
            	            }


            	            {
            	                node = m_allocator->make_allocated<scripting::binary_expression>(m_allocator, scripting::arithmetic_type::arithmetic_mod, node, d
            	                );   SET_LOCATION_FROM_NODE(node, a
            	                ); SET_END_LOCATION_FROM_NODE(node, d
            	                ); 
            	            }


            	        }


            	    }
            	    break;

            	default:
            	    goto loop15;	/* break out of the loop */
            	    break;
                }
            }
            loop15: ; /* Jump out to here if this rule does not match */


        }

    }
    // This is where rules clean up and exit
    //
    goto rulemult_exEx; /* Prevent compiler warnings */
    rulemult_exEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}
/* $ANTLR end mult_ex */

/**
 * $ANTLR start unary_ex
 * C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:402:1: unary_ex returns [scripting::expression* node] : (a= post_ex | '++' b= unary_ex | '--' c= unary_ex | '-' d= unary_ex );
 */
scripting::expression*
WNScriptASTParser::unary_ex()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    scripting::expression* node;


    scripting::expression* a;
    scripting::expression* b;
    scripting::expression* c;
    scripting::expression* d;
    /* Initialize rule variables
     */
     


        node = wn_nullptr;


 
    {
        {
            //  C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:406:5: (a= post_ex | '++' b= unary_ex | '--' c= unary_ex | '-' d= unary_ex )

            ANTLR_UINT32 alt16;

            alt16=4;

            switch ( this->LA(1) )
            {
            case BOOL:
            case BOOL_TYPE:
            case CHAR:
            case CHAR_TYPE:
            case FLOAT:
            case FLOAT_TYPE:
            case ID:
            case INT:
            case INT_TYPE:
            case LBRACKET:
            case NULLTOK:
            case STRING:
            case STRING_TYPE:
            case TYPE:
            case VOID_TYPE:
            	{
            		alt16=1;
            	}
                break;
            case DOUBINC:
            	{
            		alt16=2;
            	}
                break;
            case DOUBDEC:
            	{
            		alt16=3;
            	}
                break;
            case 57:
            	{
            		alt16=4;
            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 16 );
                ex->set_state( 0 );


                goto ruleunary_exEx;

            }

            switch (alt16)
            {
        	case 1:
        	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:406:10: a= post_ex
        	    {
        	        this->followPush(FOLLOW_post_ex_in_unary_ex2668);
        	        a=post_ex();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleunary_exEx;
        	        }


        	        {
        	             node = a
        	            ; 
        	        }


        	    }
        	    break;
        	case 2:
        	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:407:10: '++' b= unary_ex
        	    {
        	         this->matchToken(DOUBINC, &FOLLOW_DOUBINC_in_unary_ex2681);
        	        if  (this->hasException())
        	        {
        	            goto ruleunary_exEx;
        	        }


        	        this->followPush(FOLLOW_unary_ex_in_unary_ex2685);
        	        b=unary_ex();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleunary_exEx;
        	        }


        	        {
        	             scripting::node* t = node; node = m_allocator->make_allocated<scripting::unary_expression>(m_allocator, scripting::unary_type::pre_increment, b
        	            );   SET_LOCATION_FROM_NODE(node, t); SET_END_LOCATION_FROM_NODE(node, b
        	            ); 
        	        }


        	    }
        	    break;
        	case 3:
        	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:408:10: '--' c= unary_ex
        	    {
        	         this->matchToken(DOUBDEC, &FOLLOW_DOUBDEC_in_unary_ex2698);
        	        if  (this->hasException())
        	        {
        	            goto ruleunary_exEx;
        	        }


        	        this->followPush(FOLLOW_unary_ex_in_unary_ex2702);
        	        c=unary_ex();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleunary_exEx;
        	        }


        	        {
        	             scripting::node* t = node; node = m_allocator->make_allocated<scripting::unary_expression>(m_allocator, scripting::unary_type::pre_decrement, c
        	            );   SET_LOCATION_FROM_NODE(node, t); SET_END_LOCATION_FROM_NODE(node, c
        	            ); 
        	        }


        	    }
        	    break;
        	case 4:
        	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:409:10: '-' d= unary_ex
        	    {
        	         this->matchToken(57, &FOLLOW_57_in_unary_ex2715);
        	        if  (this->hasException())
        	        {
        	            goto ruleunary_exEx;
        	        }


        	        this->followPush(FOLLOW_unary_ex_in_unary_ex2719);
        	        d=unary_ex();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleunary_exEx;
        	        }


        	        {
        	             scripting::node* t = node; node = m_allocator->make_allocated<scripting::unary_expression>(m_allocator, scripting::unary_type::negation, d
        	            );   SET_LOCATION_FROM_NODE(node, t); SET_END_LOCATION_FROM_NODE(node, d
        	            ); 
        	        }


        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto ruleunary_exEx; /* Prevent compiler warnings */
    ruleunary_exEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}
/* $ANTLR end unary_ex */

/**
 * $ANTLR start post_ex_proper
 * C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:413:1: post_ex_proper returns [scripting::post_expression* node] : (d= LSQBRACKET a= expr e= RSQBRACKET |f= LBRACKET g= RBRACKET |h= LBRACKET b= arglist i= RBRACKET | '.' c= ID | DOUBINC | DOUBDEC );
 */
scripting::post_expression*
WNScriptASTParser::post_ex_proper()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    scripting::post_expression* node;


    const ImplTraits::CommonTokenType* d = NULL;
    const ImplTraits::CommonTokenType* e = NULL;
    const ImplTraits::CommonTokenType* f = NULL;
    const ImplTraits::CommonTokenType* g = NULL;
    const ImplTraits::CommonTokenType* h = NULL;
    const ImplTraits::CommonTokenType* i = NULL;
    const ImplTraits::CommonTokenType* c = NULL;
    const ImplTraits::CommonTokenType* DOUBINC18 = NULL;
    const ImplTraits::CommonTokenType* DOUBDEC19 = NULL;
    scripting::expression* a;
    scripting::arg_list* b;
    /* Initialize rule variables
     */
     


        node = wn_nullptr;


 
    {
        {
            //  C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:417:5: (d= LSQBRACKET a= expr e= RSQBRACKET |f= LBRACKET g= RBRACKET |h= LBRACKET b= arglist i= RBRACKET | '.' c= ID | DOUBINC | DOUBDEC )

            ANTLR_UINT32 alt17;

            alt17=6;

            switch ( this->LA(1) )
            {
            case LSQBRACKET:
            	{
            		alt17=1;
            	}
                break;
            case LBRACKET:
            	{
            		switch ( this->LA(2) )
            		{
            		case RBRACKET:
            			{
            				alt17=2;
            			}
            		    break;
            		case BOOL:
            		case BOOL_TYPE:
            		case CHAR:
            		case CHAR_TYPE:
            		case CHOWN:
            		case DOUBDEC:
            		case DOUBINC:
            		case FLOAT:
            		case FLOAT_TYPE:
            		case ID:
            		case INT:
            		case INT_TYPE:
            		case LBRACKET:
            		case NULLTOK:
            		case STRING:
            		case STRING_TYPE:
            		case TYPE:
            		case VOID_TYPE:
            		case 57:
            			{
            				alt17=3;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 17 );
            		    ex->set_state( 2 );


            		    goto rulepost_ex_properEx;

            		}

            	}
                break;
            case 59:
            	{
            		alt17=4;
            	}
                break;
            case DOUBINC:
            	{
            		alt17=5;
            	}
                break;
            case DOUBDEC:
            	{
            		alt17=6;
            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 17 );
                ex->set_state( 0 );


                goto rulepost_ex_properEx;

            }

            switch (alt17)
            {
        	case 1:
        	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:417:10: d= LSQBRACKET a= expr e= RSQBRACKET
        	    {
        	        d =  this->matchToken(LSQBRACKET, &FOLLOW_LSQBRACKET_in_post_ex_proper2757);
        	        if  (this->hasException())
        	        {
        	            goto rulepost_ex_properEx;
        	        }


        	        this->followPush(FOLLOW_expr_in_post_ex_proper2761);
        	        a=expr();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulepost_ex_properEx;
        	        }


        	        e =  this->matchToken(RSQBRACKET, &FOLLOW_RSQBRACKET_in_post_ex_proper2765);
        	        if  (this->hasException())
        	        {
        	            goto rulepost_ex_properEx;
        	        }


        	        {
        	             node = m_allocator->make_allocated<scripting::array_access_expression>(m_allocator, a
        	            ); SET_LOCATION(node, d); SET_END_LOCATION(node, e); 
        	        }


        	    }
        	    break;
        	case 2:
        	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:418:10: f= LBRACKET g= RBRACKET
        	    {
        	        f =  this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_post_ex_proper2780);
        	        if  (this->hasException())
        	        {
        	            goto rulepost_ex_properEx;
        	        }


        	        g =  this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_post_ex_proper2784);
        	        if  (this->hasException())
        	        {
        	            goto rulepost_ex_properEx;
        	        }


        	        {
        	             node = m_allocator->make_allocated<scripting::function_call_expression>(m_allocator); SET_LOCATION(node, f); SET_END_LOCATION(node, g); 
        	        }


        	    }
        	    break;
        	case 3:
        	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:419:10: h= LBRACKET b= arglist i= RBRACKET
        	    {
        	        h =  this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_post_ex_proper2812);
        	        if  (this->hasException())
        	        {
        	            goto rulepost_ex_properEx;
        	        }


        	        this->followPush(FOLLOW_arglist_in_post_ex_proper2818);
        	        b=arglist();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulepost_ex_properEx;
        	        }


        	        i =  this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_post_ex_proper2822);
        	        if  (this->hasException())
        	        {
        	            goto rulepost_ex_properEx;
        	        }


        	        {
        	             node = m_allocator->make_allocated<scripting::function_call_expression>(m_allocator, b
        	            ); SET_LOCATION(node, h); SET_END_LOCATION(node, i); 
        	        }


        	    }
        	    break;
        	case 4:
        	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:420:9: '.' c= ID
        	    {
        	         this->matchToken(59, &FOLLOW_59_in_post_ex_proper2835);
        	        if  (this->hasException())
        	        {
        	            goto rulepost_ex_properEx;
        	        }


        	        c =  this->matchToken(ID, &FOLLOW_ID_in_post_ex_proper2839);
        	        if  (this->hasException())
        	        {
        	            goto rulepost_ex_properEx;
        	        }


        	        {
        	             node = m_allocator->make_allocated<scripting::member_access_expression>(m_allocator, (c->getText()).c_str()); SET_LOCATION(node, c); 
        	        }


        	    }
        	    break;
        	case 5:
        	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:421:11: DOUBINC
        	    {
        	        DOUBINC18 =  this->matchToken(DOUBINC, &FOLLOW_DOUBINC_in_post_ex_proper2866);
        	        if  (this->hasException())
        	        {
        	            goto rulepost_ex_properEx;
        	        }


        	        {
        	             node = m_allocator->make_allocated<scripting::post_unary_expression>(m_allocator, scripting::post_unary_type::post_increment); SET_LOCATION(node, DOUBINC18);
        	        }


        	    }
        	    break;
        	case 6:
        	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:422:9: DOUBDEC
        	    {
        	        DOUBDEC19 =  this->matchToken(DOUBDEC, &FOLLOW_DOUBDEC_in_post_ex_proper2895);
        	        if  (this->hasException())
        	        {
        	            goto rulepost_ex_properEx;
        	        }


        	        {
        	             node = m_allocator->make_allocated<scripting::post_unary_expression>(m_allocator, scripting::post_unary_type::post_decrement); SET_LOCATION(node, DOUBDEC19);
        	        }


        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto rulepost_ex_properEx; /* Prevent compiler warnings */
    rulepost_ex_properEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}
/* $ANTLR end post_ex_proper */

/**
 * $ANTLR start post_ex
 * C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:425:1: post_ex returns [scripting::expression* node] : prim_ex (a= post_ex_proper )* ;
 */
scripting::expression*
WNScriptASTParser::post_ex()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    scripting::expression* node;


    scripting::post_expression* a;
    scripting::expression * prim_ex20;
    /* Initialize rule variables
     */
     


        node = wn_nullptr;


 
    {
        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:429:9: ( prim_ex (a= post_ex_proper )* )
        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:429:13: prim_ex (a= post_ex_proper )*
        {
            this->followPush(FOLLOW_prim_ex_in_post_ex2948);
            prim_ex20=prim_ex();

            this->followPop();
            if  (this->hasException())
            {
                goto rulepost_exEx;
            }


            {
                 node = prim_ex20
                ; 
            }


            // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:430:13: (a= post_ex_proper )*

            for (;;)
            {
                int alt18=2;
                switch ( this->LA(1) )
                {
                case DOUBDEC:
                case DOUBINC:
                case LBRACKET:
                case LSQBRACKET:
                case 59:
                	{
                		alt18=1;
                	}
                    break;

                }

                switch (alt18)
                {
            	case 1:
            	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:430:14: a= post_ex_proper
            	    {
            	        this->followPush(FOLLOW_post_ex_proper_in_post_ex2967);
            	        a=post_ex_proper();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulepost_exEx;
            	        }


            	        {
            	            a
            	            ->add_base_expression(node); SET_END_LOCATION_FROM_NODE(a
            	            , node); node = a
            	            ;  
            	        }


            	    }
            	    break;

            	default:
            	    goto loop18;	/* break out of the loop */
            	    break;
                }
            }
            loop18: ; /* Jump out to here if this rule does not match */


        }

    }
    // This is where rules clean up and exit
    //
    goto rulepost_exEx; /* Prevent compiler warnings */
    rulepost_exEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}
/* $ANTLR end post_ex */

/**
 * $ANTLR start assignment
 * C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:432:1: assignment returns [scripting::assignment_instruction* node] : lvalue ( assign_type expr )? ;
 */
scripting::assignment_instruction*
WNScriptASTParser::assignment()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    scripting::assignment_instruction* node;


    scripting::lvalue* lvalue21;
    scripting::assign_type assign_type22;
    scripting::expression* expr23;
    /* Initialize rule variables
     */
     


        node = wn_nullptr;


 
    {
        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:436:5: ( lvalue ( assign_type expr )? )
        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:436:10: lvalue ( assign_type expr )?
        {
            this->followPush(FOLLOW_lvalue_in_assignment2996);
            lvalue21=lvalue();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleassignmentEx;
            }


            {
                 node = m_allocator->make_allocated<scripting::assignment_instruction>(m_allocator, lvalue21
                ); SET_LOCATION_FROM_NODE(node, lvalue21
                ); 
            }


            // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:437:9: ( assign_type expr )?
            {
                int alt19=2;
                switch ( this->LA(1) )
                {
                    case CHOWN:
                    case 51:
                    case 54:
                    case 56:
                    case 58:
                    case 61:
                    case 64:
                    	{
                    		alt19=1;
                    	}
                        break;
                }

                switch (alt19)
                {
            	case 1:
            	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:437:10: assign_type expr
            	    {
            	        this->followPush(FOLLOW_assign_type_in_assignment3009);
            	        assign_type22=assign_type();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleassignmentEx;
            	        }


            	        this->followPush(FOLLOW_expr_in_assignment3011);
            	        expr23=expr();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleassignmentEx;
            	        }


            	        {
            	             node->add_value(assign_type22
            	            , expr23
            	            ); SET_END_LOCATION_FROM_NODE(node, expr23
            	            ); 
            	        }


            	    }
            	    break;

                }
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleassignmentEx; /* Prevent compiler warnings */
    ruleassignmentEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}
/* $ANTLR end assignment */

/**
 * $ANTLR start constant
 * C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:439:1: constant returns [scripting::constant_expression* node] : (a= INT |b= FLOAT |c= CHAR |d= STRING |e= BOOL |f= scalarType g= LBRACE h= STRING i= RBRACE );
 */
scripting::constant_expression*
WNScriptASTParser::constant()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    scripting::constant_expression* node;


    const ImplTraits::CommonTokenType* a = NULL;
    const ImplTraits::CommonTokenType* b = NULL;
    const ImplTraits::CommonTokenType* c = NULL;
    const ImplTraits::CommonTokenType* d = NULL;
    const ImplTraits::CommonTokenType* e = NULL;
    const ImplTraits::CommonTokenType* g = NULL;
    const ImplTraits::CommonTokenType* h = NULL;
    const ImplTraits::CommonTokenType* i = NULL;
    scripting::type* f;
    /* Initialize rule variables
     */
     


        node = wn_nullptr;


 
    {
        {
            //  C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:443:5: (a= INT |b= FLOAT |c= CHAR |d= STRING |e= BOOL |f= scalarType g= LBRACE h= STRING i= RBRACE )

            ANTLR_UINT32 alt20;

            alt20=6;

            switch ( this->LA(1) )
            {
            case INT:
            	{
            		alt20=1;
            	}
                break;
            case FLOAT:
            	{
            		alt20=2;
            	}
                break;
            case CHAR:
            	{
            		alt20=3;
            	}
                break;
            case STRING:
            	{
            		alt20=4;
            	}
                break;
            case BOOL:
            	{
            		alt20=5;
            	}
                break;
            case BOOL_TYPE:
            case CHAR_TYPE:
            case FLOAT_TYPE:
            case INT_TYPE:
            case STRING_TYPE:
            case TYPE:
            case VOID_TYPE:
            	{
            		alt20=6;
            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 20 );
                ex->set_state( 0 );


                goto ruleconstantEx;

            }

            switch (alt20)
            {
        	case 1:
        	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:443:10: a= INT
        	    {
        	        a =  this->matchToken(INT, &FOLLOW_INT_in_constant3046);
        	        if  (this->hasException())
        	        {
        	            goto ruleconstantEx;
        	        }


        	        {
        	             scripting::type* type_node = m_allocator->make_allocated<scripting::type>(m_allocator, scripting::type_classification::int_type); SET_LOCATION(type_node, a); node = m_allocator->make_allocated<scripting::constant_expression>(m_allocator, type_node, (a->getText()).c_str()); SET_LOCATION(node, a); 
        	        }


        	    }
        	    break;
        	case 2:
        	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:444:10: b= FLOAT
        	    {
        	        b =  this->matchToken(FLOAT, &FOLLOW_FLOAT_in_constant3064);
        	        if  (this->hasException())
        	        {
        	            goto ruleconstantEx;
        	        }


        	        {
        	             scripting::type* type_node = m_allocator->make_allocated<scripting::type>(m_allocator, scripting::type_classification::float_type); SET_LOCATION(type_node, a); node = m_allocator->make_allocated<scripting::constant_expression>(m_allocator, type_node, (b->getText()).c_str()); SET_LOCATION(node, b); 
        	        }


        	    }
        	    break;
        	case 3:
        	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:445:10: c= CHAR
        	    {
        	        c =  this->matchToken(CHAR, &FOLLOW_CHAR_in_constant3080);
        	        if  (this->hasException())
        	        {
        	            goto ruleconstantEx;
        	        }


        	        {
        	             scripting::type* type_node = m_allocator->make_allocated<scripting::type>(m_allocator, scripting::type_classification::char_type); SET_LOCATION(type_node, a); node = m_allocator->make_allocated<scripting::constant_expression>(m_allocator, type_node, (c->getText()).c_str()); SET_LOCATION(node, c);
        	        }


        	    }
        	    break;
        	case 4:
        	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:446:10: d= STRING
        	    {
        	        d =  this->matchToken(STRING, &FOLLOW_STRING_in_constant3097);
        	        if  (this->hasException())
        	        {
        	            goto ruleconstantEx;
        	        }


        	        {
        	             scripting::type* type_node = m_allocator->make_allocated<scripting::type>(m_allocator, scripting::type_classification::string_type); SET_LOCATION(type_node, a); node = m_allocator->make_allocated<scripting::constant_expression>(m_allocator, type_node, (d->getText()).c_str()); SET_LOCATION(node, d); 
        	        }


        	    }
        	    break;
        	case 5:
        	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:447:10: e= BOOL
        	    {
        	        e =  this->matchToken(BOOL, &FOLLOW_BOOL_in_constant3112);
        	        if  (this->hasException())
        	        {
        	            goto ruleconstantEx;
        	        }


        	        {
        	             scripting::type* type_node = m_allocator->make_allocated<scripting::type>(m_allocator, scripting::type_classification::bool_type); SET_LOCATION(type_node, a); node = m_allocator->make_allocated<scripting::constant_expression>(m_allocator, type_node, (e->getText()).c_str()); SET_LOCATION(node, e); 
        	        }


        	    }
        	    break;
        	case 6:
        	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:448:10: f= scalarType g= LBRACE h= STRING i= RBRACE
        	    {
        	        this->followPush(FOLLOW_scalarType_in_constant3129);
        	        f=scalarType();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleconstantEx;
        	        }


        	        g =  this->matchToken(LBRACE, &FOLLOW_LBRACE_in_constant3133);
        	        if  (this->hasException())
        	        {
        	            goto ruleconstantEx;
        	        }


        	        h =  this->matchToken(STRING, &FOLLOW_STRING_in_constant3137);
        	        if  (this->hasException())
        	        {
        	            goto ruleconstantEx;
        	        }


        	        i =  this->matchToken(RBRACE, &FOLLOW_RBRACE_in_constant3141);
        	        if  (this->hasException())
        	        {
        	            goto ruleconstantEx;
        	        }


        	        {
        	             node = m_allocator->make_allocated<scripting::constant_expression>(m_allocator, f
        	            , (h->getText()).c_str()); SET_LOCATION_FROM_NODE(node, 
        	            f
        	            ); SET_END_LOCATION(node, i);
        	        }


        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto ruleconstantEx; /* Prevent compiler warnings */
    ruleconstantEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}
/* $ANTLR end constant */

/**
 * $ANTLR start prim_ex
 * C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:451:1: prim_ex returns [scripting::expression * node] : ( ID |ba= LBRACKET a= expr bb= RBRACKET |b= constant |c= scalarType ( (e= structInit ) | (f= cast ) | (g= arrayInit ) ) |d= NULLTOK );
 */
scripting::expression *
WNScriptASTParser::prim_ex()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    scripting::expression * node;


    const ImplTraits::CommonTokenType* ba = NULL;
    const ImplTraits::CommonTokenType* bb = NULL;
    const ImplTraits::CommonTokenType* d = NULL;
    const ImplTraits::CommonTokenType* ID24 = NULL;
    scripting::expression* a;
    scripting::constant_expression* b;
    scripting::type* c;
    scripting::struct_allocation_expression* e;
    scripting::cast_expression* f;
    scripting::array_allocation_expression* g;
    /* Initialize rule variables
     */
     


        node = wn_nullptr;


 
    {
        {
            //  C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:455:5: ( ID |ba= LBRACKET a= expr bb= RBRACKET |b= constant |c= scalarType ( (e= structInit ) | (f= cast ) | (g= arrayInit ) ) |d= NULLTOK )

            ANTLR_UINT32 alt22;

            alt22=5;

            switch ( this->LA(1) )
            {
            case ID:
            	{
            		alt22=1;
            	}
                break;
            case LBRACKET:
            	{
            		alt22=2;
            	}
                break;
            case BOOL:
            case CHAR:
            case FLOAT:
            case INT:
            case STRING:
            	{
            		alt22=3;
            	}
                break;
            case TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case LBRACE:
            			{
            				alt22=3;
            			}
            		    break;
            		case LBRACKET:
            		case LSQBRACKET:
            			{
            				alt22=4;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 22 );
            		    ex->set_state( 4 );


            		    goto ruleprim_exEx;

            		}

            	}
                break;
            case VOID_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case LBRACE:
            			{
            				alt22=3;
            			}
            		    break;
            		case LBRACKET:
            		case LSQBRACKET:
            			{
            				alt22=4;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 22 );
            		    ex->set_state( 5 );


            		    goto ruleprim_exEx;

            		}

            	}
                break;
            case INT_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case LBRACE:
            			{
            				alt22=3;
            			}
            		    break;
            		case LBRACKET:
            		case LSQBRACKET:
            			{
            				alt22=4;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 22 );
            		    ex->set_state( 6 );


            		    goto ruleprim_exEx;

            		}

            	}
                break;
            case FLOAT_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case LBRACE:
            			{
            				alt22=3;
            			}
            		    break;
            		case LBRACKET:
            		case LSQBRACKET:
            			{
            				alt22=4;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 22 );
            		    ex->set_state( 7 );


            		    goto ruleprim_exEx;

            		}

            	}
                break;
            case CHAR_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case LBRACE:
            			{
            				alt22=3;
            			}
            		    break;
            		case LBRACKET:
            		case LSQBRACKET:
            			{
            				alt22=4;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 22 );
            		    ex->set_state( 8 );


            		    goto ruleprim_exEx;

            		}

            	}
                break;
            case STRING_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case LBRACE:
            			{
            				alt22=3;
            			}
            		    break;
            		case LBRACKET:
            		case LSQBRACKET:
            			{
            				alt22=4;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 22 );
            		    ex->set_state( 9 );


            		    goto ruleprim_exEx;

            		}

            	}
                break;
            case BOOL_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case LBRACE:
            			{
            				alt22=3;
            			}
            		    break;
            		case LBRACKET:
            		case LSQBRACKET:
            			{
            				alt22=4;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 22 );
            		    ex->set_state( 10 );


            		    goto ruleprim_exEx;

            		}

            	}
                break;
            case NULLTOK:
            	{
            		alt22=5;
            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 22 );
                ex->set_state( 0 );


                goto ruleprim_exEx;

            }

            switch (alt22)
            {
        	case 1:
        	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:455:10: ID
        	    {
        	        ID24 =  this->matchToken(ID, &FOLLOW_ID_in_prim_ex3171);
        	        if  (this->hasException())
        	        {
        	            goto ruleprim_exEx;
        	        }


        	        {
        	             node = m_allocator->make_allocated<scripting::id_expression>(m_allocator, (ID24->getText()).c_str()); SET_LOCATION(node, ID24);
        	        }


        	    }
        	    break;
        	case 2:
        	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:456:10: ba= LBRACKET a= expr bb= RBRACKET
        	    {
        	        ba =  this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_prim_ex3186);
        	        if  (this->hasException())
        	        {
        	            goto ruleprim_exEx;
        	        }


        	        this->followPush(FOLLOW_expr_in_prim_ex3190);
        	        a=expr();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleprim_exEx;
        	        }


        	        bb =  this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_prim_ex3194);
        	        if  (this->hasException())
        	        {
        	            goto ruleprim_exEx;
        	        }


        	        {
        	            node = a
        	            ; SET_LOCATION(node, ba); SET_END_LOCATION(node, bb); 
        	        }


        	    }
        	    break;
        	case 3:
        	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:457:10: b= constant
        	    {
        	        this->followPush(FOLLOW_constant_in_prim_ex3209);
        	        b=constant();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleprim_exEx;
        	        }


        	        {
        	            node = b
        	            ; 
        	        }


        	    }
        	    break;
        	case 4:
        	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:458:9: c= scalarType ( (e= structInit ) | (f= cast ) | (g= arrayInit ) )
        	    {
        	        this->followPush(FOLLOW_scalarType_in_prim_ex3224);
        	        c=scalarType();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleprim_exEx;
        	        }


        	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:459:11: ( (e= structInit ) | (f= cast ) | (g= arrayInit ) )
        	        {
        	            int alt21=3;
        	            switch ( this->LA(1) )
        	            {
        	            case LBRACKET:
        	            	{
        	            		switch ( this->LA(2) )
        	            		{
        	            		case RBRACKET:
        	            			{
        	            				alt21=1;
        	            			}
        	            		    break;
        	            		case BOOL:
        	            		case BOOL_TYPE:
        	            		case CHAR:
        	            		case CHAR_TYPE:
        	            		case DOUBDEC:
        	            		case DOUBINC:
        	            		case FLOAT:
        	            		case FLOAT_TYPE:
        	            		case ID:
        	            		case INT:
        	            		case INT_TYPE:
        	            		case LBRACKET:
        	            		case NULLTOK:
        	            		case STRING:
        	            		case STRING_TYPE:
        	            		case TYPE:
        	            		case VOID_TYPE:
        	            		case 57:
        	            			{
        	            				alt21=2;
        	            			}
        	            		    break;

        	            		default:
        	            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
        	            		    ex->set_decisionNum( 21 );
        	            		    ex->set_state( 1 );


        	            		    goto ruleprim_exEx;

        	            		}

        	            	}
        	                break;
        	            case LSQBRACKET:
        	            	{
        	            		alt21=3;
        	            	}
        	                break;

        	            default:
        	                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
        	                ex->set_decisionNum( 21 );
        	                ex->set_state( 0 );


        	                goto ruleprim_exEx;

        	            }

        	            switch (alt21)
        	            {
        	        	case 1:
        	        	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:460:15: (e= structInit )
        	        	    {
        	        	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:460:15: (e= structInit )
        	        	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:460:17: e= structInit
        	        	        {
        	        	            this->followPush(FOLLOW_structInit_in_prim_ex3256);
        	        	            e=structInit();

        	        	            this->followPop();
        	        	            if  (this->hasException())
        	        	            {
        	        	                goto ruleprim_exEx;
        	        	            }


        	        	        }


        	        	        {
        	        	             e
        	        	            ->set_type(c
        	        	            ); node=e
        	        	            ; SET_START_LOCATION_FROM_NODE(node, c
        	        	            ); 
        	        	        }


        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:461:16: (f= cast )
        	        	    {
        	        	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:461:16: (f= cast )
        	        	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:461:18: f= cast
        	        	        {
        	        	            this->followPush(FOLLOW_cast_in_prim_ex3281);
        	        	            f=cast();

        	        	            this->followPop();
        	        	            if  (this->hasException())
        	        	            {
        	        	                goto ruleprim_exEx;
        	        	            }


        	        	        }


        	        	        {
        	        	             f
        	        	            ->set_type(c
        	        	            ); node=f
        	        	            ; SET_START_LOCATION_FROM_NODE(node, c
        	        	            ); 
        	        	        }


        	        	    }
        	        	    break;
        	        	case 3:
        	        	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:462:15: (g= arrayInit )
        	        	    {
        	        	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:462:15: (g= arrayInit )
        	        	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:462:17: g= arrayInit
        	        	        {
        	        	            this->followPush(FOLLOW_arrayInit_in_prim_ex3304);
        	        	            g=arrayInit();

        	        	            this->followPop();
        	        	            if  (this->hasException())
        	        	            {
        	        	                goto ruleprim_exEx;
        	        	            }


        	        	        }


        	        	        {
        	        	             g
        	        	            ->set_type(c
        	        	            ); node=g
        	        	            ; SET_START_LOCATION_FROM_NODE(node, c
        	        	            ); 
        	        	        }


        	        	    }
        	        	    break;

        	            }
        	        }

        	    }
        	    break;
        	case 5:
        	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:464:9: d= NULLTOK
        	    {
        	        d =  this->matchToken(NULLTOK, &FOLLOW_NULLTOK_in_prim_ex3333);
        	        if  (this->hasException())
        	        {
        	            goto ruleprim_exEx;
        	        }


        	        {
        	             node = m_allocator->make_allocated<scripting::null_allocation_expression>(m_allocator); SET_LOCATION(node, d); 
        	        }


        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto ruleprim_exEx; /* Prevent compiler warnings */
    ruleprim_exEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}
/* $ANTLR end prim_ex */

/**
 * $ANTLR start cast
 * C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:467:1: cast returns [scripting::cast_expression* node] : a= LBRACKET b= expr c= RBRACKET ;
 */
scripting::cast_expression*
WNScriptASTParser::cast()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    scripting::cast_expression* node;


    const ImplTraits::CommonTokenType* a = NULL;
    const ImplTraits::CommonTokenType* c = NULL;
    scripting::expression* b;
    /* Initialize rule variables
     */
     


      node = wn_nullptr;


 
    {
        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:471:5: (a= LBRACKET b= expr c= RBRACKET )
        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:471:7: a= LBRACKET b= expr c= RBRACKET
        {
            a =  this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_cast3362);
            if  (this->hasException())
            {
                goto rulecastEx;
            }


            this->followPush(FOLLOW_expr_in_cast3366);
            b=expr();

            this->followPop();
            if  (this->hasException())
            {
                goto rulecastEx;
            }


            c =  this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_cast3370);
            if  (this->hasException())
            {
                goto rulecastEx;
            }


            {
                 node = m_allocator->make_allocated<scripting::cast_expression>(m_allocator, b
                ); SET_LOCATION(node, a); SET_END_LOCATION(node, c); 
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto rulecastEx; /* Prevent compiler warnings */
    rulecastEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}
/* $ANTLR end cast */

/**
 * $ANTLR start structInit
 * C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:474:1: structInit returns [scripting::struct_allocation_expression* node] : a= LBRACKET b= RBRACKET ;
 */
scripting::struct_allocation_expression*
WNScriptASTParser::structInit()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    scripting::struct_allocation_expression* node;


    const ImplTraits::CommonTokenType* a = NULL;
    const ImplTraits::CommonTokenType* b = NULL;

    /* Initialize rule variables
     */
     


        node = wn_nullptr;


 
    {
        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:478:5: (a= LBRACKET b= RBRACKET )
        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:478:7: a= LBRACKET b= RBRACKET
        {
            a =  this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_structInit3399);
            if  (this->hasException())
            {
                goto rulestructInitEx;
            }


            b =  this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_structInit3403);
            if  (this->hasException())
            {
                goto rulestructInitEx;
            }


            {
                 node = m_allocator->make_allocated<scripting::struct_allocation_expression>(m_allocator); SET_LOCATION(node, a); SET_END_LOCATION(node, b); 
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto rulestructInitEx; /* Prevent compiler warnings */
    rulestructInitEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}
/* $ANTLR end structInit */

/**
 * $ANTLR start arrayInit
 * C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:481:1: arrayInit returns [scripting::array_allocation_expression* node] : ( ( ( LSQBRACKET e= expr RSQBRACKET )+ ( LSQBRACKET RSQBRACKET )* ) | ( LSQBRACKET RSQBRACKET )+ ) ( ( LBRACKET a= RBRACKET ) | ( LBRACKET b= expr c= RBRACKET ) ) ;
 */
scripting::array_allocation_expression*
WNScriptASTParser::arrayInit()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    scripting::array_allocation_expression* node;


    const ImplTraits::CommonTokenType* a = NULL;
    const ImplTraits::CommonTokenType* c = NULL;
    scripting::expression* e;
    scripting::expression* b;
    /* Initialize rule variables
     */
     


        node = m_allocator->make_allocated<scripting::array_allocation_expression>(m_allocator);


 
    {
        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:485:5: ( ( ( ( LSQBRACKET e= expr RSQBRACKET )+ ( LSQBRACKET RSQBRACKET )* ) | ( LSQBRACKET RSQBRACKET )+ ) ( ( LBRACKET a= RBRACKET ) | ( LBRACKET b= expr c= RBRACKET ) ) )
        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:485:9: ( ( ( LSQBRACKET e= expr RSQBRACKET )+ ( LSQBRACKET RSQBRACKET )* ) | ( LSQBRACKET RSQBRACKET )+ ) ( ( LBRACKET a= RBRACKET ) | ( LBRACKET b= expr c= RBRACKET ) )
        {
            // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:485:9: ( ( ( LSQBRACKET e= expr RSQBRACKET )+ ( LSQBRACKET RSQBRACKET )* ) | ( LSQBRACKET RSQBRACKET )+ )
            {
                int alt26=2;
                switch ( this->LA(1) )
                {
                case LSQBRACKET:
                	{
                		switch ( this->LA(2) )
                		{
                		case RSQBRACKET:
                			{
                				alt26=2;
                			}
                		    break;
                		case BOOL:
                		case BOOL_TYPE:
                		case CHAR:
                		case CHAR_TYPE:
                		case DOUBDEC:
                		case DOUBINC:
                		case FLOAT:
                		case FLOAT_TYPE:
                		case ID:
                		case INT:
                		case INT_TYPE:
                		case LBRACKET:
                		case NULLTOK:
                		case STRING:
                		case STRING_TYPE:
                		case TYPE:
                		case VOID_TYPE:
                		case 57:
                			{
                				alt26=1;
                			}
                		    break;

                		default:
                		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		    ex->set_decisionNum( 26 );
                		    ex->set_state( 1 );


                		    goto rulearrayInitEx;

                		}

                	}
                    break;

                default:
                    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 26 );
                    ex->set_state( 0 );


                    goto rulearrayInitEx;

                }

                switch (alt26)
                {
            	case 1:
            	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:486:13: ( ( LSQBRACKET e= expr RSQBRACKET )+ ( LSQBRACKET RSQBRACKET )* )
            	    {
            	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:486:13: ( ( LSQBRACKET e= expr RSQBRACKET )+ ( LSQBRACKET RSQBRACKET )* )
            	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:487:17: ( LSQBRACKET e= expr RSQBRACKET )+ ( LSQBRACKET RSQBRACKET )*
            	        {
            	            // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:487:17: ( LSQBRACKET e= expr RSQBRACKET )+
            	            {
            	                int cnt23=0;

            	                for (;;)
            	                {
            	                    int alt23=2;
            	            	switch ( this->LA(1) )
            	            	{
            	            	case LSQBRACKET:
            	            		{
            	            			switch ( this->LA(2) )
            	            			{
            	            			case BOOL:
            	            			case BOOL_TYPE:
            	            			case CHAR:
            	            			case CHAR_TYPE:
            	            			case DOUBDEC:
            	            			case DOUBINC:
            	            			case FLOAT:
            	            			case FLOAT_TYPE:
            	            			case ID:
            	            			case INT:
            	            			case INT_TYPE:
            	            			case LBRACKET:
            	            			case NULLTOK:
            	            			case STRING:
            	            			case STRING_TYPE:
            	            			case TYPE:
            	            			case VOID_TYPE:
            	            			case 57:
            	            				{
            	            					alt23=1;
            	            				}
            	            			    break;

            	            			}

            	            		}
            	            	    break;

            	            	}

            	            	switch (alt23)
            	            	{
            	            	    case 1:
            	            	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:487:18: LSQBRACKET e= expr RSQBRACKET
            	            	        {
            	            	             this->matchToken(LSQBRACKET, &FOLLOW_LSQBRACKET_in_arrayInit3465);
            	            	            if  (this->hasException())
            	            	            {
            	            	                goto rulearrayInitEx;
            	            	            }


            	            	            this->followPush(FOLLOW_expr_in_arrayInit3469);
            	            	            e=expr();

            	            	            this->followPop();
            	            	            if  (this->hasException())
            	            	            {
            	            	                goto rulearrayInitEx;
            	            	            }


            	            	             this->matchToken(RSQBRACKET, &FOLLOW_RSQBRACKET_in_arrayInit3471);
            	            	            if  (this->hasException())
            	            	            {
            	            	                goto rulearrayInitEx;
            	            	            }


            	            	            {
            	            	                 node->add_expression(e
            	            	                );
            	            	            }


            	            	        }
            	            	        break;

            	            	    default:

            	            		if ( cnt23 >= 1 )
            	            		{
            	            		    goto loop23;
            	            		}
            	            		/* mismatchedSetEx()
            	            		 */
            	            		new ANTLR_Exception< WNScriptASTParserImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


            	            		goto rulearrayInitEx;
            	            	}
            	            	cnt23++;
            	                }
            	                loop23: ;	/* Jump to here if this rule does not match */
            	            }

            	            // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:488:17: ( LSQBRACKET RSQBRACKET )*

            	            for (;;)
            	            {
            	                int alt24=2;
            	                switch ( this->LA(1) )
            	                {
            	                case LSQBRACKET:
            	                	{
            	                		alt24=1;
            	                	}
            	                    break;

            	                }

            	                switch (alt24)
            	                {
            	            	case 1:
            	            	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:488:18: LSQBRACKET RSQBRACKET
            	            	    {
            	            	         this->matchToken(LSQBRACKET, &FOLLOW_LSQBRACKET_in_arrayInit3495);
            	            	        if  (this->hasException())
            	            	        {
            	            	            goto rulearrayInitEx;
            	            	        }


            	            	         this->matchToken(RSQBRACKET, &FOLLOW_RSQBRACKET_in_arrayInit3497);
            	            	        if  (this->hasException())
            	            	        {
            	            	            goto rulearrayInitEx;
            	            	        }


            	            	        {
            	            	             node->add_level(); 
            	            	        }


            	            	    }
            	            	    break;

            	            	default:
            	            	    goto loop24;	/* break out of the loop */
            	            	    break;
            	                }
            	            }
            	            loop24: ; /* Jump out to here if this rule does not match */


            	        }


            	    }
            	    break;
            	case 2:
            	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:490:17: ( LSQBRACKET RSQBRACKET )+
            	    {
            	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:490:17: ( LSQBRACKET RSQBRACKET )+
            	        {
            	            int cnt25=0;

            	            for (;;)
            	            {
            	                int alt25=2;
            	        	switch ( this->LA(1) )
            	        	{
            	        	case LSQBRACKET:
            	        		{
            	        			alt25=1;
            	        		}
            	        	    break;

            	        	}

            	        	switch (alt25)
            	        	{
            	        	    case 1:
            	        	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:490:18: LSQBRACKET RSQBRACKET
            	        	        {
            	        	             this->matchToken(LSQBRACKET, &FOLLOW_LSQBRACKET_in_arrayInit3535);
            	        	            if  (this->hasException())
            	        	            {
            	        	                goto rulearrayInitEx;
            	        	            }


            	        	             this->matchToken(RSQBRACKET, &FOLLOW_RSQBRACKET_in_arrayInit3537);
            	        	            if  (this->hasException())
            	        	            {
            	        	                goto rulearrayInitEx;
            	        	            }


            	        	            {
            	        	                 node->add_level(); 
            	        	            }


            	        	        }
            	        	        break;

            	        	    default:

            	        		if ( cnt25 >= 1 )
            	        		{
            	        		    goto loop25;
            	        		}
            	        		/* mismatchedSetEx()
            	        		 */
            	        		new ANTLR_Exception< WNScriptASTParserImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


            	        		goto rulearrayInitEx;
            	        	}
            	        	cnt25++;
            	            }
            	            loop25: ;	/* Jump to here if this rule does not match */
            	        }

            	    }
            	    break;

                }
            }

            // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:492:9: ( ( LBRACKET a= RBRACKET ) | ( LBRACKET b= expr c= RBRACKET ) )
            {
                int alt27=2;
                switch ( this->LA(1) )
                {
                case LBRACKET:
                	{
                		switch ( this->LA(2) )
                		{
                		case RBRACKET:
                			{
                				alt27=1;
                			}
                		    break;
                		case BOOL:
                		case BOOL_TYPE:
                		case CHAR:
                		case CHAR_TYPE:
                		case DOUBDEC:
                		case DOUBINC:
                		case FLOAT:
                		case FLOAT_TYPE:
                		case ID:
                		case INT:
                		case INT_TYPE:
                		case LBRACKET:
                		case NULLTOK:
                		case STRING:
                		case STRING_TYPE:
                		case TYPE:
                		case VOID_TYPE:
                		case 57:
                			{
                				alt27=2;
                			}
                		    break;

                		default:
                		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		    ex->set_decisionNum( 27 );
                		    ex->set_state( 1 );


                		    goto rulearrayInitEx;

                		}

                	}
                    break;

                default:
                    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 27 );
                    ex->set_state( 0 );


                    goto rulearrayInitEx;

                }

                switch (alt27)
                {
            	case 1:
            	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:493:13: ( LBRACKET a= RBRACKET )
            	    {
            	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:493:13: ( LBRACKET a= RBRACKET )
            	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:493:15: LBRACKET a= RBRACKET
            	        {
            	             this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_arrayInit3578);
            	            if  (this->hasException())
            	            {
            	                goto rulearrayInitEx;
            	            }


            	            a =  this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_arrayInit3582);
            	            if  (this->hasException())
            	            {
            	                goto rulearrayInitEx;
            	            }


            	            {
            	                 SET_LOCATION(node, a); 
            	            }


            	        }


            	    }
            	    break;
            	case 2:
            	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:495:13: ( LBRACKET b= expr c= RBRACKET )
            	    {
            	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:495:13: ( LBRACKET b= expr c= RBRACKET )
            	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:495:15: LBRACKET b= expr c= RBRACKET
            	        {
            	             this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_arrayInit3616);
            	            if  (this->hasException())
            	            {
            	                goto rulearrayInitEx;
            	            }


            	            this->followPush(FOLLOW_expr_in_arrayInit3620);
            	            b=expr();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulearrayInitEx;
            	            }


            	            c =  this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_arrayInit3624);
            	            if  (this->hasException())
            	            {
            	                goto rulearrayInitEx;
            	            }


            	            {
            	                 node->set_copy_initializer(b); SET_LOCATION(node, c); 
            	            }


            	        }


            	    }
            	    break;

                }
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto rulearrayInitEx; /* Prevent compiler warnings */
    rulearrayInitEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}
/* $ANTLR end arrayInit */

/**
 * $ANTLR start declaration
 * C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:500:1: declaration returns [scripting::declaration* node] : a= param ( ( '=' ( (c= expr ) ) ) | ( '<==' ( (d= expr ) ) ) ) ;
 */
scripting::declaration*
WNScriptASTParser::declaration()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    scripting::declaration* node;


    scripting::parameter* a;
    scripting::expression* c;
    scripting::expression* d;
    /* Initialize rule variables
     */
     


        node =  m_allocator->make_allocated<scripting::declaration>(m_allocator);


 
    {
        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:504:5: (a= param ( ( '=' ( (c= expr ) ) ) | ( '<==' ( (d= expr ) ) ) ) )
        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:504:10: a= param ( ( '=' ( (c= expr ) ) ) | ( '<==' ( (d= expr ) ) ) )
        {
            this->followPush(FOLLOW_param_in_declaration3669);
            a=param();

            this->followPop();
            if  (this->hasException())
            {
                goto ruledeclarationEx;
            }


            {
                 node->set_parameter(a
                ); 
            }


            // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:505:13: ( ( '=' ( (c= expr ) ) ) | ( '<==' ( (d= expr ) ) ) )
            {
                int alt28=2;
                switch ( this->LA(1) )
                {
                case 64:
                	{
                		alt28=1;
                	}
                    break;
                case CHOWN:
                	{
                		alt28=2;
                	}
                    break;

                default:
                    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 28 );
                    ex->set_state( 0 );


                    goto ruledeclarationEx;

                }

                switch (alt28)
                {
            	case 1:
            	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:506:17: ( '=' ( (c= expr ) ) )
            	    {
            	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:506:17: ( '=' ( (c= expr ) ) )
            	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:506:18: '=' ( (c= expr ) )
            	        {
            	             this->matchToken(64, &FOLLOW_64_in_declaration3704);
            	            if  (this->hasException())
            	            {
            	                goto ruledeclarationEx;
            	            }


            	            // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:506:22: ( (c= expr ) )
            	            // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:506:24: (c= expr )
            	            {
            	                // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:506:24: (c= expr )
            	                // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:506:25: c= expr
            	                {
            	                    this->followPush(FOLLOW_expr_in_declaration3711);
            	                    c=expr();

            	                    this->followPop();
            	                    if  (this->hasException())
            	                    {
            	                        goto ruledeclarationEx;
            	                    }


            	                }


            	                {
            	                     node->add_expression_initializer(c
            	                    ); SET_END_LOCATION_FROM_NODE(node, c
            	                    ); 
            	                }


            	            }


            	        }


            	    }
            	    break;
            	case 2:
            	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:507:17: ( '<==' ( (d= expr ) ) )
            	    {
            	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:507:17: ( '<==' ( (d= expr ) ) )
            	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:507:18: '<==' ( (d= expr ) )
            	        {
            	             this->matchToken(CHOWN, &FOLLOW_CHOWN_in_declaration3737);
            	            if  (this->hasException())
            	            {
            	                goto ruledeclarationEx;
            	            }


            	            // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:507:24: ( (d= expr ) )
            	            // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:507:26: (d= expr )
            	            {
            	                // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:507:26: (d= expr )
            	                // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:507:27: d= expr
            	                {
            	                    this->followPush(FOLLOW_expr_in_declaration3744);
            	                    d=expr();

            	                    this->followPop();
            	                    if  (this->hasException())
            	                    {
            	                        goto ruledeclarationEx;
            	                    }


            	                }


            	                {
            	                     node->add_expression_initializer(d
            	                    , true); SET_END_LOCATION_FROM_NODE(node, d
            	                    ); 
            	                }


            	            }


            	        }


            	    }
            	    break;

                }
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto ruledeclarationEx; /* Prevent compiler warnings */
    ruledeclarationEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}
/* $ANTLR end declaration */

/**
 * $ANTLR start instructionScalar
 * C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:511:1: instructionScalar returns [scripting::instruction* node] : ( declaration | assignment );
 */
scripting::instruction*
WNScriptASTParser::instructionScalar()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    scripting::instruction* node;


    scripting::declaration* declaration25;
    scripting::assignment_instruction* assignment26;
    /* Initialize rule variables
     */
     


        node = wn_nullptr;


 
    {
        {
            //  C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:515:5: ( declaration | assignment )

            ANTLR_UINT32 alt29;

            alt29=2;

            alt29 = cdfa29.predict(this, this->get_rec(), this->get_istream(), cdfa29 );
            if  (this->hasException())
            {
                goto ruleinstructionScalarEx;
            }

            switch (alt29)
            {
        	case 1:
        	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:515:10: declaration
        	    {
        	        this->followPush(FOLLOW_declaration_in_instructionScalar3793);
        	        declaration25=declaration();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleinstructionScalarEx;
        	        }


        	        {
        	            node = declaration25
        	            ; 
        	        }


        	    }
        	    break;
        	case 2:
        	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:516:10: assignment
        	    {
        	        this->followPush(FOLLOW_assignment_in_instructionScalar3806);
        	        assignment26=assignment();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleinstructionScalarEx;
        	        }


        	        {
        	            node = assignment26
        	            ; 
        	        }


        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto ruleinstructionScalarEx; /* Prevent compiler warnings */
    ruleinstructionScalarEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}
/* $ANTLR end instructionScalar */

/**
 * $ANTLR start returnInst
 * C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:519:1: returnInst returns [scripting::return_instruction* node] : (a= RETURN expr b= SEMICOLON |c= RETURN d= SEMICOLON |e= RETURN_OWN expr f= SEMICOLON );
 */
scripting::return_instruction*
WNScriptASTParser::returnInst()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    scripting::return_instruction* node;


    const ImplTraits::CommonTokenType* a = NULL;
    const ImplTraits::CommonTokenType* b = NULL;
    const ImplTraits::CommonTokenType* c = NULL;
    const ImplTraits::CommonTokenType* d = NULL;
    const ImplTraits::CommonTokenType* e = NULL;
    const ImplTraits::CommonTokenType* f = NULL;
    scripting::expression* expr27;
    scripting::expression* expr28;
    /* Initialize rule variables
     */
     


        node = wn_nullptr;


 
    {
        {
            //  C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:523:5: (a= RETURN expr b= SEMICOLON |c= RETURN d= SEMICOLON |e= RETURN_OWN expr f= SEMICOLON )

            ANTLR_UINT32 alt30;

            alt30=3;

            switch ( this->LA(1) )
            {
            case RETURN:
            	{
            		switch ( this->LA(2) )
            		{
            		case SEMICOLON:
            			{
            				alt30=2;
            			}
            		    break;
            		case BOOL:
            		case BOOL_TYPE:
            		case CHAR:
            		case CHAR_TYPE:
            		case DOUBDEC:
            		case DOUBINC:
            		case FLOAT:
            		case FLOAT_TYPE:
            		case ID:
            		case INT:
            		case INT_TYPE:
            		case LBRACKET:
            		case NULLTOK:
            		case STRING:
            		case STRING_TYPE:
            		case TYPE:
            		case VOID_TYPE:
            		case 57:
            			{
            				alt30=1;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 30 );
            		    ex->set_state( 1 );


            		    goto rulereturnInstEx;

            		}

            	}
                break;
            case RETURN_OWN:
            	{
            		alt30=3;
            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 30 );
                ex->set_state( 0 );


                goto rulereturnInstEx;

            }

            switch (alt30)
            {
        	case 1:
        	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:523:9: a= RETURN expr b= SEMICOLON
        	    {
        	        a =  this->matchToken(RETURN, &FOLLOW_RETURN_in_returnInst3838);
        	        if  (this->hasException())
        	        {
        	            goto rulereturnInstEx;
        	        }


        	        this->followPush(FOLLOW_expr_in_returnInst3840);
        	        expr27=expr();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulereturnInstEx;
        	        }


        	        b =  this->matchToken(SEMICOLON, &FOLLOW_SEMICOLON_in_returnInst3844);
        	        if  (this->hasException())
        	        {
        	            goto rulereturnInstEx;
        	        }


        	        {
        	             node = m_allocator->make_allocated<scripting::return_instruction>(m_allocator, expr27
        	            ); SET_LOCATION(node, a); SET_END_LOCATION(node, b);
        	        }


        	    }
        	    break;
        	case 2:
        	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:524:9: c= RETURN d= SEMICOLON
        	    {
        	        c =  this->matchToken(RETURN, &FOLLOW_RETURN_in_returnInst3858);
        	        if  (this->hasException())
        	        {
        	            goto rulereturnInstEx;
        	        }


        	        d =  this->matchToken(SEMICOLON, &FOLLOW_SEMICOLON_in_returnInst3862);
        	        if  (this->hasException())
        	        {
        	            goto rulereturnInstEx;
        	        }


        	        {
        	             node = m_allocator->make_allocated<scripting::return_instruction>(m_allocator); SET_LOCATION(node, c); SET_END_LOCATION(node, d); 
        	        }


        	    }
        	    break;
        	case 3:
        	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:525:9: e= RETURN_OWN expr f= SEMICOLON
        	    {
        	        e =  this->matchToken(RETURN_OWN, &FOLLOW_RETURN_OWN_in_returnInst3876);
        	        if  (this->hasException())
        	        {
        	            goto rulereturnInstEx;
        	        }


        	        this->followPush(FOLLOW_expr_in_returnInst3878);
        	        expr28=expr();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulereturnInstEx;
        	        }


        	        f =  this->matchToken(SEMICOLON, &FOLLOW_SEMICOLON_in_returnInst3882);
        	        if  (this->hasException())
        	        {
        	            goto rulereturnInstEx;
        	        }


        	        {
        	             node = m_allocator->make_allocated<scripting::return_instruction>(m_allocator, expr28
        	            , true); SET_LOCATION(node, e); SET_END_LOCATION(node, f); 
        	        }


        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto rulereturnInstEx; /* Prevent compiler warnings */
    rulereturnInstEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}
/* $ANTLR end returnInst */

/**
 * $ANTLR start whileInst
 * C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:528:1: whileInst returns [scripting::instruction* node] : WHILE LBRACKET expr RBRACKET body ;
 */
scripting::instruction*
WNScriptASTParser::whileInst()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    scripting::instruction* node;


    const ImplTraits::CommonTokenType* WHILE31 = NULL;
    scripting::expression* expr29;
    scripting::instruction_list* body30;
    /* Initialize rule variables
     */
     


        node = wn_nullptr;


 
    {
        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:532:9: ( WHILE LBRACKET expr RBRACKET body )
        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:532:14: WHILE LBRACKET expr RBRACKET body
        {
            WHILE31 =  this->matchToken(WHILE, &FOLLOW_WHILE_in_whileInst3920);
            if  (this->hasException())
            {
                goto rulewhileInstEx;
            }


             this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_whileInst3922);
            if  (this->hasException())
            {
                goto rulewhileInstEx;
            }


            this->followPush(FOLLOW_expr_in_whileInst3924);
            expr29=expr();

            this->followPop();
            if  (this->hasException())
            {
                goto rulewhileInstEx;
            }


             this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_whileInst3926);
            if  (this->hasException())
            {
                goto rulewhileInstEx;
            }


            this->followPush(FOLLOW_body_in_whileInst3928);
            body30=body();

            this->followPop();
            if  (this->hasException())
            {
                goto rulewhileInstEx;
            }


            {
                 node = m_allocator->make_allocated<scripting::while_instruction>(m_allocator, expr29
                , body30
                ); SET_LOCATION(node, WHILE31); SET_END_LOCATION_FROM_NODE(node, 
                body30
                ); 
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto rulewhileInstEx; /* Prevent compiler warnings */
    rulewhileInstEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}
/* $ANTLR end whileInst */

/**
 * $ANTLR start doInst
 * C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:534:1: doInst returns [scripting::instruction* node] : DO body WHILE LBRACKET expr RBRACKET SEMICOLON ;
 */
scripting::instruction*
WNScriptASTParser::doInst()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    scripting::instruction* node;


    const ImplTraits::CommonTokenType* DO34 = NULL;
    const ImplTraits::CommonTokenType* SEMICOLON35 = NULL;
    scripting::expression* expr32;
    scripting::instruction_list* body33;
    /* Initialize rule variables
     */
     


        node = wn_nullptr;


 
    {
        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:538:5: ( DO body WHILE LBRACKET expr RBRACKET SEMICOLON )
        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:538:10: DO body WHILE LBRACKET expr RBRACKET SEMICOLON
        {
            DO34 =  this->matchToken(DO, &FOLLOW_DO_in_doInst3964);
            if  (this->hasException())
            {
                goto ruledoInstEx;
            }


            this->followPush(FOLLOW_body_in_doInst3966);
            body33=body();

            this->followPop();
            if  (this->hasException())
            {
                goto ruledoInstEx;
            }


             this->matchToken(WHILE, &FOLLOW_WHILE_in_doInst3968);
            if  (this->hasException())
            {
                goto ruledoInstEx;
            }


             this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_doInst3970);
            if  (this->hasException())
            {
                goto ruledoInstEx;
            }


            this->followPush(FOLLOW_expr_in_doInst3972);
            expr32=expr();

            this->followPop();
            if  (this->hasException())
            {
                goto ruledoInstEx;
            }


             this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_doInst3974);
            if  (this->hasException())
            {
                goto ruledoInstEx;
            }


            SEMICOLON35 =  this->matchToken(SEMICOLON, &FOLLOW_SEMICOLON_in_doInst3976);
            if  (this->hasException())
            {
                goto ruledoInstEx;
            }


            {
                node = m_allocator->make_allocated<scripting::do_instruction>(m_allocator, expr32
                , body33
                ); SET_LOCATION(node, DO34); SET_END_LOCATION(node, SEMICOLON35); 
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto ruledoInstEx; /* Prevent compiler warnings */
    ruledoInstEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}
/* $ANTLR end doInst */

/**
 * $ANTLR start forInst
 * C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:541:1: forInst returns [scripting::for_instruction* node] : FOR LBRACKET (a= instructionScalar )? SEMICOLON (b= expr )? SEMICOLON (c= instructionScalar )? RBRACKET (d= body ) ;
 */
scripting::for_instruction*
WNScriptASTParser::forInst()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    scripting::for_instruction* node;


    const ImplTraits::CommonTokenType* FOR36 = NULL;
    scripting::instruction* a;
    scripting::expression* b;
    scripting::instruction* c;
    scripting::instruction_list* d;
    /* Initialize rule variables
     */
     


        node =  m_allocator->make_allocated<scripting::for_instruction>(m_allocator);


 
    {
        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:545:5: ( FOR LBRACKET (a= instructionScalar )? SEMICOLON (b= expr )? SEMICOLON (c= instructionScalar )? RBRACKET (d= body ) )
        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:545:10: FOR LBRACKET (a= instructionScalar )? SEMICOLON (b= expr )? SEMICOLON (c= instructionScalar )? RBRACKET (d= body )
        {
            FOR36 =  this->matchToken(FOR, &FOLLOW_FOR_in_forInst4008);
            if  (this->hasException())
            {
                goto ruleforInstEx;
            }


             this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_forInst4010);
            if  (this->hasException())
            {
                goto ruleforInstEx;
            }


            {
                 SET_LOCATION(node, FOR36); 
            }


            // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:546:21: (a= instructionScalar )?
            {
                int alt31=2;
                switch ( this->LA(1) )
                {
                    case BOOL:
                    case BOOL_TYPE:
                    case CHAR:
                    case CHAR_TYPE:
                    case DOUBDEC:
                    case DOUBINC:
                    case FLOAT:
                    case FLOAT_TYPE:
                    case ID:
                    case INT:
                    case INT_TYPE:
                    case LBRACKET:
                    case NULLTOK:
                    case STRING:
                    case STRING_TYPE:
                    case TYPE:
                    case VOID_TYPE:
                    case 57:
                    	{
                    		alt31=1;
                    	}
                        break;
                }

                switch (alt31)
                {
            	case 1:
            	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:546:22: a= instructionScalar
            	    {
            	        this->followPush(FOLLOW_instructionScalar_in_forInst4038);
            	        a=instructionScalar();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleforInstEx;
            	        }


            	        {
            	            node->add_initializer(a
            	            );
            	        }


            	    }
            	    break;

                }
            }

             this->matchToken(SEMICOLON, &FOLLOW_SEMICOLON_in_forInst4044);
            if  (this->hasException())
            {
                goto ruleforInstEx;
            }


            // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:547:21: (b= expr )?
            {
                int alt32=2;
                switch ( this->LA(1) )
                {
                    case BOOL:
                    case BOOL_TYPE:
                    case CHAR:
                    case CHAR_TYPE:
                    case DOUBDEC:
                    case DOUBINC:
                    case FLOAT:
                    case FLOAT_TYPE:
                    case ID:
                    case INT:
                    case INT_TYPE:
                    case LBRACKET:
                    case NULLTOK:
                    case STRING:
                    case STRING_TYPE:
                    case TYPE:
                    case VOID_TYPE:
                    case 57:
                    	{
                    		alt32=1;
                    	}
                        break;
                }

                switch (alt32)
                {
            	case 1:
            	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:547:22: b= expr
            	    {
            	        this->followPush(FOLLOW_expr_in_forInst4069);
            	        b=expr();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleforInstEx;
            	        }


            	        {
            	            node->add_condition(b
            	            ); 
            	        }


            	    }
            	    break;

                }
            }

             this->matchToken(SEMICOLON, &FOLLOW_SEMICOLON_in_forInst4083);
            if  (this->hasException())
            {
                goto ruleforInstEx;
            }


            // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:548:21: (c= instructionScalar )?
            {
                int alt33=2;
                switch ( this->LA(1) )
                {
                    case BOOL:
                    case BOOL_TYPE:
                    case CHAR:
                    case CHAR_TYPE:
                    case DOUBDEC:
                    case DOUBINC:
                    case FLOAT:
                    case FLOAT_TYPE:
                    case ID:
                    case INT:
                    case INT_TYPE:
                    case LBRACKET:
                    case NULLTOK:
                    case STRING:
                    case STRING_TYPE:
                    case TYPE:
                    case VOID_TYPE:
                    case 57:
                    	{
                    		alt33=1;
                    	}
                        break;
                }

                switch (alt33)
                {
            	case 1:
            	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:548:22: c= instructionScalar
            	    {
            	        this->followPush(FOLLOW_instructionScalar_in_forInst4108);
            	        c=instructionScalar();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleforInstEx;
            	        }


            	        {
            	            node->add_post_op(c
            	            ); 
            	        }


            	    }
            	    break;

                }
            }

             this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_forInst4114);
            if  (this->hasException())
            {
                goto ruleforInstEx;
            }


            // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:549:21: (d= body )
            // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:549:22: d= body
            {
                this->followPush(FOLLOW_body_in_forInst4139);
                d=body();

                this->followPop();
                if  (this->hasException())
                {
                    goto ruleforInstEx;
                }


                {
                    node->add_body(d
                    ); SET_END_LOCATION_FROM_NODE(node, d
                    ); 
                }


            }


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleforInstEx; /* Prevent compiler warnings */
    ruleforInstEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}
/* $ANTLR end forInst */

/**
 * $ANTLR start elsemiddle
 * C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:553:1: elsemiddle returns [scripting::else_if_instruction* node] : ELSE IF LBRACKET expr RBRACKET body ;
 */
scripting::else_if_instruction*
WNScriptASTParser::elsemiddle()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    scripting::else_if_instruction* node;


    const ImplTraits::CommonTokenType* ELSE39 = NULL;
    scripting::expression* expr37;
    scripting::instruction_list* body38;
    /* Initialize rule variables
     */
     


        node = wn_nullptr;


 
    {
        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:557:5: ( ELSE IF LBRACKET expr RBRACKET body )
        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:557:10: ELSE IF LBRACKET expr RBRACKET body
        {
            ELSE39 =  this->matchToken(ELSE, &FOLLOW_ELSE_in_elsemiddle4187);
            if  (this->hasException())
            {
                goto ruleelsemiddleEx;
            }


             this->matchToken(IF, &FOLLOW_IF_in_elsemiddle4189);
            if  (this->hasException())
            {
                goto ruleelsemiddleEx;
            }


             this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_elsemiddle4191);
            if  (this->hasException())
            {
                goto ruleelsemiddleEx;
            }


            this->followPush(FOLLOW_expr_in_elsemiddle4193);
            expr37=expr();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleelsemiddleEx;
            }


             this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_elsemiddle4195);
            if  (this->hasException())
            {
                goto ruleelsemiddleEx;
            }


            this->followPush(FOLLOW_body_in_elsemiddle4197);
            body38=body();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleelsemiddleEx;
            }


            {
                 node = m_allocator->make_allocated<scripting::else_if_instruction>(m_allocator, expr37
                , body38
                ); SET_LOCATION(node, ELSE39); SET_END_LOCATION_FROM_NODE(node, 
                body38
                ); 
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleelsemiddleEx; /* Prevent compiler warnings */
    ruleelsemiddleEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}
/* $ANTLR end elsemiddle */

/**
 * $ANTLR start endif
 * C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:560:1: endif returns [scripting::instruction_list* node] : 'else' body ;
 */
scripting::instruction_list*
WNScriptASTParser::endif()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    scripting::instruction_list* node;


    scripting::instruction_list* body40;
    /* Initialize rule variables
     */
     


        node = wn_nullptr;


 
    {
        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:564:5: ( 'else' body )
        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:564:10: 'else' body
        {
             this->matchToken(ELSE, &FOLLOW_ELSE_in_endif4230);
            if  (this->hasException())
            {
                goto ruleendifEx;
            }


            this->followPush(FOLLOW_body_in_endif4232);
            body40=body();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleendifEx;
            }


            {
                node = body40
                ; 
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleendifEx; /* Prevent compiler warnings */
    ruleendifEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}
/* $ANTLR end endif */

/**
 * $ANTLR start ifInst
 * C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:567:1: ifInst returns [scripting::if_instruction* node] : IF LBRACKET expr RBRACKET body ( elsemiddle )* ( endif )? ;
 */
scripting::if_instruction*
WNScriptASTParser::ifInst()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    scripting::if_instruction* node;


    const ImplTraits::CommonTokenType* IF43 = NULL;
    scripting::expression* expr41;
    scripting::instruction_list* body42;
    scripting::else_if_instruction* elsemiddle44;
    scripting::instruction_list* endif45;
    /* Initialize rule variables
     */
     


        node = wn_nullptr;


 
    {
        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:571:5: ( IF LBRACKET expr RBRACKET body ( elsemiddle )* ( endif )? )
        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:571:10: IF LBRACKET expr RBRACKET body ( elsemiddle )* ( endif )?
        {
            IF43 =  this->matchToken(IF, &FOLLOW_IF_in_ifInst4262);
            if  (this->hasException())
            {
                goto ruleifInstEx;
            }


             this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_ifInst4264);
            if  (this->hasException())
            {
                goto ruleifInstEx;
            }


            this->followPush(FOLLOW_expr_in_ifInst4266);
            expr41=expr();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleifInstEx;
            }


             this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_ifInst4268);
            if  (this->hasException())
            {
                goto ruleifInstEx;
            }


            this->followPush(FOLLOW_body_in_ifInst4270);
            body42=body();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleifInstEx;
            }


            {
                node = m_allocator->make_allocated<scripting::if_instruction>(m_allocator, expr41
                , body42
                ); SET_LOCATION(node, IF43); SET_END_LOCATION_FROM_NODE(node, 
                body42
                ); 
            }


            // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:572:13: ( elsemiddle )*

            for (;;)
            {
                int alt34=2;
                switch ( this->LA(1) )
                {
                case ELSE:
                	{
                		switch ( this->LA(2) )
                		{
                		case IF:
                			{
                				alt34=1;
                			}
                		    break;

                		}

                	}
                    break;

                }

                switch (alt34)
                {
            	case 1:
            	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:572:14: elsemiddle
            	    {
            	        this->followPush(FOLLOW_elsemiddle_in_ifInst4287);
            	        elsemiddle44=elsemiddle();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleifInstEx;
            	        }


            	        {
            	            node->add_else_if(elsemiddle44
            	            ); SET_END_LOCATION_FROM_NODE(node, elsemiddle44
            	            ); 
            	        }


            	    }
            	    break;

            	default:
            	    goto loop34;	/* break out of the loop */
            	    break;
                }
            }
            loop34: ; /* Jump out to here if this rule does not match */


            // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:573:13: ( endif )?
            {
                int alt35=2;
                switch ( this->LA(1) )
                {
                    case ELSE:
                    	{
                    		alt35=1;
                    	}
                        break;
                }

                switch (alt35)
                {
            	case 1:
            	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:573:14: endif
            	    {
            	        this->followPush(FOLLOW_endif_in_ifInst4307);
            	        endif45=endif();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleifInstEx;
            	        }


            	        {
            	            node->add_else(endif45
            	            ); SET_LOCATION(node, IF43); SET_END_LOCATION_FROM_NODE(node, 
            	            endif45
            	            ); 
            	        }


            	    }
            	    break;

                }
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleifInstEx; /* Prevent compiler warnings */
    ruleifInstEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}
/* $ANTLR end ifInst */

/**
 * $ANTLR start instruction
 * C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:576:1: instruction returns [scripting::instruction* node] : ( ifInst | whileInst | doInst | forInst | instructionScalar ';' | returnInst );
 */
scripting::instruction*
WNScriptASTParser::instruction()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    scripting::instruction* node;


    scripting::if_instruction* ifInst46;
    scripting::instruction* whileInst47;
    scripting::instruction* doInst48;
    scripting::for_instruction* forInst49;
    scripting::instruction* instructionScalar50;
    scripting::return_instruction* returnInst51;
    /* Initialize rule variables
     */
     


        node = wn_nullptr;


 
    {
        {
            //  C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:580:5: ( ifInst | whileInst | doInst | forInst | instructionScalar ';' | returnInst )

            ANTLR_UINT32 alt36;

            alt36=6;

            switch ( this->LA(1) )
            {
            case IF:
            	{
            		alt36=1;
            	}
                break;
            case WHILE:
            	{
            		alt36=2;
            	}
                break;
            case DO:
            	{
            		alt36=3;
            	}
                break;
            case FOR:
            	{
            		alt36=4;
            	}
                break;
            case BOOL:
            case BOOL_TYPE:
            case CHAR:
            case CHAR_TYPE:
            case DOUBDEC:
            case DOUBINC:
            case FLOAT:
            case FLOAT_TYPE:
            case ID:
            case INT:
            case INT_TYPE:
            case LBRACKET:
            case NULLTOK:
            case STRING:
            case STRING_TYPE:
            case TYPE:
            case VOID_TYPE:
            case 57:
            	{
            		alt36=5;
            	}
                break;
            case RETURN:
            case RETURN_OWN:
            	{
            		alt36=6;
            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 36 );
                ex->set_state( 0 );


                goto ruleinstructionEx;

            }

            switch (alt36)
            {
        	case 1:
        	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:580:10: ifInst
        	    {
        	        this->followPush(FOLLOW_ifInst_in_instruction4341);
        	        ifInst46=ifInst();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleinstructionEx;
        	        }


        	        {
        	             node = ifInst46
        	            ; 
        	        }


        	    }
        	    break;
        	case 2:
        	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:581:10: whileInst
        	    {
        	        this->followPush(FOLLOW_whileInst_in_instruction4362);
        	        whileInst47=whileInst();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleinstructionEx;
        	        }


        	        {
        	            node = whileInst47
        	            ; 
        	        }


        	    }
        	    break;
        	case 3:
        	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:582:10: doInst
        	    {
        	        this->followPush(FOLLOW_doInst_in_instruction4379);
        	        doInst48=doInst();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleinstructionEx;
        	        }


        	        {
        	            node = doInst48
        	            ; 
        	        }


        	    }
        	    break;
        	case 4:
        	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:583:10: forInst
        	    {
        	        this->followPush(FOLLOW_forInst_in_instruction4399);
        	        forInst49=forInst();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleinstructionEx;
        	        }


        	        {
        	            node = forInst49
        	            ; 
        	        }


        	    }
        	    break;
        	case 5:
        	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:584:10: instructionScalar ';'
        	    {
        	        this->followPush(FOLLOW_instructionScalar_in_instruction4419);
        	        instructionScalar50=instructionScalar();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleinstructionEx;
        	        }


        	         this->matchToken(SEMICOLON, &FOLLOW_SEMICOLON_in_instruction4421);
        	        if  (this->hasException())
        	        {
        	            goto ruleinstructionEx;
        	        }


        	        {
        	            node = instructionScalar50
        	            ;
        	        }


        	    }
        	    break;
        	case 6:
        	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:585:10: returnInst
        	    {
        	        this->followPush(FOLLOW_returnInst_in_instruction4434);
        	        returnInst51=returnInst();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleinstructionEx;
        	        }


        	        {
        	            node = returnInst51
        	            ; 
        	        }


        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto ruleinstructionEx; /* Prevent compiler warnings */
    ruleinstructionEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}
/* $ANTLR end instruction */

/**
 * $ANTLR start instruction_list
 * C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:588:1: instruction_list returns [scripting::instruction_list* node] : a= instruction (b= instruction )* ;
 */
scripting::instruction_list*
WNScriptASTParser::instruction_list()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    scripting::instruction_list* node;


    scripting::instruction* a;
    scripting::instruction* b;
    /* Initialize rule variables
     */
     


        node = wn_nullptr;


 
    {
        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:592:5: (a= instruction (b= instruction )* )
        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:592:10: a= instruction (b= instruction )*
        {
            this->followPush(FOLLOW_instruction_in_instruction_list4466);
            a=instruction();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleinstruction_listEx;
            }


            {
                node = m_allocator->make_allocated<scripting::instruction_list>(m_allocator, a
                ); SET_LOCATION_FROM_NODE(node, a
                ); 
            }


            // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:593:9: (b= instruction )*

            for (;;)
            {
                int alt37=2;
                switch ( this->LA(1) )
                {
                case BOOL:
                case BOOL_TYPE:
                case CHAR:
                case CHAR_TYPE:
                case DO:
                case DOUBDEC:
                case DOUBINC:
                case FLOAT:
                case FLOAT_TYPE:
                case FOR:
                case ID:
                case IF:
                case INT:
                case INT_TYPE:
                case LBRACKET:
                case NULLTOK:
                case RETURN:
                case RETURN_OWN:
                case STRING:
                case STRING_TYPE:
                case TYPE:
                case VOID_TYPE:
                case WHILE:
                case 57:
                	{
                		alt37=1;
                	}
                    break;

                }

                switch (alt37)
                {
            	case 1:
            	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:593:10: b= instruction
            	    {
            	        this->followPush(FOLLOW_instruction_in_instruction_list4482);
            	        b=instruction();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleinstruction_listEx;
            	        }


            	        {
            	            node->add_instruction(b
            	            , m_log); SET_END_LOCATION_FROM_NODE(node, b
            	            ); 
            	        }


            	    }
            	    break;

            	default:
            	    goto loop37;	/* break out of the loop */
            	    break;
                }
            }
            loop37: ; /* Jump out to here if this rule does not match */


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleinstruction_listEx; /* Prevent compiler warnings */
    ruleinstruction_listEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}
/* $ANTLR end instruction_list */

/**
 * $ANTLR start body
 * C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:596:1: body returns [scripting::instruction_list* node] : (a= LBRACE b= RBRACE |d= LBRACE instruction_list e= RBRACE );
 */
scripting::instruction_list*
WNScriptASTParser::body()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    scripting::instruction_list* node;


    const ImplTraits::CommonTokenType* a = NULL;
    const ImplTraits::CommonTokenType* b = NULL;
    const ImplTraits::CommonTokenType* d = NULL;
    const ImplTraits::CommonTokenType* e = NULL;
    scripting::instruction_list* instruction_list52;
    /* Initialize rule variables
     */
     


        node = wn_nullptr;


 
    {
        {
            //  C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:600:5: (a= LBRACE b= RBRACE |d= LBRACE instruction_list e= RBRACE )

            ANTLR_UINT32 alt38;

            alt38=2;

            switch ( this->LA(1) )
            {
            case LBRACE:
            	{
            		switch ( this->LA(2) )
            		{
            		case RBRACE:
            			{
            				alt38=1;
            			}
            		    break;
            		case BOOL:
            		case BOOL_TYPE:
            		case CHAR:
            		case CHAR_TYPE:
            		case DO:
            		case DOUBDEC:
            		case DOUBINC:
            		case FLOAT:
            		case FLOAT_TYPE:
            		case FOR:
            		case ID:
            		case IF:
            		case INT:
            		case INT_TYPE:
            		case LBRACKET:
            		case NULLTOK:
            		case RETURN:
            		case RETURN_OWN:
            		case STRING:
            		case STRING_TYPE:
            		case TYPE:
            		case VOID_TYPE:
            		case WHILE:
            		case 57:
            			{
            				alt38=2;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 38 );
            		    ex->set_state( 1 );


            		    goto rulebodyEx;

            		}

            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 38 );
                ex->set_state( 0 );


                goto rulebodyEx;

            }

            switch (alt38)
            {
        	case 1:
        	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:600:10: a= LBRACE b= RBRACE
        	    {
        	        a =  this->matchToken(LBRACE, &FOLLOW_LBRACE_in_body4516);
        	        if  (this->hasException())
        	        {
        	            goto rulebodyEx;
        	        }


        	        b =  this->matchToken(RBRACE, &FOLLOW_RBRACE_in_body4520);
        	        if  (this->hasException())
        	        {
        	            goto rulebodyEx;
        	        }


        	        {
        	             node = m_allocator->make_allocated<scripting::instruction_list>(m_allocator); SET_LOCATION(node, a); SET_END_LOCATION(node, b); 
        	        }


        	    }
        	    break;
        	case 2:
        	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:601:10: d= LBRACE instruction_list e= RBRACE
        	    {
        	        d =  this->matchToken(LBRACE, &FOLLOW_LBRACE_in_body4535);
        	        if  (this->hasException())
        	        {
        	            goto rulebodyEx;
        	        }


        	        this->followPush(FOLLOW_instruction_list_in_body4537);
        	        instruction_list52=instruction_list();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulebodyEx;
        	        }


        	        e =  this->matchToken(RBRACE, &FOLLOW_RBRACE_in_body4541);
        	        if  (this->hasException())
        	        {
        	            goto rulebodyEx;
        	        }


        	        {
        	            node = instruction_list52
        	            ; SET_LOCATION(node, d); SET_END_LOCATION(node, e); 
        	        }


        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto rulebodyEx; /* Prevent compiler warnings */
    rulebodyEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}
/* $ANTLR end body */

/**
 * $ANTLR start function
 * C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:604:1: function returns [scripting::function* node] : param parameterList body ;
 */
scripting::function*
WNScriptASTParser::function()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    scripting::function* node;


    scripting::parameter* param53;
    scripting::parameter_list* parameterList54;
    scripting::instruction_list* body55;
    /* Initialize rule variables
     */
     


        node = wn_nullptr;


 
    {
        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:608:5: ( param parameterList body )
        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:608:10: param parameterList body
        {
            this->followPush(FOLLOW_param_in_function4571);
            param53=param();

            this->followPop();
            if  (this->hasException())
            {
                goto rulefunctionEx;
            }


            this->followPush(FOLLOW_parameterList_in_function4573);
            parameterList54=parameterList();

            this->followPop();
            if  (this->hasException())
            {
                goto rulefunctionEx;
            }


            this->followPush(FOLLOW_body_in_function4575);
            body55=body();

            this->followPop();
            if  (this->hasException())
            {
                goto rulefunctionEx;
            }


            {
                 node = m_allocator->make_allocated<scripting::function>(m_allocator, param53
                , parameterList54
                , body55
                ); SET_LOCATION_FROM_NODE(node, param53
                ); SET_END_LOCATION_FROM_NODE(node, body55
                ); 
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto rulefunctionEx; /* Prevent compiler warnings */
    rulefunctionEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}
/* $ANTLR end function */

/**
 * $ANTLR start structDecl
 * C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:611:1: structDecl returns [scripting::struct_definition* node] : STRUCT TYPE LBRACE (a= declaration SEMICOLON )* RBRACE ;
 */
scripting::struct_definition*
WNScriptASTParser::structDecl()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    scripting::struct_definition* node;


    const ImplTraits::CommonTokenType* TYPE56 = NULL;
    const ImplTraits::CommonTokenType* STRUCT57 = NULL;
    const ImplTraits::CommonTokenType* RBRACE58 = NULL;
    scripting::declaration* a;
    /* Initialize rule variables
     */
     


        node = wn_nullptr;


 
    {
        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:615:5: ( STRUCT TYPE LBRACE (a= declaration SEMICOLON )* RBRACE )
        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:615:10: STRUCT TYPE LBRACE (a= declaration SEMICOLON )* RBRACE
        {
            STRUCT57 =  this->matchToken(STRUCT, &FOLLOW_STRUCT_in_structDecl4605);
            if  (this->hasException())
            {
                goto rulestructDeclEx;
            }


            TYPE56 =  this->matchToken(TYPE, &FOLLOW_TYPE_in_structDecl4607);
            if  (this->hasException())
            {
                goto rulestructDeclEx;
            }


            {
                node= m_allocator->make_allocated<scripting::struct_definition>(m_allocator, (TYPE56->getText()).c_str()); SET_LOCATION(node, STRUCT57); 
            }


             this->matchToken(LBRACE, &FOLLOW_LBRACE_in_structDecl4623);
            if  (this->hasException())
            {
                goto rulestructDeclEx;
            }


            // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:616:20: (a= declaration SEMICOLON )*

            for (;;)
            {
                int alt39=2;
                switch ( this->LA(1) )
                {
                case BOOL_TYPE:
                case CHAR_TYPE:
                case FLOAT_TYPE:
                case INT_TYPE:
                case STRING_TYPE:
                case TYPE:
                case VOID_TYPE:
                	{
                		alt39=1;
                	}
                    break;

                }

                switch (alt39)
                {
            	case 1:
            	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:616:21: a= declaration SEMICOLON
            	    {
            	        this->followPush(FOLLOW_declaration_in_structDecl4628);
            	        a=declaration();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulestructDeclEx;
            	        }


            	        {
            	             node->add_struct_elem(a
            	            );
            	        }


            	         this->matchToken(SEMICOLON, &FOLLOW_SEMICOLON_in_structDecl4632);
            	        if  (this->hasException())
            	        {
            	            goto rulestructDeclEx;
            	        }


            	    }
            	    break;

            	default:
            	    goto loop39;	/* break out of the loop */
            	    break;
                }
            }
            loop39: ; /* Jump out to here if this rule does not match */


            RBRACE58 =  this->matchToken(RBRACE, &FOLLOW_RBRACE_in_structDecl4637);
            if  (this->hasException())
            {
                goto rulestructDeclEx;
            }


            {
                 SET_END_LOCATION(node, RBRACE58); 
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto rulestructDeclEx; /* Prevent compiler warnings */
    rulestructDeclEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}
/* $ANTLR end structDecl */

/**
 * $ANTLR start classDecl
 * C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:619:1: classDecl returns [scripting::struct_definition* node] : ( (f= CLASS c= TYPE ) | (g= CLASS d= TYPE COLON e= TYPE ) ) LBRACE ( (a= declaration SEMICOLON ) | (b= function ) | ( VIRTUAL h= function ) | ( OVERRIDE i= function ) )* RBRACE ;
 */
scripting::struct_definition*
WNScriptASTParser::classDecl()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    scripting::struct_definition* node;


    const ImplTraits::CommonTokenType* f = NULL;
    const ImplTraits::CommonTokenType* c = NULL;
    const ImplTraits::CommonTokenType* g = NULL;
    const ImplTraits::CommonTokenType* d = NULL;
    const ImplTraits::CommonTokenType* e = NULL;
    const ImplTraits::CommonTokenType* RBRACE59 = NULL;
    scripting::declaration* a;
    scripting::function* b;
    scripting::function* h;
    scripting::function* i;
    /* Initialize rule variables
     */
     


        node = wn_nullptr;


 
    {
        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:623:5: ( ( (f= CLASS c= TYPE ) | (g= CLASS d= TYPE COLON e= TYPE ) ) LBRACE ( (a= declaration SEMICOLON ) | (b= function ) | ( VIRTUAL h= function ) | ( OVERRIDE i= function ) )* RBRACE )
        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:624:9: ( (f= CLASS c= TYPE ) | (g= CLASS d= TYPE COLON e= TYPE ) ) LBRACE ( (a= declaration SEMICOLON ) | (b= function ) | ( VIRTUAL h= function ) | ( OVERRIDE i= function ) )* RBRACE
        {
            // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:624:9: ( (f= CLASS c= TYPE ) | (g= CLASS d= TYPE COLON e= TYPE ) )
            {
                int alt40=2;
                switch ( this->LA(1) )
                {
                case CLASS:
                	{
                		switch ( this->LA(2) )
                		{
                		case TYPE:
                			{
                				switch ( this->LA(3) )
                				{
                				case COLON:
                					{
                						alt40=2;
                					}
                				    break;
                				case LBRACE:
                					{
                						alt40=1;
                					}
                				    break;

                				default:
                				    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                				    ex->set_decisionNum( 40 );
                				    ex->set_state( 2 );


                				    goto ruleclassDeclEx;

                				}

                			}
                		    break;

                		default:
                		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		    ex->set_decisionNum( 40 );
                		    ex->set_state( 1 );


                		    goto ruleclassDeclEx;

                		}

                	}
                    break;

                default:
                    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 40 );
                    ex->set_state( 0 );


                    goto ruleclassDeclEx;

                }

                switch (alt40)
                {
            	case 1:
            	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:625:13: (f= CLASS c= TYPE )
            	    {
            	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:625:13: (f= CLASS c= TYPE )
            	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:625:14: f= CLASS c= TYPE
            	        {
            	            f =  this->matchToken(CLASS, &FOLLOW_CLASS_in_classDecl4690);
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            c =  this->matchToken(TYPE, &FOLLOW_TYPE_in_classDecl4694);
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            {
            	                node= m_allocator->make_allocated<scripting::struct_definition>(m_allocator, (c->getText()).c_str(), true); SET_LOCATION(node, f); 
            	            }


            	        }


            	    }
            	    break;
            	case 2:
            	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:626:13: (g= CLASS d= TYPE COLON e= TYPE )
            	    {
            	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:626:13: (g= CLASS d= TYPE COLON e= TYPE )
            	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:626:14: g= CLASS d= TYPE COLON e= TYPE
            	        {
            	            g =  this->matchToken(CLASS, &FOLLOW_CLASS_in_classDecl4714);
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            d =  this->matchToken(TYPE, &FOLLOW_TYPE_in_classDecl4718);
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	             this->matchToken(COLON, &FOLLOW_COLON_in_classDecl4720);
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            e =  this->matchToken(TYPE, &FOLLOW_TYPE_in_classDecl4724);
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            {
            	                node= m_allocator->make_allocated<scripting::struct_definition>(m_allocator, (d->getText()).c_str(), true, (e->getText()).c_str()); SET_LOCATION(node, g); 
            	            }


            	        }


            	    }
            	    break;

                }
            }

             this->matchToken(LBRACE, &FOLLOW_LBRACE_in_classDecl4751);
            if  (this->hasException())
            {
                goto ruleclassDeclEx;
            }


            // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:629:17: ( (a= declaration SEMICOLON ) | (b= function ) | ( VIRTUAL h= function ) | ( OVERRIDE i= function ) )*

            for (;;)
            {
                int alt41=5;
                alt41 = cdfa41.predict(this, this->get_rec(), this->get_istream(), cdfa41 );
                if  (this->hasException())
                {
                    goto ruleclassDeclEx;
                }

                switch (alt41)
                {
            	case 1:
            	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:630:21: (a= declaration SEMICOLON )
            	    {
            	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:630:21: (a= declaration SEMICOLON )
            	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:630:22: a= declaration SEMICOLON
            	        {
            	            this->followPush(FOLLOW_declaration_in_classDecl4794);
            	            a=declaration();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            {
            	                 node->add_struct_elem(a
            	                );
            	            }


            	             this->matchToken(SEMICOLON, &FOLLOW_SEMICOLON_in_classDecl4798);
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	        }


            	    }
            	    break;
            	case 2:
            	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:631:21: (b= function )
            	    {
            	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:631:21: (b= function )
            	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:631:22: b= function
            	        {
            	            this->followPush(FOLLOW_function_in_classDecl4824);
            	            b=function();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            {
            	                 node->add_function(b
            	                ); 
            	            }


            	        }


            	    }
            	    break;
            	case 3:
            	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:632:21: ( VIRTUAL h= function )
            	    {
            	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:632:21: ( VIRTUAL h= function )
            	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:632:22: VIRTUAL h= function
            	        {
            	             this->matchToken(VIRTUAL, &FOLLOW_VIRTUAL_in_classDecl4853);
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            this->followPush(FOLLOW_function_in_classDecl4857);
            	            h=function();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            {
            	                 node->add_function(h
            	                ); h
            	                ->set_is_virtual(wn_true); 
            	            }


            	        }


            	    }
            	    break;
            	case 4:
            	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:633:21: ( OVERRIDE i= function )
            	    {
            	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:633:21: ( OVERRIDE i= function )
            	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:633:22: OVERRIDE i= function
            	        {
            	             this->matchToken(OVERRIDE, &FOLLOW_OVERRIDE_in_classDecl4883);
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            this->followPush(FOLLOW_function_in_classDecl4887);
            	            i=function();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            {
            	                 node->add_function(i
            	                ); i
            	                ->set_is_override(wn_true); 
            	            }


            	        }


            	    }
            	    break;

            	default:
            	    goto loop41;	/* break out of the loop */
            	    break;
                }
            }
            loop41: ; /* Jump out to here if this rule does not match */


            RBRACE59 =  this->matchToken(RBRACE, &FOLLOW_RBRACE_in_classDecl4923);
            if  (this->hasException())
            {
                goto ruleclassDeclEx;
            }


            {
                 SET_END_LOCATION(node, RBRACE59); 
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleclassDeclEx; /* Prevent compiler warnings */
    ruleclassDeclEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}
/* $ANTLR end classDecl */

/**
 * $ANTLR start inc
 * C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:638:1: inc returns [const wn_char* file] : INCLUDE STRING ;
 */
const wn_char*
WNScriptASTParser::inc()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    const wn_char* file;


    const ImplTraits::CommonTokenType* STRING60 = NULL;

    /* Initialize rule variables
     */
     


        file = wn_nullptr;


 
    {
        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:642:5: ( INCLUDE STRING )
        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:642:9: INCLUDE STRING
        {
             this->matchToken(INCLUDE, &FOLLOW_INCLUDE_in_inc4953);
            if  (this->hasException())
            {
                goto ruleincEx;
            }


            STRING60 =  this->matchToken(STRING, &FOLLOW_STRING_in_inc4955);
            if  (this->hasException())
            {
                goto ruleincEx;
            }


            {
                 file = (STRING60->getText()).c_str(); 
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleincEx; /* Prevent compiler warnings */
    ruleincEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return file;
}
/* $ANTLR end inc */

/**
 * $ANTLR start program
 * C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:645:1: program returns [scripting::script_file* node] : ( function | structDecl | classDecl | inc )* ;
 */
scripting::script_file*
WNScriptASTParser::program()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    scripting::script_file* node;


    scripting::function* function61;
    scripting::struct_definition* structDecl62;
    scripting::struct_definition* classDecl63;
    const wn_char* inc64;
    /* Initialize rule variables
     */
     


        node = m_allocator->make_allocated<scripting::script_file>(m_allocator);


 
    {
        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:649:5: ( ( function | structDecl | classDecl | inc )* )
        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:649:9: ( function | structDecl | classDecl | inc )*
        {
            // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:649:9: ( function | structDecl | classDecl | inc )*

            for (;;)
            {
                int alt42=5;
                switch ( this->LA(1) )
                {
                case BOOL_TYPE:
                case CHAR_TYPE:
                case FLOAT_TYPE:
                case INT_TYPE:
                case STRING_TYPE:
                case TYPE:
                case VOID_TYPE:
                	{
                		alt42=1;
                	}
                    break;
                case STRUCT:
                	{
                		alt42=2;
                	}
                    break;
                case CLASS:
                	{
                		alt42=3;
                	}
                    break;
                case INCLUDE:
                	{
                		alt42=4;
                	}
                    break;

                }

                switch (alt42)
                {
            	case 1:
            	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:650:17: function
            	    {
            	        this->followPush(FOLLOW_function_in_program5001);
            	        function61=function();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleprogramEx;
            	        }


            	        {
            	             node->add_function(function61
            	            ); 
            	        }


            	    }
            	    break;
            	case 2:
            	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:651:17: structDecl
            	    {
            	        this->followPush(FOLLOW_structDecl_in_program5023);
            	        structDecl62=structDecl();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleprogramEx;
            	        }


            	        {
            	             node->add_struct(structDecl62
            	            ); 
            	        }


            	    }
            	    break;
            	case 3:
            	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:652:17: classDecl
            	    {
            	        this->followPush(FOLLOW_classDecl_in_program5043);
            	        classDecl63=classDecl();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleprogramEx;
            	        }


            	        {
            	             node->add_struct(classDecl63
            	            ); 
            	        }


            	    }
            	    break;
            	case 4:
            	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:653:17: inc
            	    {
            	        this->followPush(FOLLOW_inc_in_program5064);
            	        inc64=inc();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleprogramEx;
            	        }


            	        {
            	             node->add_include(inc64
            	            ); 
            	        }


            	    }
            	    break;

            	default:
            	    goto loop42;	/* break out of the loop */
            	    break;
                }
            }
            loop42: ; /* Jump out to here if this rule does not match */


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleprogramEx; /* Prevent compiler warnings */
    ruleprogramEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}
/* $ANTLR end program */
/* End of parsing rules
 * ==============================================
 */

/* ==============================================
 * Syntactic predicates
 */
/* End of syntactic predicates
 * ==============================================
 */



/* End of code
 * =============================================================================
 */
