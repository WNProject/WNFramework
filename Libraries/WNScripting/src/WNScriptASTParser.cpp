// clang-format off
/** \file
 *  This C++ source file was generated by $ANTLR version 3.5.2
 *
 *     -                for the parser : WNScriptASTParserParser
 *
 * Editing it, at least manually, is not wise.
 *
 * C++ language generator and runtime by Gokulakannan Somasundaram ( heavy lifting from C Run-time by Jim Idle )
 *
 *
*/
// [The "BSD license"]
// Copyright (c) 2005-2009 Gokulakannan Somasundaram, ElectronDB
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF






    #include "core/inc/base.h"
#ifdef _WN_MSVC
    #pragma warning(disable: 4100)
    #pragma warning(disable: 4459)
    #pragma warning(disable: 4703)
#endif
#ifdef _WN_CLANG
    #pragma clang diagnostic ignored "-Wunused-function"
    #pragma clang diagnostic ignored "-Wduplicate-decl-specifier"
#if __clang_major__ >= 13
    #pragma GCC diagnostic ignored "-Wunused-but-set-variable"
#endif
#endif
#ifdef _WN_GCC
    #pragma GCC diagnostic ignored "-Wunused-function"
    #pragma GCC diagnostic ignored "-Wunused-variable"
    #pragma GCC diagnostic ignored "-Wunused-but-set-variable"
    #pragma GCC diagnostic ignored "-Wsign-compare"
#endif
    #include "WNMemory/inc/allocator.h"
    #include "WNScripting/src/WNScriptASTLexer.hpp"
    #include "WNScripting/inc/WNNodeTypes.h"

    using namespace wn;

    #ifndef SET_LOCATION
    #define SET_LOCATION(node, tok) { scripting::source_location loc; \
                                     loc.m_start_index = tok->get_startIndex();\
                                     loc.m_end_index = tok->get_stopIndex();\
                                     loc.m_line_start = tok->get_lineStart();\
                                     loc.m_line_number = tok->get_line();\
                                     loc.m_char_number = tok->get_charPositionInLine();\
                                     node->set_start_location(loc); \
                                   }

    #define SET_LOCATION_FROM_NODE(node, node2) { \
                                        if(node2) { \
                                        node->set_start_location(node2->get_start_location()); \
                                        } \
                                   }
    #define SET_START_LOCATION_FROM_NODE(node, node2) { \
                                        if(node2) { \
                                        scripting::source_location loc = node->get_start_location(); \
                                        scripting::source_location loc2 = node2->get_start_location(); \
                                        loc.m_start_index = loc2.m_start_index; \
                                        loc.m_line_start = loc2.m_line_start; \
                                        loc.m_line_number = loc2.m_line_number; \
                                        loc.m_char_number = loc2.m_char_number; \
                                        node->set_start_location(loc); \
                                        } \
                                    }
    #define SET_END_LOCATION(node, tok) { \
                                        node->set_end_index(tok->get_stopIndex()); \
                                      }
    #define SET_END_LOCATION_FROM_NODE(node, node2) { \
                                            if(node2) { \
                                            node->set_end_index(node2->get_start_location().m_end_index); \
                                            } \
                                            }
    #endif








#include    "WNScriptASTParser.hpp"









using namespace antlr3;



ANTLR_UINT8* WNScriptASTParserTokenNames[89+4]
     = {
        (ANTLR_UINT8*) "<invalid>",
        (ANTLR_UINT8*) "<EOR>",
        (ANTLR_UINT8*) "<DOWN>",
        (ANTLR_UINT8*) "<UP>",
        (ANTLR_UINT8*) "ACTION",
        (ANTLR_UINT8*) "ACTOR",
        (ANTLR_UINT8*) "AT",
        (ANTLR_UINT8*) "BACKGROUND",
        (ANTLR_UINT8*) "BOOL",
        (ANTLR_UINT8*) "BOOL_TYPE",
        (ANTLR_UINT8*) "BREAK",
        (ANTLR_UINT8*) "CHAR",
        (ANTLR_UINT8*) "CHAR_TYPE",
        (ANTLR_UINT8*) "CLASS",
        (ANTLR_UINT8*) "COLON",
        (ANTLR_UINT8*) "COMMA",
        (ANTLR_UINT8*) "COMMENT",
        (ANTLR_UINT8*) "CONTINUE",
        (ANTLR_UINT8*) "CPTR_TYPE",
        (ANTLR_UINT8*) "DEFAULT",
        (ANTLR_UINT8*) "DEFER",
        (ANTLR_UINT8*) "DLSQBRACKET",
        (ANTLR_UINT8*) "DO",
        (ANTLR_UINT8*) "DOUBDEC",
        (ANTLR_UINT8*) "DOUBINC",
        (ANTLR_UINT8*) "DRSQBRACKET",
        (ANTLR_UINT8*) "ELSE",
        (ANTLR_UINT8*) "ESC_SEQ",
        (ANTLR_UINT8*) "EXPONENT",
        (ANTLR_UINT8*) "FLOAT",
        (ANTLR_UINT8*) "FLOAT_TYPE",
        (ANTLR_UINT8*) "FOR",
        (ANTLR_UINT8*) "HEX_DIGIT",
        (ANTLR_UINT8*) "ID",
        (ANTLR_UINT8*) "IF",
        (ANTLR_UINT8*) "INCLUDE",
        (ANTLR_UINT8*) "INT",
        (ANTLR_UINT8*) "INT_TYPE",
        (ANTLR_UINT8*) "LBRACE",
        (ANTLR_UINT8*) "LBRACKET",
        (ANTLR_UINT8*) "LENGTH",
        (ANTLR_UINT8*) "LOW_PRIORITY",
        (ANTLR_UINT8*) "LSQBRACKET",
        (ANTLR_UINT8*) "NULLTOK",
        (ANTLR_UINT8*) "OCTAL_ESC",
        (ANTLR_UINT8*) "OVERRIDE",
        (ANTLR_UINT8*) "QUESTION",
        (ANTLR_UINT8*) "RBRACE",
        (ANTLR_UINT8*) "RBRACKET",
        (ANTLR_UINT8*) "RESOURCE",
        (ANTLR_UINT8*) "RETURN",
        (ANTLR_UINT8*) "RSQBRACKET",
        (ANTLR_UINT8*) "SEMICOLON",
        (ANTLR_UINT8*) "SHARED_REF",
        (ANTLR_UINT8*) "SIZE",
        (ANTLR_UINT8*) "SIZE_TYPE",
        (ANTLR_UINT8*) "SLICETOK",
        (ANTLR_UINT8*) "SSOR",
        (ANTLR_UINT8*) "STRING",
        (ANTLR_UINT8*) "STRING_TYPE",
        (ANTLR_UINT8*) "STRUCT",
        (ANTLR_UINT8*) "SYNCHRONIZED",
        (ANTLR_UINT8*) "THIS_TOK",
        (ANTLR_UINT8*) "TYPE",
        (ANTLR_UINT8*) "T_TYPE",
        (ANTLR_UINT8*) "UNICODE_ESC",
        (ANTLR_UINT8*) "VIRTUAL",
        (ANTLR_UINT8*) "VOID_TYPE",
        (ANTLR_UINT8*) "WEAK_REF",
        (ANTLR_UINT8*) "WHILE",
        (ANTLR_UINT8*) "WS",
        (ANTLR_UINT8*) "'!'",
        (ANTLR_UINT8*) "'!='",
        (ANTLR_UINT8*) "'%'",
        (ANTLR_UINT8*) "'%='",
        (ANTLR_UINT8*) "'&&'",
        (ANTLR_UINT8*) "'&'",
        (ANTLR_UINT8*) "'*'",
        (ANTLR_UINT8*) "'*='",
        (ANTLR_UINT8*) "'+'",
        (ANTLR_UINT8*) "'+='",
        (ANTLR_UINT8*) "'-'",
        (ANTLR_UINT8*) "'-='",
        (ANTLR_UINT8*) "'.'",
        (ANTLR_UINT8*) "'/'",
        (ANTLR_UINT8*) "'/='",
        (ANTLR_UINT8*) "'<'",
        (ANTLR_UINT8*) "'<='",
        (ANTLR_UINT8*) "'='",
        (ANTLR_UINT8*) "'=='",
        (ANTLR_UINT8*) "'>'",
        (ANTLR_UINT8*) "'>='",
        (ANTLR_UINT8*) "'^'"
       };




static const char fileName[] = "WNScriptAST.g";



const char* WNScriptASTParser::getGrammarFileName()
{
	return fileName;
}






WNScriptASTParser::WNScriptASTParser( StreamType* instream)
    :ImplTraits::BaseParserType(ANTLR_SIZE_HINT, instream, NULL)

{
	this->init(instream);
}







WNScriptASTParser::WNScriptASTParser( StreamType* instream, RecognizerSharedStateType* state)
    :ImplTraits::BaseParserType(ANTLR_SIZE_HINT, instream, state)

{
	this->init(instream );
}

void WNScriptASTParser::init(StreamType* instream)
{


	this->get_psrstate()->set_tokenNames( WNScriptASTParserTokenNames );


}

void
WNScriptASTParser::reset()
{
    this->get_rec()->reset();
}



WNScriptASTParser::~WNScriptASTParser()
 {
}








static ANTLR_UINT8**	getTokenNames()
{
        return WNScriptASTParserTokenNames;
}





static	ANTLR_BITWORD FOLLOW_TYPE_in_objectType1415_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_TYPE_in_objectType1415( FOLLOW_TYPE_in_objectType1415_bits, 1 );

static	ANTLR_BITWORD FOLLOW_VOID_TYPE_in_scalarType1447_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_VOID_TYPE_in_scalarType1447( FOLLOW_VOID_TYPE_in_scalarType1447_bits, 1 );

static	ANTLR_BITWORD FOLLOW_INT_TYPE_in_scalarType1459_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_INT_TYPE_in_scalarType1459( FOLLOW_INT_TYPE_in_scalarType1459_bits, 1 );

static	ANTLR_BITWORD FOLLOW_SIZE_TYPE_in_scalarType1471_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SIZE_TYPE_in_scalarType1471( FOLLOW_SIZE_TYPE_in_scalarType1471_bits, 1 );

static	ANTLR_BITWORD FOLLOW_FLOAT_TYPE_in_scalarType1483_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_FLOAT_TYPE_in_scalarType1483( FOLLOW_FLOAT_TYPE_in_scalarType1483_bits, 1 );

static	ANTLR_BITWORD FOLLOW_CHAR_TYPE_in_scalarType1495_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_CHAR_TYPE_in_scalarType1495( FOLLOW_CHAR_TYPE_in_scalarType1495_bits, 1 );

static	ANTLR_BITWORD FOLLOW_BOOL_TYPE_in_scalarType1507_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_BOOL_TYPE_in_scalarType1507( FOLLOW_BOOL_TYPE_in_scalarType1507_bits, 1 );

static	ANTLR_BITWORD FOLLOW_CPTR_TYPE_in_scalarType1519_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_CPTR_TYPE_in_scalarType1519( FOLLOW_CPTR_TYPE_in_scalarType1519_bits, 1 );

static	ANTLR_BITWORD FOLLOW_STRING_TYPE_in_scalarType1531_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_STRING_TYPE_in_scalarType1531( FOLLOW_STRING_TYPE_in_scalarType1531_bits, 1 );

static	ANTLR_BITWORD FOLLOW_scalarType_in_arrayType1568_bits[]	= { ANTLR_UINT64_LIT(0x0000040000200000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_scalarType_in_arrayType1568( FOLLOW_scalarType_in_arrayType1568_bits, 1 );

static	ANTLR_BITWORD FOLLOW_objectType_in_arrayType1584_bits[]	= { ANTLR_UINT64_LIT(0x0000040000200000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_objectType_in_arrayType1584( FOLLOW_objectType_in_arrayType1584_bits, 1 );

static	ANTLR_BITWORD FOLLOW_SHARED_REF_in_arrayType1598_bits[]	= { ANTLR_UINT64_LIT(0x8000000000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SHARED_REF_in_arrayType1598( FOLLOW_SHARED_REF_in_arrayType1598_bits, 1 );

static	ANTLR_BITWORD FOLLOW_objectType_in_arrayType1602_bits[]	= { ANTLR_UINT64_LIT(0x0000040000200000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_objectType_in_arrayType1602( FOLLOW_objectType_in_arrayType1602_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LSQBRACKET_in_arrayType1636_bits[]	= { ANTLR_UINT64_LIT(0x4CC8083060041B00), ANTLR_UINT64_LIT(0x0000000000000008) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LSQBRACKET_in_arrayType1636( FOLLOW_LSQBRACKET_in_arrayType1636_bits, 2 );

static	ANTLR_BITWORD FOLLOW_constant_in_arrayType1655_bits[]	= { ANTLR_UINT64_LIT(0x0008000000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_constant_in_arrayType1655( FOLLOW_constant_in_arrayType1655_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RSQBRACKET_in_arrayType1677_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RSQBRACKET_in_arrayType1677( FOLLOW_RSQBRACKET_in_arrayType1677_bits, 1 );

static	ANTLR_BITWORD FOLLOW_DLSQBRACKET_in_arrayType1706_bits[]	= { ANTLR_UINT64_LIT(0x0000000002000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_DLSQBRACKET_in_arrayType1706( FOLLOW_DLSQBRACKET_in_arrayType1706_bits, 1 );

static	ANTLR_BITWORD FOLLOW_DRSQBRACKET_in_arrayType1708_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_DRSQBRACKET_in_arrayType1708( FOLLOW_DRSQBRACKET_in_arrayType1708_bits, 1 );

static	ANTLR_BITWORD FOLLOW_scalarType_in_sliceType1758_bits[]	= { ANTLR_UINT64_LIT(0x0300000000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_scalarType_in_sliceType1758( FOLLOW_scalarType_in_sliceType1758_bits, 1 );

static	ANTLR_BITWORD FOLLOW_SLICETOK_in_sliceType1774_bits[]	= { ANTLR_UINT64_LIT(0x0000001000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SLICETOK_in_sliceType1774( FOLLOW_SLICETOK_in_sliceType1774_bits, 1 );

static	ANTLR_BITWORD FOLLOW_INT_in_sliceType1776_bits[]	= { ANTLR_UINT64_LIT(0x0100000000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_INT_in_sliceType1776( FOLLOW_INT_in_sliceType1776_bits, 1 );

static	ANTLR_BITWORD FOLLOW_SLICETOK_in_sliceType1780_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SLICETOK_in_sliceType1780( FOLLOW_SLICETOK_in_sliceType1780_bits, 1 );

static	ANTLR_BITWORD FOLLOW_SSOR_in_sliceType1799_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SSOR_in_sliceType1799( FOLLOW_SSOR_in_sliceType1799_bits, 1 );

static	ANTLR_BITWORD FOLLOW_objectType_in_compoundType1834_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_objectType_in_compoundType1834( FOLLOW_objectType_in_compoundType1834_bits, 1 );

static	ANTLR_BITWORD FOLLOW_scalarType_in_nonArrayType1861_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_scalarType_in_nonArrayType1861( FOLLOW_scalarType_in_nonArrayType1861_bits, 1 );

static	ANTLR_BITWORD FOLLOW_objectType_in_nonArrayType1871_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_objectType_in_nonArrayType1871( FOLLOW_objectType_in_nonArrayType1871_bits, 1 );

static	ANTLR_BITWORD FOLLOW_compoundType_in_type1901_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_compoundType_in_type1901( FOLLOW_compoundType_in_type1901_bits, 1 );

static	ANTLR_BITWORD FOLLOW_arrayType_in_type1911_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_arrayType_in_type1911( FOLLOW_arrayType_in_type1911_bits, 1 );

static	ANTLR_BITWORD FOLLOW_sliceType_in_type1921_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_sliceType_in_type1921( FOLLOW_sliceType_in_type1921_bits, 1 );

static	ANTLR_BITWORD FOLLOW_scalarType_in_type1931_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_scalarType_in_type1931( FOLLOW_scalarType_in_type1931_bits, 1 );

static	ANTLR_BITWORD FOLLOW_scalarType_in_param1963_bits[]	= { ANTLR_UINT64_LIT(0x0000000200000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_scalarType_in_param1963( FOLLOW_scalarType_in_param1963_bits, 1 );

static	ANTLR_BITWORD FOLLOW_ID_in_param1967_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_ID_in_param1967( FOLLOW_ID_in_param1967_bits, 1 );

static	ANTLR_BITWORD FOLLOW_compoundType_in_param1982_bits[]	= { ANTLR_UINT64_LIT(0x0000000200000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_compoundType_in_param1982( FOLLOW_compoundType_in_param1982_bits, 1 );

static	ANTLR_BITWORD FOLLOW_ID_in_param1986_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_ID_in_param1986( FOLLOW_ID_in_param1986_bits, 1 );

static	ANTLR_BITWORD FOLLOW_arrayType_in_param2001_bits[]	= { ANTLR_UINT64_LIT(0x0000000200000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_arrayType_in_param2001( FOLLOW_arrayType_in_param2001_bits, 1 );

static	ANTLR_BITWORD FOLLOW_ID_in_param2005_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_ID_in_param2005( FOLLOW_ID_in_param2005_bits, 1 );

static	ANTLR_BITWORD FOLLOW_sliceType_in_param2020_bits[]	= { ANTLR_UINT64_LIT(0x0000000200000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_sliceType_in_param2020( FOLLOW_sliceType_in_param2020_bits, 1 );

static	ANTLR_BITWORD FOLLOW_ID_in_param2024_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_ID_in_param2024( FOLLOW_ID_in_param2024_bits, 1 );

static	ANTLR_BITWORD FOLLOW_SHARED_REF_in_param2037_bits[]	= { ANTLR_UINT64_LIT(0x8000000000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SHARED_REF_in_param2037( FOLLOW_SHARED_REF_in_param2037_bits, 1 );

static	ANTLR_BITWORD FOLLOW_compoundType_in_param2041_bits[]	= { ANTLR_UINT64_LIT(0x0000000200000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_compoundType_in_param2041( FOLLOW_compoundType_in_param2041_bits, 1 );

static	ANTLR_BITWORD FOLLOW_ID_in_param2045_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_ID_in_param2045( FOLLOW_ID_in_param2045_bits, 1 );

static	ANTLR_BITWORD FOLLOW_WEAK_REF_in_param2058_bits[]	= { ANTLR_UINT64_LIT(0x8000000000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_WEAK_REF_in_param2058( FOLLOW_WEAK_REF_in_param2058_bits, 1 );

static	ANTLR_BITWORD FOLLOW_compoundType_in_param2062_bits[]	= { ANTLR_UINT64_LIT(0x0000000200000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_compoundType_in_param2062( FOLLOW_compoundType_in_param2062_bits, 1 );

static	ANTLR_BITWORD FOLLOW_ID_in_param2067_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_ID_in_param2067( FOLLOW_ID_in_param2067_bits, 1 );

static	ANTLR_BITWORD FOLLOW_compoundType_in_param2082_bits[]	= { ANTLR_UINT64_LIT(0x0000400000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_compoundType_in_param2082( FOLLOW_compoundType_in_param2082_bits, 1 );

static	ANTLR_BITWORD FOLLOW_QUESTION_in_param2084_bits[]	= { ANTLR_UINT64_LIT(0x0000000200000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_QUESTION_in_param2084( FOLLOW_QUESTION_in_param2084_bits, 1 );

static	ANTLR_BITWORD FOLLOW_ID_in_param2089_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_ID_in_param2089( FOLLOW_ID_in_param2089_bits, 1 );

static	ANTLR_BITWORD FOLLOW_param_in_paramList2121_bits[]	= { ANTLR_UINT64_LIT(0x0000000000008002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_param_in_paramList2121( FOLLOW_param_in_paramList2121_bits, 1 );

static	ANTLR_BITWORD FOLLOW_COMMA_in_paramList2134_bits[]	= { ANTLR_UINT64_LIT(0x88A0002040041200), ANTLR_UINT64_LIT(0x0000000000000018) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_COMMA_in_paramList2134( FOLLOW_COMMA_in_paramList2134_bits, 2 );

static	ANTLR_BITWORD FOLLOW_param_in_paramList2138_bits[]	= { ANTLR_UINT64_LIT(0x0000000000008002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_param_in_paramList2138( FOLLOW_param_in_paramList2138_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACKET_in_parameterList2170_bits[]	= { ANTLR_UINT64_LIT(0x88A0002040041200), ANTLR_UINT64_LIT(0x0000000000000018) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_parameterList2170( FOLLOW_LBRACKET_in_parameterList2170_bits, 2 );

static	ANTLR_BITWORD FOLLOW_paramList_in_parameterList2172_bits[]	= { ANTLR_UINT64_LIT(0x0001000000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_paramList_in_parameterList2172( FOLLOW_paramList_in_parameterList2172_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACKET_in_parameterList2174_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_parameterList2174( FOLLOW_RBRACKET_in_parameterList2174_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACKET_in_parameterList2191_bits[]	= { ANTLR_UINT64_LIT(0x0001000000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_parameterList2191( FOLLOW_LBRACKET_in_parameterList2191_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACKET_in_parameterList2193_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_parameterList2193( FOLLOW_RBRACKET_in_parameterList2193_bits, 1 );

static	ANTLR_BITWORD FOLLOW_88_in_assign_type2229_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_88_in_assign_type2229( FOLLOW_88_in_assign_type2229_bits, 1 );

static	ANTLR_BITWORD FOLLOW_80_in_assign_type2243_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_80_in_assign_type2243( FOLLOW_80_in_assign_type2243_bits, 1 );

static	ANTLR_BITWORD FOLLOW_82_in_assign_type2256_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_82_in_assign_type2256( FOLLOW_82_in_assign_type2256_bits, 1 );

static	ANTLR_BITWORD FOLLOW_78_in_assign_type2269_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_78_in_assign_type2269( FOLLOW_78_in_assign_type2269_bits, 1 );

static	ANTLR_BITWORD FOLLOW_85_in_assign_type2282_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_85_in_assign_type2282( FOLLOW_85_in_assign_type2282_bits, 1 );

static	ANTLR_BITWORD FOLLOW_74_in_assign_type2295_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_74_in_assign_type2295( FOLLOW_74_in_assign_type2295_bits, 1 );

static	ANTLR_BITWORD FOLLOW_expr_in_arglist2353_bits[]	= { ANTLR_UINT64_LIT(0x0000000000008002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_arglist2353( FOLLOW_expr_in_arglist2353_bits, 1 );

static	ANTLR_BITWORD FOLLOW_COMMA_in_arglist2386_bits[]	= { ANTLR_UINT64_LIT(0xCCE209B261849B02), ANTLR_UINT64_LIT(0x0000000000020088) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_COMMA_in_arglist2386( FOLLOW_COMMA_in_arglist2386_bits, 2 );

static	ANTLR_BITWORD FOLLOW_expr_in_arglist2430_bits[]	= { ANTLR_UINT64_LIT(0x0000000000008002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_arglist2430( FOLLOW_expr_in_arglist2430_bits, 1 );

static	ANTLR_BITWORD FOLLOW_cond_ex_in_expr2505_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_cond_ex_in_expr2505( FOLLOW_cond_ex_in_expr2505_bits, 1 );

static	ANTLR_BITWORD FOLLOW_or_ex_in_cond_ex2543_bits[]	= { ANTLR_UINT64_LIT(0x0000400000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_or_ex_in_cond_ex2543( FOLLOW_or_ex_in_cond_ex2543_bits, 1 );

static	ANTLR_BITWORD FOLLOW_QUESTION_in_cond_ex2566_bits[]	= { ANTLR_UINT64_LIT(0xCCE209B261841B00), ANTLR_UINT64_LIT(0x0000000000020088) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_QUESTION_in_cond_ex2566( FOLLOW_QUESTION_in_cond_ex2566_bits, 2 );

static	ANTLR_BITWORD FOLLOW_expr_in_cond_ex2570_bits[]	= { ANTLR_UINT64_LIT(0x0000000000004000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_cond_ex2570( FOLLOW_expr_in_cond_ex2570_bits, 1 );

static	ANTLR_BITWORD FOLLOW_COLON_in_cond_ex2572_bits[]	= { ANTLR_UINT64_LIT(0xCCE209B261841B00), ANTLR_UINT64_LIT(0x0000000000020088) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_COLON_in_cond_ex2572( FOLLOW_COLON_in_cond_ex2572_bits, 2 );

static	ANTLR_BITWORD FOLLOW_cond_ex_in_cond_ex2576_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_cond_ex_in_cond_ex2576( FOLLOW_cond_ex_in_cond_ex2576_bits, 1 );

static	ANTLR_BITWORD FOLLOW_and_ex_in_or_ex2623_bits[]	= { ANTLR_UINT64_LIT(0x0200000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_and_ex_in_or_ex2623( FOLLOW_and_ex_in_or_ex2623_bits, 1 );

static	ANTLR_BITWORD FOLLOW_SSOR_in_or_ex2640_bits[]	= { ANTLR_UINT64_LIT(0xCCE209B261841B00), ANTLR_UINT64_LIT(0x0000000000020088) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SSOR_in_or_ex2640( FOLLOW_SSOR_in_or_ex2640_bits, 2 );

static	ANTLR_BITWORD FOLLOW_and_ex_in_or_ex2644_bits[]	= { ANTLR_UINT64_LIT(0x0200000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_and_ex_in_or_ex2644( FOLLOW_and_ex_in_or_ex2644_bits, 1 );

static	ANTLR_BITWORD FOLLOW_bit_or_ex_in_and_ex2687_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000800) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_bit_or_ex_in_and_ex2687( FOLLOW_bit_or_ex_in_and_ex2687_bits, 2 );

static	ANTLR_BITWORD FOLLOW_75_in_and_ex2704_bits[]	= { ANTLR_UINT64_LIT(0xCCE209B261841B00), ANTLR_UINT64_LIT(0x0000000000020088) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_75_in_and_ex2704( FOLLOW_75_in_and_ex2704_bits, 2 );

static	ANTLR_BITWORD FOLLOW_bit_or_ex_in_and_ex2708_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000800) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_bit_or_ex_in_and_ex2708( FOLLOW_bit_or_ex_in_and_ex2708_bits, 2 );

static	ANTLR_BITWORD FOLLOW_bit_xor_ex_in_bit_or_ex2742_bits[]	= { ANTLR_UINT64_LIT(0x0100000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_bit_xor_ex_in_bit_or_ex2742( FOLLOW_bit_xor_ex_in_bit_or_ex2742_bits, 1 );

static	ANTLR_BITWORD FOLLOW_SLICETOK_in_bit_or_ex2759_bits[]	= { ANTLR_UINT64_LIT(0xCCE209B261841B00), ANTLR_UINT64_LIT(0x0000000000020088) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SLICETOK_in_bit_or_ex2759( FOLLOW_SLICETOK_in_bit_or_ex2759_bits, 2 );

static	ANTLR_BITWORD FOLLOW_bit_xor_ex_in_bit_or_ex2763_bits[]	= { ANTLR_UINT64_LIT(0x0100000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_bit_xor_ex_in_bit_or_ex2763( FOLLOW_bit_xor_ex_in_bit_or_ex2763_bits, 1 );

static	ANTLR_BITWORD FOLLOW_bit_and_ex_in_bit_xor_ex2798_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000010000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_bit_and_ex_in_bit_xor_ex2798( FOLLOW_bit_and_ex_in_bit_xor_ex2798_bits, 2 );

static	ANTLR_BITWORD FOLLOW_92_in_bit_xor_ex2815_bits[]	= { ANTLR_UINT64_LIT(0xCCE209B261841B00), ANTLR_UINT64_LIT(0x0000000000020088) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_92_in_bit_xor_ex2815( FOLLOW_92_in_bit_xor_ex2815_bits, 2 );

static	ANTLR_BITWORD FOLLOW_bit_and_ex_in_bit_xor_ex2819_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000010000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_bit_and_ex_in_bit_xor_ex2819( FOLLOW_bit_and_ex_in_bit_xor_ex2819_bits, 2 );

static	ANTLR_BITWORD FOLLOW_eq_ex_in_bit_and_ex2854_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000001000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_eq_ex_in_bit_and_ex2854( FOLLOW_eq_ex_in_bit_and_ex2854_bits, 2 );

static	ANTLR_BITWORD FOLLOW_76_in_bit_and_ex2871_bits[]	= { ANTLR_UINT64_LIT(0xCCE209B261841B00), ANTLR_UINT64_LIT(0x0000000000020088) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_76_in_bit_and_ex2871( FOLLOW_76_in_bit_and_ex2871_bits, 2 );

static	ANTLR_BITWORD FOLLOW_eq_ex_in_bit_and_ex2875_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000001000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_eq_ex_in_bit_and_ex2875( FOLLOW_eq_ex_in_bit_and_ex2875_bits, 2 );

static	ANTLR_BITWORD FOLLOW_rel_ex_in_eq_ex2913_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000002000100) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_rel_ex_in_eq_ex2913( FOLLOW_rel_ex_in_eq_ex2913_bits, 2 );

static	ANTLR_BITWORD FOLLOW_89_in_eq_ex2948_bits[]	= { ANTLR_UINT64_LIT(0xCCE209B261841B00), ANTLR_UINT64_LIT(0x0000000000020088) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_89_in_eq_ex2948( FOLLOW_89_in_eq_ex2948_bits, 2 );

static	ANTLR_BITWORD FOLLOW_rel_ex_in_eq_ex2952_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000002000100) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_rel_ex_in_eq_ex2952( FOLLOW_rel_ex_in_eq_ex2952_bits, 2 );

static	ANTLR_BITWORD FOLLOW_72_in_eq_ex2975_bits[]	= { ANTLR_UINT64_LIT(0xCCE209B261841B00), ANTLR_UINT64_LIT(0x0000000000020088) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_72_in_eq_ex2975( FOLLOW_72_in_eq_ex2975_bits, 2 );

static	ANTLR_BITWORD FOLLOW_rel_ex_in_eq_ex2979_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000002000100) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_rel_ex_in_eq_ex2979( FOLLOW_rel_ex_in_eq_ex2979_bits, 2 );

static	ANTLR_BITWORD FOLLOW_add_ex_in_rel_ex3037_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x000000000CC00000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_add_ex_in_rel_ex3037( FOLLOW_add_ex_in_rel_ex3037_bits, 2 );

static	ANTLR_BITWORD FOLLOW_86_in_rel_ex3073_bits[]	= { ANTLR_UINT64_LIT(0xCCE209B261841B00), ANTLR_UINT64_LIT(0x0000000000020088) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_86_in_rel_ex3073( FOLLOW_86_in_rel_ex3073_bits, 2 );

static	ANTLR_BITWORD FOLLOW_add_ex_in_rel_ex3077_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x000000000CC00000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_add_ex_in_rel_ex3077( FOLLOW_add_ex_in_rel_ex3077_bits, 2 );

static	ANTLR_BITWORD FOLLOW_90_in_rel_ex3101_bits[]	= { ANTLR_UINT64_LIT(0xCCE209B261841B00), ANTLR_UINT64_LIT(0x0000000000020088) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_90_in_rel_ex3101( FOLLOW_90_in_rel_ex3101_bits, 2 );

static	ANTLR_BITWORD FOLLOW_add_ex_in_rel_ex3105_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x000000000CC00000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_add_ex_in_rel_ex3105( FOLLOW_add_ex_in_rel_ex3105_bits, 2 );

static	ANTLR_BITWORD FOLLOW_87_in_rel_ex3129_bits[]	= { ANTLR_UINT64_LIT(0xCCE209B261841B00), ANTLR_UINT64_LIT(0x0000000000020088) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_87_in_rel_ex3129( FOLLOW_87_in_rel_ex3129_bits, 2 );

static	ANTLR_BITWORD FOLLOW_add_ex_in_rel_ex3133_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x000000000CC00000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_add_ex_in_rel_ex3133( FOLLOW_add_ex_in_rel_ex3133_bits, 2 );

static	ANTLR_BITWORD FOLLOW_91_in_rel_ex3157_bits[]	= { ANTLR_UINT64_LIT(0xCCE209B261841B00), ANTLR_UINT64_LIT(0x0000000000020088) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_91_in_rel_ex3157( FOLLOW_91_in_rel_ex3157_bits, 2 );

static	ANTLR_BITWORD FOLLOW_add_ex_in_rel_ex3161_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x000000000CC00000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_add_ex_in_rel_ex3161( FOLLOW_add_ex_in_rel_ex3161_bits, 2 );

static	ANTLR_BITWORD FOLLOW_mult_ex_in_add_ex3222_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000028000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_mult_ex_in_add_ex3222( FOLLOW_mult_ex_in_add_ex3222_bits, 2 );

static	ANTLR_BITWORD FOLLOW_79_in_add_ex3257_bits[]	= { ANTLR_UINT64_LIT(0xCCE209B261841B00), ANTLR_UINT64_LIT(0x0000000000020088) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_79_in_add_ex3257( FOLLOW_79_in_add_ex3257_bits, 2 );

static	ANTLR_BITWORD FOLLOW_mult_ex_in_add_ex3261_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000028000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_mult_ex_in_add_ex3261( FOLLOW_mult_ex_in_add_ex3261_bits, 2 );

static	ANTLR_BITWORD FOLLOW_81_in_add_ex3283_bits[]	= { ANTLR_UINT64_LIT(0xCCE209B261841B00), ANTLR_UINT64_LIT(0x0000000000020088) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_81_in_add_ex3283( FOLLOW_81_in_add_ex3283_bits, 2 );

static	ANTLR_BITWORD FOLLOW_mult_ex_in_add_ex3287_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000028000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_mult_ex_in_add_ex3287( FOLLOW_mult_ex_in_add_ex3287_bits, 2 );

static	ANTLR_BITWORD FOLLOW_unary_ex_in_mult_ex3346_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000102200) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_unary_ex_in_mult_ex3346( FOLLOW_unary_ex_in_mult_ex3346_bits, 2 );

static	ANTLR_BITWORD FOLLOW_77_in_mult_ex3385_bits[]	= { ANTLR_UINT64_LIT(0xCCE209B261841B00), ANTLR_UINT64_LIT(0x0000000000020088) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_77_in_mult_ex3385( FOLLOW_77_in_mult_ex3385_bits, 2 );

static	ANTLR_BITWORD FOLLOW_unary_ex_in_mult_ex3389_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000102200) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_unary_ex_in_mult_ex3389( FOLLOW_unary_ex_in_mult_ex3389_bits, 2 );

static	ANTLR_BITWORD FOLLOW_84_in_mult_ex3415_bits[]	= { ANTLR_UINT64_LIT(0xCCE209B261841B00), ANTLR_UINT64_LIT(0x0000000000020088) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_84_in_mult_ex3415( FOLLOW_84_in_mult_ex3415_bits, 2 );

static	ANTLR_BITWORD FOLLOW_unary_ex_in_mult_ex3419_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000102200) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_unary_ex_in_mult_ex3419( FOLLOW_unary_ex_in_mult_ex3419_bits, 2 );

static	ANTLR_BITWORD FOLLOW_73_in_mult_ex3445_bits[]	= { ANTLR_UINT64_LIT(0xCCE209B261841B00), ANTLR_UINT64_LIT(0x0000000000020088) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_73_in_mult_ex3445( FOLLOW_73_in_mult_ex3445_bits, 2 );

static	ANTLR_BITWORD FOLLOW_unary_ex_in_mult_ex3449_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000102200) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_unary_ex_in_mult_ex3449( FOLLOW_unary_ex_in_mult_ex3449_bits, 2 );

static	ANTLR_BITWORD FOLLOW_post_ex_in_unary_ex3501_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_post_ex_in_unary_ex3501( FOLLOW_post_ex_in_unary_ex3501_bits, 1 );

static	ANTLR_BITWORD FOLLOW_DOUBINC_in_unary_ex3514_bits[]	= { ANTLR_UINT64_LIT(0xCCE209B261841B00), ANTLR_UINT64_LIT(0x0000000000020088) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_DOUBINC_in_unary_ex3514( FOLLOW_DOUBINC_in_unary_ex3514_bits, 2 );

static	ANTLR_BITWORD FOLLOW_unary_ex_in_unary_ex3518_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_unary_ex_in_unary_ex3518( FOLLOW_unary_ex_in_unary_ex3518_bits, 1 );

static	ANTLR_BITWORD FOLLOW_DOUBDEC_in_unary_ex3531_bits[]	= { ANTLR_UINT64_LIT(0xCCE209B261841B00), ANTLR_UINT64_LIT(0x0000000000020088) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_DOUBDEC_in_unary_ex3531( FOLLOW_DOUBDEC_in_unary_ex3531_bits, 2 );

static	ANTLR_BITWORD FOLLOW_unary_ex_in_unary_ex3535_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_unary_ex_in_unary_ex3535( FOLLOW_unary_ex_in_unary_ex3535_bits, 1 );

static	ANTLR_BITWORD FOLLOW_81_in_unary_ex3548_bits[]	= { ANTLR_UINT64_LIT(0xCCE209B261841B00), ANTLR_UINT64_LIT(0x0000000000020088) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_81_in_unary_ex3548( FOLLOW_81_in_unary_ex3548_bits, 2 );

static	ANTLR_BITWORD FOLLOW_unary_ex_in_unary_ex3552_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_unary_ex_in_unary_ex3552( FOLLOW_unary_ex_in_unary_ex3552_bits, 1 );

static	ANTLR_BITWORD FOLLOW_71_in_unary_ex3566_bits[]	= { ANTLR_UINT64_LIT(0xCCE209B261841B00), ANTLR_UINT64_LIT(0x0000000000020088) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_71_in_unary_ex3566( FOLLOW_71_in_unary_ex3566_bits, 2 );

static	ANTLR_BITWORD FOLLOW_unary_ex_in_unary_ex3570_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_unary_ex_in_unary_ex3570( FOLLOW_unary_ex_in_unary_ex3570_bits, 1 );

static	ANTLR_BITWORD FOLLOW_AT_in_defer3603_bits[]	= { ANTLR_UINT64_LIT(0x0000001000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_AT_in_defer3603( FOLLOW_AT_in_defer3603_bits, 1 );

static	ANTLR_BITWORD FOLLOW_INT_in_defer3616_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_INT_in_defer3616( FOLLOW_INT_in_defer3616_bits, 1 );

static	ANTLR_BITWORD FOLLOW_DEFER_in_defer3628_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_DEFER_in_defer3628( FOLLOW_DEFER_in_defer3628_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LOW_PRIORITY_in_defer3638_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LOW_PRIORITY_in_defer3638( FOLLOW_LOW_PRIORITY_in_defer3638_bits, 1 );

static	ANTLR_BITWORD FOLLOW_BACKGROUND_in_defer3648_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_BACKGROUND_in_defer3648( FOLLOW_BACKGROUND_in_defer3648_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LSQBRACKET_in_post_ex_proper3680_bits[]	= { ANTLR_UINT64_LIT(0xCCE209B261841B00), ANTLR_UINT64_LIT(0x0000000000020088) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LSQBRACKET_in_post_ex_proper3680( FOLLOW_LSQBRACKET_in_post_ex_proper3680_bits, 2 );

static	ANTLR_BITWORD FOLLOW_expr_in_post_ex_proper3684_bits[]	= { ANTLR_UINT64_LIT(0x0008000000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_post_ex_proper3684( FOLLOW_expr_in_post_ex_proper3684_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RSQBRACKET_in_post_ex_proper3688_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RSQBRACKET_in_post_ex_proper3688( FOLLOW_RSQBRACKET_in_post_ex_proper3688_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACKET_in_post_ex_proper3703_bits[]	= { ANTLR_UINT64_LIT(0x0001000000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_post_ex_proper3703( FOLLOW_LBRACKET_in_post_ex_proper3703_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACKET_in_post_ex_proper3707_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_post_ex_proper3707( FOLLOW_RBRACKET_in_post_ex_proper3707_bits, 1 );

static	ANTLR_BITWORD FOLLOW_defer_in_post_ex_proper3735_bits[]	= { ANTLR_UINT64_LIT(0x0000008000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_defer_in_post_ex_proper3735( FOLLOW_defer_in_post_ex_proper3735_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACKET_in_post_ex_proper3739_bits[]	= { ANTLR_UINT64_LIT(0x0001000000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_post_ex_proper3739( FOLLOW_LBRACKET_in_post_ex_proper3739_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACKET_in_post_ex_proper3743_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_post_ex_proper3743( FOLLOW_RBRACKET_in_post_ex_proper3743_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACKET_in_post_ex_proper3771_bits[]	= { ANTLR_UINT64_LIT(0xCCE209B261841B00), ANTLR_UINT64_LIT(0x0000000000020088) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_post_ex_proper3771( FOLLOW_LBRACKET_in_post_ex_proper3771_bits, 2 );

static	ANTLR_BITWORD FOLLOW_arglist_in_post_ex_proper3777_bits[]	= { ANTLR_UINT64_LIT(0x0001000000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_arglist_in_post_ex_proper3777( FOLLOW_arglist_in_post_ex_proper3777_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACKET_in_post_ex_proper3781_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_post_ex_proper3781( FOLLOW_RBRACKET_in_post_ex_proper3781_bits, 1 );

static	ANTLR_BITWORD FOLLOW_defer_in_post_ex_proper3797_bits[]	= { ANTLR_UINT64_LIT(0x0000008000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_defer_in_post_ex_proper3797( FOLLOW_defer_in_post_ex_proper3797_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACKET_in_post_ex_proper3801_bits[]	= { ANTLR_UINT64_LIT(0xCCE209B261841B00), ANTLR_UINT64_LIT(0x0000000000020088) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_post_ex_proper3801( FOLLOW_LBRACKET_in_post_ex_proper3801_bits, 2 );

static	ANTLR_BITWORD FOLLOW_arglist_in_post_ex_proper3805_bits[]	= { ANTLR_UINT64_LIT(0x0001000000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_arglist_in_post_ex_proper3805( FOLLOW_arglist_in_post_ex_proper3805_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACKET_in_post_ex_proper3809_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_post_ex_proper3809( FOLLOW_RBRACKET_in_post_ex_proper3809_bits, 1 );

static	ANTLR_BITWORD FOLLOW_83_in_post_ex_proper3822_bits[]	= { ANTLR_UINT64_LIT(0x0000000200000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_83_in_post_ex_proper3822( FOLLOW_83_in_post_ex_proper3822_bits, 1 );

static	ANTLR_BITWORD FOLLOW_ID_in_post_ex_proper3826_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_ID_in_post_ex_proper3826( FOLLOW_ID_in_post_ex_proper3826_bits, 1 );

static	ANTLR_BITWORD FOLLOW_DOUBINC_in_post_ex_proper3853_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_DOUBINC_in_post_ex_proper3853( FOLLOW_DOUBINC_in_post_ex_proper3853_bits, 1 );

static	ANTLR_BITWORD FOLLOW_DOUBDEC_in_post_ex_proper3882_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_DOUBDEC_in_post_ex_proper3882( FOLLOW_DOUBDEC_in_post_ex_proper3882_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACE_in_post_ex_proper3928_bits[]	= { ANTLR_UINT64_LIT(0xCCE209B261841B00), ANTLR_UINT64_LIT(0x0000000000020088) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACE_in_post_ex_proper3928( FOLLOW_LBRACE_in_post_ex_proper3928_bits, 2 );

static	ANTLR_BITWORD FOLLOW_expr_in_post_ex_proper3948_bits[]	= { ANTLR_UINT64_LIT(0x0000000000004000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_post_ex_proper3948( FOLLOW_expr_in_post_ex_proper3948_bits, 1 );

static	ANTLR_BITWORD FOLLOW_COLON_in_post_ex_proper3965_bits[]	= { ANTLR_UINT64_LIT(0xCCE209B261841B00), ANTLR_UINT64_LIT(0x0000000000020088) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_COLON_in_post_ex_proper3965( FOLLOW_COLON_in_post_ex_proper3965_bits, 2 );

static	ANTLR_BITWORD FOLLOW_expr_in_post_ex_proper3982_bits[]	= { ANTLR_UINT64_LIT(0x0000800000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_post_ex_proper3982( FOLLOW_expr_in_post_ex_proper3982_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACE_in_post_ex_proper4002_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACE_in_post_ex_proper4002( FOLLOW_RBRACE_in_post_ex_proper4002_bits, 1 );

static	ANTLR_BITWORD FOLLOW_prim_ex_in_post_ex4049_bits[]	= { ANTLR_UINT64_LIT(0x000006C0019000C2), ANTLR_UINT64_LIT(0x0000000000080000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_prim_ex_in_post_ex4049( FOLLOW_prim_ex_in_post_ex4049_bits, 2 );

static	ANTLR_BITWORD FOLLOW_post_ex_proper_in_post_ex4068_bits[]	= { ANTLR_UINT64_LIT(0x000006C0019000C2), ANTLR_UINT64_LIT(0x0000000000080000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_post_ex_proper_in_post_ex4068( FOLLOW_post_ex_proper_in_post_ex4068_bits, 2 );

static	ANTLR_BITWORD FOLLOW_expr_in_assignment_or_expression4099_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000001254400) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_assignment_or_expression4099( FOLLOW_expr_in_assignment_or_expression4099_bits, 2 );

static	ANTLR_BITWORD FOLLOW_assign_type_in_assignment_or_expression4131_bits[]	= { ANTLR_UINT64_LIT(0xCCE209B261841B00), ANTLR_UINT64_LIT(0x0000000000020088) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_assign_type_in_assignment_or_expression4131( FOLLOW_assign_type_in_assignment_or_expression4131_bits, 2 );

static	ANTLR_BITWORD FOLLOW_expr_in_assignment_or_expression4135_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_assignment_or_expression4135( FOLLOW_expr_in_assignment_or_expression4135_bits, 1 );

static	ANTLR_BITWORD FOLLOW_INT_in_constant4201_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_INT_in_constant4201( FOLLOW_INT_in_constant4201_bits, 1 );

static	ANTLR_BITWORD FOLLOW_SIZE_in_constant4219_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SIZE_in_constant4219( FOLLOW_SIZE_in_constant4219_bits, 1 );

static	ANTLR_BITWORD FOLLOW_FLOAT_in_constant4237_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_FLOAT_in_constant4237( FOLLOW_FLOAT_in_constant4237_bits, 1 );

static	ANTLR_BITWORD FOLLOW_CHAR_in_constant4253_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_CHAR_in_constant4253( FOLLOW_CHAR_in_constant4253_bits, 1 );

static	ANTLR_BITWORD FOLLOW_STRING_in_constant4270_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_STRING_in_constant4270( FOLLOW_STRING_in_constant4270_bits, 1 );

static	ANTLR_BITWORD FOLLOW_BOOL_in_constant4285_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_BOOL_in_constant4285( FOLLOW_BOOL_in_constant4285_bits, 1 );

static	ANTLR_BITWORD FOLLOW_NULLTOK_in_constant4302_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_NULLTOK_in_constant4302( FOLLOW_NULLTOK_in_constant4302_bits, 1 );

static	ANTLR_BITWORD FOLLOW_THIS_TOK_in_constant4317_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_THIS_TOK_in_constant4317( FOLLOW_THIS_TOK_in_constant4317_bits, 1 );

static	ANTLR_BITWORD FOLLOW_scalarType_in_constant4335_bits[]	= { ANTLR_UINT64_LIT(0x0000004000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_scalarType_in_constant4335( FOLLOW_scalarType_in_constant4335_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACE_in_constant4339_bits[]	= { ANTLR_UINT64_LIT(0x0400000000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACE_in_constant4339( FOLLOW_LBRACE_in_constant4339_bits, 1 );

static	ANTLR_BITWORD FOLLOW_STRING_in_constant4343_bits[]	= { ANTLR_UINT64_LIT(0x0000800000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_STRING_in_constant4343( FOLLOW_STRING_in_constant4343_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACE_in_constant4347_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACE_in_constant4347( FOLLOW_RBRACE_in_constant4347_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LENGTH_in_builtin_unary4376_bits[]	= { ANTLR_UINT64_LIT(0x0000008000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LENGTH_in_builtin_unary4376( FOLLOW_LENGTH_in_builtin_unary4376_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACKET_in_builtin_unary4378_bits[]	= { ANTLR_UINT64_LIT(0xCCE209B261841B00), ANTLR_UINT64_LIT(0x0000000000020088) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_builtin_unary4378( FOLLOW_LBRACKET_in_builtin_unary4378_bits, 2 );

static	ANTLR_BITWORD FOLLOW_expr_in_builtin_unary4380_bits[]	= { ANTLR_UINT64_LIT(0x0001000000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_builtin_unary4380( FOLLOW_expr_in_builtin_unary4380_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACKET_in_builtin_unary4382_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_builtin_unary4382( FOLLOW_RBRACKET_in_builtin_unary4382_bits, 1 );

static	ANTLR_BITWORD FOLLOW_ID_in_non_array_prim_ex4411_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_ID_in_non_array_prim_ex4411( FOLLOW_ID_in_non_array_prim_ex4411_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACKET_in_non_array_prim_ex4425_bits[]	= { ANTLR_UINT64_LIT(0xCCE209B261841B00), ANTLR_UINT64_LIT(0x0000000000020088) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_non_array_prim_ex4425( FOLLOW_LBRACKET_in_non_array_prim_ex4425_bits, 2 );

static	ANTLR_BITWORD FOLLOW_expr_in_non_array_prim_ex4429_bits[]	= { ANTLR_UINT64_LIT(0x0001000000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_non_array_prim_ex4429( FOLLOW_expr_in_non_array_prim_ex4429_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACKET_in_non_array_prim_ex4433_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_non_array_prim_ex4433( FOLLOW_RBRACKET_in_non_array_prim_ex4433_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RESOURCE_in_non_array_prim_ex4445_bits[]	= { ANTLR_UINT64_LIT(0x0000008000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RESOURCE_in_non_array_prim_ex4445( FOLLOW_RESOURCE_in_non_array_prim_ex4445_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACKET_in_non_array_prim_ex4449_bits[]	= { ANTLR_UINT64_LIT(0x0400000000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_non_array_prim_ex4449( FOLLOW_LBRACKET_in_non_array_prim_ex4449_bits, 1 );

static	ANTLR_BITWORD FOLLOW_STRING_in_non_array_prim_ex4453_bits[]	= { ANTLR_UINT64_LIT(0x0001000000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_STRING_in_non_array_prim_ex4453( FOLLOW_STRING_in_non_array_prim_ex4453_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACKET_in_non_array_prim_ex4457_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_non_array_prim_ex4457( FOLLOW_RBRACKET_in_non_array_prim_ex4457_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RESOURCE_in_non_array_prim_ex4469_bits[]	= { ANTLR_UINT64_LIT(0x0000008000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RESOURCE_in_non_array_prim_ex4469( FOLLOW_RESOURCE_in_non_array_prim_ex4469_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACKET_in_non_array_prim_ex4473_bits[]	= { ANTLR_UINT64_LIT(0x0400000000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_non_array_prim_ex4473( FOLLOW_LBRACKET_in_non_array_prim_ex4473_bits, 1 );

static	ANTLR_BITWORD FOLLOW_STRING_in_non_array_prim_ex4477_bits[]	= { ANTLR_UINT64_LIT(0x0000000000008000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_STRING_in_non_array_prim_ex4477( FOLLOW_STRING_in_non_array_prim_ex4477_bits, 1 );

static	ANTLR_BITWORD FOLLOW_COMMA_in_non_array_prim_ex4479_bits[]	= { ANTLR_UINT64_LIT(0xCCE209B261841B00), ANTLR_UINT64_LIT(0x0000000000020088) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_COMMA_in_non_array_prim_ex4479( FOLLOW_COMMA_in_non_array_prim_ex4479_bits, 2 );

static	ANTLR_BITWORD FOLLOW_arglist_in_non_array_prim_ex4483_bits[]	= { ANTLR_UINT64_LIT(0x0001000000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_arglist_in_non_array_prim_ex4483( FOLLOW_arglist_in_non_array_prim_ex4483_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACKET_in_non_array_prim_ex4487_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_non_array_prim_ex4487( FOLLOW_RBRACKET_in_non_array_prim_ex4487_bits, 1 );

static	ANTLR_BITWORD FOLLOW_constant_in_non_array_prim_ex4501_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_constant_in_non_array_prim_ex4501( FOLLOW_constant_in_non_array_prim_ex4501_bits, 1 );

static	ANTLR_BITWORD FOLLOW_scalarType_in_non_array_prim_ex4516_bits[]	= { ANTLR_UINT64_LIT(0x0000008000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_scalarType_in_non_array_prim_ex4516( FOLLOW_scalarType_in_non_array_prim_ex4516_bits, 1 );

static	ANTLR_BITWORD FOLLOW_cast_in_non_array_prim_ex4522_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_cast_in_non_array_prim_ex4522( FOLLOW_cast_in_non_array_prim_ex4522_bits, 1 );

static	ANTLR_BITWORD FOLLOW_objectType_in_non_array_prim_ex4537_bits[]	= { ANTLR_UINT64_LIT(0x0000008000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_objectType_in_non_array_prim_ex4537( FOLLOW_objectType_in_non_array_prim_ex4537_bits, 1 );

static	ANTLR_BITWORD FOLLOW_structInit_in_non_array_prim_ex4541_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_structInit_in_non_array_prim_ex4541( FOLLOW_structInit_in_non_array_prim_ex4541_bits, 1 );

static	ANTLR_BITWORD FOLLOW_SHARED_REF_in_non_array_prim_ex4553_bits[]	= { ANTLR_UINT64_LIT(0x8000000000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SHARED_REF_in_non_array_prim_ex4553( FOLLOW_SHARED_REF_in_non_array_prim_ex4553_bits, 1 );

static	ANTLR_BITWORD FOLLOW_objectType_in_non_array_prim_ex4557_bits[]	= { ANTLR_UINT64_LIT(0x0000008000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_objectType_in_non_array_prim_ex4557( FOLLOW_objectType_in_non_array_prim_ex4557_bits, 1 );

static	ANTLR_BITWORD FOLLOW_structInit_in_non_array_prim_ex4561_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_structInit_in_non_array_prim_ex4561( FOLLOW_structInit_in_non_array_prim_ex4561_bits, 1 );

static	ANTLR_BITWORD FOLLOW_builtin_unary_in_non_array_prim_ex4575_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_builtin_unary_in_non_array_prim_ex4575( FOLLOW_builtin_unary_in_non_array_prim_ex4575_bits, 1 );

static	ANTLR_BITWORD FOLLOW_non_array_prim_ex_in_prim_ex4604_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_non_array_prim_ex_in_prim_ex4604( FOLLOW_non_array_prim_ex_in_prim_ex4604_bits, 1 );

static	ANTLR_BITWORD FOLLOW_nonArrayType_in_prim_ex4618_bits[]	= { ANTLR_UINT64_LIT(0x0000040000200000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_nonArrayType_in_prim_ex4618( FOLLOW_nonArrayType_in_prim_ex4618_bits, 1 );

static	ANTLR_BITWORD FOLLOW_arrayInit_in_prim_ex4622_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_arrayInit_in_prim_ex4622( FOLLOW_arrayInit_in_prim_ex4622_bits, 1 );

static	ANTLR_BITWORD FOLLOW_SHARED_REF_in_prim_ex4634_bits[]	= { ANTLR_UINT64_LIT(0x8880002040041200), ANTLR_UINT64_LIT(0x0000000000000008) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SHARED_REF_in_prim_ex4634( FOLLOW_SHARED_REF_in_prim_ex4634_bits, 2 );

static	ANTLR_BITWORD FOLLOW_nonArrayType_in_prim_ex4638_bits[]	= { ANTLR_UINT64_LIT(0x0000040000200000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_nonArrayType_in_prim_ex4638( FOLLOW_nonArrayType_in_prim_ex4638_bits, 1 );

static	ANTLR_BITWORD FOLLOW_arrayInit_in_prim_ex4642_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_arrayInit_in_prim_ex4642( FOLLOW_arrayInit_in_prim_ex4642_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACKET_in_cast4671_bits[]	= { ANTLR_UINT64_LIT(0xCCE209B261841B00), ANTLR_UINT64_LIT(0x0000000000020088) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_cast4671( FOLLOW_LBRACKET_in_cast4671_bits, 2 );

static	ANTLR_BITWORD FOLLOW_expr_in_cast4675_bits[]	= { ANTLR_UINT64_LIT(0x0001000000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_cast4675( FOLLOW_expr_in_cast4675_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACKET_in_cast4679_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_cast4679( FOLLOW_RBRACKET_in_cast4679_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACKET_in_structInit4709_bits[]	= { ANTLR_UINT64_LIT(0x0001000000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_structInit4709( FOLLOW_LBRACKET_in_structInit4709_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACKET_in_structInit4713_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_structInit4713( FOLLOW_RBRACKET_in_structInit4713_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACKET_in_structInit4727_bits[]	= { ANTLR_UINT64_LIT(0xCCE209B261841B00), ANTLR_UINT64_LIT(0x0000000000020088) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_structInit4727( FOLLOW_LBRACKET_in_structInit4727_bits, 2 );

static	ANTLR_BITWORD FOLLOW_arglist_in_structInit4731_bits[]	= { ANTLR_UINT64_LIT(0x0001000000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_arglist_in_structInit4731( FOLLOW_arglist_in_structInit4731_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACKET_in_structInit4735_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_structInit4735( FOLLOW_RBRACKET_in_structInit4735_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LSQBRACKET_in_arrayInit4787_bits[]	= { ANTLR_UINT64_LIT(0xCCE209B261841B00), ANTLR_UINT64_LIT(0x0000000000020088) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LSQBRACKET_in_arrayInit4787( FOLLOW_LSQBRACKET_in_arrayInit4787_bits, 2 );

static	ANTLR_BITWORD FOLLOW_expr_in_arrayInit4791_bits[]	= { ANTLR_UINT64_LIT(0x0008000000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_arrayInit4791( FOLLOW_expr_in_arrayInit4791_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RSQBRACKET_in_arrayInit4793_bits[]	= { ANTLR_UINT64_LIT(0x0000008000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RSQBRACKET_in_arrayInit4793( FOLLOW_RSQBRACKET_in_arrayInit4793_bits, 1 );

static	ANTLR_BITWORD FOLLOW_DLSQBRACKET_in_arrayInit4820_bits[]	= { ANTLR_UINT64_LIT(0xCCE209B261841B00), ANTLR_UINT64_LIT(0x0000000000020088) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_DLSQBRACKET_in_arrayInit4820( FOLLOW_DLSQBRACKET_in_arrayInit4820_bits, 2 );

static	ANTLR_BITWORD FOLLOW_expr_in_arrayInit4824_bits[]	= { ANTLR_UINT64_LIT(0x0000000002000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_arrayInit4824( FOLLOW_expr_in_arrayInit4824_bits, 1 );

static	ANTLR_BITWORD FOLLOW_DRSQBRACKET_in_arrayInit4826_bits[]	= { ANTLR_UINT64_LIT(0x0000008000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_DRSQBRACKET_in_arrayInit4826( FOLLOW_DRSQBRACKET_in_arrayInit4826_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACKET_in_arrayInit4845_bits[]	= { ANTLR_UINT64_LIT(0xCCE209B261841B00), ANTLR_UINT64_LIT(0x0000000000020088) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_arrayInit4845( FOLLOW_LBRACKET_in_arrayInit4845_bits, 2 );

static	ANTLR_BITWORD FOLLOW_expr_in_arrayInit4849_bits[]	= { ANTLR_UINT64_LIT(0x0001000000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_arrayInit4849( FOLLOW_expr_in_arrayInit4849_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACKET_in_arrayInit4853_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_arrayInit4853( FOLLOW_RBRACKET_in_arrayInit4853_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LSQBRACKET_in_arrayInit4895_bits[]	= { ANTLR_UINT64_LIT(0x0008000000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LSQBRACKET_in_arrayInit4895( FOLLOW_LSQBRACKET_in_arrayInit4895_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RSQBRACKET_in_arrayInit4897_bits[]	= { ANTLR_UINT64_LIT(0x0000008000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RSQBRACKET_in_arrayInit4897( FOLLOW_RSQBRACKET_in_arrayInit4897_bits, 1 );

static	ANTLR_BITWORD FOLLOW_DLSQBRACKET_in_arrayInit4903_bits[]	= { ANTLR_UINT64_LIT(0x0000000002000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_DLSQBRACKET_in_arrayInit4903( FOLLOW_DLSQBRACKET_in_arrayInit4903_bits, 1 );

static	ANTLR_BITWORD FOLLOW_DRSQBRACKET_in_arrayInit4905_bits[]	= { ANTLR_UINT64_LIT(0x0000008000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_DRSQBRACKET_in_arrayInit4905( FOLLOW_DRSQBRACKET_in_arrayInit4905_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACKET_in_arrayInit4924_bits[]	= { ANTLR_UINT64_LIT(0xCCE209B261841B00), ANTLR_UINT64_LIT(0x0000000000020088) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_arrayInit4924( FOLLOW_LBRACKET_in_arrayInit4924_bits, 2 );

static	ANTLR_BITWORD FOLLOW_arglist_in_arrayInit4928_bits[]	= { ANTLR_UINT64_LIT(0x0001000000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_arglist_in_arrayInit4928( FOLLOW_arglist_in_arrayInit4928_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACKET_in_arrayInit4932_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_arrayInit4932( FOLLOW_RBRACKET_in_arrayInit4932_bits, 1 );

static	ANTLR_BITWORD FOLLOW_param_in_declaration4975_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000001000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_param_in_declaration4975( FOLLOW_param_in_declaration4975_bits, 2 );

static	ANTLR_BITWORD FOLLOW_88_in_declaration5010_bits[]	= { ANTLR_UINT64_LIT(0xCCE209B261841B00), ANTLR_UINT64_LIT(0x0000000000020088) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_88_in_declaration5010( FOLLOW_88_in_declaration5010_bits, 2 );

static	ANTLR_BITWORD FOLLOW_expr_in_declaration5017_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_declaration5017( FOLLOW_expr_in_declaration5017_bits, 1 );

static	ANTLR_BITWORD FOLLOW_83_in_inherited_declaration5067_bits[]	= { ANTLR_UINT64_LIT(0x0000000200000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_83_in_inherited_declaration5067( FOLLOW_83_in_inherited_declaration5067_bits, 1 );

static	ANTLR_BITWORD FOLLOW_ID_in_inherited_declaration5071_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000001000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_ID_in_inherited_declaration5071( FOLLOW_ID_in_inherited_declaration5071_bits, 2 );

static	ANTLR_BITWORD FOLLOW_88_in_inherited_declaration5084_bits[]	= { ANTLR_UINT64_LIT(0xCCE209B2618C1B00), ANTLR_UINT64_LIT(0x0000000000020088) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_88_in_inherited_declaration5084( FOLLOW_88_in_inherited_declaration5084_bits, 2 );

static	ANTLR_BITWORD FOLLOW_expr_in_inherited_declaration5120_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_inherited_declaration5120( FOLLOW_expr_in_inherited_declaration5120_bits, 1 );

static	ANTLR_BITWORD FOLLOW_DEFAULT_in_inherited_declaration5146_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_DEFAULT_in_inherited_declaration5146( FOLLOW_DEFAULT_in_inherited_declaration5146_bits, 1 );

static	ANTLR_BITWORD FOLLOW_declaration_in_instructionScalar5202_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_declaration_in_instructionScalar5202( FOLLOW_declaration_in_instructionScalar5202_bits, 1 );

static	ANTLR_BITWORD FOLLOW_assignment_or_expression_in_instructionScalar5215_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_assignment_or_expression_in_instructionScalar5215( FOLLOW_assignment_or_expression_in_instructionScalar5215_bits, 1 );

static	ANTLR_BITWORD FOLLOW_CONTINUE_in_continueInst5245_bits[]	= { ANTLR_UINT64_LIT(0x0010000000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_CONTINUE_in_continueInst5245( FOLLOW_CONTINUE_in_continueInst5245_bits, 1 );

static	ANTLR_BITWORD FOLLOW_SEMICOLON_in_continueInst5249_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SEMICOLON_in_continueInst5249( FOLLOW_SEMICOLON_in_continueInst5249_bits, 1 );

static	ANTLR_BITWORD FOLLOW_BREAK_in_breakInst5275_bits[]	= { ANTLR_UINT64_LIT(0x0010000000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_BREAK_in_breakInst5275( FOLLOW_BREAK_in_breakInst5275_bits, 1 );

static	ANTLR_BITWORD FOLLOW_SEMICOLON_in_breakInst5279_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SEMICOLON_in_breakInst5279( FOLLOW_SEMICOLON_in_breakInst5279_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RETURN_in_returnInst5306_bits[]	= { ANTLR_UINT64_LIT(0xCCE209B261841B00), ANTLR_UINT64_LIT(0x0000000000020088) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RETURN_in_returnInst5306( FOLLOW_RETURN_in_returnInst5306_bits, 2 );

static	ANTLR_BITWORD FOLLOW_expr_in_returnInst5308_bits[]	= { ANTLR_UINT64_LIT(0x0010000000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_returnInst5308( FOLLOW_expr_in_returnInst5308_bits, 1 );

static	ANTLR_BITWORD FOLLOW_SEMICOLON_in_returnInst5312_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SEMICOLON_in_returnInst5312( FOLLOW_SEMICOLON_in_returnInst5312_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RETURN_in_returnInst5326_bits[]	= { ANTLR_UINT64_LIT(0x0010000000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RETURN_in_returnInst5326( FOLLOW_RETURN_in_returnInst5326_bits, 1 );

static	ANTLR_BITWORD FOLLOW_SEMICOLON_in_returnInst5330_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SEMICOLON_in_returnInst5330( FOLLOW_SEMICOLON_in_returnInst5330_bits, 1 );

static	ANTLR_BITWORD FOLLOW_WHILE_in_whileInst5363_bits[]	= { ANTLR_UINT64_LIT(0x0000008000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_WHILE_in_whileInst5363( FOLLOW_WHILE_in_whileInst5363_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACKET_in_whileInst5365_bits[]	= { ANTLR_UINT64_LIT(0xCCE209B261841B00), ANTLR_UINT64_LIT(0x0000000000020088) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_whileInst5365( FOLLOW_LBRACKET_in_whileInst5365_bits, 2 );

static	ANTLR_BITWORD FOLLOW_expr_in_whileInst5367_bits[]	= { ANTLR_UINT64_LIT(0x0001000000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_whileInst5367( FOLLOW_expr_in_whileInst5367_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACKET_in_whileInst5369_bits[]	= { ANTLR_UINT64_LIT(0x0000004000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_whileInst5369( FOLLOW_RBRACKET_in_whileInst5369_bits, 1 );

static	ANTLR_BITWORD FOLLOW_instruction_list_in_whileInst5371_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_instruction_list_in_whileInst5371( FOLLOW_instruction_list_in_whileInst5371_bits, 1 );

static	ANTLR_BITWORD FOLLOW_DO_in_doInst5407_bits[]	= { ANTLR_UINT64_LIT(0x0000004000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_DO_in_doInst5407( FOLLOW_DO_in_doInst5407_bits, 1 );

static	ANTLR_BITWORD FOLLOW_instruction_list_in_doInst5409_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000020) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_instruction_list_in_doInst5409( FOLLOW_instruction_list_in_doInst5409_bits, 2 );

static	ANTLR_BITWORD FOLLOW_WHILE_in_doInst5411_bits[]	= { ANTLR_UINT64_LIT(0x0000008000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_WHILE_in_doInst5411( FOLLOW_WHILE_in_doInst5411_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACKET_in_doInst5413_bits[]	= { ANTLR_UINT64_LIT(0xCCE209B261841B00), ANTLR_UINT64_LIT(0x0000000000020088) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_doInst5413( FOLLOW_LBRACKET_in_doInst5413_bits, 2 );

static	ANTLR_BITWORD FOLLOW_expr_in_doInst5415_bits[]	= { ANTLR_UINT64_LIT(0x0001000000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_doInst5415( FOLLOW_expr_in_doInst5415_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACKET_in_doInst5417_bits[]	= { ANTLR_UINT64_LIT(0x0010000000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_doInst5417( FOLLOW_RBRACKET_in_doInst5417_bits, 1 );

static	ANTLR_BITWORD FOLLOW_SEMICOLON_in_doInst5419_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SEMICOLON_in_doInst5419( FOLLOW_SEMICOLON_in_doInst5419_bits, 1 );

static	ANTLR_BITWORD FOLLOW_FOR_in_forInst5451_bits[]	= { ANTLR_UINT64_LIT(0x0000008000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_FOR_in_forInst5451( FOLLOW_FOR_in_forInst5451_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACKET_in_forInst5453_bits[]	= { ANTLR_UINT64_LIT(0xCCF209B261841B00), ANTLR_UINT64_LIT(0x0000000000020098) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_forInst5453( FOLLOW_LBRACKET_in_forInst5453_bits, 2 );

static	ANTLR_BITWORD FOLLOW_instructionScalar_in_forInst5481_bits[]	= { ANTLR_UINT64_LIT(0x0010000000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_instructionScalar_in_forInst5481( FOLLOW_instructionScalar_in_forInst5481_bits, 1 );

static	ANTLR_BITWORD FOLLOW_SEMICOLON_in_forInst5487_bits[]	= { ANTLR_UINT64_LIT(0xCCF209B261841B00), ANTLR_UINT64_LIT(0x0000000000020088) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SEMICOLON_in_forInst5487( FOLLOW_SEMICOLON_in_forInst5487_bits, 2 );

static	ANTLR_BITWORD FOLLOW_expr_in_forInst5512_bits[]	= { ANTLR_UINT64_LIT(0x0010000000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_forInst5512( FOLLOW_expr_in_forInst5512_bits, 1 );

static	ANTLR_BITWORD FOLLOW_SEMICOLON_in_forInst5526_bits[]	= { ANTLR_UINT64_LIT(0xCCE309B261841B00), ANTLR_UINT64_LIT(0x0000000000020098) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SEMICOLON_in_forInst5526( FOLLOW_SEMICOLON_in_forInst5526_bits, 2 );

static	ANTLR_BITWORD FOLLOW_instructionScalar_in_forInst5551_bits[]	= { ANTLR_UINT64_LIT(0x0001000000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_instructionScalar_in_forInst5551( FOLLOW_instructionScalar_in_forInst5551_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACKET_in_forInst5557_bits[]	= { ANTLR_UINT64_LIT(0x0000004000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_forInst5557( FOLLOW_RBRACKET_in_forInst5557_bits, 1 );

static	ANTLR_BITWORD FOLLOW_instruction_list_in_forInst5582_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_instruction_list_in_forInst5582( FOLLOW_instruction_list_in_forInst5582_bits, 1 );

static	ANTLR_BITWORD FOLLOW_ELSE_in_elsemiddle5630_bits[]	= { ANTLR_UINT64_LIT(0x0000000400000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_ELSE_in_elsemiddle5630( FOLLOW_ELSE_in_elsemiddle5630_bits, 1 );

static	ANTLR_BITWORD FOLLOW_IF_in_elsemiddle5632_bits[]	= { ANTLR_UINT64_LIT(0x0000008000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_IF_in_elsemiddle5632( FOLLOW_IF_in_elsemiddle5632_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACKET_in_elsemiddle5634_bits[]	= { ANTLR_UINT64_LIT(0xCCE209B261841B00), ANTLR_UINT64_LIT(0x0000000000020088) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_elsemiddle5634( FOLLOW_LBRACKET_in_elsemiddle5634_bits, 2 );

static	ANTLR_BITWORD FOLLOW_expr_in_elsemiddle5636_bits[]	= { ANTLR_UINT64_LIT(0x0001000000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_elsemiddle5636( FOLLOW_expr_in_elsemiddle5636_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACKET_in_elsemiddle5638_bits[]	= { ANTLR_UINT64_LIT(0x0000004000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_elsemiddle5638( FOLLOW_RBRACKET_in_elsemiddle5638_bits, 1 );

static	ANTLR_BITWORD FOLLOW_instruction_list_in_elsemiddle5640_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_instruction_list_in_elsemiddle5640( FOLLOW_instruction_list_in_elsemiddle5640_bits, 1 );

static	ANTLR_BITWORD FOLLOW_ELSE_in_endif5673_bits[]	= { ANTLR_UINT64_LIT(0x0000004000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_ELSE_in_endif5673( FOLLOW_ELSE_in_endif5673_bits, 1 );

static	ANTLR_BITWORD FOLLOW_instruction_list_in_endif5675_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_instruction_list_in_endif5675( FOLLOW_instruction_list_in_endif5675_bits, 1 );

static	ANTLR_BITWORD FOLLOW_IF_in_ifInst5705_bits[]	= { ANTLR_UINT64_LIT(0x0000008000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_IF_in_ifInst5705( FOLLOW_IF_in_ifInst5705_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACKET_in_ifInst5707_bits[]	= { ANTLR_UINT64_LIT(0xCCE209B261841B00), ANTLR_UINT64_LIT(0x0000000000020088) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_ifInst5707( FOLLOW_LBRACKET_in_ifInst5707_bits, 2 );

static	ANTLR_BITWORD FOLLOW_expr_in_ifInst5709_bits[]	= { ANTLR_UINT64_LIT(0x0001000000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_ifInst5709( FOLLOW_expr_in_ifInst5709_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACKET_in_ifInst5711_bits[]	= { ANTLR_UINT64_LIT(0x0000004000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_ifInst5711( FOLLOW_RBRACKET_in_ifInst5711_bits, 1 );

static	ANTLR_BITWORD FOLLOW_instruction_list_in_ifInst5713_bits[]	= { ANTLR_UINT64_LIT(0x0000000004000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_instruction_list_in_ifInst5713( FOLLOW_instruction_list_in_ifInst5713_bits, 1 );

static	ANTLR_BITWORD FOLLOW_elsemiddle_in_ifInst5730_bits[]	= { ANTLR_UINT64_LIT(0x0000000004000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_elsemiddle_in_ifInst5730( FOLLOW_elsemiddle_in_ifInst5730_bits, 1 );

static	ANTLR_BITWORD FOLLOW_endif_in_ifInst5750_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_endif_in_ifInst5750( FOLLOW_endif_in_ifInst5750_bits, 1 );

static	ANTLR_BITWORD FOLLOW_ifInst_in_instruction5784_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_ifInst_in_instruction5784( FOLLOW_ifInst_in_instruction5784_bits, 1 );

static	ANTLR_BITWORD FOLLOW_whileInst_in_instruction5805_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_whileInst_in_instruction5805( FOLLOW_whileInst_in_instruction5805_bits, 1 );

static	ANTLR_BITWORD FOLLOW_doInst_in_instruction5822_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_doInst_in_instruction5822( FOLLOW_doInst_in_instruction5822_bits, 1 );

static	ANTLR_BITWORD FOLLOW_forInst_in_instruction5842_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_forInst_in_instruction5842( FOLLOW_forInst_in_instruction5842_bits, 1 );

static	ANTLR_BITWORD FOLLOW_instructionScalar_in_instruction5862_bits[]	= { ANTLR_UINT64_LIT(0x0010000000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_instructionScalar_in_instruction5862( FOLLOW_instructionScalar_in_instruction5862_bits, 1 );

static	ANTLR_BITWORD FOLLOW_SEMICOLON_in_instruction5864_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SEMICOLON_in_instruction5864( FOLLOW_SEMICOLON_in_instruction5864_bits, 1 );

static	ANTLR_BITWORD FOLLOW_breakInst_in_instruction5877_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_breakInst_in_instruction5877( FOLLOW_breakInst_in_instruction5877_bits, 1 );

static	ANTLR_BITWORD FOLLOW_continueInst_in_instruction5890_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_continueInst_in_instruction5890( FOLLOW_continueInst_in_instruction5890_bits, 1 );

static	ANTLR_BITWORD FOLLOW_returnInst_in_instruction5903_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_returnInst_in_instruction5903( FOLLOW_returnInst_in_instruction5903_bits, 1 );

static	ANTLR_BITWORD FOLLOW_instruction_list_in_instruction5916_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_instruction_list_in_instruction5916( FOLLOW_instruction_list_in_instruction5916_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACE_in_instruction_list5948_bits[]	= { ANTLR_UINT64_LIT(0xCCE689F6E1C61F00), ANTLR_UINT64_LIT(0x00000000000200B8) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACE_in_instruction_list5948( FOLLOW_LBRACE_in_instruction_list5948_bits, 2 );

static	ANTLR_BITWORD FOLLOW_instruction_in_instruction_list5965_bits[]	= { ANTLR_UINT64_LIT(0xCCE689F6E1C61F00), ANTLR_UINT64_LIT(0x00000000000200B8) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_instruction_in_instruction_list5965( FOLLOW_instruction_in_instruction_list5965_bits, 2 );

static	ANTLR_BITWORD FOLLOW_RBRACE_in_instruction_list5982_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACE_in_instruction_list5982( FOLLOW_RBRACE_in_instruction_list5982_bits, 1 );

static	ANTLR_BITWORD FOLLOW_param_in_function6012_bits[]	= { ANTLR_UINT64_LIT(0x0000008000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_param_in_function6012( FOLLOW_param_in_function6012_bits, 1 );

static	ANTLR_BITWORD FOLLOW_parameterList_in_function6014_bits[]	= { ANTLR_UINT64_LIT(0x0000004000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_parameterList_in_function6014( FOLLOW_parameterList_in_function6014_bits, 1 );

static	ANTLR_BITWORD FOLLOW_instruction_list_in_function6016_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_instruction_list_in_function6016( FOLLOW_instruction_list_in_function6016_bits, 1 );

static	ANTLR_BITWORD FOLLOW_STRUCT_in_structDecl6068_bits[]	= { ANTLR_UINT64_LIT(0x8000000000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_STRUCT_in_structDecl6068( FOLLOW_STRUCT_in_structDecl6068_bits, 1 );

static	ANTLR_BITWORD FOLLOW_TYPE_in_structDecl6072_bits[]	= { ANTLR_UINT64_LIT(0x000000C000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_TYPE_in_structDecl6072( FOLLOW_TYPE_in_structDecl6072_bits, 1 );

static	ANTLR_BITWORD FOLLOW_STRUCT_in_structDecl6092_bits[]	= { ANTLR_UINT64_LIT(0x8000000000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_STRUCT_in_structDecl6092( FOLLOW_STRUCT_in_structDecl6092_bits, 1 );

static	ANTLR_BITWORD FOLLOW_TYPE_in_structDecl6096_bits[]	= { ANTLR_UINT64_LIT(0x0000000000004000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_TYPE_in_structDecl6096( FOLLOW_TYPE_in_structDecl6096_bits, 1 );

static	ANTLR_BITWORD FOLLOW_COLON_in_structDecl6098_bits[]	= { ANTLR_UINT64_LIT(0x8000000000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_COLON_in_structDecl6098( FOLLOW_COLON_in_structDecl6098_bits, 1 );

static	ANTLR_BITWORD FOLLOW_TYPE_in_structDecl6102_bits[]	= { ANTLR_UINT64_LIT(0x000000C000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_TYPE_in_structDecl6102( FOLLOW_TYPE_in_structDecl6102_bits, 1 );

static	ANTLR_BITWORD FOLLOW_parameterList_in_structDecl6130_bits[]	= { ANTLR_UINT64_LIT(0x0000004000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_parameterList_in_structDecl6130( FOLLOW_parameterList_in_structDecl6130_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACE_in_structDecl6148_bits[]	= { ANTLR_UINT64_LIT(0x88A0802040041200), ANTLR_UINT64_LIT(0x0000000000080018) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACE_in_structDecl6148( FOLLOW_LBRACE_in_structDecl6148_bits, 2 );

static	ANTLR_BITWORD FOLLOW_declaration_in_structDecl6191_bits[]	= { ANTLR_UINT64_LIT(0x0010000000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_declaration_in_structDecl6191( FOLLOW_declaration_in_structDecl6191_bits, 1 );

static	ANTLR_BITWORD FOLLOW_SEMICOLON_in_structDecl6195_bits[]	= { ANTLR_UINT64_LIT(0x88A0802040041200), ANTLR_UINT64_LIT(0x0000000000080018) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SEMICOLON_in_structDecl6195( FOLLOW_SEMICOLON_in_structDecl6195_bits, 2 );

static	ANTLR_BITWORD FOLLOW_inherited_declaration_in_structDecl6221_bits[]	= { ANTLR_UINT64_LIT(0x0010000000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_inherited_declaration_in_structDecl6221( FOLLOW_inherited_declaration_in_structDecl6221_bits, 1 );

static	ANTLR_BITWORD FOLLOW_SEMICOLON_in_structDecl6225_bits[]	= { ANTLR_UINT64_LIT(0x88A0802040041200), ANTLR_UINT64_LIT(0x0000000000080018) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SEMICOLON_in_structDecl6225( FOLLOW_SEMICOLON_in_structDecl6225_bits, 2 );

static	ANTLR_BITWORD FOLLOW_function_in_structDecl6251_bits[]	= { ANTLR_UINT64_LIT(0x88A0802040041200), ANTLR_UINT64_LIT(0x0000000000080018) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_function_in_structDecl6251( FOLLOW_function_in_structDecl6251_bits, 2 );

static	ANTLR_BITWORD FOLLOW_RBRACE_in_structDecl6290_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACE_in_structDecl6290( FOLLOW_RBRACE_in_structDecl6290_bits, 1 );

static	ANTLR_BITWORD FOLLOW_ACTOR_in_classDecl6343_bits[]	= { ANTLR_UINT64_LIT(0x8000000000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_ACTOR_in_classDecl6343( FOLLOW_ACTOR_in_classDecl6343_bits, 1 );

static	ANTLR_BITWORD FOLLOW_TYPE_in_classDecl6347_bits[]	= { ANTLR_UINT64_LIT(0x000000C000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_TYPE_in_classDecl6347( FOLLOW_TYPE_in_classDecl6347_bits, 1 );

static	ANTLR_BITWORD FOLLOW_ACTOR_in_classDecl6367_bits[]	= { ANTLR_UINT64_LIT(0x8000000000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_ACTOR_in_classDecl6367( FOLLOW_ACTOR_in_classDecl6367_bits, 1 );

static	ANTLR_BITWORD FOLLOW_TYPE_in_classDecl6371_bits[]	= { ANTLR_UINT64_LIT(0x0000000000004000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_TYPE_in_classDecl6371( FOLLOW_TYPE_in_classDecl6371_bits, 1 );

static	ANTLR_BITWORD FOLLOW_COLON_in_classDecl6373_bits[]	= { ANTLR_UINT64_LIT(0x8000000000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_COLON_in_classDecl6373( FOLLOW_COLON_in_classDecl6373_bits, 1 );

static	ANTLR_BITWORD FOLLOW_TYPE_in_classDecl6377_bits[]	= { ANTLR_UINT64_LIT(0x000000C000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_TYPE_in_classDecl6377( FOLLOW_TYPE_in_classDecl6377_bits, 1 );

static	ANTLR_BITWORD FOLLOW_CLASS_in_classDecl6397_bits[]	= { ANTLR_UINT64_LIT(0x8000000000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_CLASS_in_classDecl6397( FOLLOW_CLASS_in_classDecl6397_bits, 1 );

static	ANTLR_BITWORD FOLLOW_TYPE_in_classDecl6401_bits[]	= { ANTLR_UINT64_LIT(0x000000C000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_TYPE_in_classDecl6401( FOLLOW_TYPE_in_classDecl6401_bits, 1 );

static	ANTLR_BITWORD FOLLOW_CLASS_in_classDecl6421_bits[]	= { ANTLR_UINT64_LIT(0x8000000000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_CLASS_in_classDecl6421( FOLLOW_CLASS_in_classDecl6421_bits, 1 );

static	ANTLR_BITWORD FOLLOW_TYPE_in_classDecl6425_bits[]	= { ANTLR_UINT64_LIT(0x0000000000004000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_TYPE_in_classDecl6425( FOLLOW_TYPE_in_classDecl6425_bits, 1 );

static	ANTLR_BITWORD FOLLOW_COLON_in_classDecl6427_bits[]	= { ANTLR_UINT64_LIT(0x8000000000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_COLON_in_classDecl6427( FOLLOW_COLON_in_classDecl6427_bits, 1 );

static	ANTLR_BITWORD FOLLOW_TYPE_in_classDecl6431_bits[]	= { ANTLR_UINT64_LIT(0x000000C000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_TYPE_in_classDecl6431( FOLLOW_TYPE_in_classDecl6431_bits, 1 );

static	ANTLR_BITWORD FOLLOW_parameterList_in_classDecl6459_bits[]	= { ANTLR_UINT64_LIT(0x0000004000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_parameterList_in_classDecl6459( FOLLOW_parameterList_in_classDecl6459_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACE_in_classDecl6477_bits[]	= { ANTLR_UINT64_LIT(0xA8A0A02040041210), ANTLR_UINT64_LIT(0x000000000008001C) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACE_in_classDecl6477( FOLLOW_LBRACE_in_classDecl6477_bits, 2 );

static	ANTLR_BITWORD FOLLOW_declaration_in_classDecl6520_bits[]	= { ANTLR_UINT64_LIT(0x0010000000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_declaration_in_classDecl6520( FOLLOW_declaration_in_classDecl6520_bits, 1 );

static	ANTLR_BITWORD FOLLOW_SEMICOLON_in_classDecl6524_bits[]	= { ANTLR_UINT64_LIT(0xA8A0A02040041210), ANTLR_UINT64_LIT(0x000000000008001C) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SEMICOLON_in_classDecl6524( FOLLOW_SEMICOLON_in_classDecl6524_bits, 2 );

static	ANTLR_BITWORD FOLLOW_SYNCHRONIZED_in_classDecl6548_bits[]	= { ANTLR_UINT64_LIT(0x88A0002040041200), ANTLR_UINT64_LIT(0x0000000000000018) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SYNCHRONIZED_in_classDecl6548( FOLLOW_SYNCHRONIZED_in_classDecl6548_bits, 2 );

static	ANTLR_BITWORD FOLLOW_declaration_in_classDecl6552_bits[]	= { ANTLR_UINT64_LIT(0x0010000000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_declaration_in_classDecl6552( FOLLOW_declaration_in_classDecl6552_bits, 1 );

static	ANTLR_BITWORD FOLLOW_SEMICOLON_in_classDecl6556_bits[]	= { ANTLR_UINT64_LIT(0xA8A0A02040041210), ANTLR_UINT64_LIT(0x000000000008001C) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SEMICOLON_in_classDecl6556( FOLLOW_SEMICOLON_in_classDecl6556_bits, 2 );

static	ANTLR_BITWORD FOLLOW_inherited_declaration_in_classDecl6583_bits[]	= { ANTLR_UINT64_LIT(0x0010000000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_inherited_declaration_in_classDecl6583( FOLLOW_inherited_declaration_in_classDecl6583_bits, 1 );

static	ANTLR_BITWORD FOLLOW_SEMICOLON_in_classDecl6587_bits[]	= { ANTLR_UINT64_LIT(0xA8A0A02040041210), ANTLR_UINT64_LIT(0x000000000008001C) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SEMICOLON_in_classDecl6587( FOLLOW_SEMICOLON_in_classDecl6587_bits, 2 );

static	ANTLR_BITWORD FOLLOW_SYNCHRONIZED_in_classDecl6611_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000080000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SYNCHRONIZED_in_classDecl6611( FOLLOW_SYNCHRONIZED_in_classDecl6611_bits, 2 );

static	ANTLR_BITWORD FOLLOW_inherited_declaration_in_classDecl6615_bits[]	= { ANTLR_UINT64_LIT(0x0010000000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_inherited_declaration_in_classDecl6615( FOLLOW_inherited_declaration_in_classDecl6615_bits, 1 );

static	ANTLR_BITWORD FOLLOW_SEMICOLON_in_classDecl6619_bits[]	= { ANTLR_UINT64_LIT(0xA8A0A02040041210), ANTLR_UINT64_LIT(0x000000000008001C) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SEMICOLON_in_classDecl6619( FOLLOW_SEMICOLON_in_classDecl6619_bits, 2 );

static	ANTLR_BITWORD FOLLOW_function_in_classDecl6645_bits[]	= { ANTLR_UINT64_LIT(0xA8A0A02040041210), ANTLR_UINT64_LIT(0x000000000008001C) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_function_in_classDecl6645( FOLLOW_function_in_classDecl6645_bits, 2 );

static	ANTLR_BITWORD FOLLOW_SYNCHRONIZED_in_classDecl6674_bits[]	= { ANTLR_UINT64_LIT(0x88A0002040041200), ANTLR_UINT64_LIT(0x0000000000000018) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SYNCHRONIZED_in_classDecl6674( FOLLOW_SYNCHRONIZED_in_classDecl6674_bits, 2 );

static	ANTLR_BITWORD FOLLOW_function_in_classDecl6678_bits[]	= { ANTLR_UINT64_LIT(0xA8A0A02040041210), ANTLR_UINT64_LIT(0x000000000008001C) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_function_in_classDecl6678( FOLLOW_function_in_classDecl6678_bits, 2 );

static	ANTLR_BITWORD FOLLOW_ACTION_in_classDecl6707_bits[]	= { ANTLR_UINT64_LIT(0x88A0002040041200), ANTLR_UINT64_LIT(0x0000000000000018) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_ACTION_in_classDecl6707( FOLLOW_ACTION_in_classDecl6707_bits, 2 );

static	ANTLR_BITWORD FOLLOW_function_in_classDecl6711_bits[]	= { ANTLR_UINT64_LIT(0xA8A0A02040041210), ANTLR_UINT64_LIT(0x000000000008001C) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_function_in_classDecl6711( FOLLOW_function_in_classDecl6711_bits, 2 );

static	ANTLR_BITWORD FOLLOW_VIRTUAL_in_classDecl6740_bits[]	= { ANTLR_UINT64_LIT(0x88A0002040041200), ANTLR_UINT64_LIT(0x0000000000000018) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_VIRTUAL_in_classDecl6740( FOLLOW_VIRTUAL_in_classDecl6740_bits, 2 );

static	ANTLR_BITWORD FOLLOW_function_in_classDecl6744_bits[]	= { ANTLR_UINT64_LIT(0xA8A0A02040041210), ANTLR_UINT64_LIT(0x000000000008001C) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_function_in_classDecl6744( FOLLOW_function_in_classDecl6744_bits, 2 );

static	ANTLR_BITWORD FOLLOW_SYNCHRONIZED_in_classDecl6770_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SYNCHRONIZED_in_classDecl6770( FOLLOW_SYNCHRONIZED_in_classDecl6770_bits, 2 );

static	ANTLR_BITWORD FOLLOW_VIRTUAL_in_classDecl6772_bits[]	= { ANTLR_UINT64_LIT(0x88A0002040041200), ANTLR_UINT64_LIT(0x0000000000000018) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_VIRTUAL_in_classDecl6772( FOLLOW_VIRTUAL_in_classDecl6772_bits, 2 );

static	ANTLR_BITWORD FOLLOW_function_in_classDecl6776_bits[]	= { ANTLR_UINT64_LIT(0xA8A0A02040041210), ANTLR_UINT64_LIT(0x000000000008001C) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_function_in_classDecl6776( FOLLOW_function_in_classDecl6776_bits, 2 );

static	ANTLR_BITWORD FOLLOW_ACTION_in_classDecl6802_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_ACTION_in_classDecl6802( FOLLOW_ACTION_in_classDecl6802_bits, 2 );

static	ANTLR_BITWORD FOLLOW_VIRTUAL_in_classDecl6804_bits[]	= { ANTLR_UINT64_LIT(0x88A0002040041200), ANTLR_UINT64_LIT(0x0000000000000018) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_VIRTUAL_in_classDecl6804( FOLLOW_VIRTUAL_in_classDecl6804_bits, 2 );

static	ANTLR_BITWORD FOLLOW_function_in_classDecl6808_bits[]	= { ANTLR_UINT64_LIT(0xA8A0A02040041210), ANTLR_UINT64_LIT(0x000000000008001C) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_function_in_classDecl6808( FOLLOW_function_in_classDecl6808_bits, 2 );

static	ANTLR_BITWORD FOLLOW_OVERRIDE_in_classDecl6834_bits[]	= { ANTLR_UINT64_LIT(0x88A0002040041200), ANTLR_UINT64_LIT(0x0000000000000018) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_OVERRIDE_in_classDecl6834( FOLLOW_OVERRIDE_in_classDecl6834_bits, 2 );

static	ANTLR_BITWORD FOLLOW_function_in_classDecl6838_bits[]	= { ANTLR_UINT64_LIT(0xA8A0A02040041210), ANTLR_UINT64_LIT(0x000000000008001C) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_function_in_classDecl6838( FOLLOW_function_in_classDecl6838_bits, 2 );

static	ANTLR_BITWORD FOLLOW_SYNCHRONIZED_in_classDecl6864_bits[]	= { ANTLR_UINT64_LIT(0x0000200000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SYNCHRONIZED_in_classDecl6864( FOLLOW_SYNCHRONIZED_in_classDecl6864_bits, 1 );

static	ANTLR_BITWORD FOLLOW_OVERRIDE_in_classDecl6866_bits[]	= { ANTLR_UINT64_LIT(0x88A0002040041200), ANTLR_UINT64_LIT(0x0000000000000018) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_OVERRIDE_in_classDecl6866( FOLLOW_OVERRIDE_in_classDecl6866_bits, 2 );

static	ANTLR_BITWORD FOLLOW_function_in_classDecl6870_bits[]	= { ANTLR_UINT64_LIT(0xA8A0A02040041210), ANTLR_UINT64_LIT(0x000000000008001C) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_function_in_classDecl6870( FOLLOW_function_in_classDecl6870_bits, 2 );

static	ANTLR_BITWORD FOLLOW_ACTION_in_classDecl6896_bits[]	= { ANTLR_UINT64_LIT(0x0000200000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_ACTION_in_classDecl6896( FOLLOW_ACTION_in_classDecl6896_bits, 1 );

static	ANTLR_BITWORD FOLLOW_OVERRIDE_in_classDecl6898_bits[]	= { ANTLR_UINT64_LIT(0x88A0002040041200), ANTLR_UINT64_LIT(0x0000000000000018) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_OVERRIDE_in_classDecl6898( FOLLOW_OVERRIDE_in_classDecl6898_bits, 2 );

static	ANTLR_BITWORD FOLLOW_function_in_classDecl6902_bits[]	= { ANTLR_UINT64_LIT(0xA8A0A02040041210), ANTLR_UINT64_LIT(0x000000000008001C) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_function_in_classDecl6902( FOLLOW_function_in_classDecl6902_bits, 2 );

static	ANTLR_BITWORD FOLLOW_RBRACE_in_classDecl6938_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACE_in_classDecl6938( FOLLOW_RBRACE_in_classDecl6938_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RESOURCE_in_topLevelRes6966_bits[]	= { ANTLR_UINT64_LIT(0x0000008000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RESOURCE_in_topLevelRes6966( FOLLOW_RESOURCE_in_topLevelRes6966_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACKET_in_topLevelRes6970_bits[]	= { ANTLR_UINT64_LIT(0x0400000000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_topLevelRes6970( FOLLOW_LBRACKET_in_topLevelRes6970_bits, 1 );

static	ANTLR_BITWORD FOLLOW_STRING_in_topLevelRes6974_bits[]	= { ANTLR_UINT64_LIT(0x0001000000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_STRING_in_topLevelRes6974( FOLLOW_STRING_in_topLevelRes6974_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACKET_in_topLevelRes6978_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_topLevelRes6978( FOLLOW_RBRACKET_in_topLevelRes6978_bits, 1 );

static	ANTLR_BITWORD FOLLOW_INCLUDE_in_inc7007_bits[]	= { ANTLR_UINT64_LIT(0x0400000000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_INCLUDE_in_inc7007( FOLLOW_INCLUDE_in_inc7007_bits, 1 );

static	ANTLR_BITWORD FOLLOW_STRING_in_inc7009_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_STRING_in_inc7009( FOLLOW_STRING_in_inc7009_bits, 1 );

static	ANTLR_BITWORD FOLLOW_inc_in_program7038_bits[]	= { ANTLR_UINT64_LIT(0x98A2002840043222), ANTLR_UINT64_LIT(0x0000000000000018) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_inc_in_program7038( FOLLOW_inc_in_program7038_bits, 2 );

static	ANTLR_BITWORD FOLLOW_function_in_program7077_bits[]	= { ANTLR_UINT64_LIT(0x98A2002040043222), ANTLR_UINT64_LIT(0x0000000000000018) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_function_in_program7077( FOLLOW_function_in_program7077_bits, 2 );

static	ANTLR_BITWORD FOLLOW_structDecl_in_program7099_bits[]	= { ANTLR_UINT64_LIT(0x98A2002040043222), ANTLR_UINT64_LIT(0x0000000000000018) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_structDecl_in_program7099( FOLLOW_structDecl_in_program7099_bits, 2 );

static	ANTLR_BITWORD FOLLOW_classDecl_in_program7119_bits[]	= { ANTLR_UINT64_LIT(0x98A2002040043222), ANTLR_UINT64_LIT(0x0000000000000018) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_classDecl_in_program7119( FOLLOW_classDecl_in_program7119_bits, 2 );

static	ANTLR_BITWORD FOLLOW_topLevelRes_in_program7140_bits[]	= { ANTLR_UINT64_LIT(0x98A2002040043222), ANTLR_UINT64_LIT(0x0000000000000018) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_topLevelRes_in_program7140( FOLLOW_topLevelRes_in_program7140_bits, 2 );









scripting::type*
WNScriptASTParser::objectType()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::type* node;


    ImplTraits::CommonTokenType const* TYPE1 = NULL;






        node = nullptr;



    {
        {
            TYPE1 =  this->matchToken(TYPE, &FOLLOW_TYPE_in_objectType1415);
            if  (this->hasException())
            {
                goto ruleobjectTypeEx;
            }


            {
                 node = m_allocator->construct<scripting::type>(m_allocator, (TYPE1->getText()).c_str()); SET_LOCATION(node, TYPE1);
            }


        }

    }
    goto ruleobjectTypeEx;
    ruleobjectTypeEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::type*
WNScriptASTParser::scalarType()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::type* node;


    ImplTraits::CommonTokenType const* VOID_TYPE2 = NULL;
    ImplTraits::CommonTokenType const* INT_TYPE3 = NULL;
    ImplTraits::CommonTokenType const* SIZE_TYPE4 = NULL;
    ImplTraits::CommonTokenType const* FLOAT_TYPE5 = NULL;
    ImplTraits::CommonTokenType const* CHAR_TYPE6 = NULL;
    ImplTraits::CommonTokenType const* BOOL_TYPE7 = NULL;
    ImplTraits::CommonTokenType const* CPTR_TYPE8 = NULL;
    ImplTraits::CommonTokenType const* STRING_TYPE9 = NULL;






        node = nullptr;



    {
        {

            ANTLR_UINT32 alt1;

            alt1=8;

            switch ( this->LA(1) )
            {
            case VOID_TYPE:
            	{
            		alt1=1;
            	}
                break;
            case INT_TYPE:
            	{
            		alt1=2;
            	}
                break;
            case SIZE_TYPE:
            	{
            		alt1=3;
            	}
                break;
            case FLOAT_TYPE:
            	{
            		alt1=4;
            	}
                break;
            case CHAR_TYPE:
            	{
            		alt1=5;
            	}
                break;
            case BOOL_TYPE:
            	{
            		alt1=6;
            	}
                break;
            case CPTR_TYPE:
            	{
            		alt1=7;
            	}
                break;
            case STRING_TYPE:
            	{
            		alt1=8;
            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 1 );
                ex->set_state( 0 );


                goto rulescalarTypeEx;

            }

            switch (alt1)
            {
        	case 1:
        	    {
        	        VOID_TYPE2 =  this->matchToken(VOID_TYPE, &FOLLOW_VOID_TYPE_in_scalarType1447);
        	        if  (this->hasException())
        	        {
        	            goto rulescalarTypeEx;
        	        }


        	        {
        	             node = m_allocator->construct<scripting::type>(m_allocator, scripting::type_classification::void_type); SET_LOCATION(node, VOID_TYPE2);
        	        }


        	    }
        	    break;
        	case 2:
        	    {
        	        INT_TYPE3 =  this->matchToken(INT_TYPE, &FOLLOW_INT_TYPE_in_scalarType1459);
        	        if  (this->hasException())
        	        {
        	            goto rulescalarTypeEx;
        	        }


        	        {
        	             node = m_allocator->construct<scripting::type>(m_allocator, scripting::type_classification::int_type); SET_LOCATION(node, INT_TYPE3);
        	        }


        	    }
        	    break;
        	case 3:
        	    {
        	        SIZE_TYPE4 =  this->matchToken(SIZE_TYPE, &FOLLOW_SIZE_TYPE_in_scalarType1471);
        	        if  (this->hasException())
        	        {
        	            goto rulescalarTypeEx;
        	        }


        	        {
        	             node = m_allocator->construct<scripting::type>(m_allocator, scripting::type_classification::size_type); SET_LOCATION(node, SIZE_TYPE4);
        	        }


        	    }
        	    break;
        	case 4:
        	    {
        	        FLOAT_TYPE5 =  this->matchToken(FLOAT_TYPE, &FOLLOW_FLOAT_TYPE_in_scalarType1483);
        	        if  (this->hasException())
        	        {
        	            goto rulescalarTypeEx;
        	        }


        	        {
        	             node = m_allocator->construct<scripting::type>(m_allocator, scripting::type_classification::float_type); SET_LOCATION(node, FLOAT_TYPE5);
        	        }


        	    }
        	    break;
        	case 5:
        	    {
        	        CHAR_TYPE6 =  this->matchToken(CHAR_TYPE, &FOLLOW_CHAR_TYPE_in_scalarType1495);
        	        if  (this->hasException())
        	        {
        	            goto rulescalarTypeEx;
        	        }


        	        {
        	             node = m_allocator->construct<scripting::type>(m_allocator, scripting::type_classification::char_type); SET_LOCATION(node, CHAR_TYPE6);
        	        }


        	    }
        	    break;
        	case 6:
        	    {
        	        BOOL_TYPE7 =  this->matchToken(BOOL_TYPE, &FOLLOW_BOOL_TYPE_in_scalarType1507);
        	        if  (this->hasException())
        	        {
        	            goto rulescalarTypeEx;
        	        }


        	        {
        	             node = m_allocator->construct<scripting::type>(m_allocator, scripting::type_classification::bool_type); SET_LOCATION(node, BOOL_TYPE7);
        	        }


        	    }
        	    break;
        	case 7:
        	    {
        	        CPTR_TYPE8 =  this->matchToken(CPTR_TYPE, &FOLLOW_CPTR_TYPE_in_scalarType1519);
        	        if  (this->hasException())
        	        {
        	            goto rulescalarTypeEx;
        	        }


        	        {
        	             node = m_allocator->construct<scripting::type>(m_allocator, scripting::type_classification::void_ptr_type); SET_LOCATION(node, CPTR_TYPE8);
        	        }


        	    }
        	    break;
        	case 8:
        	    {
        	        STRING_TYPE9 =  this->matchToken(STRING_TYPE, &FOLLOW_STRING_TYPE_in_scalarType1531);
        	        if  (this->hasException())
        	        {
        	            goto rulescalarTypeEx;
        	        }


        	        {
        	             node = m_allocator->construct<scripting::type>(m_allocator, scripting::type_classification::string_type); SET_LOCATION(node, STRING_TYPE9);
        	        }


        	    }
        	    break;

            }
        }
    }
    goto rulescalarTypeEx;
    rulescalarTypeEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::type*
WNScriptASTParser::arrayType()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::type* node;


    ImplTraits::CommonTokenType const* LSQBRACKET11 = NULL;
    ImplTraits::CommonTokenType const* RSQBRACKET13 = NULL;
    ImplTraits::CommonTokenType const* DLSQBRACKET14 = NULL;
    ImplTraits::CommonTokenType const* DRSQBRACKET15 = NULL;
    scripting::type* a;
    scripting::type* b;
    scripting::type* scalarType10;
    scripting::constant_expression* constant12;





        node = nullptr;
        scripting::reference_type rt = scripting::reference_type::raw;



    {
        {
            {
                int alt2=3;
                switch ( this->LA(1) )
                {
                case BOOL_TYPE:
                case CHAR_TYPE:
                case CPTR_TYPE:
                case FLOAT_TYPE:
                case INT_TYPE:
                case SIZE_TYPE:
                case STRING_TYPE:
                case VOID_TYPE:
                	{
                		alt2=1;
                	}
                    break;
                case TYPE:
                	{
                		alt2=2;
                	}
                    break;
                case SHARED_REF:
                	{
                		alt2=3;
                	}
                    break;

                default:
                    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 2 );
                    ex->set_state( 0 );


                    goto rulearrayTypeEx;

                }

                switch (alt2)
                {
            	case 1:
            	    {
            	        this->followPush(FOLLOW_scalarType_in_arrayType1568);
            	        scalarType10=scalarType();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulearrayTypeEx;
            	        }


            	        {
            	             node = scalarType10
            	            ; SET_LOCATION_FROM_NODE(node, scalarType10
            	            );
            	        }


            	    }
            	    break;
            	case 2:
            	    {
            	        this->followPush(FOLLOW_objectType_in_arrayType1584);
            	        a=objectType();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulearrayTypeEx;
            	        }


            	        {
            	             node = a
            	            ; SET_LOCATION_FROM_NODE(node, a
            	            );
            	                        rt = scripting::reference_type::raw;
            	        }


            	    }
            	    break;
            	case 3:
            	    {
            	         this->matchToken(SHARED_REF, &FOLLOW_SHARED_REF_in_arrayType1598);
            	        if  (this->hasException())
            	        {
            	            goto rulearrayTypeEx;
            	        }


            	        this->followPush(FOLLOW_objectType_in_arrayType1602);
            	        b=objectType();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulearrayTypeEx;
            	        }


            	        {
            	             node = b
            	            ; SET_LOCATION_FROM_NODE(node, b
            	            );
            	                        rt = scripting::reference_type::shared;
            	        }


            	    }
            	    break;

                }
            }

            {
                int alt4=2;
                switch ( this->LA(1) )
                {
                case LSQBRACKET:
                	{
                		alt4=1;
                	}
                    break;
                case DLSQBRACKET:
                	{
                		alt4=2;
                	}
                    break;

                default:
                    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 4 );
                    ex->set_state( 0 );


                    goto rulearrayTypeEx;

                }

                switch (alt4)
                {
            	case 1:
            	    {
            	        {
            	            {
            	                LSQBRACKET11 =  this->matchToken(LSQBRACKET, &FOLLOW_LSQBRACKET_in_arrayType1636);
            	                if  (this->hasException())
            	                {
            	                    goto rulearrayTypeEx;
            	                }


            	                {
            	                     node->set_reference_type(rt); node = m_allocator->construct<scripting::array_type>(m_allocator, node); SET_LOCATION(node, LSQBRACKET11);
            	                }


            	            }


            	            {
            	                int alt3=2;
            	                switch ( this->LA(1) )
            	                {
            	                    case BOOL:
            	                    case BOOL_TYPE:
            	                    case CHAR:
            	                    case CHAR_TYPE:
            	                    case CPTR_TYPE:
            	                    case FLOAT:
            	                    case FLOAT_TYPE:
            	                    case INT:
            	                    case INT_TYPE:
            	                    case NULLTOK:
            	                    case SIZE:
            	                    case SIZE_TYPE:
            	                    case STRING:
            	                    case STRING_TYPE:
            	                    case THIS_TOK:
            	                    case VOID_TYPE:
            	                    	{
            	                    		alt3=1;
            	                    	}
            	                        break;
            	                }

            	                switch (alt3)
            	                {
            	            	case 1:
            	            	    {
            	            	        this->followPush(FOLLOW_constant_in_arrayType1655);
            	            	        constant12=constant();

            	            	        this->followPop();
            	            	        if  (this->hasException())
            	            	        {
            	            	            goto rulearrayTypeEx;
            	            	        }


            	            	        {
            	            	             scripting::cast_to<scripting::array_type>(node)->set_constant(constant12
            	            	            );
            	            	        }


            	            	    }
            	            	    break;

            	                }
            	            }

            	            {
            	                RSQBRACKET13 =  this->matchToken(RSQBRACKET, &FOLLOW_RSQBRACKET_in_arrayType1677);
            	                if  (this->hasException())
            	                {
            	                    goto rulearrayTypeEx;
            	                }


            	                {
            	                     SET_END_LOCATION(node, RSQBRACKET13);
            	                }


            	            }


            	        }


            	    }
            	    break;
            	case 2:
            	    {
            	        {
            	            DLSQBRACKET14 =  this->matchToken(DLSQBRACKET, &FOLLOW_DLSQBRACKET_in_arrayType1706);
            	            if  (this->hasException())
            	            {
            	                goto rulearrayTypeEx;
            	            }


            	            DRSQBRACKET15 =  this->matchToken(DRSQBRACKET, &FOLLOW_DRSQBRACKET_in_arrayType1708);
            	            if  (this->hasException())
            	            {
            	                goto rulearrayTypeEx;
            	            }


            	            {
            	                 node->set_reference_type(rt); node = m_allocator->construct<scripting::runtime_array_type>(m_allocator, node); SET_LOCATION(node, DLSQBRACKET14); SET_END_LOCATION(node, DRSQBRACKET15);
            	            }


            	        }


            	    }
            	    break;

                }
            }

        }

    }
    goto rulearrayTypeEx;
    rulearrayTypeEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::type*
WNScriptASTParser::sliceType()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::type* node;


    ImplTraits::CommonTokenType const* b = NULL;
    ImplTraits::CommonTokenType const* c = NULL;
    ImplTraits::CommonTokenType const* d = NULL;
    ImplTraits::CommonTokenType const* INT16 = NULL;
    scripting::type* a;





        node = nullptr;



    {
        {
            {
                this->followPush(FOLLOW_scalarType_in_sliceType1758);
                a=scalarType();

                this->followPop();
                if  (this->hasException())
                {
                    goto rulesliceTypeEx;
                }


                {

                                node = a
                    ; SET_LOCATION_FROM_NODE(node, a
                    );
                                node = m_allocator->construct<scripting::slice_type>(m_allocator, node);
                                SET_LOCATION_FROM_NODE(node, a
                    );

                }


                {
                    int alt5=2;
                    switch ( this->LA(1) )
                    {
                    case SLICETOK:
                    	{
                    		alt5=1;
                    	}
                        break;
                    case SSOR:
                    	{
                    		alt5=2;
                    	}
                        break;

                    default:
                        ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                        ex->set_decisionNum( 5 );
                        ex->set_state( 0 );


                        goto rulesliceTypeEx;

                    }

                    switch (alt5)
                    {
                	case 1:
                	    {
                	        {
                	            b =  this->matchToken(SLICETOK, &FOLLOW_SLICETOK_in_sliceType1774);
                	            if  (this->hasException())
                	            {
                	                goto rulesliceTypeEx;
                	            }


                	            INT16 =  this->matchToken(INT, &FOLLOW_INT_in_sliceType1776);
                	            if  (this->hasException())
                	            {
                	                goto rulesliceTypeEx;
                	            }


                	            c =  this->matchToken(SLICETOK, &FOLLOW_SLICETOK_in_sliceType1780);
                	            if  (this->hasException())
                	            {
                	                goto rulesliceTypeEx;
                	            }


                	            {

                	                            scripting::cast_to<scripting::slice_type>(node)->set_dimensions((INT16->getText()).c_str());
                	                            SET_END_LOCATION(node, c);

                	            }


                	        }


                	    }
                	    break;
                	case 2:
                	    {
                	        {
                	            d =  this->matchToken(SSOR, &FOLLOW_SSOR_in_sliceType1799);
                	            if  (this->hasException())
                	            {
                	                goto rulesliceTypeEx;
                	            }


                	            {

                	                            SET_END_LOCATION(node, d);

                	            }


                	        }


                	    }
                	    break;

                    }
                }

            }


        }

    }
    goto rulesliceTypeEx;
    rulesliceTypeEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::type*
WNScriptASTParser::compoundType()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::type* node;


    scripting::type* objectType17;





        node = nullptr;



    {
        {
            this->followPush(FOLLOW_objectType_in_compoundType1834);
            objectType17=objectType();

            this->followPop();
            if  (this->hasException())
            {
                goto rulecompoundTypeEx;
            }


            {
                 node = objectType17
                ;
            }


        }

    }
    goto rulecompoundTypeEx;
    rulecompoundTypeEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::type*
WNScriptASTParser::nonArrayType()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::type* node;


    scripting::type* scalarType18;
    scripting::type* objectType19;





      node = nullptr;



    {
        {

            ANTLR_UINT32 alt6;

            alt6=2;

            switch ( this->LA(1) )
            {
            case BOOL_TYPE:
            case CHAR_TYPE:
            case CPTR_TYPE:
            case FLOAT_TYPE:
            case INT_TYPE:
            case SIZE_TYPE:
            case STRING_TYPE:
            case VOID_TYPE:
            	{
            		alt6=1;
            	}
                break;
            case TYPE:
            	{
            		alt6=2;
            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 6 );
                ex->set_state( 0 );


                goto rulenonArrayTypeEx;

            }

            switch (alt6)
            {
        	case 1:
        	    {
        	        this->followPush(FOLLOW_scalarType_in_nonArrayType1861);
        	        scalarType18=scalarType();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulenonArrayTypeEx;
        	        }


        	        {
        	             node = scalarType18
        	            ;
        	        }


        	    }
        	    break;
        	case 2:
        	    {
        	        this->followPush(FOLLOW_objectType_in_nonArrayType1871);
        	        objectType19=objectType();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulenonArrayTypeEx;
        	        }


        	        {
        	             node = objectType19
        	            ;
        	        }


        	    }
        	    break;

            }
        }
    }
    goto rulenonArrayTypeEx;
    rulenonArrayTypeEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::type*
WNScriptASTParser::type()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::type* node;


    scripting::type* compoundType20;
    scripting::type* arrayType21;
    scripting::type* sliceType22;
    scripting::type* scalarType23;





        node = nullptr;



    {
        {

            ANTLR_UINT32 alt7;

            alt7=4;

            switch ( this->LA(1) )
            {
            case TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case EOF:
            			{
            				alt7=1;
            			}
            		    break;
            		case DLSQBRACKET:
            		case LSQBRACKET:
            			{
            				alt7=2;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 7 );
            		    ex->set_state( 1 );


            		    goto ruletypeEx;

            		}

            	}
                break;
            case VOID_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case DLSQBRACKET:
            		case LSQBRACKET:
            			{
            				alt7=2;
            			}
            		    break;
            		case SLICETOK:
            		case SSOR:
            			{
            				alt7=3;
            			}
            		    break;
            		case EOF:
            			{
            				alt7=4;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 7 );
            		    ex->set_state( 2 );


            		    goto ruletypeEx;

            		}

            	}
                break;
            case INT_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case DLSQBRACKET:
            		case LSQBRACKET:
            			{
            				alt7=2;
            			}
            		    break;
            		case SLICETOK:
            		case SSOR:
            			{
            				alt7=3;
            			}
            		    break;
            		case EOF:
            			{
            				alt7=4;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 7 );
            		    ex->set_state( 3 );


            		    goto ruletypeEx;

            		}

            	}
                break;
            case SIZE_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case DLSQBRACKET:
            		case LSQBRACKET:
            			{
            				alt7=2;
            			}
            		    break;
            		case SLICETOK:
            		case SSOR:
            			{
            				alt7=3;
            			}
            		    break;
            		case EOF:
            			{
            				alt7=4;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 7 );
            		    ex->set_state( 4 );


            		    goto ruletypeEx;

            		}

            	}
                break;
            case FLOAT_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case DLSQBRACKET:
            		case LSQBRACKET:
            			{
            				alt7=2;
            			}
            		    break;
            		case SLICETOK:
            		case SSOR:
            			{
            				alt7=3;
            			}
            		    break;
            		case EOF:
            			{
            				alt7=4;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 7 );
            		    ex->set_state( 5 );


            		    goto ruletypeEx;

            		}

            	}
                break;
            case CHAR_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case DLSQBRACKET:
            		case LSQBRACKET:
            			{
            				alt7=2;
            			}
            		    break;
            		case SLICETOK:
            		case SSOR:
            			{
            				alt7=3;
            			}
            		    break;
            		case EOF:
            			{
            				alt7=4;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 7 );
            		    ex->set_state( 6 );


            		    goto ruletypeEx;

            		}

            	}
                break;
            case BOOL_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case DLSQBRACKET:
            		case LSQBRACKET:
            			{
            				alt7=2;
            			}
            		    break;
            		case SLICETOK:
            		case SSOR:
            			{
            				alt7=3;
            			}
            		    break;
            		case EOF:
            			{
            				alt7=4;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 7 );
            		    ex->set_state( 7 );


            		    goto ruletypeEx;

            		}

            	}
                break;
            case CPTR_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case DLSQBRACKET:
            		case LSQBRACKET:
            			{
            				alt7=2;
            			}
            		    break;
            		case SLICETOK:
            		case SSOR:
            			{
            				alt7=3;
            			}
            		    break;
            		case EOF:
            			{
            				alt7=4;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 7 );
            		    ex->set_state( 8 );


            		    goto ruletypeEx;

            		}

            	}
                break;
            case STRING_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case DLSQBRACKET:
            		case LSQBRACKET:
            			{
            				alt7=2;
            			}
            		    break;
            		case SLICETOK:
            		case SSOR:
            			{
            				alt7=3;
            			}
            		    break;
            		case EOF:
            			{
            				alt7=4;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 7 );
            		    ex->set_state( 9 );


            		    goto ruletypeEx;

            		}

            	}
                break;
            case SHARED_REF:
            	{
            		alt7=2;
            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 7 );
                ex->set_state( 0 );


                goto ruletypeEx;

            }

            switch (alt7)
            {
        	case 1:
        	    {
        	        this->followPush(FOLLOW_compoundType_in_type1901);
        	        compoundType20=compoundType();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruletypeEx;
        	        }


        	        {
        	             node = compoundType20
        	            ;
        	        }


        	    }
        	    break;
        	case 2:
        	    {
        	        this->followPush(FOLLOW_arrayType_in_type1911);
        	        arrayType21=arrayType();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruletypeEx;
        	        }


        	        {
        	             node = arrayType21
        	            ;
        	        }


        	    }
        	    break;
        	case 3:
        	    {
        	        this->followPush(FOLLOW_sliceType_in_type1921);
        	        sliceType22=sliceType();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruletypeEx;
        	        }


        	        {
        	             node = sliceType22
        	            ;
        	        }


        	    }
        	    break;
        	case 4:
        	    {
        	        this->followPush(FOLLOW_scalarType_in_type1931);
        	        scalarType23=scalarType();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruletypeEx;
        	        }


        	        {
        	             node = scalarType23
        	            ;
        	        }


        	    }
        	    break;

            }
        }
    }
    goto ruletypeEx;
    ruletypeEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::parameter*
WNScriptASTParser::param()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::parameter* node;


    ImplTraits::CommonTokenType const* a = NULL;
    ImplTraits::CommonTokenType const* aa = NULL;
    ImplTraits::CommonTokenType const* dd = NULL;
    ImplTraits::CommonTokenType const* ff = NULL;
    ImplTraits::CommonTokenType const* c = NULL;
    ImplTraits::CommonTokenType const* e = NULL;
    ImplTraits::CommonTokenType const* g = NULL;
    ImplTraits::CommonTokenType const* SHARED_REF25 = NULL;
    ImplTraits::CommonTokenType const* WEAK_REF26 = NULL;
    scripting::type* bb;
    scripting::type* cc;
    scripting::type* ee;
    scripting::type* b;
    scripting::type* d;
    scripting::type* f;
    scripting::type* scalarType24;





        node = nullptr;



    {
        {

            ANTLR_UINT32 alt8;

            alt8=7;

            switch ( this->LA(1) )
            {
            case VOID_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case ID:
            			{
            				alt8=1;
            			}
            		    break;
            		case DLSQBRACKET:
            		case LSQBRACKET:
            			{
            				alt8=3;
            			}
            		    break;
            		case SLICETOK:
            		case SSOR:
            			{
            				alt8=4;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 8 );
            		    ex->set_state( 1 );


            		    goto ruleparamEx;

            		}

            	}
                break;
            case INT_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case ID:
            			{
            				alt8=1;
            			}
            		    break;
            		case DLSQBRACKET:
            		case LSQBRACKET:
            			{
            				alt8=3;
            			}
            		    break;
            		case SLICETOK:
            		case SSOR:
            			{
            				alt8=4;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 8 );
            		    ex->set_state( 2 );


            		    goto ruleparamEx;

            		}

            	}
                break;
            case SIZE_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case ID:
            			{
            				alt8=1;
            			}
            		    break;
            		case DLSQBRACKET:
            		case LSQBRACKET:
            			{
            				alt8=3;
            			}
            		    break;
            		case SLICETOK:
            		case SSOR:
            			{
            				alt8=4;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 8 );
            		    ex->set_state( 3 );


            		    goto ruleparamEx;

            		}

            	}
                break;
            case FLOAT_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case ID:
            			{
            				alt8=1;
            			}
            		    break;
            		case DLSQBRACKET:
            		case LSQBRACKET:
            			{
            				alt8=3;
            			}
            		    break;
            		case SLICETOK:
            		case SSOR:
            			{
            				alt8=4;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 8 );
            		    ex->set_state( 4 );


            		    goto ruleparamEx;

            		}

            	}
                break;
            case CHAR_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case ID:
            			{
            				alt8=1;
            			}
            		    break;
            		case DLSQBRACKET:
            		case LSQBRACKET:
            			{
            				alt8=3;
            			}
            		    break;
            		case SLICETOK:
            		case SSOR:
            			{
            				alt8=4;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 8 );
            		    ex->set_state( 5 );


            		    goto ruleparamEx;

            		}

            	}
                break;
            case BOOL_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case ID:
            			{
            				alt8=1;
            			}
            		    break;
            		case DLSQBRACKET:
            		case LSQBRACKET:
            			{
            				alt8=3;
            			}
            		    break;
            		case SLICETOK:
            		case SSOR:
            			{
            				alt8=4;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 8 );
            		    ex->set_state( 6 );


            		    goto ruleparamEx;

            		}

            	}
                break;
            case CPTR_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case ID:
            			{
            				alt8=1;
            			}
            		    break;
            		case DLSQBRACKET:
            		case LSQBRACKET:
            			{
            				alt8=3;
            			}
            		    break;
            		case SLICETOK:
            		case SSOR:
            			{
            				alt8=4;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 8 );
            		    ex->set_state( 7 );


            		    goto ruleparamEx;

            		}

            	}
                break;
            case STRING_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case ID:
            			{
            				alt8=1;
            			}
            		    break;
            		case DLSQBRACKET:
            		case LSQBRACKET:
            			{
            				alt8=3;
            			}
            		    break;
            		case SLICETOK:
            		case SSOR:
            			{
            				alt8=4;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 8 );
            		    ex->set_state( 8 );


            		    goto ruleparamEx;

            		}

            	}
                break;
            case TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case ID:
            			{
            				alt8=2;
            			}
            		    break;
            		case DLSQBRACKET:
            		case LSQBRACKET:
            			{
            				alt8=3;
            			}
            		    break;
            		case QUESTION:
            			{
            				alt8=7;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 8 );
            		    ex->set_state( 9 );


            		    goto ruleparamEx;

            		}

            	}
                break;
            case SHARED_REF:
            	{
            		switch ( this->LA(2) )
            		{
            		case TYPE:
            			{
            				switch ( this->LA(3) )
            				{
            				case DLSQBRACKET:
            				case LSQBRACKET:
            					{
            						alt8=3;
            					}
            				    break;
            				case ID:
            					{
            						alt8=5;
            					}
            				    break;

            				default:
            				    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 8 );
            				    ex->set_state( 17 );


            				    goto ruleparamEx;

            				}

            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 8 );
            		    ex->set_state( 10 );


            		    goto ruleparamEx;

            		}

            	}
                break;
            case WEAK_REF:
            	{
            		alt8=6;
            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 8 );
                ex->set_state( 0 );


                goto ruleparamEx;

            }

            switch (alt8)
            {
        	case 1:
        	    {
        	        this->followPush(FOLLOW_scalarType_in_param1963);
        	        scalarType24=scalarType();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleparamEx;
        	        }


        	        a =  this->matchToken(ID, &FOLLOW_ID_in_param1967);
        	        if  (this->hasException())
        	        {
        	            goto ruleparamEx;
        	        }


        	        {

        	                        node = m_allocator->construct<scripting::parameter>(m_allocator, scalarType24
        	            , (a->getText()).c_str()); SET_LOCATION_FROM_NODE(node,
        	            scalarType24
        	            ); SET_END_LOCATION(node, a);
        	        }


        	    }
        	    break;
        	case 2:
        	    {
        	        this->followPush(FOLLOW_compoundType_in_param1982);
        	        bb=compoundType();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleparamEx;
        	        }


        	        aa =  this->matchToken(ID, &FOLLOW_ID_in_param1986);
        	        if  (this->hasException())
        	        {
        	            goto ruleparamEx;
        	        }


        	        {

        	                        bb
        	            ->set_reference_type(scripting::reference_type::unique);
        	                        node = m_allocator->construct<scripting::parameter>(m_allocator, bb
        	            , (aa->getText()).c_str()); SET_LOCATION_FROM_NODE(node,
        	            bb
        	            ); SET_END_LOCATION(node, aa);
        	        }


        	    }
        	    break;
        	case 3:
        	    {
        	        this->followPush(FOLLOW_arrayType_in_param2001);
        	        cc=arrayType();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleparamEx;
        	        }


        	        dd =  this->matchToken(ID, &FOLLOW_ID_in_param2005);
        	        if  (this->hasException())
        	        {
        	            goto ruleparamEx;
        	        }


        	        {

        	                        cc
        	            ->set_reference_type(scripting::reference_type::unique);
        	                        node = m_allocator->construct<scripting::parameter>(m_allocator, cc
        	            , (dd->getText()).c_str()); SET_LOCATION_FROM_NODE(node,
        	            cc
        	            ); SET_END_LOCATION(node, dd);
        	        }


        	    }
        	    break;
        	case 4:
        	    {
        	        this->followPush(FOLLOW_sliceType_in_param2020);
        	        ee=sliceType();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleparamEx;
        	        }


        	        ff =  this->matchToken(ID, &FOLLOW_ID_in_param2024);
        	        if  (this->hasException())
        	        {
        	            goto ruleparamEx;
        	        }


        	        {

        	                        ee
        	            ->set_reference_type(scripting::reference_type::raw);
        	                        node = m_allocator->construct<scripting::parameter>(m_allocator, ee
        	            , (ff->getText()).c_str()); SET_LOCATION_FROM_NODE(node,
        	            ee
        	            ); SET_END_LOCATION(node, ff);
        	        }


        	    }
        	    break;
        	case 5:
        	    {
        	        SHARED_REF25 =  this->matchToken(SHARED_REF, &FOLLOW_SHARED_REF_in_param2037);
        	        if  (this->hasException())
        	        {
        	            goto ruleparamEx;
        	        }


        	        this->followPush(FOLLOW_compoundType_in_param2041);
        	        b=compoundType();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleparamEx;
        	        }


        	        c =  this->matchToken(ID, &FOLLOW_ID_in_param2045);
        	        if  (this->hasException())
        	        {
        	            goto ruleparamEx;
        	        }


        	        {

        	                       b
        	            ->set_reference_type(scripting::reference_type::shared);
        	                       node = m_allocator->construct<scripting::parameter>(m_allocator, b
        	            , (c->getText()).c_str()); SET_LOCATION(node, SHARED_REF25); SET_END_LOCATION(node, c);

        	        }


        	    }
        	    break;
        	case 6:
        	    {
        	        WEAK_REF26 =  this->matchToken(WEAK_REF, &FOLLOW_WEAK_REF_in_param2058);
        	        if  (this->hasException())
        	        {
        	            goto ruleparamEx;
        	        }


        	        this->followPush(FOLLOW_compoundType_in_param2062);
        	        d=compoundType();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleparamEx;
        	        }


        	        e =  this->matchToken(ID, &FOLLOW_ID_in_param2067);
        	        if  (this->hasException())
        	        {
        	            goto ruleparamEx;
        	        }


        	        {

        	                       d
        	            ->set_reference_type(scripting::reference_type::weak);
        	                       node = m_allocator->construct<scripting::parameter>(m_allocator, d
        	            , (e->getText()).c_str()); SET_LOCATION(node, WEAK_REF26); SET_END_LOCATION(node, e);

        	        }


        	    }
        	    break;
        	case 7:
        	    {
        	        this->followPush(FOLLOW_compoundType_in_param2082);
        	        f=compoundType();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleparamEx;
        	        }


        	         this->matchToken(QUESTION, &FOLLOW_QUESTION_in_param2084);
        	        if  (this->hasException())
        	        {
        	            goto ruleparamEx;
        	        }


        	        g =  this->matchToken(ID, &FOLLOW_ID_in_param2089);
        	        if  (this->hasException())
        	        {
        	            goto ruleparamEx;
        	        }


        	        {

        	                       f
        	            ->set_reference_type(scripting::reference_type::nullable);
        	                       node = m_allocator->construct<scripting::parameter>(m_allocator, f
        	            , (g->getText()).c_str()); SET_LOCATION_FROM_NODE(node,
        	            f
        	            ); SET_END_LOCATION(node, g);

        	        }


        	    }
        	    break;

            }
        }
    }
    goto ruleparamEx;
    ruleparamEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::parameter_list*
WNScriptASTParser::paramList()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::parameter_list* node;


    scripting::parameter* a;
    scripting::parameter* b;





        node = nullptr;



    {
        {
            this->followPush(FOLLOW_param_in_paramList2121);
            a=param();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleparamListEx;
            }


            {
                 node = m_allocator->construct<scripting::parameter_list>(m_allocator, a
                ); SET_LOCATION_FROM_NODE(node, a
                );
            }



            for (;;)
            {
                int alt9=2;
                switch ( this->LA(1) )
                {
                case COMMA:
                	{
                		alt9=1;
                	}
                    break;

                }

                switch (alt9)
                {
            	case 1:
            	    {
            	         this->matchToken(COMMA, &FOLLOW_COMMA_in_paramList2134);
            	        if  (this->hasException())
            	        {
            	            goto ruleparamListEx;
            	        }


            	        this->followPush(FOLLOW_param_in_paramList2138);
            	        b=param();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleparamListEx;
            	        }


            	        {
            	             node
            	            ->add_parameter(b
            	            ); SET_END_LOCATION_FROM_NODE(node, b
            	            );
            	        }


            	    }
            	    break;

            	default:
            	    goto loop9;
            	    break;
                }
            }
            loop9: ;


        }

    }
    goto ruleparamListEx;
    ruleparamListEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::parameter_list*
WNScriptASTParser::parameterList()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::parameter_list* node;


    ImplTraits::CommonTokenType const* LBRACKET28 = NULL;
    ImplTraits::CommonTokenType const* RBRACKET29 = NULL;
    scripting::parameter_list* paramList27;





        node = nullptr;



    {
        {

            ANTLR_UINT32 alt10;

            alt10=2;

            switch ( this->LA(1) )
            {
            case LBRACKET:
            	{
            		switch ( this->LA(2) )
            		{
            		case RBRACKET:
            			{
            				alt10=2;
            			}
            		    break;
            		case BOOL_TYPE:
            		case CHAR_TYPE:
            		case CPTR_TYPE:
            		case FLOAT_TYPE:
            		case INT_TYPE:
            		case SHARED_REF:
            		case SIZE_TYPE:
            		case STRING_TYPE:
            		case TYPE:
            		case VOID_TYPE:
            		case WEAK_REF:
            			{
            				alt10=1;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 10 );
            		    ex->set_state( 1 );


            		    goto ruleparameterListEx;

            		}

            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 10 );
                ex->set_state( 0 );


                goto ruleparameterListEx;

            }

            switch (alt10)
            {
        	case 1:
        	    {
        	        LBRACKET28 =  this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_parameterList2170);
        	        if  (this->hasException())
        	        {
        	            goto ruleparameterListEx;
        	        }


        	        this->followPush(FOLLOW_paramList_in_parameterList2172);
        	        paramList27=paramList();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleparameterListEx;
        	        }


        	        RBRACKET29 =  this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_parameterList2174);
        	        if  (this->hasException())
        	        {
        	            goto ruleparameterListEx;
        	        }


        	        {
        	             node = paramList27
        	            ; SET_LOCATION(node, LBRACKET28); SET_END_LOCATION(node, RBRACKET29);
        	        }


        	    }
        	    break;
        	case 2:
        	    {
        	         this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_parameterList2191);
        	        if  (this->hasException())
        	        {
        	            goto ruleparameterListEx;
        	        }


        	         this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_parameterList2193);
        	        if  (this->hasException())
        	        {
        	            goto ruleparameterListEx;
        	        }


        	        {
        	             node = nullptr;
        	        }


        	    }
        	    break;

            }
        }
    }
    goto ruleparameterListEx;
    ruleparameterListEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::assign_type
WNScriptASTParser::assign_type()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::assign_type node;







        node = scripting::assign_type::equal;



    {
        {

            ANTLR_UINT32 alt11;

            alt11=6;

            switch ( this->LA(1) )
            {
            case 88:
            	{
            		alt11=1;
            	}
                break;
            case 80:
            	{
            		alt11=2;
            	}
                break;
            case 82:
            	{
            		alt11=3;
            	}
                break;
            case 78:
            	{
            		alt11=4;
            	}
                break;
            case 85:
            	{
            		alt11=5;
            	}
                break;
            case 74:
            	{
            		alt11=6;
            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 11 );
                ex->set_state( 0 );


                goto ruleassign_typeEx;

            }

            switch (alt11)
            {
        	case 1:
        	    {
        	         this->matchToken(88, &FOLLOW_88_in_assign_type2229);
        	        if  (this->hasException())
        	        {
        	            goto ruleassign_typeEx;
        	        }


        	        {
        	             node = scripting::assign_type::equal;
        	        }


        	    }
        	    break;
        	case 2:
        	    {
        	         this->matchToken(80, &FOLLOW_80_in_assign_type2243);
        	        if  (this->hasException())
        	        {
        	            goto ruleassign_typeEx;
        	        }


        	        {
        	             node = scripting::assign_type::add_equal;
        	        }


        	    }
        	    break;
        	case 3:
        	    {
        	         this->matchToken(82, &FOLLOW_82_in_assign_type2256);
        	        if  (this->hasException())
        	        {
        	            goto ruleassign_typeEx;
        	        }


        	        {
        	             node = scripting::assign_type::sub_equal;
        	        }


        	    }
        	    break;
        	case 4:
        	    {
        	         this->matchToken(78, &FOLLOW_78_in_assign_type2269);
        	        if  (this->hasException())
        	        {
        	            goto ruleassign_typeEx;
        	        }


        	        {
        	             node = scripting::assign_type::mult_equal;
        	        }


        	    }
        	    break;
        	case 5:
        	    {
        	         this->matchToken(85, &FOLLOW_85_in_assign_type2282);
        	        if  (this->hasException())
        	        {
        	            goto ruleassign_typeEx;
        	        }


        	        {
        	             node = scripting::assign_type::div_equal;
        	        }


        	    }
        	    break;
        	case 6:
        	    {
        	         this->matchToken(74, &FOLLOW_74_in_assign_type2295);
        	        if  (this->hasException())
        	        {
        	            goto ruleassign_typeEx;
        	        }


        	        {
        	             node = scripting::assign_type::mod_equal;
        	        }


        	    }
        	    break;

            }
        }
    }
    goto ruleassign_typeEx;
    ruleassign_typeEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::arg_list*
WNScriptASTParser::arglist()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::arg_list* node;


    scripting::expression* a;
    scripting::expression* d;





        node = m_allocator->construct<scripting::arg_list>(m_allocator);



    {
        {
            {
                {
                    this->followPush(FOLLOW_expr_in_arglist2353);
                    a=expr();

                    this->followPop();
                    if  (this->hasException())
                    {
                        goto rulearglistEx;
                    }


                    {
                         node->add_expression(a
                        ); SET_LOCATION_FROM_NODE(node, a
                        );
                    }


                }


            }



            for (;;)
            {
                int alt13=2;
                switch ( this->LA(1) )
                {
                case COMMA:
                	{
                		alt13=1;
                	}
                    break;

                }

                switch (alt13)
                {
            	case 1:
            	    {
            	         this->matchToken(COMMA, &FOLLOW_COMMA_in_arglist2386);
            	        if  (this->hasException())
            	        {
            	            goto rulearglistEx;
            	        }


            	        {
            	            int alt12=2;
            	            switch ( this->LA(1) )
            	            {
            	            case BOOL:
            	            case BOOL_TYPE:
            	            case CHAR:
            	            case CHAR_TYPE:
            	            case CPTR_TYPE:
            	            case DOUBDEC:
            	            case DOUBINC:
            	            case FLOAT:
            	            case FLOAT_TYPE:
            	            case ID:
            	            case INT:
            	            case INT_TYPE:
            	            case LBRACKET:
            	            case LENGTH:
            	            case NULLTOK:
            	            case RESOURCE:
            	            case SHARED_REF:
            	            case SIZE:
            	            case SIZE_TYPE:
            	            case STRING:
            	            case STRING_TYPE:
            	            case THIS_TOK:
            	            case TYPE:
            	            case VOID_TYPE:
            	            case 71:
            	            case 81:
            	            	{
            	            		alt12=1;
            	            	}
            	                break;
            	            case COMMA:
            	            case RBRACKET:
            	            	{
            	            		alt12=2;
            	            	}
            	                break;

            	            default:
            	                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            	                ex->set_decisionNum( 12 );
            	                ex->set_state( 0 );


            	                goto rulearglistEx;

            	            }

            	            switch (alt12)
            	            {
            	        	case 1:
            	        	    {
            	        	        {
            	        	            this->followPush(FOLLOW_expr_in_arglist2430);
            	        	            d=expr();

            	        	            this->followPop();
            	        	            if  (this->hasException())
            	        	            {
            	        	                goto rulearglistEx;
            	        	            }


            	        	            {
            	        	                 node->add_expression(d
            	        	                , true); SET_END_LOCATION_FROM_NODE(node, d
            	        	                );
            	        	            }


            	        	        }


            	        	    }
            	        	    break;
            	        	case 2:
            	        	    {
            	        	    }
            	        	    break;

            	            }
            	        }

            	    }
            	    break;

            	default:
            	    goto loop13;
            	    break;
                }
            }
            loop13: ;


        }

    }
    goto rulearglistEx;
    rulearglistEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::expression*
WNScriptASTParser::expr()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::expression* node;


    scripting::expression* cond_ex30;





        node = nullptr;



    {
        {
            this->followPush(FOLLOW_cond_ex_in_expr2505);
            cond_ex30=cond_ex();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleexprEx;
            }


            {
                 node = cond_ex30
                ;
            }


        }

    }
    goto ruleexprEx;
    ruleexprEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::expression*
WNScriptASTParser::cond_ex()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::expression* node;


    scripting::expression* b;
    scripting::expression* c;
    scripting::expression* or_ex31;





        node = nullptr;



    {
        {
            this->followPush(FOLLOW_or_ex_in_cond_ex2543);
            or_ex31=or_ex();

            this->followPop();
            if  (this->hasException())
            {
                goto rulecond_exEx;
            }


            {
                 node = or_ex31
                ;
            }


            {
                int alt14=2;
                switch ( this->LA(1) )
                {
                    case QUESTION:
                    	{
                    		alt14=1;
                    	}
                        break;
                }

                switch (alt14)
                {
            	case 1:
            	    {
            	         this->matchToken(QUESTION, &FOLLOW_QUESTION_in_cond_ex2566);
            	        if  (this->hasException())
            	        {
            	            goto rulecond_exEx;
            	        }


            	        this->followPush(FOLLOW_expr_in_cond_ex2570);
            	        b=expr();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulecond_exEx;
            	        }


            	         this->matchToken(COLON, &FOLLOW_COLON_in_cond_ex2572);
            	        if  (this->hasException())
            	        {
            	            goto rulecond_exEx;
            	        }


            	        this->followPush(FOLLOW_cond_ex_in_cond_ex2576);
            	        c=cond_ex();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulecond_exEx;
            	        }


            	        {
            	             node = m_allocator->construct<scripting::cond_expression>(m_allocator, node, b
            	            , c
            	            );  SET_LOCATION_FROM_NODE(node, or_ex31
            	            ); SET_END_LOCATION_FROM_NODE(node, c
            	            );
            	        }


            	    }
            	    break;

                }
            }

        }

    }
    goto rulecond_exEx;
    rulecond_exEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::expression*
WNScriptASTParser::or_ex()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::expression* node;


    scripting::expression* a;
    scripting::expression* b;





        node = nullptr;



    {
        {
            this->followPush(FOLLOW_and_ex_in_or_ex2623);
            a=and_ex();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleor_exEx;
            }


            {
                 node = a
                ;
            }



            for (;;)
            {
                int alt15=2;
                switch ( this->LA(1) )
                {
                case SSOR:
                	{
                		alt15=1;
                	}
                    break;

                }

                switch (alt15)
                {
            	case 1:
            	    {
            	         this->matchToken(SSOR, &FOLLOW_SSOR_in_or_ex2640);
            	        if  (this->hasException())
            	        {
            	            goto ruleor_exEx;
            	        }


            	        this->followPush(FOLLOW_and_ex_in_or_ex2644);
            	        b=and_ex();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleor_exEx;
            	        }


            	        {
            	             node = m_allocator->construct<scripting::short_circuit_expression>(m_allocator, scripting::short_circuit_type::or_operator, node, b
            	            ); SET_LOCATION_FROM_NODE(node, a
            	            ); SET_END_LOCATION_FROM_NODE(node, b
            	            );
            	        }


            	    }
            	    break;

            	default:
            	    goto loop15;
            	    break;
                }
            }
            loop15: ;


        }

    }
    goto ruleor_exEx;
    ruleor_exEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::expression*
WNScriptASTParser::and_ex()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::expression* node;


    scripting::expression* a;
    scripting::expression* b;





        node = nullptr;



    {
        {
            this->followPush(FOLLOW_bit_or_ex_in_and_ex2687);
            a=bit_or_ex();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleand_exEx;
            }


            {
                 node = a
                ;
            }



            for (;;)
            {
                int alt16=2;
                switch ( this->LA(1) )
                {
                case 75:
                	{
                		alt16=1;
                	}
                    break;

                }

                switch (alt16)
                {
            	case 1:
            	    {
            	         this->matchToken(75, &FOLLOW_75_in_and_ex2704);
            	        if  (this->hasException())
            	        {
            	            goto ruleand_exEx;
            	        }


            	        this->followPush(FOLLOW_bit_or_ex_in_and_ex2708);
            	        b=bit_or_ex();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleand_exEx;
            	        }


            	        {
            	            node = m_allocator->construct<scripting::short_circuit_expression>(m_allocator, scripting::short_circuit_type::and_operator, node, b
            	            ); SET_LOCATION_FROM_NODE(node, a
            	            ); SET_END_LOCATION_FROM_NODE(node, b
            	            );
            	        }


            	    }
            	    break;

            	default:
            	    goto loop16;
            	    break;
                }
            }
            loop16: ;


        }

    }
    goto ruleand_exEx;
    ruleand_exEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::expression*
WNScriptASTParser::bit_or_ex()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::expression* node;


    scripting::expression* a;
    scripting::expression* b;





        node = nullptr;



    {
        {
            this->followPush(FOLLOW_bit_xor_ex_in_bit_or_ex2742);
            a=bit_xor_ex();

            this->followPop();
            if  (this->hasException())
            {
                goto rulebit_or_exEx;
            }


            {
                 node = a
                ;
            }



            for (;;)
            {
                int alt17=2;
                switch ( this->LA(1) )
                {
                case SLICETOK:
                	{
                		alt17=1;
                	}
                    break;

                }

                switch (alt17)
                {
            	case 1:
            	    {
            	         this->matchToken(SLICETOK, &FOLLOW_SLICETOK_in_bit_or_ex2759);
            	        if  (this->hasException())
            	        {
            	            goto rulebit_or_exEx;
            	        }


            	        this->followPush(FOLLOW_bit_xor_ex_in_bit_or_ex2763);
            	        b=bit_xor_ex();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulebit_or_exEx;
            	        }


            	        {
            	            node = m_allocator->construct<scripting::binary_expression>(m_allocator, scripting::arithmetic_type::arithmetic_or, node, b
            	            );  SET_LOCATION_FROM_NODE(node, a
            	            ); SET_END_LOCATION_FROM_NODE(node, b
            	            );
            	        }


            	    }
            	    break;

            	default:
            	    goto loop17;
            	    break;
                }
            }
            loop17: ;


        }

    }
    goto rulebit_or_exEx;
    rulebit_or_exEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::expression*
WNScriptASTParser::bit_xor_ex()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::expression* node;


    scripting::expression* a;
    scripting::expression* b;





        node = nullptr;



    {
        {
            this->followPush(FOLLOW_bit_and_ex_in_bit_xor_ex2798);
            a=bit_and_ex();

            this->followPop();
            if  (this->hasException())
            {
                goto rulebit_xor_exEx;
            }


            {
                 node = a
                ;
            }



            for (;;)
            {
                int alt18=2;
                switch ( this->LA(1) )
                {
                case 92:
                	{
                		alt18=1;
                	}
                    break;

                }

                switch (alt18)
                {
            	case 1:
            	    {
            	         this->matchToken(92, &FOLLOW_92_in_bit_xor_ex2815);
            	        if  (this->hasException())
            	        {
            	            goto rulebit_xor_exEx;
            	        }


            	        this->followPush(FOLLOW_bit_and_ex_in_bit_xor_ex2819);
            	        b=bit_and_ex();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulebit_xor_exEx;
            	        }


            	        {
            	            node = m_allocator->construct<scripting::binary_expression>(m_allocator, scripting::arithmetic_type::arithmetic_xor, node, b
            	            );  SET_LOCATION_FROM_NODE(node, a
            	            ); SET_END_LOCATION_FROM_NODE(node, b
            	            );
            	        }


            	    }
            	    break;

            	default:
            	    goto loop18;
            	    break;
                }
            }
            loop18: ;


        }

    }
    goto rulebit_xor_exEx;
    rulebit_xor_exEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::expression*
WNScriptASTParser::bit_and_ex()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::expression* node;


    scripting::expression* a;
    scripting::expression* b;





        node = nullptr;



    {
        {
            this->followPush(FOLLOW_eq_ex_in_bit_and_ex2854);
            a=eq_ex();

            this->followPop();
            if  (this->hasException())
            {
                goto rulebit_and_exEx;
            }


            {
                 node = a
                ;
            }



            for (;;)
            {
                int alt19=2;
                switch ( this->LA(1) )
                {
                case 76:
                	{
                		alt19=1;
                	}
                    break;

                }

                switch (alt19)
                {
            	case 1:
            	    {
            	         this->matchToken(76, &FOLLOW_76_in_bit_and_ex2871);
            	        if  (this->hasException())
            	        {
            	            goto rulebit_and_exEx;
            	        }


            	        this->followPush(FOLLOW_eq_ex_in_bit_and_ex2875);
            	        b=eq_ex();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulebit_and_exEx;
            	        }


            	        {
            	            node = m_allocator->construct<scripting::binary_expression>(m_allocator, scripting::arithmetic_type::arithmetic_and, node, b
            	            );  SET_LOCATION_FROM_NODE(node, a
            	            ); SET_END_LOCATION_FROM_NODE(node, b
            	            );
            	        }


            	    }
            	    break;

            	default:
            	    goto loop19;
            	    break;
                }
            }
            loop19: ;


        }

    }
    goto rulebit_and_exEx;
    rulebit_and_exEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::expression*
WNScriptASTParser::eq_ex()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::expression* node;


    scripting::expression* a;
    scripting::expression* b;
    scripting::expression* c;





        node = nullptr;



    {
        {
            this->followPush(FOLLOW_rel_ex_in_eq_ex2913);
            a=rel_ex();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleeq_exEx;
            }


            {
                 node = a
                ;
            }



            for (;;)
            {
                int alt20=3;
                switch ( this->LA(1) )
                {
                case 89:
                	{
                		alt20=1;
                	}
                    break;
                case 72:
                	{
                		alt20=2;
                	}
                    break;

                }

                switch (alt20)
                {
            	case 1:
            	    {
            	        {
            	             this->matchToken(89, &FOLLOW_89_in_eq_ex2948);
            	            if  (this->hasException())
            	            {
            	                goto ruleeq_exEx;
            	            }


            	            this->followPush(FOLLOW_rel_ex_in_eq_ex2952);
            	            b=rel_ex();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleeq_exEx;
            	            }


            	            {
            	                node = m_allocator->construct<scripting::binary_expression>(m_allocator, scripting::arithmetic_type::arithmetic_equal, node, b
            	                );  SET_LOCATION_FROM_NODE(node, a
            	                ); SET_END_LOCATION_FROM_NODE(node, b
            	                );
            	            }


            	        }


            	    }
            	    break;
            	case 2:
            	    {
            	        {
            	             this->matchToken(72, &FOLLOW_72_in_eq_ex2975);
            	            if  (this->hasException())
            	            {
            	                goto ruleeq_exEx;
            	            }


            	            this->followPush(FOLLOW_rel_ex_in_eq_ex2979);
            	            c=rel_ex();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleeq_exEx;
            	            }


            	            {
            	                node = m_allocator->construct<scripting::binary_expression>(m_allocator, scripting::arithmetic_type::arithmetic_not_equal, node, c
            	                ); SET_LOCATION_FROM_NODE(node, a
            	                ); SET_END_LOCATION_FROM_NODE(node, c
            	                );
            	            }


            	        }


            	    }
            	    break;

            	default:
            	    goto loop20;
            	    break;
                }
            }
            loop20: ;


        }

    }
    goto ruleeq_exEx;
    ruleeq_exEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::expression*
WNScriptASTParser::rel_ex()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::expression* node;


    scripting::expression* a;
    scripting::expression* b;
    scripting::expression* c;
    scripting::expression* d;
    scripting::expression* e;





        node = nullptr;



    {
        {
            this->followPush(FOLLOW_add_ex_in_rel_ex3037);
            a=add_ex();

            this->followPop();
            if  (this->hasException())
            {
                goto rulerel_exEx;
            }


            {
                 node=a
                ;
            }



            for (;;)
            {
                int alt21=5;
                switch ( this->LA(1) )
                {
                case 86:
                	{
                		alt21=1;
                	}
                    break;
                case 90:
                	{
                		alt21=2;
                	}
                    break;
                case 87:
                	{
                		alt21=3;
                	}
                    break;
                case 91:
                	{
                		alt21=4;
                	}
                    break;

                }

                switch (alt21)
                {
            	case 1:
            	    {
            	        {
            	             this->matchToken(86, &FOLLOW_86_in_rel_ex3073);
            	            if  (this->hasException())
            	            {
            	                goto rulerel_exEx;
            	            }


            	            this->followPush(FOLLOW_add_ex_in_rel_ex3077);
            	            b=add_ex();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulerel_exEx;
            	            }


            	            {
            	                node = m_allocator->construct<scripting::binary_expression>(m_allocator, scripting::arithmetic_type::arithmetic_less_than, node, b
            	                );   SET_LOCATION_FROM_NODE(node, a
            	                ); SET_END_LOCATION_FROM_NODE(node, b
            	                );
            	            }


            	        }


            	    }
            	    break;
            	case 2:
            	    {
            	        {
            	             this->matchToken(90, &FOLLOW_90_in_rel_ex3101);
            	            if  (this->hasException())
            	            {
            	                goto rulerel_exEx;
            	            }


            	            this->followPush(FOLLOW_add_ex_in_rel_ex3105);
            	            c=add_ex();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulerel_exEx;
            	            }


            	            {
            	                node = m_allocator->construct<scripting::binary_expression>(m_allocator, scripting::arithmetic_type::arithmetic_greater_than, node, c
            	                );   SET_LOCATION_FROM_NODE(node, a
            	                ); SET_END_LOCATION_FROM_NODE(node, c
            	                );
            	            }


            	        }


            	    }
            	    break;
            	case 3:
            	    {
            	        {
            	             this->matchToken(87, &FOLLOW_87_in_rel_ex3129);
            	            if  (this->hasException())
            	            {
            	                goto rulerel_exEx;
            	            }


            	            this->followPush(FOLLOW_add_ex_in_rel_ex3133);
            	            d=add_ex();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulerel_exEx;
            	            }


            	            {
            	                node = m_allocator->construct<scripting::binary_expression>(m_allocator, scripting::arithmetic_type::arithmetic_less_than_or_equal, node, d
            	                );   SET_LOCATION_FROM_NODE(node, a
            	                ); SET_END_LOCATION_FROM_NODE(node, d
            	                );
            	            }


            	        }


            	    }
            	    break;
            	case 4:
            	    {
            	        {
            	             this->matchToken(91, &FOLLOW_91_in_rel_ex3157);
            	            if  (this->hasException())
            	            {
            	                goto rulerel_exEx;
            	            }


            	            this->followPush(FOLLOW_add_ex_in_rel_ex3161);
            	            e=add_ex();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulerel_exEx;
            	            }


            	            {
            	                node = m_allocator->construct<scripting::binary_expression>(m_allocator, scripting::arithmetic_type::arithmetic_greater_than_or_equal, node, e
            	                );   SET_LOCATION_FROM_NODE(node, a
            	                ); SET_END_LOCATION_FROM_NODE(node, e
            	                );
            	            }


            	        }


            	    }
            	    break;

            	default:
            	    goto loop21;
            	    break;
                }
            }
            loop21: ;


        }

    }
    goto rulerel_exEx;
    rulerel_exEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::expression*
WNScriptASTParser::add_ex()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::expression* node;


    scripting::expression* a;
    scripting::expression* b;
    scripting::expression* c;





        node = nullptr;



    {
        {
            this->followPush(FOLLOW_mult_ex_in_add_ex3222);
            a=mult_ex();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleadd_exEx;
            }


            {
                node = a
                ;
            }



            for (;;)
            {
                int alt22=3;
                switch ( this->LA(1) )
                {
                case 79:
                	{
                		alt22=1;
                	}
                    break;
                case 81:
                	{
                		alt22=2;
                	}
                    break;

                }

                switch (alt22)
                {
            	case 1:
            	    {
            	        {
            	             this->matchToken(79, &FOLLOW_79_in_add_ex3257);
            	            if  (this->hasException())
            	            {
            	                goto ruleadd_exEx;
            	            }


            	            this->followPush(FOLLOW_mult_ex_in_add_ex3261);
            	            b=mult_ex();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleadd_exEx;
            	            }


            	            {
            	                node = m_allocator->construct<scripting::binary_expression>(m_allocator, scripting::arithmetic_type::arithmetic_add, node, b
            	                );   SET_LOCATION_FROM_NODE(node, a
            	                ); SET_END_LOCATION_FROM_NODE(node, b
            	                );
            	            }


            	        }


            	    }
            	    break;
            	case 2:
            	    {
            	        {
            	             this->matchToken(81, &FOLLOW_81_in_add_ex3283);
            	            if  (this->hasException())
            	            {
            	                goto ruleadd_exEx;
            	            }


            	            this->followPush(FOLLOW_mult_ex_in_add_ex3287);
            	            c=mult_ex();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleadd_exEx;
            	            }


            	            {
            	                node = m_allocator->construct<scripting::binary_expression>(m_allocator, scripting::arithmetic_type::arithmetic_sub, node, c
            	                );   SET_LOCATION_FROM_NODE(node, a
            	                ); SET_END_LOCATION_FROM_NODE(node, c
            	                );
            	            }


            	        }


            	    }
            	    break;

            	default:
            	    goto loop22;
            	    break;
                }
            }
            loop22: ;


        }

    }
    goto ruleadd_exEx;
    ruleadd_exEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::expression*
WNScriptASTParser::mult_ex()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::expression* node;


    scripting::expression* a;
    scripting::expression* b;
    scripting::expression* c;
    scripting::expression* d;





        node = nullptr;



    {
        {
            this->followPush(FOLLOW_unary_ex_in_mult_ex3346);
            a=unary_ex();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemult_exEx;
            }


            {
                 node = a
                ;
            }



            for (;;)
            {
                int alt23=4;
                switch ( this->LA(1) )
                {
                case 77:
                	{
                		alt23=1;
                	}
                    break;
                case 84:
                	{
                		alt23=2;
                	}
                    break;
                case 73:
                	{
                		alt23=3;
                	}
                    break;

                }

                switch (alt23)
                {
            	case 1:
            	    {
            	        {
            	             this->matchToken(77, &FOLLOW_77_in_mult_ex3385);
            	            if  (this->hasException())
            	            {
            	                goto rulemult_exEx;
            	            }


            	            this->followPush(FOLLOW_unary_ex_in_mult_ex3389);
            	            b=unary_ex();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulemult_exEx;
            	            }


            	            {
            	                node = m_allocator->construct<scripting::binary_expression>(m_allocator, scripting::arithmetic_type::arithmetic_mult, node, b
            	                );   SET_LOCATION_FROM_NODE(node, a
            	                ); SET_END_LOCATION_FROM_NODE(node, b
            	                );
            	            }


            	        }


            	    }
            	    break;
            	case 2:
            	    {
            	        {
            	             this->matchToken(84, &FOLLOW_84_in_mult_ex3415);
            	            if  (this->hasException())
            	            {
            	                goto rulemult_exEx;
            	            }


            	            this->followPush(FOLLOW_unary_ex_in_mult_ex3419);
            	            c=unary_ex();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulemult_exEx;
            	            }


            	            {
            	                node = m_allocator->construct<scripting::binary_expression>(m_allocator, scripting::arithmetic_type::arithmetic_div, node, c
            	                );   SET_LOCATION_FROM_NODE(node, a
            	                ); SET_END_LOCATION_FROM_NODE(node, c
            	                );
            	            }


            	        }


            	    }
            	    break;
            	case 3:
            	    {
            	        {
            	             this->matchToken(73, &FOLLOW_73_in_mult_ex3445);
            	            if  (this->hasException())
            	            {
            	                goto rulemult_exEx;
            	            }


            	            this->followPush(FOLLOW_unary_ex_in_mult_ex3449);
            	            d=unary_ex();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulemult_exEx;
            	            }


            	            {
            	                node = m_allocator->construct<scripting::binary_expression>(m_allocator, scripting::arithmetic_type::arithmetic_mod, node, d
            	                );   SET_LOCATION_FROM_NODE(node, a
            	                ); SET_END_LOCATION_FROM_NODE(node, d
            	                );
            	            }


            	        }


            	    }
            	    break;

            	default:
            	    goto loop23;
            	    break;
                }
            }
            loop23: ;


        }

    }
    goto rulemult_exEx;
    rulemult_exEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::expression*
WNScriptASTParser::unary_ex()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::expression* node;


    scripting::expression* a;
    scripting::expression* b;
    scripting::expression* c;
    scripting::expression* d;





        node = nullptr;



    {
        {

            ANTLR_UINT32 alt24;

            alt24=5;

            switch ( this->LA(1) )
            {
            case BOOL:
            case BOOL_TYPE:
            case CHAR:
            case CHAR_TYPE:
            case CPTR_TYPE:
            case FLOAT:
            case FLOAT_TYPE:
            case ID:
            case INT:
            case INT_TYPE:
            case LBRACKET:
            case LENGTH:
            case NULLTOK:
            case RESOURCE:
            case SHARED_REF:
            case SIZE:
            case SIZE_TYPE:
            case STRING:
            case STRING_TYPE:
            case THIS_TOK:
            case TYPE:
            case VOID_TYPE:
            	{
            		alt24=1;
            	}
                break;
            case DOUBINC:
            	{
            		alt24=2;
            	}
                break;
            case DOUBDEC:
            	{
            		alt24=3;
            	}
                break;
            case 81:
            	{
            		alt24=4;
            	}
                break;
            case 71:
            	{
            		alt24=5;
            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 24 );
                ex->set_state( 0 );


                goto ruleunary_exEx;

            }

            switch (alt24)
            {
        	case 1:
        	    {
        	        this->followPush(FOLLOW_post_ex_in_unary_ex3501);
        	        a=post_ex();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleunary_exEx;
        	        }


        	        {
        	             node = a
        	            ;
        	        }


        	    }
        	    break;
        	case 2:
        	    {
        	         this->matchToken(DOUBINC, &FOLLOW_DOUBINC_in_unary_ex3514);
        	        if  (this->hasException())
        	        {
        	            goto ruleunary_exEx;
        	        }


        	        this->followPush(FOLLOW_unary_ex_in_unary_ex3518);
        	        b=unary_ex();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleunary_exEx;
        	        }


        	        {
        	             scripting::node* t = node; node = m_allocator->construct<scripting::unary_expression>(m_allocator, scripting::unary_type::pre_increment, b
        	            );   SET_LOCATION_FROM_NODE(node, t); SET_END_LOCATION_FROM_NODE(node, b
        	            );
        	        }


        	    }
        	    break;
        	case 3:
        	    {
        	         this->matchToken(DOUBDEC, &FOLLOW_DOUBDEC_in_unary_ex3531);
        	        if  (this->hasException())
        	        {
        	            goto ruleunary_exEx;
        	        }


        	        this->followPush(FOLLOW_unary_ex_in_unary_ex3535);
        	        c=unary_ex();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleunary_exEx;
        	        }


        	        {
        	             scripting::node* t = node; node = m_allocator->construct<scripting::unary_expression>(m_allocator, scripting::unary_type::pre_decrement, c
        	            );   SET_LOCATION_FROM_NODE(node, t); SET_END_LOCATION_FROM_NODE(node, c
        	            );
        	        }


        	    }
        	    break;
        	case 4:
        	    {
        	         this->matchToken(81, &FOLLOW_81_in_unary_ex3548);
        	        if  (this->hasException())
        	        {
        	            goto ruleunary_exEx;
        	        }


        	        this->followPush(FOLLOW_unary_ex_in_unary_ex3552);
        	        d=unary_ex();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleunary_exEx;
        	        }


        	        {
        	             scripting::node* t = node; node = m_allocator->construct<scripting::unary_expression>(m_allocator, scripting::unary_type::negation, d
        	            );   SET_LOCATION_FROM_NODE(node, t); SET_END_LOCATION_FROM_NODE(node, d
        	            );
        	        }


        	    }
        	    break;
        	case 5:
        	    {
        	         this->matchToken(71, &FOLLOW_71_in_unary_ex3566);
        	        if  (this->hasException())
        	        {
        	            goto ruleunary_exEx;
        	        }


        	        this->followPush(FOLLOW_unary_ex_in_unary_ex3570);
        	        d=unary_ex();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleunary_exEx;
        	        }


        	        {
        	             scripting::node* t = node; node = m_allocator->construct<scripting::unary_expression>(m_allocator, scripting::unary_type::inversion, d
        	            );   SET_LOCATION_FROM_NODE(node, t); SET_END_LOCATION_FROM_NODE(node, d
        	            );
        	        }


        	    }
        	    break;

            }
        }
    }
    goto ruleunary_exEx;
    ruleunary_exEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






uint32_t
WNScriptASTParser::defer()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    uint32_t val;


    ImplTraits::CommonTokenType const* INT32 = NULL;






        val = ~static_cast<uint32_t>(-1);



    {
        {

            ANTLR_UINT32 alt26;

            alt26=4;

            switch ( this->LA(1) )
            {
            case AT:
            	{
            		alt26=1;
            	}
                break;
            case DEFER:
            	{
            		alt26=2;
            	}
                break;
            case LOW_PRIORITY:
            	{
            		alt26=3;
            	}
                break;
            case BACKGROUND:
            	{
            		alt26=4;
            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 26 );
                ex->set_state( 0 );


                goto ruledeferEx;

            }

            switch (alt26)
            {
        	case 1:
        	    {
        	         this->matchToken(AT, &FOLLOW_AT_in_defer3603);
        	        if  (this->hasException())
        	        {
        	            goto ruledeferEx;
        	        }


        	        {
        	             val = 0;
        	        }


        	        {
        	            int alt25=2;
        	            switch ( this->LA(1) )
        	            {
        	                case INT:
        	                	{
        	                		alt25=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt25)
        	            {
        	        	case 1:
        	        	    {
        	        	        INT32 =  this->matchToken(INT, &FOLLOW_INT_in_defer3616);
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto ruledeferEx;
        	        	        }


        	        	        {
        	        	            val = (1 << 31 | strtol((INT32->getText()).c_str(), nullptr, 10));
        	        	        }


        	        	    }
        	        	    break;

        	            }
        	        }

        	    }
        	    break;
        	case 2:
        	    {
        	         this->matchToken(DEFER, &FOLLOW_DEFER_in_defer3628);
        	        if  (this->hasException())
        	        {
        	            goto ruledeferEx;
        	        }


        	        {
        	             val = 1;
        	        }


        	    }
        	    break;
        	case 3:
        	    {
        	         this->matchToken(LOW_PRIORITY, &FOLLOW_LOW_PRIORITY_in_defer3638);
        	        if  (this->hasException())
        	        {
        	            goto ruledeferEx;
        	        }


        	        {
        	             val = 2;
        	        }


        	    }
        	    break;
        	case 4:
        	    {
        	         this->matchToken(BACKGROUND, &FOLLOW_BACKGROUND_in_defer3648);
        	        if  (this->hasException())
        	        {
        	            goto ruledeferEx;
        	        }


        	        {
        	             val = 3;
        	        }


        	    }
        	    break;

            }
        }
    }
    goto ruledeferEx;
    ruledeferEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return val;
}






scripting::post_expression*
WNScriptASTParser::post_ex_proper()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::post_expression* node;


    ImplTraits::CommonTokenType const* d = NULL;
    ImplTraits::CommonTokenType const* e = NULL;
    ImplTraits::CommonTokenType const* f = NULL;
    ImplTraits::CommonTokenType const* g = NULL;
    ImplTraits::CommonTokenType const* ff = NULL;
    ImplTraits::CommonTokenType const* gg = NULL;
    ImplTraits::CommonTokenType const* h = NULL;
    ImplTraits::CommonTokenType const* i = NULL;
    ImplTraits::CommonTokenType const* hh = NULL;
    ImplTraits::CommonTokenType const* ii = NULL;
    ImplTraits::CommonTokenType const* c = NULL;
    ImplTraits::CommonTokenType const* aa = NULL;
    ImplTraits::CommonTokenType const* dd = NULL;
    ImplTraits::CommonTokenType const* DOUBINC33 = NULL;
    ImplTraits::CommonTokenType const* DOUBDEC34 = NULL;
    scripting::expression* a;
    uint32_t def;
    scripting::arg_list* b;
    uint32_t defa;
    scripting::arg_list* xx;
    scripting::expression* bb;
    scripting::expression* cc;





        node = nullptr;



    {
        {

            ANTLR_UINT32 alt27;

            alt27=9;

            switch ( this->LA(1) )
            {
            case LSQBRACKET:
            	{
            		alt27=1;
            	}
                break;
            case LBRACKET:
            	{
            		switch ( this->LA(2) )
            		{
            		case RBRACKET:
            			{
            				alt27=2;
            			}
            		    break;
            		case BOOL:
            		case BOOL_TYPE:
            		case CHAR:
            		case CHAR_TYPE:
            		case CPTR_TYPE:
            		case DOUBDEC:
            		case DOUBINC:
            		case FLOAT:
            		case FLOAT_TYPE:
            		case ID:
            		case INT:
            		case INT_TYPE:
            		case LBRACKET:
            		case LENGTH:
            		case NULLTOK:
            		case RESOURCE:
            		case SHARED_REF:
            		case SIZE:
            		case SIZE_TYPE:
            		case STRING:
            		case STRING_TYPE:
            		case THIS_TOK:
            		case TYPE:
            		case VOID_TYPE:
            		case 71:
            		case 81:
            			{
            				alt27=4;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 27 );
            		    ex->set_state( 2 );


            		    goto rulepost_ex_properEx;

            		}

            	}
                break;
            case AT:
            	{
            		switch ( this->LA(2) )
            		{
            		case INT:
            			{
            				switch ( this->LA(3) )
            				{
            				case LBRACKET:
            					{
            						switch ( this->LA(4) )
            						{
            						case RBRACKET:
            							{
            								alt27=3;
            							}
            						    break;
            						case BOOL:
            						case BOOL_TYPE:
            						case CHAR:
            						case CHAR_TYPE:
            						case CPTR_TYPE:
            						case DOUBDEC:
            						case DOUBINC:
            						case FLOAT:
            						case FLOAT_TYPE:
            						case ID:
            						case INT:
            						case INT_TYPE:
            						case LBRACKET:
            						case LENGTH:
            						case NULLTOK:
            						case RESOURCE:
            						case SHARED_REF:
            						case SIZE:
            						case SIZE_TYPE:
            						case STRING:
            						case STRING_TYPE:
            						case THIS_TOK:
            						case TYPE:
            						case VOID_TYPE:
            						case 71:
            						case 81:
            							{
            								alt27=5;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 27 );
            						    ex->set_state( 14 );


            						    goto rulepost_ex_properEx;

            						}

            					}
            				    break;

            				default:
            				    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 27 );
            				    ex->set_state( 13 );


            				    goto rulepost_ex_properEx;

            				}

            			}
            		    break;
            		case LBRACKET:
            			{
            				switch ( this->LA(3) )
            				{
            				case RBRACKET:
            					{
            						alt27=3;
            					}
            				    break;
            				case BOOL:
            				case BOOL_TYPE:
            				case CHAR:
            				case CHAR_TYPE:
            				case CPTR_TYPE:
            				case DOUBDEC:
            				case DOUBINC:
            				case FLOAT:
            				case FLOAT_TYPE:
            				case ID:
            				case INT:
            				case INT_TYPE:
            				case LBRACKET:
            				case LENGTH:
            				case NULLTOK:
            				case RESOURCE:
            				case SHARED_REF:
            				case SIZE:
            				case SIZE_TYPE:
            				case STRING:
            				case STRING_TYPE:
            				case THIS_TOK:
            				case TYPE:
            				case VOID_TYPE:
            				case 71:
            				case 81:
            					{
            						alt27=5;
            					}
            				    break;

            				default:
            				    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 27 );
            				    ex->set_state( 14 );


            				    goto rulepost_ex_properEx;

            				}

            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 27 );
            		    ex->set_state( 3 );


            		    goto rulepost_ex_properEx;

            		}

            	}
                break;
            case DEFER:
            	{
            		switch ( this->LA(2) )
            		{
            		case LBRACKET:
            			{
            				switch ( this->LA(3) )
            				{
            				case RBRACKET:
            					{
            						alt27=3;
            					}
            				    break;
            				case BOOL:
            				case BOOL_TYPE:
            				case CHAR:
            				case CHAR_TYPE:
            				case CPTR_TYPE:
            				case DOUBDEC:
            				case DOUBINC:
            				case FLOAT:
            				case FLOAT_TYPE:
            				case ID:
            				case INT:
            				case INT_TYPE:
            				case LBRACKET:
            				case LENGTH:
            				case NULLTOK:
            				case RESOURCE:
            				case SHARED_REF:
            				case SIZE:
            				case SIZE_TYPE:
            				case STRING:
            				case STRING_TYPE:
            				case THIS_TOK:
            				case TYPE:
            				case VOID_TYPE:
            				case 71:
            				case 81:
            					{
            						alt27=5;
            					}
            				    break;

            				default:
            				    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 27 );
            				    ex->set_state( 14 );


            				    goto rulepost_ex_properEx;

            				}

            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 27 );
            		    ex->set_state( 4 );


            		    goto rulepost_ex_properEx;

            		}

            	}
                break;
            case LOW_PRIORITY:
            	{
            		switch ( this->LA(2) )
            		{
            		case LBRACKET:
            			{
            				switch ( this->LA(3) )
            				{
            				case RBRACKET:
            					{
            						alt27=3;
            					}
            				    break;
            				case BOOL:
            				case BOOL_TYPE:
            				case CHAR:
            				case CHAR_TYPE:
            				case CPTR_TYPE:
            				case DOUBDEC:
            				case DOUBINC:
            				case FLOAT:
            				case FLOAT_TYPE:
            				case ID:
            				case INT:
            				case INT_TYPE:
            				case LBRACKET:
            				case LENGTH:
            				case NULLTOK:
            				case RESOURCE:
            				case SHARED_REF:
            				case SIZE:
            				case SIZE_TYPE:
            				case STRING:
            				case STRING_TYPE:
            				case THIS_TOK:
            				case TYPE:
            				case VOID_TYPE:
            				case 71:
            				case 81:
            					{
            						alt27=5;
            					}
            				    break;

            				default:
            				    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 27 );
            				    ex->set_state( 14 );


            				    goto rulepost_ex_properEx;

            				}

            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 27 );
            		    ex->set_state( 5 );


            		    goto rulepost_ex_properEx;

            		}

            	}
                break;
            case BACKGROUND:
            	{
            		switch ( this->LA(2) )
            		{
            		case LBRACKET:
            			{
            				switch ( this->LA(3) )
            				{
            				case RBRACKET:
            					{
            						alt27=3;
            					}
            				    break;
            				case BOOL:
            				case BOOL_TYPE:
            				case CHAR:
            				case CHAR_TYPE:
            				case CPTR_TYPE:
            				case DOUBDEC:
            				case DOUBINC:
            				case FLOAT:
            				case FLOAT_TYPE:
            				case ID:
            				case INT:
            				case INT_TYPE:
            				case LBRACKET:
            				case LENGTH:
            				case NULLTOK:
            				case RESOURCE:
            				case SHARED_REF:
            				case SIZE:
            				case SIZE_TYPE:
            				case STRING:
            				case STRING_TYPE:
            				case THIS_TOK:
            				case TYPE:
            				case VOID_TYPE:
            				case 71:
            				case 81:
            					{
            						alt27=5;
            					}
            				    break;

            				default:
            				    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 27 );
            				    ex->set_state( 14 );


            				    goto rulepost_ex_properEx;

            				}

            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 27 );
            		    ex->set_state( 6 );


            		    goto rulepost_ex_properEx;

            		}

            	}
                break;
            case 83:
            	{
            		alt27=6;
            	}
                break;
            case DOUBINC:
            	{
            		alt27=7;
            	}
                break;
            case DOUBDEC:
            	{
            		alt27=8;
            	}
                break;
            case LBRACE:
            	{
            		alt27=9;
            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 27 );
                ex->set_state( 0 );


                goto rulepost_ex_properEx;

            }

            switch (alt27)
            {
        	case 1:
        	    {
        	        d =  this->matchToken(LSQBRACKET, &FOLLOW_LSQBRACKET_in_post_ex_proper3680);
        	        if  (this->hasException())
        	        {
        	            goto rulepost_ex_properEx;
        	        }


        	        this->followPush(FOLLOW_expr_in_post_ex_proper3684);
        	        a=expr();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulepost_ex_properEx;
        	        }


        	        e =  this->matchToken(RSQBRACKET, &FOLLOW_RSQBRACKET_in_post_ex_proper3688);
        	        if  (this->hasException())
        	        {
        	            goto rulepost_ex_properEx;
        	        }


        	        {
        	             node = m_allocator->construct<scripting::array_access_expression>(m_allocator, a
        	            ); SET_LOCATION(node, d); SET_END_LOCATION(node, e);
        	        }


        	    }
        	    break;
        	case 2:
        	    {
        	        f =  this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_post_ex_proper3703);
        	        if  (this->hasException())
        	        {
        	            goto rulepost_ex_properEx;
        	        }


        	        g =  this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_post_ex_proper3707);
        	        if  (this->hasException())
        	        {
        	            goto rulepost_ex_properEx;
        	        }


        	        {
        	             node = m_allocator->construct<scripting::function_call_expression>(m_allocator); SET_LOCATION(node, f); SET_END_LOCATION(node, g);
        	        }


        	    }
        	    break;
        	case 3:
        	    {
        	        this->followPush(FOLLOW_defer_in_post_ex_proper3735);
        	        def=defer();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulepost_ex_properEx;
        	        }


        	        ff =  this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_post_ex_proper3739);
        	        if  (this->hasException())
        	        {
        	            goto rulepost_ex_properEx;
        	        }


        	        gg =  this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_post_ex_proper3743);
        	        if  (this->hasException())
        	        {
        	            goto rulepost_ex_properEx;
        	        }


        	        {
        	             node = m_allocator->construct<scripting::function_call_expression>(m_allocator, def
        	            ); SET_LOCATION(node, ff); SET_END_LOCATION(node, gg);
        	        }


        	    }
        	    break;
        	case 4:
        	    {
        	        h =  this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_post_ex_proper3771);
        	        if  (this->hasException())
        	        {
        	            goto rulepost_ex_properEx;
        	        }


        	        this->followPush(FOLLOW_arglist_in_post_ex_proper3777);
        	        b=arglist();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulepost_ex_properEx;
        	        }


        	        i =  this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_post_ex_proper3781);
        	        if  (this->hasException())
        	        {
        	            goto rulepost_ex_properEx;
        	        }


        	        {
        	             node = m_allocator->construct<scripting::function_call_expression>(m_allocator, b
        	            ); SET_LOCATION(node, h); SET_END_LOCATION(node, i);
        	        }


        	    }
        	    break;
        	case 5:
        	    {
        	        this->followPush(FOLLOW_defer_in_post_ex_proper3797);
        	        defa=defer();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulepost_ex_properEx;
        	        }


        	        hh =  this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_post_ex_proper3801);
        	        if  (this->hasException())
        	        {
        	            goto rulepost_ex_properEx;
        	        }


        	        this->followPush(FOLLOW_arglist_in_post_ex_proper3805);
        	        xx=arglist();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulepost_ex_properEx;
        	        }


        	        ii =  this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_post_ex_proper3809);
        	        if  (this->hasException())
        	        {
        	            goto rulepost_ex_properEx;
        	        }


        	        {
        	             node = m_allocator->construct<scripting::function_call_expression>(m_allocator, xx
        	            , defa
        	            ); SET_LOCATION(node, hh); SET_END_LOCATION(node, ii);
        	        }


        	    }
        	    break;
        	case 6:
        	    {
        	         this->matchToken(83, &FOLLOW_83_in_post_ex_proper3822);
        	        if  (this->hasException())
        	        {
        	            goto rulepost_ex_properEx;
        	        }


        	        c =  this->matchToken(ID, &FOLLOW_ID_in_post_ex_proper3826);
        	        if  (this->hasException())
        	        {
        	            goto rulepost_ex_properEx;
        	        }


        	        {
        	             node = m_allocator->construct<scripting::member_access_expression>(m_allocator, (c->getText()).c_str()); SET_LOCATION(node, c);
        	        }


        	    }
        	    break;
        	case 7:
        	    {
        	        DOUBINC33 =  this->matchToken(DOUBINC, &FOLLOW_DOUBINC_in_post_ex_proper3853);
        	        if  (this->hasException())
        	        {
        	            goto rulepost_ex_properEx;
        	        }


        	        {
        	             node = m_allocator->construct<scripting::post_unary_expression>(m_allocator, scripting::post_unary_type::post_increment); SET_LOCATION(node, DOUBINC33);
        	        }


        	    }
        	    break;
        	case 8:
        	    {
        	        DOUBDEC34 =  this->matchToken(DOUBDEC, &FOLLOW_DOUBDEC_in_post_ex_proper3882);
        	        if  (this->hasException())
        	        {
        	            goto rulepost_ex_properEx;
        	        }


        	        {
        	             node = m_allocator->construct<scripting::post_unary_expression>(m_allocator, scripting::post_unary_type::post_decrement); SET_LOCATION(node, DOUBDEC34);
        	        }


        	    }
        	    break;
        	case 9:
        	    {
        	        {
        	            {
        	                aa =  this->matchToken(LBRACE, &FOLLOW_LBRACE_in_post_ex_proper3928);
        	                if  (this->hasException())
        	                {
        	                    goto rulepost_ex_properEx;
        	                }


        	                {
        	                    node = m_allocator->construct<scripting::slice_expression>(m_allocator, nullptr, nullptr); SET_LOCATION(node, aa);
        	                }


        	            }


        	            {
        	                this->followPush(FOLLOW_expr_in_post_ex_proper3948);
        	                bb=expr();

        	                this->followPop();
        	                if  (this->hasException())
        	                {
        	                    goto rulepost_ex_properEx;
        	                }


        	                {
        	                     scripting::cast_to<scripting::slice_expression>(node)->set_index0(bb
        	                    );
        	                }


        	            }


        	             this->matchToken(COLON, &FOLLOW_COLON_in_post_ex_proper3965);
        	            if  (this->hasException())
        	            {
        	                goto rulepost_ex_properEx;
        	            }


        	            {
        	                this->followPush(FOLLOW_expr_in_post_ex_proper3982);
        	                cc=expr();

        	                this->followPop();
        	                if  (this->hasException())
        	                {
        	                    goto rulepost_ex_properEx;
        	                }


        	                {
        	                     scripting::cast_to<scripting::slice_expression>(node)->set_index1(cc
        	                    );
        	                }


        	            }


        	            {
        	                dd =  this->matchToken(RBRACE, &FOLLOW_RBRACE_in_post_ex_proper4002);
        	                if  (this->hasException())
        	                {
        	                    goto rulepost_ex_properEx;
        	                }


        	                {
        	                    SET_END_LOCATION(node, dd);
        	                }


        	            }


        	        }


        	    }
        	    break;

            }
        }
    }
    goto rulepost_ex_properEx;
    rulepost_ex_properEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::expression*
WNScriptASTParser::post_ex()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::expression* node;


    scripting::post_expression* a;
    scripting::expression * prim_ex35;





        node = nullptr;



    {
        {
            this->followPush(FOLLOW_prim_ex_in_post_ex4049);
            prim_ex35=prim_ex();

            this->followPop();
            if  (this->hasException())
            {
                goto rulepost_exEx;
            }


            {
                 node = prim_ex35
                ;
            }



            for (;;)
            {
                int alt28=2;
                switch ( this->LA(1) )
                {
                case AT:
                case BACKGROUND:
                case DEFER:
                case DOUBDEC:
                case DOUBINC:
                case LBRACE:
                case LBRACKET:
                case LOW_PRIORITY:
                case LSQBRACKET:
                case 83:
                	{
                		alt28=1;
                	}
                    break;

                }

                switch (alt28)
                {
            	case 1:
            	    {
            	        this->followPush(FOLLOW_post_ex_proper_in_post_ex4068);
            	        a=post_ex_proper();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulepost_exEx;
            	        }


            	        {
            	            a
            	            ->add_base_expression(node); SET_END_LOCATION_FROM_NODE(a
            	            , node); node = a
            	            ;
            	        }


            	    }
            	    break;

            	default:
            	    goto loop28;
            	    break;
                }
            }
            loop28: ;


        }

    }
    goto rulepost_exEx;
    rulepost_exEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::instruction*
WNScriptASTParser::assignment_or_expression()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::instruction* node;


    scripting::expression* a;
    scripting::assign_type b;
    scripting::expression* c;





        node = nullptr;



    {
        {
            this->followPush(FOLLOW_expr_in_assignment_or_expression4099);
            a=expr();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleassignment_or_expressionEx;
            }


            {
                int alt29=2;
                switch ( this->LA(1) )
                {
                case 74:
                case 78:
                case 80:
                case 82:
                case 85:
                case 88:
                	{
                		alt29=1;
                	}
                    break;
                case RBRACKET:
                case SEMICOLON:
                	{
                		alt29=2;
                	}
                    break;

                default:
                    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 29 );
                    ex->set_state( 0 );


                    goto ruleassignment_or_expressionEx;

                }

                switch (alt29)
                {
            	case 1:
            	    {
            	        {
            	            this->followPush(FOLLOW_assign_type_in_assignment_or_expression4131);
            	            b=assign_type();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleassignment_or_expressionEx;
            	            }


            	            this->followPush(FOLLOW_expr_in_assignment_or_expression4135);
            	            c=expr();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleassignment_or_expressionEx;
            	            }


            	            {

            	                                  scripting::lvalue* lval = m_allocator->construct<scripting::lvalue>(m_allocator, a
            	                );
            	                                  SET_LOCATION_FROM_NODE(lval, c
            	                );

            	                                  scripting::assignment_instruction* assign = m_allocator->construct<scripting::assignment_instruction>(m_allocator, lval);
            	                                  SET_LOCATION_FROM_NODE(assign , lval);

            	                                  assign->add_value(b
            	                , c
            	                );
            	                                  SET_END_LOCATION_FROM_NODE(assign, c
            	                );
            	                                  node = assign;

            	            }


            	        }


            	    }
            	    break;
            	case 2:
            	    {
            	        {
            	            {

            	                                  node = m_allocator->construct<scripting::expression_instruction>(m_allocator, a
            	                );
            	                                  SET_LOCATION_FROM_NODE(node, a
            	                );

            	            }


            	        }


            	    }
            	    break;

                }
            }

        }

    }
    goto ruleassignment_or_expressionEx;
    ruleassignment_or_expressionEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::constant_expression*
WNScriptASTParser::constant()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::constant_expression* node;


    ImplTraits::CommonTokenType const* a = NULL;
    ImplTraits::CommonTokenType const* h = NULL;
    ImplTraits::CommonTokenType const* b = NULL;
    ImplTraits::CommonTokenType const* c = NULL;
    ImplTraits::CommonTokenType const* d = NULL;
    ImplTraits::CommonTokenType const* e = NULL;
    ImplTraits::CommonTokenType const* g = NULL;
    ImplTraits::CommonTokenType const* i = NULL;
    scripting::type* f;





        node = nullptr;



    {
        {

            ANTLR_UINT32 alt30;

            alt30=9;

            switch ( this->LA(1) )
            {
            case INT:
            	{
            		alt30=1;
            	}
                break;
            case SIZE:
            	{
            		alt30=2;
            	}
                break;
            case FLOAT:
            	{
            		alt30=3;
            	}
                break;
            case CHAR:
            	{
            		alt30=4;
            	}
                break;
            case STRING:
            	{
            		alt30=5;
            	}
                break;
            case BOOL:
            	{
            		alt30=6;
            	}
                break;
            case NULLTOK:
            	{
            		alt30=7;
            	}
                break;
            case THIS_TOK:
            	{
            		alt30=8;
            	}
                break;
            case BOOL_TYPE:
            case CHAR_TYPE:
            case CPTR_TYPE:
            case FLOAT_TYPE:
            case INT_TYPE:
            case SIZE_TYPE:
            case STRING_TYPE:
            case VOID_TYPE:
            	{
            		alt30=9;
            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 30 );
                ex->set_state( 0 );


                goto ruleconstantEx;

            }

            switch (alt30)
            {
        	case 1:
        	    {
        	        a =  this->matchToken(INT, &FOLLOW_INT_in_constant4201);
        	        if  (this->hasException())
        	        {
        	            goto ruleconstantEx;
        	        }


        	        {
        	             scripting::type* type_node = m_allocator->construct<scripting::type>(m_allocator, scripting::type_classification::int_type); SET_LOCATION(type_node, a); node = m_allocator->construct<scripting::constant_expression>(m_allocator, type_node, (a->getText()).c_str()); SET_LOCATION(node, a);
        	        }


        	    }
        	    break;
        	case 2:
        	    {
        	        h =  this->matchToken(SIZE, &FOLLOW_SIZE_in_constant4219);
        	        if  (this->hasException())
        	        {
        	            goto ruleconstantEx;
        	        }


        	        {
        	             scripting::type* type_node = m_allocator->construct<scripting::type>(m_allocator, scripting::type_classification::size_type); SET_LOCATION(type_node, h); node = m_allocator->construct<scripting::constant_expression>(m_allocator, type_node, (h->getText()).c_str()); SET_LOCATION(node, h);
        	        }


        	    }
        	    break;
        	case 3:
        	    {
        	        b =  this->matchToken(FLOAT, &FOLLOW_FLOAT_in_constant4237);
        	        if  (this->hasException())
        	        {
        	            goto ruleconstantEx;
        	        }


        	        {
        	             scripting::type* type_node = m_allocator->construct<scripting::type>(m_allocator, scripting::type_classification::float_type); SET_LOCATION(type_node, b); node = m_allocator->construct<scripting::constant_expression>(m_allocator, type_node, (b->getText()).c_str()); SET_LOCATION(node, b);
        	        }


        	    }
        	    break;
        	case 4:
        	    {
        	        c =  this->matchToken(CHAR, &FOLLOW_CHAR_in_constant4253);
        	        if  (this->hasException())
        	        {
        	            goto ruleconstantEx;
        	        }


        	        {
        	             scripting::type* type_node = m_allocator->construct<scripting::type>(m_allocator, scripting::type_classification::char_type); SET_LOCATION(type_node, c); node = m_allocator->construct<scripting::constant_expression>(m_allocator, type_node, (c->getText()).c_str()); SET_LOCATION(node, c);
        	        }


        	    }
        	    break;
        	case 5:
        	    {
        	        d =  this->matchToken(STRING, &FOLLOW_STRING_in_constant4270);
        	        if  (this->hasException())
        	        {
        	            goto ruleconstantEx;
        	        }


        	        {
        	             scripting::type* type_node = m_allocator->construct<scripting::type>(m_allocator, scripting::type_classification::string_type); SET_LOCATION(type_node, d); node = m_allocator->construct<scripting::constant_expression>(m_allocator, type_node, (d->getText()).c_str()); SET_LOCATION(node, d);
        	        }


        	    }
        	    break;
        	case 6:
        	    {
        	        e =  this->matchToken(BOOL, &FOLLOW_BOOL_in_constant4285);
        	        if  (this->hasException())
        	        {
        	            goto ruleconstantEx;
        	        }


        	        {
        	             scripting::type* type_node = m_allocator->construct<scripting::type>(m_allocator, scripting::type_classification::bool_type); SET_LOCATION(type_node, e); node = m_allocator->construct<scripting::constant_expression>(m_allocator, type_node, (e->getText()).c_str()); SET_LOCATION(node, e);
        	        }


        	    }
        	    break;
        	case 7:
        	    {
        	        g =  this->matchToken(NULLTOK, &FOLLOW_NULLTOK_in_constant4302);
        	        if  (this->hasException())
        	        {
        	            goto ruleconstantEx;
        	        }


        	        {
        	             scripting::type* type_node = m_allocator->construct<scripting::type>(m_allocator, scripting::type_classification::nullptr_type); SET_LOCATION(type_node, g); node = m_allocator->construct<scripting::constant_expression>(m_allocator, type_node, "null"); SET_LOCATION(node, g);
        	        }


        	    }
        	    break;
        	case 8:
        	    {
        	        i =  this->matchToken(THIS_TOK, &FOLLOW_THIS_TOK_in_constant4317);
        	        if  (this->hasException())
        	        {
        	            goto ruleconstantEx;
        	        }


        	        {
        	             scripting::type* type_node = m_allocator->construct<scripting::type>(m_allocator, scripting::type_classification::this_type); SET_LOCATION(type_node, i); node = m_allocator->construct<scripting::constant_expression>(m_allocator, type_node, "_this"); SET_LOCATION(node, i);
        	        }


        	    }
        	    break;
        	case 9:
        	    {
        	        this->followPush(FOLLOW_scalarType_in_constant4335);
        	        f=scalarType();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleconstantEx;
        	        }


        	        g =  this->matchToken(LBRACE, &FOLLOW_LBRACE_in_constant4339);
        	        if  (this->hasException())
        	        {
        	            goto ruleconstantEx;
        	        }


        	        h =  this->matchToken(STRING, &FOLLOW_STRING_in_constant4343);
        	        if  (this->hasException())
        	        {
        	            goto ruleconstantEx;
        	        }


        	        i =  this->matchToken(RBRACE, &FOLLOW_RBRACE_in_constant4347);
        	        if  (this->hasException())
        	        {
        	            goto ruleconstantEx;
        	        }


        	        {
        	             node = m_allocator->construct<scripting::constant_expression>(m_allocator, f
        	            , (h->getText()).c_str()); SET_LOCATION_FROM_NODE(node,
        	            f
        	            ); SET_END_LOCATION(node, i);
        	        }


        	    }
        	    break;

            }
        }
    }
    goto ruleconstantEx;
    ruleconstantEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::builtin_unary_expression*
WNScriptASTParser::builtin_unary()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::builtin_unary_expression* node;


    ImplTraits::CommonTokenType const* LENGTH37 = NULL;
    ImplTraits::CommonTokenType const* RBRACKET38 = NULL;
    scripting::expression* expr36;





        node = nullptr;



    {
        {
            LENGTH37 =  this->matchToken(LENGTH, &FOLLOW_LENGTH_in_builtin_unary4376);
            if  (this->hasException())
            {
                goto rulebuiltin_unaryEx;
            }


             this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_builtin_unary4378);
            if  (this->hasException())
            {
                goto rulebuiltin_unaryEx;
            }


            this->followPush(FOLLOW_expr_in_builtin_unary4380);
            expr36=expr();

            this->followPop();
            if  (this->hasException())
            {
                goto rulebuiltin_unaryEx;
            }


            RBRACKET38 =  this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_builtin_unary4382);
            if  (this->hasException())
            {
                goto rulebuiltin_unaryEx;
            }


            {
                 node = m_allocator->construct<scripting::builtin_unary_expression>(m_allocator, scripting::builtin_unary_type::length, expr36
                ); SET_LOCATION(node, LENGTH37); SET_END_LOCATION(node, RBRACKET38);
            }


        }

    }
    goto rulebuiltin_unaryEx;
    rulebuiltin_unaryEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::expression*
WNScriptASTParser::non_array_prim_ex()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::expression* node;


    ImplTraits::CommonTokenType const* ba = NULL;
    ImplTraits::CommonTokenType const* bb = NULL;
    ImplTraits::CommonTokenType const* rlb = NULL;
    ImplTraits::CommonTokenType const* rls = NULL;
    ImplTraits::CommonTokenType const* rrb = NULL;
    ImplTraits::CommonTokenType const* rlb2 = NULL;
    ImplTraits::CommonTokenType const* rls2 = NULL;
    ImplTraits::CommonTokenType const* rrb2 = NULL;
    ImplTraits::CommonTokenType const* ID39 = NULL;
    ImplTraits::CommonTokenType const* RESOURCE40 = NULL;
    ImplTraits::CommonTokenType const* RESOURCE41 = NULL;
    scripting::expression* a;
    scripting::arg_list* rla;
    scripting::constant_expression* b;
    scripting::type* c;
    scripting::cast_expression* f;
    scripting::type* e;
    scripting::struct_allocation_expression* h;
    scripting::type* i;
    scripting::struct_allocation_expression* j;
    scripting::builtin_unary_expression* u;





        node = nullptr;



    {
        {

            ANTLR_UINT32 alt31;

            alt31=9;

            switch ( this->LA(1) )
            {
            case ID:
            	{
            		alt31=1;
            	}
                break;
            case LBRACKET:
            	{
            		alt31=2;
            	}
                break;
            case RESOURCE:
            	{
            		switch ( this->LA(2) )
            		{
            		case LBRACKET:
            			{
            				switch ( this->LA(3) )
            				{
            				case STRING:
            					{
            						switch ( this->LA(4) )
            						{
            						case RBRACKET:
            							{
            								alt31=3;
            							}
            						    break;
            						case COMMA:
            							{
            								alt31=4;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 31 );
            						    ex->set_state( 18 );


            						    goto rulenon_array_prim_exEx;

            						}

            					}
            				    break;

            				default:
            				    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 31 );
            				    ex->set_state( 16 );


            				    goto rulenon_array_prim_exEx;

            				}

            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 31 );
            		    ex->set_state( 3 );


            		    goto rulenon_array_prim_exEx;

            		}

            	}
                break;
            case BOOL:
            case CHAR:
            case FLOAT:
            case INT:
            case NULLTOK:
            case SIZE:
            case STRING:
            case THIS_TOK:
            	{
            		alt31=5;
            	}
                break;
            case VOID_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case LBRACE:
            			{
            				alt31=5;
            			}
            		    break;
            		case LBRACKET:
            			{
            				alt31=6;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 31 );
            		    ex->set_state( 5 );


            		    goto rulenon_array_prim_exEx;

            		}

            	}
                break;
            case INT_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case LBRACE:
            			{
            				alt31=5;
            			}
            		    break;
            		case LBRACKET:
            			{
            				alt31=6;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 31 );
            		    ex->set_state( 6 );


            		    goto rulenon_array_prim_exEx;

            		}

            	}
                break;
            case SIZE_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case LBRACE:
            			{
            				alt31=5;
            			}
            		    break;
            		case LBRACKET:
            			{
            				alt31=6;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 31 );
            		    ex->set_state( 7 );


            		    goto rulenon_array_prim_exEx;

            		}

            	}
                break;
            case FLOAT_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case LBRACE:
            			{
            				alt31=5;
            			}
            		    break;
            		case LBRACKET:
            			{
            				alt31=6;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 31 );
            		    ex->set_state( 8 );


            		    goto rulenon_array_prim_exEx;

            		}

            	}
                break;
            case CHAR_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case LBRACE:
            			{
            				alt31=5;
            			}
            		    break;
            		case LBRACKET:
            			{
            				alt31=6;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 31 );
            		    ex->set_state( 9 );


            		    goto rulenon_array_prim_exEx;

            		}

            	}
                break;
            case BOOL_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case LBRACE:
            			{
            				alt31=5;
            			}
            		    break;
            		case LBRACKET:
            			{
            				alt31=6;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 31 );
            		    ex->set_state( 10 );


            		    goto rulenon_array_prim_exEx;

            		}

            	}
                break;
            case CPTR_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case LBRACE:
            			{
            				alt31=5;
            			}
            		    break;
            		case LBRACKET:
            			{
            				alt31=6;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 31 );
            		    ex->set_state( 11 );


            		    goto rulenon_array_prim_exEx;

            		}

            	}
                break;
            case STRING_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case LBRACE:
            			{
            				alt31=5;
            			}
            		    break;
            		case LBRACKET:
            			{
            				alt31=6;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 31 );
            		    ex->set_state( 12 );


            		    goto rulenon_array_prim_exEx;

            		}

            	}
                break;
            case TYPE:
            	{
            		alt31=7;
            	}
                break;
            case SHARED_REF:
            	{
            		alt31=8;
            	}
                break;
            case LENGTH:
            	{
            		alt31=9;
            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 31 );
                ex->set_state( 0 );


                goto rulenon_array_prim_exEx;

            }

            switch (alt31)
            {
        	case 1:
        	    {
        	        ID39 =  this->matchToken(ID, &FOLLOW_ID_in_non_array_prim_ex4411);
        	        if  (this->hasException())
        	        {
        	            goto rulenon_array_prim_exEx;
        	        }


        	        {
        	             node = m_allocator->construct<scripting::id_expression>(m_allocator, (ID39->getText()).c_str()); SET_LOCATION(node, ID39);
        	        }


        	    }
        	    break;
        	case 2:
        	    {
        	        ba =  this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_non_array_prim_ex4425);
        	        if  (this->hasException())
        	        {
        	            goto rulenon_array_prim_exEx;
        	        }


        	        this->followPush(FOLLOW_expr_in_non_array_prim_ex4429);
        	        a=expr();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulenon_array_prim_exEx;
        	        }


        	        bb =  this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_non_array_prim_ex4433);
        	        if  (this->hasException())
        	        {
        	            goto rulenon_array_prim_exEx;
        	        }


        	        {
        	            node = a
        	            ; SET_LOCATION(node, ba); SET_END_LOCATION(node, bb);
        	        }


        	    }
        	    break;
        	case 3:
        	    {
        	        RESOURCE40 =  this->matchToken(RESOURCE, &FOLLOW_RESOURCE_in_non_array_prim_ex4445);
        	        if  (this->hasException())
        	        {
        	            goto rulenon_array_prim_exEx;
        	        }


        	        rlb =  this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_non_array_prim_ex4449);
        	        if  (this->hasException())
        	        {
        	            goto rulenon_array_prim_exEx;
        	        }


        	        rls =  this->matchToken(STRING, &FOLLOW_STRING_in_non_array_prim_ex4453);
        	        if  (this->hasException())
        	        {
        	            goto rulenon_array_prim_exEx;
        	        }


        	        rrb =  this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_non_array_prim_ex4457);
        	        if  (this->hasException())
        	        {
        	            goto rulenon_array_prim_exEx;
        	        }


        	        {
        	             auto n = m_allocator->construct<scripting::resource_expression>(m_allocator, (RESOURCE40->getText()).c_str()+1, (rls->getText()).c_str()); m_file->add_resource((RESOURCE40->getText()).c_str()+1,(rls->getText()).c_str(), true); node = n; SET_LOCATION(node, RESOURCE40); SET_END_LOCATION(node, rrb);
        	        }


        	    }
        	    break;
        	case 4:
        	    {
        	        RESOURCE41 =  this->matchToken(RESOURCE, &FOLLOW_RESOURCE_in_non_array_prim_ex4469);
        	        if  (this->hasException())
        	        {
        	            goto rulenon_array_prim_exEx;
        	        }


        	        rlb2 =  this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_non_array_prim_ex4473);
        	        if  (this->hasException())
        	        {
        	            goto rulenon_array_prim_exEx;
        	        }


        	        rls2 =  this->matchToken(STRING, &FOLLOW_STRING_in_non_array_prim_ex4477);
        	        if  (this->hasException())
        	        {
        	            goto rulenon_array_prim_exEx;
        	        }


        	         this->matchToken(COMMA, &FOLLOW_COMMA_in_non_array_prim_ex4479);
        	        if  (this->hasException())
        	        {
        	            goto rulenon_array_prim_exEx;
        	        }


        	        this->followPush(FOLLOW_arglist_in_non_array_prim_ex4483);
        	        rla=arglist();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulenon_array_prim_exEx;
        	        }


        	        rrb2 =  this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_non_array_prim_ex4487);
        	        if  (this->hasException())
        	        {
        	            goto rulenon_array_prim_exEx;
        	        }


        	        {
        	             auto n = m_allocator->construct<scripting::resource_expression>(m_allocator, (RESOURCE41->getText()).c_str()+1, (rls->getText()).c_str(),
        	            rla
        	            ); m_file->add_resource((RESOURCE41->getText()).c_str()+1,(rls->getText()).c_str(), true); node = n; SET_LOCATION(node, RESOURCE41); SET_END_LOCATION(node, rrb);
        	        }


        	    }
        	    break;
        	case 5:
        	    {
        	        this->followPush(FOLLOW_constant_in_non_array_prim_ex4501);
        	        b=constant();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulenon_array_prim_exEx;
        	        }


        	        {
        	            node = b
        	            ;
        	        }


        	    }
        	    break;
        	case 6:
        	    {
        	        this->followPush(FOLLOW_scalarType_in_non_array_prim_ex4516);
        	        c=scalarType();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulenon_array_prim_exEx;
        	        }


        	        {
        	            this->followPush(FOLLOW_cast_in_non_array_prim_ex4522);
        	            f=cast();

        	            this->followPop();
        	            if  (this->hasException())
        	            {
        	                goto rulenon_array_prim_exEx;
        	            }


        	        }


        	        {
        	             f
        	            ->set_type(c
        	            ); node=f
        	            ; SET_START_LOCATION_FROM_NODE(node, c
        	            );
        	        }


        	    }
        	    break;
        	case 7:
        	    {
        	        this->followPush(FOLLOW_objectType_in_non_array_prim_ex4537);
        	        e=objectType();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulenon_array_prim_exEx;
        	        }


        	        this->followPush(FOLLOW_structInit_in_non_array_prim_ex4541);
        	        h=structInit();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulenon_array_prim_exEx;
        	        }


        	        {
        	             h
        	            ->set_type(e
        	            ); node=h
        	            ; SET_START_LOCATION_FROM_NODE(node, e
        	            );
        	        }


        	    }
        	    break;
        	case 8:
        	    {
        	         this->matchToken(SHARED_REF, &FOLLOW_SHARED_REF_in_non_array_prim_ex4553);
        	        if  (this->hasException())
        	        {
        	            goto rulenon_array_prim_exEx;
        	        }


        	        this->followPush(FOLLOW_objectType_in_non_array_prim_ex4557);
        	        i=objectType();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulenon_array_prim_exEx;
        	        }


        	        this->followPush(FOLLOW_structInit_in_non_array_prim_ex4561);
        	        j=structInit();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulenon_array_prim_exEx;
        	        }


        	        {
        	             i
        	            ->set_reference_type(scripting::reference_type::shared); j
        	            ->set_type(i
        	            ); node=j
        	            ; SET_START_LOCATION_FROM_NODE(node, i
        	            );
        	        }


        	    }
        	    break;
        	case 9:
        	    {
        	        this->followPush(FOLLOW_builtin_unary_in_non_array_prim_ex4575);
        	        u=builtin_unary();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulenon_array_prim_exEx;
        	        }


        	        {
        	            node = u
        	            ;
        	        }


        	    }
        	    break;

            }
        }
    }
    goto rulenon_array_prim_exEx;
    rulenon_array_prim_exEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::expression *
WNScriptASTParser::prim_ex()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::expression * node;


    scripting::type* k;
    scripting::array_allocation_expression* l;
    scripting::type* m;
    scripting::array_allocation_expression* n;
    scripting::expression* non_array_prim_ex42;





        node = nullptr;



    {
        {

            ANTLR_UINT32 alt32;

            alt32=3;

            switch ( this->LA(1) )
            {
            case BOOL:
            case CHAR:
            case FLOAT:
            case ID:
            case INT:
            case LBRACKET:
            case LENGTH:
            case NULLTOK:
            case RESOURCE:
            case SIZE:
            case STRING:
            case THIS_TOK:
            	{
            		alt32=1;
            	}
                break;
            case VOID_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case LBRACE:
            		case LBRACKET:
            			{
            				alt32=1;
            			}
            		    break;
            		case DLSQBRACKET:
            		case LSQBRACKET:
            			{
            				alt32=2;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 32 );
            		    ex->set_state( 2 );


            		    goto ruleprim_exEx;

            		}

            	}
                break;
            case INT_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case LBRACE:
            		case LBRACKET:
            			{
            				alt32=1;
            			}
            		    break;
            		case DLSQBRACKET:
            		case LSQBRACKET:
            			{
            				alt32=2;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 32 );
            		    ex->set_state( 3 );


            		    goto ruleprim_exEx;

            		}

            	}
                break;
            case SIZE_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case LBRACE:
            		case LBRACKET:
            			{
            				alt32=1;
            			}
            		    break;
            		case DLSQBRACKET:
            		case LSQBRACKET:
            			{
            				alt32=2;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 32 );
            		    ex->set_state( 4 );


            		    goto ruleprim_exEx;

            		}

            	}
                break;
            case FLOAT_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case LBRACE:
            		case LBRACKET:
            			{
            				alt32=1;
            			}
            		    break;
            		case DLSQBRACKET:
            		case LSQBRACKET:
            			{
            				alt32=2;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 32 );
            		    ex->set_state( 5 );


            		    goto ruleprim_exEx;

            		}

            	}
                break;
            case CHAR_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case LBRACE:
            		case LBRACKET:
            			{
            				alt32=1;
            			}
            		    break;
            		case DLSQBRACKET:
            		case LSQBRACKET:
            			{
            				alt32=2;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 32 );
            		    ex->set_state( 6 );


            		    goto ruleprim_exEx;

            		}

            	}
                break;
            case BOOL_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case LBRACE:
            		case LBRACKET:
            			{
            				alt32=1;
            			}
            		    break;
            		case DLSQBRACKET:
            		case LSQBRACKET:
            			{
            				alt32=2;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 32 );
            		    ex->set_state( 7 );


            		    goto ruleprim_exEx;

            		}

            	}
                break;
            case CPTR_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case LBRACE:
            		case LBRACKET:
            			{
            				alt32=1;
            			}
            		    break;
            		case DLSQBRACKET:
            		case LSQBRACKET:
            			{
            				alt32=2;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 32 );
            		    ex->set_state( 8 );


            		    goto ruleprim_exEx;

            		}

            	}
                break;
            case STRING_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case LBRACE:
            		case LBRACKET:
            			{
            				alt32=1;
            			}
            		    break;
            		case DLSQBRACKET:
            		case LSQBRACKET:
            			{
            				alt32=2;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 32 );
            		    ex->set_state( 9 );


            		    goto ruleprim_exEx;

            		}

            	}
                break;
            case TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case LBRACKET:
            			{
            				alt32=1;
            			}
            		    break;
            		case DLSQBRACKET:
            		case LSQBRACKET:
            			{
            				alt32=2;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 32 );
            		    ex->set_state( 10 );


            		    goto ruleprim_exEx;

            		}

            	}
                break;
            case SHARED_REF:
            	{
            		switch ( this->LA(2) )
            		{
            		case TYPE:
            			{
            				switch ( this->LA(3) )
            				{
            				case LBRACKET:
            					{
            						alt32=1;
            					}
            				    break;
            				case DLSQBRACKET:
            				case LSQBRACKET:
            					{
            						alt32=3;
            					}
            				    break;

            				default:
            				    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 32 );
            				    ex->set_state( 13 );


            				    goto ruleprim_exEx;

            				}

            			}
            		    break;
            		case BOOL_TYPE:
            		case CHAR_TYPE:
            		case CPTR_TYPE:
            		case FLOAT_TYPE:
            		case INT_TYPE:
            		case SIZE_TYPE:
            		case STRING_TYPE:
            		case VOID_TYPE:
            			{
            				alt32=3;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 32 );
            		    ex->set_state( 11 );


            		    goto ruleprim_exEx;

            		}

            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 32 );
                ex->set_state( 0 );


                goto ruleprim_exEx;

            }

            switch (alt32)
            {
        	case 1:
        	    {
        	        this->followPush(FOLLOW_non_array_prim_ex_in_prim_ex4604);
        	        non_array_prim_ex42=non_array_prim_ex();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleprim_exEx;
        	        }


        	        {
        	             node = non_array_prim_ex42
        	            ;
        	        }


        	    }
        	    break;
        	case 2:
        	    {
        	        this->followPush(FOLLOW_nonArrayType_in_prim_ex4618);
        	        k=nonArrayType();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleprim_exEx;
        	        }


        	        this->followPush(FOLLOW_arrayInit_in_prim_ex4622);
        	        l=arrayInit();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleprim_exEx;
        	        }


        	        {
        	             l
        	            ->set_type(k
        	            ); node=l
        	            ; SET_START_LOCATION_FROM_NODE(node, k
        	            );
        	        }


        	    }
        	    break;
        	case 3:
        	    {
        	         this->matchToken(SHARED_REF, &FOLLOW_SHARED_REF_in_prim_ex4634);
        	        if  (this->hasException())
        	        {
        	            goto ruleprim_exEx;
        	        }


        	        this->followPush(FOLLOW_nonArrayType_in_prim_ex4638);
        	        m=nonArrayType();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleprim_exEx;
        	        }


        	        this->followPush(FOLLOW_arrayInit_in_prim_ex4642);
        	        n=arrayInit();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleprim_exEx;
        	        }


        	        {
        	             m
        	            ->set_reference_type(scripting::reference_type::shared); n
        	            ->set_type(m
        	            ); node=n
        	            ; SET_START_LOCATION_FROM_NODE(node, m
        	            );
        	        }


        	    }
        	    break;

            }
        }
    }
    goto ruleprim_exEx;
    ruleprim_exEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::cast_expression*
WNScriptASTParser::cast()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::cast_expression* node;


    ImplTraits::CommonTokenType const* a = NULL;
    ImplTraits::CommonTokenType const* c = NULL;
    scripting::expression* b;





      node = nullptr;



    {
        {
            a =  this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_cast4671);
            if  (this->hasException())
            {
                goto rulecastEx;
            }


            this->followPush(FOLLOW_expr_in_cast4675);
            b=expr();

            this->followPop();
            if  (this->hasException())
            {
                goto rulecastEx;
            }


            c =  this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_cast4679);
            if  (this->hasException())
            {
                goto rulecastEx;
            }


            {
                 node = m_allocator->construct<scripting::cast_expression>(m_allocator, b
                ); SET_LOCATION(node, a); SET_END_LOCATION(node, c);
            }


        }

    }
    goto rulecastEx;
    rulecastEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::struct_allocation_expression*
WNScriptASTParser::structInit()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::struct_allocation_expression* node;


    ImplTraits::CommonTokenType const* a = NULL;
    ImplTraits::CommonTokenType const* b = NULL;
    ImplTraits::CommonTokenType const* c = NULL;
    ImplTraits::CommonTokenType const* e = NULL;
    scripting::arg_list* d;





        node = nullptr;



    {
        {

            ANTLR_UINT32 alt33;

            alt33=2;

            switch ( this->LA(1) )
            {
            case LBRACKET:
            	{
            		switch ( this->LA(2) )
            		{
            		case RBRACKET:
            			{
            				alt33=1;
            			}
            		    break;
            		case BOOL:
            		case BOOL_TYPE:
            		case CHAR:
            		case CHAR_TYPE:
            		case CPTR_TYPE:
            		case DOUBDEC:
            		case DOUBINC:
            		case FLOAT:
            		case FLOAT_TYPE:
            		case ID:
            		case INT:
            		case INT_TYPE:
            		case LBRACKET:
            		case LENGTH:
            		case NULLTOK:
            		case RESOURCE:
            		case SHARED_REF:
            		case SIZE:
            		case SIZE_TYPE:
            		case STRING:
            		case STRING_TYPE:
            		case THIS_TOK:
            		case TYPE:
            		case VOID_TYPE:
            		case 71:
            		case 81:
            			{
            				alt33=2;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 33 );
            		    ex->set_state( 1 );


            		    goto rulestructInitEx;

            		}

            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 33 );
                ex->set_state( 0 );


                goto rulestructInitEx;

            }

            switch (alt33)
            {
        	case 1:
        	    {
        	        {
        	            a =  this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_structInit4709);
        	            if  (this->hasException())
        	            {
        	                goto rulestructInitEx;
        	            }


        	            b =  this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_structInit4713);
        	            if  (this->hasException())
        	            {
        	                goto rulestructInitEx;
        	            }


        	            {
        	                 node = m_allocator->construct<scripting::struct_allocation_expression>(m_allocator); SET_LOCATION(node, a); SET_END_LOCATION(node, b);
        	            }


        	        }


        	    }
        	    break;
        	case 2:
        	    {
        	        {
        	            c =  this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_structInit4727);
        	            if  (this->hasException())
        	            {
        	                goto rulestructInitEx;
        	            }


        	            this->followPush(FOLLOW_arglist_in_structInit4731);
        	            d=arglist();

        	            this->followPop();
        	            if  (this->hasException())
        	            {
        	                goto rulestructInitEx;
        	            }


        	            e =  this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_structInit4735);
        	            if  (this->hasException())
        	            {
        	                goto rulestructInitEx;
        	            }


        	            {
        	                 node = m_allocator->construct<scripting::struct_allocation_expression>(m_allocator); node->set_args(d
        	                ); SET_LOCATION(node, c); SET_END_LOCATION(node, e);
        	            }


        	        }


        	    }
        	    break;

            }
        }
    }
    goto rulestructInitEx;
    rulestructInitEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::array_allocation_expression*
WNScriptASTParser::arrayInit()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::array_allocation_expression* node;


    ImplTraits::CommonTokenType const* c = NULL;
    ImplTraits::CommonTokenType const* h = NULL;
    scripting::expression* e;
    scripting::expression* f;
    scripting::expression* b;
    scripting::arg_list* g;





        node = m_allocator->construct<scripting::array_allocation_expression>(m_allocator);



    {
        {

            ANTLR_UINT32 alt36;

            alt36=2;

            switch ( this->LA(1) )
            {
            case LSQBRACKET:
            	{
            		switch ( this->LA(2) )
            		{
            		case RSQBRACKET:
            			{
            				alt36=2;
            			}
            		    break;
            		case BOOL:
            		case BOOL_TYPE:
            		case CHAR:
            		case CHAR_TYPE:
            		case CPTR_TYPE:
            		case DOUBDEC:
            		case DOUBINC:
            		case FLOAT:
            		case FLOAT_TYPE:
            		case ID:
            		case INT:
            		case INT_TYPE:
            		case LBRACKET:
            		case LENGTH:
            		case NULLTOK:
            		case RESOURCE:
            		case SHARED_REF:
            		case SIZE:
            		case SIZE_TYPE:
            		case STRING:
            		case STRING_TYPE:
            		case THIS_TOK:
            		case TYPE:
            		case VOID_TYPE:
            		case 71:
            		case 81:
            			{
            				alt36=1;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 36 );
            		    ex->set_state( 1 );


            		    goto rulearrayInitEx;

            		}

            	}
                break;
            case DLSQBRACKET:
            	{
            		switch ( this->LA(2) )
            		{
            		case DRSQBRACKET:
            			{
            				alt36=2;
            			}
            		    break;
            		case BOOL:
            		case BOOL_TYPE:
            		case CHAR:
            		case CHAR_TYPE:
            		case CPTR_TYPE:
            		case DOUBDEC:
            		case DOUBINC:
            		case FLOAT:
            		case FLOAT_TYPE:
            		case ID:
            		case INT:
            		case INT_TYPE:
            		case LBRACKET:
            		case LENGTH:
            		case NULLTOK:
            		case RESOURCE:
            		case SHARED_REF:
            		case SIZE:
            		case SIZE_TYPE:
            		case STRING:
            		case STRING_TYPE:
            		case THIS_TOK:
            		case TYPE:
            		case VOID_TYPE:
            		case 71:
            		case 81:
            			{
            				alt36=1;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 36 );
            		    ex->set_state( 2 );


            		    goto rulearrayInitEx;

            		}

            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 36 );
                ex->set_state( 0 );


                goto rulearrayInitEx;

            }

            switch (alt36)
            {
        	case 1:
        	    {
        	        {
        	            {
        	                int alt34=2;
        	                switch ( this->LA(1) )
        	                {
        	                case LSQBRACKET:
        	                	{
        	                		alt34=1;
        	                	}
        	                    break;
        	                case DLSQBRACKET:
        	                	{
        	                		alt34=2;
        	                	}
        	                    break;

        	                default:
        	                    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
        	                    ex->set_decisionNum( 34 );
        	                    ex->set_state( 0 );


        	                    goto rulearrayInitEx;

        	                }

        	                switch (alt34)
        	                {
        	            	case 1:
        	            	    {
        	            	        {
        	            	             this->matchToken(LSQBRACKET, &FOLLOW_LSQBRACKET_in_arrayInit4787);
        	            	            if  (this->hasException())
        	            	            {
        	            	                goto rulearrayInitEx;
        	            	            }


        	            	            this->followPush(FOLLOW_expr_in_arrayInit4791);
        	            	            e=expr();

        	            	            this->followPop();
        	            	            if  (this->hasException())
        	            	            {
        	            	                goto rulearrayInitEx;
        	            	            }


        	            	             this->matchToken(RSQBRACKET, &FOLLOW_RSQBRACKET_in_arrayInit4793);
        	            	            if  (this->hasException())
        	            	            {
        	            	                goto rulearrayInitEx;
        	            	            }


        	            	            {
        	            	                 node->add_expression(e
        	            	                );
        	            	            }


        	            	        }


        	            	    }
        	            	    break;
        	            	case 2:
        	            	    {
        	            	        {
        	            	             this->matchToken(DLSQBRACKET, &FOLLOW_DLSQBRACKET_in_arrayInit4820);
        	            	            if  (this->hasException())
        	            	            {
        	            	                goto rulearrayInitEx;
        	            	            }


        	            	            this->followPush(FOLLOW_expr_in_arrayInit4824);
        	            	            f=expr();

        	            	            this->followPop();
        	            	            if  (this->hasException())
        	            	            {
        	            	                goto rulearrayInitEx;
        	            	            }


        	            	             this->matchToken(DRSQBRACKET, &FOLLOW_DRSQBRACKET_in_arrayInit4826);
        	            	            if  (this->hasException())
        	            	            {
        	            	                goto rulearrayInitEx;
        	            	            }


        	            	            {
        	            	                 node->add_expression(f
        	            	                ); node->set_runtime(true);
        	            	            }


        	            	        }


        	            	    }
        	            	    break;

        	                }
        	            }

        	            {
        	                 this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_arrayInit4845);
        	                if  (this->hasException())
        	                {
        	                    goto rulearrayInitEx;
        	                }


        	                this->followPush(FOLLOW_expr_in_arrayInit4849);
        	                b=expr();

        	                this->followPop();
        	                if  (this->hasException())
        	                {
        	                    goto rulearrayInitEx;
        	                }


        	                c =  this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_arrayInit4853);
        	                if  (this->hasException())
        	                {
        	                    goto rulearrayInitEx;
        	                }


        	                {
        	                     node->set_copy_initializer(b); SET_LOCATION(node, c);
        	                }


        	            }


        	        }


        	    }
        	    break;
        	case 2:
        	    {
        	        {
        	            {
        	                int alt35=2;
        	                switch ( this->LA(1) )
        	                {
        	                case LSQBRACKET:
        	                	{
        	                		alt35=1;
        	                	}
        	                    break;
        	                case DLSQBRACKET:
        	                	{
        	                		alt35=2;
        	                	}
        	                    break;

        	                default:
        	                    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
        	                    ex->set_decisionNum( 35 );
        	                    ex->set_state( 0 );


        	                    goto rulearrayInitEx;

        	                }

        	                switch (alt35)
        	                {
        	            	case 1:
        	            	    {
        	            	        {
        	            	             this->matchToken(LSQBRACKET, &FOLLOW_LSQBRACKET_in_arrayInit4895);
        	            	            if  (this->hasException())
        	            	            {
        	            	                goto rulearrayInitEx;
        	            	            }


        	            	             this->matchToken(RSQBRACKET, &FOLLOW_RSQBRACKET_in_arrayInit4897);
        	            	            if  (this->hasException())
        	            	            {
        	            	                goto rulearrayInitEx;
        	            	            }


        	            	        }


        	            	    }
        	            	    break;
        	            	case 2:
        	            	    {
        	            	        {
        	            	             this->matchToken(DLSQBRACKET, &FOLLOW_DLSQBRACKET_in_arrayInit4903);
        	            	            if  (this->hasException())
        	            	            {
        	            	                goto rulearrayInitEx;
        	            	            }


        	            	             this->matchToken(DRSQBRACKET, &FOLLOW_DRSQBRACKET_in_arrayInit4905);
        	            	            if  (this->hasException())
        	            	            {
        	            	                goto rulearrayInitEx;
        	            	            }


        	            	            {
        	            	                 node->set_runtime(true);
        	            	            }


        	            	        }


        	            	    }
        	            	    break;

        	                }
        	            }

        	            {
        	                 this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_arrayInit4924);
        	                if  (this->hasException())
        	                {
        	                    goto rulearrayInitEx;
        	                }


        	                this->followPush(FOLLOW_arglist_in_arrayInit4928);
        	                g=arglist();

        	                this->followPop();
        	                if  (this->hasException())
        	                {
        	                    goto rulearrayInitEx;
        	                }


        	                h =  this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_arrayInit4932);
        	                if  (this->hasException())
        	                {
        	                    goto rulearrayInitEx;
        	                }


        	            }


        	            {
        	                 node->set_inline_initializers(g); SET_LOCATION(node, h);
        	            }


        	        }


        	    }
        	    break;

            }
        }
    }
    goto rulearrayInitEx;
    rulearrayInitEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::declaration*
WNScriptASTParser::declaration()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::declaration* node;


    scripting::parameter* a;
    scripting::expression* c;





        node =  m_allocator->construct<scripting::declaration>(m_allocator);



    {
        {
            this->followPush(FOLLOW_param_in_declaration4975);
            a=param();

            this->followPop();
            if  (this->hasException())
            {
                goto ruledeclarationEx;
            }


            {
                 node->set_parameter(a
                ); SET_LOCATION_FROM_NODE(node, a
                );
            }


            {
                {
                     this->matchToken(88, &FOLLOW_88_in_declaration5010);
                    if  (this->hasException())
                    {
                        goto ruledeclarationEx;
                    }


                    {
                        {
                            this->followPush(FOLLOW_expr_in_declaration5017);
                            c=expr();

                            this->followPop();
                            if  (this->hasException())
                            {
                                goto ruledeclarationEx;
                            }


                        }


                        {
                             node->add_expression_initializer(c
                            ); SET_END_LOCATION_FROM_NODE(node, c
                            );
                        }


                    }


                }


            }


        }

    }
    goto ruledeclarationEx;
    ruledeclarationEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::declaration*
WNScriptASTParser::inherited_declaration()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::declaration* node;


    ImplTraits::CommonTokenType const* a = NULL;
    ImplTraits::CommonTokenType const* d = NULL;
    scripting::expression* c;





        node =  m_allocator->construct<scripting::declaration>(m_allocator);



    {
        {
             this->matchToken(83, &FOLLOW_83_in_inherited_declaration5067);
            if  (this->hasException())
            {
                goto ruleinherited_declarationEx;
            }


            a =  this->matchToken(ID, &FOLLOW_ID_in_inherited_declaration5071);
            if  (this->hasException())
            {
                goto ruleinherited_declarationEx;
            }


            {
                 node->set_inherited_parameter((a->getText()).c_str());  SET_LOCATION(node, a);
            }


            {
                 this->matchToken(88, &FOLLOW_88_in_inherited_declaration5084);
                if  (this->hasException())
                {
                    goto ruleinherited_declarationEx;
                }


                {
                    int alt37=2;
                    switch ( this->LA(1) )
                    {
                    case BOOL:
                    case BOOL_TYPE:
                    case CHAR:
                    case CHAR_TYPE:
                    case CPTR_TYPE:
                    case DOUBDEC:
                    case DOUBINC:
                    case FLOAT:
                    case FLOAT_TYPE:
                    case ID:
                    case INT:
                    case INT_TYPE:
                    case LBRACKET:
                    case LENGTH:
                    case NULLTOK:
                    case RESOURCE:
                    case SHARED_REF:
                    case SIZE:
                    case SIZE_TYPE:
                    case STRING:
                    case STRING_TYPE:
                    case THIS_TOK:
                    case TYPE:
                    case VOID_TYPE:
                    case 71:
                    case 81:
                    	{
                    		alt37=1;
                    	}
                        break;
                    case DEFAULT:
                    	{
                    		alt37=2;
                    	}
                        break;

                    default:
                        ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                        ex->set_decisionNum( 37 );
                        ex->set_state( 0 );


                        goto ruleinherited_declarationEx;

                    }

                    switch (alt37)
                    {
                	case 1:
                	    {
                	        {
                	            this->followPush(FOLLOW_expr_in_inherited_declaration5120);
                	            c=expr();

                	            this->followPop();
                	            if  (this->hasException())
                	            {
                	                goto ruleinherited_declarationEx;
                	            }


                	            {
                	                 node->add_expression_initializer(c
                	                ); SET_END_LOCATION_FROM_NODE(node, c
                	                );
                	            }


                	        }


                	    }
                	    break;
                	case 2:
                	    {
                	        {
                	            d =  this->matchToken(DEFAULT, &FOLLOW_DEFAULT_in_inherited_declaration5146);
                	            if  (this->hasException())
                	            {
                	                goto ruleinherited_declarationEx;
                	            }


                	            {
                	                 node->set_default_initialization(); SET_END_LOCATION(node, d);
                	            }


                	        }


                	    }
                	    break;

                    }
                }

            }


        }

    }
    goto ruleinherited_declarationEx;
    ruleinherited_declarationEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::instruction*
WNScriptASTParser::instructionScalar()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::instruction* node;


    scripting::declaration* declaration43;
    scripting::instruction* assignment_or_expression44;





        node = nullptr;



    {
        {

            ANTLR_UINT32 alt38;

            alt38=2;

            switch ( this->LA(1) )
            {
            case VOID_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case ID:
            		case SLICETOK:
            		case SSOR:
            			{
            				alt38=1;
            			}
            		    break;
            		case LSQBRACKET:
            			{
            				switch ( this->LA(3) )
            				{
            				case RSQBRACKET:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACKET:
            							{
            								alt38=2;
            							}
            						    break;
            						case ID:
            							{
            								alt38=1;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 38 );
            						    ex->set_state( 16 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case INT:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt38=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt38=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 38 );
            								    ex->set_state( 36 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case AT:
            						case BACKGROUND:
            						case DEFER:
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACE:
            						case LBRACKET:
            						case LOW_PRIORITY:
            						case LSQBRACKET:
            						case QUESTION:
            						case SLICETOK:
            						case SSOR:
            						case 72:
            						case 73:
            						case 75:
            						case 76:
            						case 77:
            						case 79:
            						case 81:
            						case 83:
            						case 84:
            						case 86:
            						case 87:
            						case 89:
            						case 90:
            						case 91:
            						case 92:
            							{
            								alt38=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 38 );
            						    ex->set_state( 17 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case SIZE:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt38=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt38=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 38 );
            								    ex->set_state( 36 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case AT:
            						case BACKGROUND:
            						case DEFER:
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACE:
            						case LBRACKET:
            						case LOW_PRIORITY:
            						case LSQBRACKET:
            						case QUESTION:
            						case SLICETOK:
            						case SSOR:
            						case 72:
            						case 73:
            						case 75:
            						case 76:
            						case 77:
            						case 79:
            						case 81:
            						case 83:
            						case 84:
            						case 86:
            						case 87:
            						case 89:
            						case 90:
            						case 91:
            						case 92:
            							{
            								alt38=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 38 );
            						    ex->set_state( 18 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case FLOAT:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt38=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt38=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 38 );
            								    ex->set_state( 36 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case AT:
            						case BACKGROUND:
            						case DEFER:
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACE:
            						case LBRACKET:
            						case LOW_PRIORITY:
            						case LSQBRACKET:
            						case QUESTION:
            						case SLICETOK:
            						case SSOR:
            						case 72:
            						case 73:
            						case 75:
            						case 76:
            						case 77:
            						case 79:
            						case 81:
            						case 83:
            						case 84:
            						case 86:
            						case 87:
            						case 89:
            						case 90:
            						case 91:
            						case 92:
            							{
            								alt38=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 38 );
            						    ex->set_state( 19 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case CHAR:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt38=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt38=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 38 );
            								    ex->set_state( 36 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case AT:
            						case BACKGROUND:
            						case DEFER:
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACE:
            						case LBRACKET:
            						case LOW_PRIORITY:
            						case LSQBRACKET:
            						case QUESTION:
            						case SLICETOK:
            						case SSOR:
            						case 72:
            						case 73:
            						case 75:
            						case 76:
            						case 77:
            						case 79:
            						case 81:
            						case 83:
            						case 84:
            						case 86:
            						case 87:
            						case 89:
            						case 90:
            						case 91:
            						case 92:
            							{
            								alt38=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 38 );
            						    ex->set_state( 20 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case STRING:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt38=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt38=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 38 );
            								    ex->set_state( 36 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case AT:
            						case BACKGROUND:
            						case DEFER:
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACE:
            						case LBRACKET:
            						case LOW_PRIORITY:
            						case LSQBRACKET:
            						case QUESTION:
            						case SLICETOK:
            						case SSOR:
            						case 72:
            						case 73:
            						case 75:
            						case 76:
            						case 77:
            						case 79:
            						case 81:
            						case 83:
            						case 84:
            						case 86:
            						case 87:
            						case 89:
            						case 90:
            						case 91:
            						case 92:
            							{
            								alt38=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 38 );
            						    ex->set_state( 21 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case BOOL:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt38=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt38=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 38 );
            								    ex->set_state( 36 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case AT:
            						case BACKGROUND:
            						case DEFER:
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACE:
            						case LBRACKET:
            						case LOW_PRIORITY:
            						case LSQBRACKET:
            						case QUESTION:
            						case SLICETOK:
            						case SSOR:
            						case 72:
            						case 73:
            						case 75:
            						case 76:
            						case 77:
            						case 79:
            						case 81:
            						case 83:
            						case 84:
            						case 86:
            						case 87:
            						case 89:
            						case 90:
            						case 91:
            						case 92:
            							{
            								alt38=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 38 );
            						    ex->set_state( 22 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case NULLTOK:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt38=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt38=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 38 );
            								    ex->set_state( 36 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case AT:
            						case BACKGROUND:
            						case DEFER:
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACE:
            						case LBRACKET:
            						case LOW_PRIORITY:
            						case LSQBRACKET:
            						case QUESTION:
            						case SLICETOK:
            						case SSOR:
            						case 72:
            						case 73:
            						case 75:
            						case 76:
            						case 77:
            						case 79:
            						case 81:
            						case 83:
            						case 84:
            						case 86:
            						case 87:
            						case 89:
            						case 90:
            						case 91:
            						case 92:
            							{
            								alt38=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 38 );
            						    ex->set_state( 23 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case THIS_TOK:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt38=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt38=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 38 );
            								    ex->set_state( 36 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case AT:
            						case BACKGROUND:
            						case DEFER:
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACE:
            						case LBRACKET:
            						case LOW_PRIORITY:
            						case LSQBRACKET:
            						case QUESTION:
            						case SLICETOK:
            						case SSOR:
            						case 72:
            						case 73:
            						case 75:
            						case 76:
            						case 77:
            						case 79:
            						case 81:
            						case 83:
            						case 84:
            						case 86:
            						case 87:
            						case 89:
            						case 90:
            						case 91:
            						case 92:
            							{
            								alt38=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 38 );
            						    ex->set_state( 24 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case VOID_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt38=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt38=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 38 );
            														    ex->set_state( 36 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case AT:
            												case BACKGROUND:
            												case DEFER:
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACE:
            												case LBRACKET:
            												case LOW_PRIORITY:
            												case LSQBRACKET:
            												case QUESTION:
            												case SLICETOK:
            												case SSOR:
            												case 72:
            												case 73:
            												case 75:
            												case 76:
            												case 77:
            												case 79:
            												case 81:
            												case 83:
            												case 84:
            												case 86:
            												case 87:
            												case 89:
            												case 90:
            												case 91:
            												case 92:
            													{
            														alt38=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 38 );
            												    ex->set_state( 59 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 38 );
            										    ex->set_state( 56 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 38 );
            								    ex->set_state( 37 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt38=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 38 );
            						    ex->set_state( 25 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case INT_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt38=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt38=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 38 );
            														    ex->set_state( 36 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case AT:
            												case BACKGROUND:
            												case DEFER:
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACE:
            												case LBRACKET:
            												case LOW_PRIORITY:
            												case LSQBRACKET:
            												case QUESTION:
            												case SLICETOK:
            												case SSOR:
            												case 72:
            												case 73:
            												case 75:
            												case 76:
            												case 77:
            												case 79:
            												case 81:
            												case 83:
            												case 84:
            												case 86:
            												case 87:
            												case 89:
            												case 90:
            												case 91:
            												case 92:
            													{
            														alt38=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 38 );
            												    ex->set_state( 59 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 38 );
            										    ex->set_state( 56 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 38 );
            								    ex->set_state( 37 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt38=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 38 );
            						    ex->set_state( 26 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case SIZE_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt38=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt38=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 38 );
            														    ex->set_state( 36 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case AT:
            												case BACKGROUND:
            												case DEFER:
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACE:
            												case LBRACKET:
            												case LOW_PRIORITY:
            												case LSQBRACKET:
            												case QUESTION:
            												case SLICETOK:
            												case SSOR:
            												case 72:
            												case 73:
            												case 75:
            												case 76:
            												case 77:
            												case 79:
            												case 81:
            												case 83:
            												case 84:
            												case 86:
            												case 87:
            												case 89:
            												case 90:
            												case 91:
            												case 92:
            													{
            														alt38=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 38 );
            												    ex->set_state( 59 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 38 );
            										    ex->set_state( 56 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 38 );
            								    ex->set_state( 37 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt38=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 38 );
            						    ex->set_state( 27 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case FLOAT_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt38=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt38=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 38 );
            														    ex->set_state( 36 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case AT:
            												case BACKGROUND:
            												case DEFER:
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACE:
            												case LBRACKET:
            												case LOW_PRIORITY:
            												case LSQBRACKET:
            												case QUESTION:
            												case SLICETOK:
            												case SSOR:
            												case 72:
            												case 73:
            												case 75:
            												case 76:
            												case 77:
            												case 79:
            												case 81:
            												case 83:
            												case 84:
            												case 86:
            												case 87:
            												case 89:
            												case 90:
            												case 91:
            												case 92:
            													{
            														alt38=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 38 );
            												    ex->set_state( 59 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 38 );
            										    ex->set_state( 56 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 38 );
            								    ex->set_state( 37 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt38=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 38 );
            						    ex->set_state( 28 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case CHAR_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt38=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt38=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 38 );
            														    ex->set_state( 36 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case AT:
            												case BACKGROUND:
            												case DEFER:
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACE:
            												case LBRACKET:
            												case LOW_PRIORITY:
            												case LSQBRACKET:
            												case QUESTION:
            												case SLICETOK:
            												case SSOR:
            												case 72:
            												case 73:
            												case 75:
            												case 76:
            												case 77:
            												case 79:
            												case 81:
            												case 83:
            												case 84:
            												case 86:
            												case 87:
            												case 89:
            												case 90:
            												case 91:
            												case 92:
            													{
            														alt38=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 38 );
            												    ex->set_state( 59 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 38 );
            										    ex->set_state( 56 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 38 );
            								    ex->set_state( 37 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt38=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 38 );
            						    ex->set_state( 29 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case BOOL_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt38=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt38=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 38 );
            														    ex->set_state( 36 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case AT:
            												case BACKGROUND:
            												case DEFER:
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACE:
            												case LBRACKET:
            												case LOW_PRIORITY:
            												case LSQBRACKET:
            												case QUESTION:
            												case SLICETOK:
            												case SSOR:
            												case 72:
            												case 73:
            												case 75:
            												case 76:
            												case 77:
            												case 79:
            												case 81:
            												case 83:
            												case 84:
            												case 86:
            												case 87:
            												case 89:
            												case 90:
            												case 91:
            												case 92:
            													{
            														alt38=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 38 );
            												    ex->set_state( 59 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 38 );
            										    ex->set_state( 56 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 38 );
            								    ex->set_state( 37 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt38=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 38 );
            						    ex->set_state( 30 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case CPTR_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt38=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt38=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 38 );
            														    ex->set_state( 36 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case AT:
            												case BACKGROUND:
            												case DEFER:
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACE:
            												case LBRACKET:
            												case LOW_PRIORITY:
            												case LSQBRACKET:
            												case QUESTION:
            												case SLICETOK:
            												case SSOR:
            												case 72:
            												case 73:
            												case 75:
            												case 76:
            												case 77:
            												case 79:
            												case 81:
            												case 83:
            												case 84:
            												case 86:
            												case 87:
            												case 89:
            												case 90:
            												case 91:
            												case 92:
            													{
            														alt38=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 38 );
            												    ex->set_state( 59 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 38 );
            										    ex->set_state( 56 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 38 );
            								    ex->set_state( 37 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt38=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 38 );
            						    ex->set_state( 31 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case STRING_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt38=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt38=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 38 );
            														    ex->set_state( 36 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case AT:
            												case BACKGROUND:
            												case DEFER:
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACE:
            												case LBRACKET:
            												case LOW_PRIORITY:
            												case LSQBRACKET:
            												case QUESTION:
            												case SLICETOK:
            												case SSOR:
            												case 72:
            												case 73:
            												case 75:
            												case 76:
            												case 77:
            												case 79:
            												case 81:
            												case 83:
            												case 84:
            												case 86:
            												case 87:
            												case 89:
            												case 90:
            												case 91:
            												case 92:
            													{
            														alt38=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 38 );
            												    ex->set_state( 59 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 38 );
            										    ex->set_state( 56 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 38 );
            								    ex->set_state( 37 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt38=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 38 );
            						    ex->set_state( 32 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case DOUBDEC:
            				case DOUBINC:
            				case ID:
            				case LBRACKET:
            				case LENGTH:
            				case RESOURCE:
            				case SHARED_REF:
            				case TYPE:
            				case 71:
            				case 81:
            					{
            						alt38=2;
            					}
            				    break;

            				default:
            				    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 38 );
            				    ex->set_state( 13 );


            				    goto ruleinstructionScalarEx;

            				}

            			}
            		    break;
            		case DLSQBRACKET:
            			{
            				switch ( this->LA(3) )
            				{
            				case DRSQBRACKET:
            					{
            						switch ( this->LA(4) )
            						{
            						case ID:
            							{
            								alt38=1;
            							}
            						    break;
            						case LBRACKET:
            							{
            								alt38=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 38 );
            						    ex->set_state( 33 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case BOOL:
            				case BOOL_TYPE:
            				case CHAR:
            				case CHAR_TYPE:
            				case CPTR_TYPE:
            				case DOUBDEC:
            				case DOUBINC:
            				case FLOAT:
            				case FLOAT_TYPE:
            				case ID:
            				case INT:
            				case INT_TYPE:
            				case LBRACKET:
            				case LENGTH:
            				case NULLTOK:
            				case RESOURCE:
            				case SHARED_REF:
            				case SIZE:
            				case SIZE_TYPE:
            				case STRING:
            				case STRING_TYPE:
            				case THIS_TOK:
            				case TYPE:
            				case VOID_TYPE:
            				case 71:
            				case 81:
            					{
            						alt38=2;
            					}
            				    break;

            				default:
            				    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 38 );
            				    ex->set_state( 14 );


            				    goto ruleinstructionScalarEx;

            				}

            			}
            		    break;
            		case LBRACE:
            		case LBRACKET:
            			{
            				alt38=2;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 38 );
            		    ex->set_state( 1 );


            		    goto ruleinstructionScalarEx;

            		}

            	}
                break;
            case INT_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case ID:
            		case SLICETOK:
            		case SSOR:
            			{
            				alt38=1;
            			}
            		    break;
            		case LSQBRACKET:
            			{
            				switch ( this->LA(3) )
            				{
            				case RSQBRACKET:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACKET:
            							{
            								alt38=2;
            							}
            						    break;
            						case ID:
            							{
            								alt38=1;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 38 );
            						    ex->set_state( 16 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case INT:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt38=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt38=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 38 );
            								    ex->set_state( 36 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case AT:
            						case BACKGROUND:
            						case DEFER:
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACE:
            						case LBRACKET:
            						case LOW_PRIORITY:
            						case LSQBRACKET:
            						case QUESTION:
            						case SLICETOK:
            						case SSOR:
            						case 72:
            						case 73:
            						case 75:
            						case 76:
            						case 77:
            						case 79:
            						case 81:
            						case 83:
            						case 84:
            						case 86:
            						case 87:
            						case 89:
            						case 90:
            						case 91:
            						case 92:
            							{
            								alt38=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 38 );
            						    ex->set_state( 17 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case SIZE:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt38=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt38=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 38 );
            								    ex->set_state( 36 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case AT:
            						case BACKGROUND:
            						case DEFER:
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACE:
            						case LBRACKET:
            						case LOW_PRIORITY:
            						case LSQBRACKET:
            						case QUESTION:
            						case SLICETOK:
            						case SSOR:
            						case 72:
            						case 73:
            						case 75:
            						case 76:
            						case 77:
            						case 79:
            						case 81:
            						case 83:
            						case 84:
            						case 86:
            						case 87:
            						case 89:
            						case 90:
            						case 91:
            						case 92:
            							{
            								alt38=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 38 );
            						    ex->set_state( 18 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case FLOAT:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt38=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt38=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 38 );
            								    ex->set_state( 36 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case AT:
            						case BACKGROUND:
            						case DEFER:
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACE:
            						case LBRACKET:
            						case LOW_PRIORITY:
            						case LSQBRACKET:
            						case QUESTION:
            						case SLICETOK:
            						case SSOR:
            						case 72:
            						case 73:
            						case 75:
            						case 76:
            						case 77:
            						case 79:
            						case 81:
            						case 83:
            						case 84:
            						case 86:
            						case 87:
            						case 89:
            						case 90:
            						case 91:
            						case 92:
            							{
            								alt38=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 38 );
            						    ex->set_state( 19 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case CHAR:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt38=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt38=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 38 );
            								    ex->set_state( 36 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case AT:
            						case BACKGROUND:
            						case DEFER:
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACE:
            						case LBRACKET:
            						case LOW_PRIORITY:
            						case LSQBRACKET:
            						case QUESTION:
            						case SLICETOK:
            						case SSOR:
            						case 72:
            						case 73:
            						case 75:
            						case 76:
            						case 77:
            						case 79:
            						case 81:
            						case 83:
            						case 84:
            						case 86:
            						case 87:
            						case 89:
            						case 90:
            						case 91:
            						case 92:
            							{
            								alt38=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 38 );
            						    ex->set_state( 20 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case STRING:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt38=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt38=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 38 );
            								    ex->set_state( 36 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case AT:
            						case BACKGROUND:
            						case DEFER:
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACE:
            						case LBRACKET:
            						case LOW_PRIORITY:
            						case LSQBRACKET:
            						case QUESTION:
            						case SLICETOK:
            						case SSOR:
            						case 72:
            						case 73:
            						case 75:
            						case 76:
            						case 77:
            						case 79:
            						case 81:
            						case 83:
            						case 84:
            						case 86:
            						case 87:
            						case 89:
            						case 90:
            						case 91:
            						case 92:
            							{
            								alt38=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 38 );
            						    ex->set_state( 21 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case BOOL:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt38=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt38=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 38 );
            								    ex->set_state( 36 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case AT:
            						case BACKGROUND:
            						case DEFER:
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACE:
            						case LBRACKET:
            						case LOW_PRIORITY:
            						case LSQBRACKET:
            						case QUESTION:
            						case SLICETOK:
            						case SSOR:
            						case 72:
            						case 73:
            						case 75:
            						case 76:
            						case 77:
            						case 79:
            						case 81:
            						case 83:
            						case 84:
            						case 86:
            						case 87:
            						case 89:
            						case 90:
            						case 91:
            						case 92:
            							{
            								alt38=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 38 );
            						    ex->set_state( 22 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case NULLTOK:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt38=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt38=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 38 );
            								    ex->set_state( 36 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case AT:
            						case BACKGROUND:
            						case DEFER:
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACE:
            						case LBRACKET:
            						case LOW_PRIORITY:
            						case LSQBRACKET:
            						case QUESTION:
            						case SLICETOK:
            						case SSOR:
            						case 72:
            						case 73:
            						case 75:
            						case 76:
            						case 77:
            						case 79:
            						case 81:
            						case 83:
            						case 84:
            						case 86:
            						case 87:
            						case 89:
            						case 90:
            						case 91:
            						case 92:
            							{
            								alt38=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 38 );
            						    ex->set_state( 23 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case THIS_TOK:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt38=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt38=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 38 );
            								    ex->set_state( 36 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case AT:
            						case BACKGROUND:
            						case DEFER:
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACE:
            						case LBRACKET:
            						case LOW_PRIORITY:
            						case LSQBRACKET:
            						case QUESTION:
            						case SLICETOK:
            						case SSOR:
            						case 72:
            						case 73:
            						case 75:
            						case 76:
            						case 77:
            						case 79:
            						case 81:
            						case 83:
            						case 84:
            						case 86:
            						case 87:
            						case 89:
            						case 90:
            						case 91:
            						case 92:
            							{
            								alt38=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 38 );
            						    ex->set_state( 24 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case VOID_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt38=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt38=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 38 );
            														    ex->set_state( 36 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case AT:
            												case BACKGROUND:
            												case DEFER:
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACE:
            												case LBRACKET:
            												case LOW_PRIORITY:
            												case LSQBRACKET:
            												case QUESTION:
            												case SLICETOK:
            												case SSOR:
            												case 72:
            												case 73:
            												case 75:
            												case 76:
            												case 77:
            												case 79:
            												case 81:
            												case 83:
            												case 84:
            												case 86:
            												case 87:
            												case 89:
            												case 90:
            												case 91:
            												case 92:
            													{
            														alt38=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 38 );
            												    ex->set_state( 59 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 38 );
            										    ex->set_state( 56 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 38 );
            								    ex->set_state( 37 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt38=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 38 );
            						    ex->set_state( 25 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case INT_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt38=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt38=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 38 );
            														    ex->set_state( 36 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case AT:
            												case BACKGROUND:
            												case DEFER:
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACE:
            												case LBRACKET:
            												case LOW_PRIORITY:
            												case LSQBRACKET:
            												case QUESTION:
            												case SLICETOK:
            												case SSOR:
            												case 72:
            												case 73:
            												case 75:
            												case 76:
            												case 77:
            												case 79:
            												case 81:
            												case 83:
            												case 84:
            												case 86:
            												case 87:
            												case 89:
            												case 90:
            												case 91:
            												case 92:
            													{
            														alt38=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 38 );
            												    ex->set_state( 59 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 38 );
            										    ex->set_state( 56 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 38 );
            								    ex->set_state( 37 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt38=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 38 );
            						    ex->set_state( 26 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case SIZE_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt38=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt38=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 38 );
            														    ex->set_state( 36 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case AT:
            												case BACKGROUND:
            												case DEFER:
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACE:
            												case LBRACKET:
            												case LOW_PRIORITY:
            												case LSQBRACKET:
            												case QUESTION:
            												case SLICETOK:
            												case SSOR:
            												case 72:
            												case 73:
            												case 75:
            												case 76:
            												case 77:
            												case 79:
            												case 81:
            												case 83:
            												case 84:
            												case 86:
            												case 87:
            												case 89:
            												case 90:
            												case 91:
            												case 92:
            													{
            														alt38=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 38 );
            												    ex->set_state( 59 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 38 );
            										    ex->set_state( 56 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 38 );
            								    ex->set_state( 37 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt38=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 38 );
            						    ex->set_state( 27 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case FLOAT_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt38=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt38=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 38 );
            														    ex->set_state( 36 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case AT:
            												case BACKGROUND:
            												case DEFER:
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACE:
            												case LBRACKET:
            												case LOW_PRIORITY:
            												case LSQBRACKET:
            												case QUESTION:
            												case SLICETOK:
            												case SSOR:
            												case 72:
            												case 73:
            												case 75:
            												case 76:
            												case 77:
            												case 79:
            												case 81:
            												case 83:
            												case 84:
            												case 86:
            												case 87:
            												case 89:
            												case 90:
            												case 91:
            												case 92:
            													{
            														alt38=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 38 );
            												    ex->set_state( 59 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 38 );
            										    ex->set_state( 56 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 38 );
            								    ex->set_state( 37 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt38=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 38 );
            						    ex->set_state( 28 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case CHAR_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt38=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt38=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 38 );
            														    ex->set_state( 36 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case AT:
            												case BACKGROUND:
            												case DEFER:
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACE:
            												case LBRACKET:
            												case LOW_PRIORITY:
            												case LSQBRACKET:
            												case QUESTION:
            												case SLICETOK:
            												case SSOR:
            												case 72:
            												case 73:
            												case 75:
            												case 76:
            												case 77:
            												case 79:
            												case 81:
            												case 83:
            												case 84:
            												case 86:
            												case 87:
            												case 89:
            												case 90:
            												case 91:
            												case 92:
            													{
            														alt38=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 38 );
            												    ex->set_state( 59 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 38 );
            										    ex->set_state( 56 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 38 );
            								    ex->set_state( 37 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt38=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 38 );
            						    ex->set_state( 29 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case BOOL_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt38=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt38=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 38 );
            														    ex->set_state( 36 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case AT:
            												case BACKGROUND:
            												case DEFER:
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACE:
            												case LBRACKET:
            												case LOW_PRIORITY:
            												case LSQBRACKET:
            												case QUESTION:
            												case SLICETOK:
            												case SSOR:
            												case 72:
            												case 73:
            												case 75:
            												case 76:
            												case 77:
            												case 79:
            												case 81:
            												case 83:
            												case 84:
            												case 86:
            												case 87:
            												case 89:
            												case 90:
            												case 91:
            												case 92:
            													{
            														alt38=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 38 );
            												    ex->set_state( 59 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 38 );
            										    ex->set_state( 56 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 38 );
            								    ex->set_state( 37 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt38=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 38 );
            						    ex->set_state( 30 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case CPTR_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt38=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt38=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 38 );
            														    ex->set_state( 36 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case AT:
            												case BACKGROUND:
            												case DEFER:
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACE:
            												case LBRACKET:
            												case LOW_PRIORITY:
            												case LSQBRACKET:
            												case QUESTION:
            												case SLICETOK:
            												case SSOR:
            												case 72:
            												case 73:
            												case 75:
            												case 76:
            												case 77:
            												case 79:
            												case 81:
            												case 83:
            												case 84:
            												case 86:
            												case 87:
            												case 89:
            												case 90:
            												case 91:
            												case 92:
            													{
            														alt38=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 38 );
            												    ex->set_state( 59 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 38 );
            										    ex->set_state( 56 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 38 );
            								    ex->set_state( 37 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt38=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 38 );
            						    ex->set_state( 31 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case STRING_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt38=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt38=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 38 );
            														    ex->set_state( 36 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case AT:
            												case BACKGROUND:
            												case DEFER:
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACE:
            												case LBRACKET:
            												case LOW_PRIORITY:
            												case LSQBRACKET:
            												case QUESTION:
            												case SLICETOK:
            												case SSOR:
            												case 72:
            												case 73:
            												case 75:
            												case 76:
            												case 77:
            												case 79:
            												case 81:
            												case 83:
            												case 84:
            												case 86:
            												case 87:
            												case 89:
            												case 90:
            												case 91:
            												case 92:
            													{
            														alt38=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 38 );
            												    ex->set_state( 59 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 38 );
            										    ex->set_state( 56 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 38 );
            								    ex->set_state( 37 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt38=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 38 );
            						    ex->set_state( 32 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case DOUBDEC:
            				case DOUBINC:
            				case ID:
            				case LBRACKET:
            				case LENGTH:
            				case RESOURCE:
            				case SHARED_REF:
            				case TYPE:
            				case 71:
            				case 81:
            					{
            						alt38=2;
            					}
            				    break;

            				default:
            				    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 38 );
            				    ex->set_state( 13 );


            				    goto ruleinstructionScalarEx;

            				}

            			}
            		    break;
            		case DLSQBRACKET:
            			{
            				switch ( this->LA(3) )
            				{
            				case DRSQBRACKET:
            					{
            						switch ( this->LA(4) )
            						{
            						case ID:
            							{
            								alt38=1;
            							}
            						    break;
            						case LBRACKET:
            							{
            								alt38=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 38 );
            						    ex->set_state( 33 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case BOOL:
            				case BOOL_TYPE:
            				case CHAR:
            				case CHAR_TYPE:
            				case CPTR_TYPE:
            				case DOUBDEC:
            				case DOUBINC:
            				case FLOAT:
            				case FLOAT_TYPE:
            				case ID:
            				case INT:
            				case INT_TYPE:
            				case LBRACKET:
            				case LENGTH:
            				case NULLTOK:
            				case RESOURCE:
            				case SHARED_REF:
            				case SIZE:
            				case SIZE_TYPE:
            				case STRING:
            				case STRING_TYPE:
            				case THIS_TOK:
            				case TYPE:
            				case VOID_TYPE:
            				case 71:
            				case 81:
            					{
            						alt38=2;
            					}
            				    break;

            				default:
            				    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 38 );
            				    ex->set_state( 14 );


            				    goto ruleinstructionScalarEx;

            				}

            			}
            		    break;
            		case LBRACE:
            		case LBRACKET:
            			{
            				alt38=2;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 38 );
            		    ex->set_state( 2 );


            		    goto ruleinstructionScalarEx;

            		}

            	}
                break;
            case SIZE_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case ID:
            		case SLICETOK:
            		case SSOR:
            			{
            				alt38=1;
            			}
            		    break;
            		case LSQBRACKET:
            			{
            				switch ( this->LA(3) )
            				{
            				case RSQBRACKET:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACKET:
            							{
            								alt38=2;
            							}
            						    break;
            						case ID:
            							{
            								alt38=1;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 38 );
            						    ex->set_state( 16 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case INT:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt38=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt38=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 38 );
            								    ex->set_state( 36 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case AT:
            						case BACKGROUND:
            						case DEFER:
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACE:
            						case LBRACKET:
            						case LOW_PRIORITY:
            						case LSQBRACKET:
            						case QUESTION:
            						case SLICETOK:
            						case SSOR:
            						case 72:
            						case 73:
            						case 75:
            						case 76:
            						case 77:
            						case 79:
            						case 81:
            						case 83:
            						case 84:
            						case 86:
            						case 87:
            						case 89:
            						case 90:
            						case 91:
            						case 92:
            							{
            								alt38=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 38 );
            						    ex->set_state( 17 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case SIZE:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt38=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt38=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 38 );
            								    ex->set_state( 36 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case AT:
            						case BACKGROUND:
            						case DEFER:
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACE:
            						case LBRACKET:
            						case LOW_PRIORITY:
            						case LSQBRACKET:
            						case QUESTION:
            						case SLICETOK:
            						case SSOR:
            						case 72:
            						case 73:
            						case 75:
            						case 76:
            						case 77:
            						case 79:
            						case 81:
            						case 83:
            						case 84:
            						case 86:
            						case 87:
            						case 89:
            						case 90:
            						case 91:
            						case 92:
            							{
            								alt38=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 38 );
            						    ex->set_state( 18 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case FLOAT:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt38=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt38=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 38 );
            								    ex->set_state( 36 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case AT:
            						case BACKGROUND:
            						case DEFER:
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACE:
            						case LBRACKET:
            						case LOW_PRIORITY:
            						case LSQBRACKET:
            						case QUESTION:
            						case SLICETOK:
            						case SSOR:
            						case 72:
            						case 73:
            						case 75:
            						case 76:
            						case 77:
            						case 79:
            						case 81:
            						case 83:
            						case 84:
            						case 86:
            						case 87:
            						case 89:
            						case 90:
            						case 91:
            						case 92:
            							{
            								alt38=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 38 );
            						    ex->set_state( 19 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case CHAR:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt38=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt38=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 38 );
            								    ex->set_state( 36 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case AT:
            						case BACKGROUND:
            						case DEFER:
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACE:
            						case LBRACKET:
            						case LOW_PRIORITY:
            						case LSQBRACKET:
            						case QUESTION:
            						case SLICETOK:
            						case SSOR:
            						case 72:
            						case 73:
            						case 75:
            						case 76:
            						case 77:
            						case 79:
            						case 81:
            						case 83:
            						case 84:
            						case 86:
            						case 87:
            						case 89:
            						case 90:
            						case 91:
            						case 92:
            							{
            								alt38=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 38 );
            						    ex->set_state( 20 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case STRING:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt38=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt38=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 38 );
            								    ex->set_state( 36 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case AT:
            						case BACKGROUND:
            						case DEFER:
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACE:
            						case LBRACKET:
            						case LOW_PRIORITY:
            						case LSQBRACKET:
            						case QUESTION:
            						case SLICETOK:
            						case SSOR:
            						case 72:
            						case 73:
            						case 75:
            						case 76:
            						case 77:
            						case 79:
            						case 81:
            						case 83:
            						case 84:
            						case 86:
            						case 87:
            						case 89:
            						case 90:
            						case 91:
            						case 92:
            							{
            								alt38=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 38 );
            						    ex->set_state( 21 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case BOOL:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt38=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt38=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 38 );
            								    ex->set_state( 36 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case AT:
            						case BACKGROUND:
            						case DEFER:
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACE:
            						case LBRACKET:
            						case LOW_PRIORITY:
            						case LSQBRACKET:
            						case QUESTION:
            						case SLICETOK:
            						case SSOR:
            						case 72:
            						case 73:
            						case 75:
            						case 76:
            						case 77:
            						case 79:
            						case 81:
            						case 83:
            						case 84:
            						case 86:
            						case 87:
            						case 89:
            						case 90:
            						case 91:
            						case 92:
            							{
            								alt38=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 38 );
            						    ex->set_state( 22 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case NULLTOK:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt38=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt38=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 38 );
            								    ex->set_state( 36 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case AT:
            						case BACKGROUND:
            						case DEFER:
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACE:
            						case LBRACKET:
            						case LOW_PRIORITY:
            						case LSQBRACKET:
            						case QUESTION:
            						case SLICETOK:
            						case SSOR:
            						case 72:
            						case 73:
            						case 75:
            						case 76:
            						case 77:
            						case 79:
            						case 81:
            						case 83:
            						case 84:
            						case 86:
            						case 87:
            						case 89:
            						case 90:
            						case 91:
            						case 92:
            							{
            								alt38=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 38 );
            						    ex->set_state( 23 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case THIS_TOK:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt38=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt38=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 38 );
            								    ex->set_state( 36 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case AT:
            						case BACKGROUND:
            						case DEFER:
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACE:
            						case LBRACKET:
            						case LOW_PRIORITY:
            						case LSQBRACKET:
            						case QUESTION:
            						case SLICETOK:
            						case SSOR:
            						case 72:
            						case 73:
            						case 75:
            						case 76:
            						case 77:
            						case 79:
            						case 81:
            						case 83:
            						case 84:
            						case 86:
            						case 87:
            						case 89:
            						case 90:
            						case 91:
            						case 92:
            							{
            								alt38=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 38 );
            						    ex->set_state( 24 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case VOID_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt38=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt38=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 38 );
            														    ex->set_state( 36 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case AT:
            												case BACKGROUND:
            												case DEFER:
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACE:
            												case LBRACKET:
            												case LOW_PRIORITY:
            												case LSQBRACKET:
            												case QUESTION:
            												case SLICETOK:
            												case SSOR:
            												case 72:
            												case 73:
            												case 75:
            												case 76:
            												case 77:
            												case 79:
            												case 81:
            												case 83:
            												case 84:
            												case 86:
            												case 87:
            												case 89:
            												case 90:
            												case 91:
            												case 92:
            													{
            														alt38=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 38 );
            												    ex->set_state( 59 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 38 );
            										    ex->set_state( 56 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 38 );
            								    ex->set_state( 37 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt38=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 38 );
            						    ex->set_state( 25 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case INT_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt38=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt38=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 38 );
            														    ex->set_state( 36 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case AT:
            												case BACKGROUND:
            												case DEFER:
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACE:
            												case LBRACKET:
            												case LOW_PRIORITY:
            												case LSQBRACKET:
            												case QUESTION:
            												case SLICETOK:
            												case SSOR:
            												case 72:
            												case 73:
            												case 75:
            												case 76:
            												case 77:
            												case 79:
            												case 81:
            												case 83:
            												case 84:
            												case 86:
            												case 87:
            												case 89:
            												case 90:
            												case 91:
            												case 92:
            													{
            														alt38=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 38 );
            												    ex->set_state( 59 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 38 );
            										    ex->set_state( 56 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 38 );
            								    ex->set_state( 37 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt38=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 38 );
            						    ex->set_state( 26 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case SIZE_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt38=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt38=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 38 );
            														    ex->set_state( 36 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case AT:
            												case BACKGROUND:
            												case DEFER:
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACE:
            												case LBRACKET:
            												case LOW_PRIORITY:
            												case LSQBRACKET:
            												case QUESTION:
            												case SLICETOK:
            												case SSOR:
            												case 72:
            												case 73:
            												case 75:
            												case 76:
            												case 77:
            												case 79:
            												case 81:
            												case 83:
            												case 84:
            												case 86:
            												case 87:
            												case 89:
            												case 90:
            												case 91:
            												case 92:
            													{
            														alt38=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 38 );
            												    ex->set_state( 59 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 38 );
            										    ex->set_state( 56 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 38 );
            								    ex->set_state( 37 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt38=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 38 );
            						    ex->set_state( 27 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case FLOAT_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt38=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt38=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 38 );
            														    ex->set_state( 36 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case AT:
            												case BACKGROUND:
            												case DEFER:
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACE:
            												case LBRACKET:
            												case LOW_PRIORITY:
            												case LSQBRACKET:
            												case QUESTION:
            												case SLICETOK:
            												case SSOR:
            												case 72:
            												case 73:
            												case 75:
            												case 76:
            												case 77:
            												case 79:
            												case 81:
            												case 83:
            												case 84:
            												case 86:
            												case 87:
            												case 89:
            												case 90:
            												case 91:
            												case 92:
            													{
            														alt38=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 38 );
            												    ex->set_state( 59 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 38 );
            										    ex->set_state( 56 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 38 );
            								    ex->set_state( 37 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt38=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 38 );
            						    ex->set_state( 28 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case CHAR_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt38=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt38=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 38 );
            														    ex->set_state( 36 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case AT:
            												case BACKGROUND:
            												case DEFER:
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACE:
            												case LBRACKET:
            												case LOW_PRIORITY:
            												case LSQBRACKET:
            												case QUESTION:
            												case SLICETOK:
            												case SSOR:
            												case 72:
            												case 73:
            												case 75:
            												case 76:
            												case 77:
            												case 79:
            												case 81:
            												case 83:
            												case 84:
            												case 86:
            												case 87:
            												case 89:
            												case 90:
            												case 91:
            												case 92:
            													{
            														alt38=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 38 );
            												    ex->set_state( 59 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 38 );
            										    ex->set_state( 56 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 38 );
            								    ex->set_state( 37 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt38=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 38 );
            						    ex->set_state( 29 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case BOOL_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt38=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt38=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 38 );
            														    ex->set_state( 36 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case AT:
            												case BACKGROUND:
            												case DEFER:
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACE:
            												case LBRACKET:
            												case LOW_PRIORITY:
            												case LSQBRACKET:
            												case QUESTION:
            												case SLICETOK:
            												case SSOR:
            												case 72:
            												case 73:
            												case 75:
            												case 76:
            												case 77:
            												case 79:
            												case 81:
            												case 83:
            												case 84:
            												case 86:
            												case 87:
            												case 89:
            												case 90:
            												case 91:
            												case 92:
            													{
            														alt38=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 38 );
            												    ex->set_state( 59 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 38 );
            										    ex->set_state( 56 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 38 );
            								    ex->set_state( 37 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt38=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 38 );
            						    ex->set_state( 30 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case CPTR_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt38=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt38=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 38 );
            														    ex->set_state( 36 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case AT:
            												case BACKGROUND:
            												case DEFER:
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACE:
            												case LBRACKET:
            												case LOW_PRIORITY:
            												case LSQBRACKET:
            												case QUESTION:
            												case SLICETOK:
            												case SSOR:
            												case 72:
            												case 73:
            												case 75:
            												case 76:
            												case 77:
            												case 79:
            												case 81:
            												case 83:
            												case 84:
            												case 86:
            												case 87:
            												case 89:
            												case 90:
            												case 91:
            												case 92:
            													{
            														alt38=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 38 );
            												    ex->set_state( 59 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 38 );
            										    ex->set_state( 56 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 38 );
            								    ex->set_state( 37 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt38=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 38 );
            						    ex->set_state( 31 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case STRING_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt38=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt38=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 38 );
            														    ex->set_state( 36 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case AT:
            												case BACKGROUND:
            												case DEFER:
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACE:
            												case LBRACKET:
            												case LOW_PRIORITY:
            												case LSQBRACKET:
            												case QUESTION:
            												case SLICETOK:
            												case SSOR:
            												case 72:
            												case 73:
            												case 75:
            												case 76:
            												case 77:
            												case 79:
            												case 81:
            												case 83:
            												case 84:
            												case 86:
            												case 87:
            												case 89:
            												case 90:
            												case 91:
            												case 92:
            													{
            														alt38=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 38 );
            												    ex->set_state( 59 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 38 );
            										    ex->set_state( 56 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 38 );
            								    ex->set_state( 37 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt38=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 38 );
            						    ex->set_state( 32 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case DOUBDEC:
            				case DOUBINC:
            				case ID:
            				case LBRACKET:
            				case LENGTH:
            				case RESOURCE:
            				case SHARED_REF:
            				case TYPE:
            				case 71:
            				case 81:
            					{
            						alt38=2;
            					}
            				    break;

            				default:
            				    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 38 );
            				    ex->set_state( 13 );


            				    goto ruleinstructionScalarEx;

            				}

            			}
            		    break;
            		case DLSQBRACKET:
            			{
            				switch ( this->LA(3) )
            				{
            				case DRSQBRACKET:
            					{
            						switch ( this->LA(4) )
            						{
            						case ID:
            							{
            								alt38=1;
            							}
            						    break;
            						case LBRACKET:
            							{
            								alt38=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 38 );
            						    ex->set_state( 33 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case BOOL:
            				case BOOL_TYPE:
            				case CHAR:
            				case CHAR_TYPE:
            				case CPTR_TYPE:
            				case DOUBDEC:
            				case DOUBINC:
            				case FLOAT:
            				case FLOAT_TYPE:
            				case ID:
            				case INT:
            				case INT_TYPE:
            				case LBRACKET:
            				case LENGTH:
            				case NULLTOK:
            				case RESOURCE:
            				case SHARED_REF:
            				case SIZE:
            				case SIZE_TYPE:
            				case STRING:
            				case STRING_TYPE:
            				case THIS_TOK:
            				case TYPE:
            				case VOID_TYPE:
            				case 71:
            				case 81:
            					{
            						alt38=2;
            					}
            				    break;

            				default:
            				    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 38 );
            				    ex->set_state( 14 );


            				    goto ruleinstructionScalarEx;

            				}

            			}
            		    break;
            		case LBRACE:
            		case LBRACKET:
            			{
            				alt38=2;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 38 );
            		    ex->set_state( 3 );


            		    goto ruleinstructionScalarEx;

            		}

            	}
                break;
            case FLOAT_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case ID:
            		case SLICETOK:
            		case SSOR:
            			{
            				alt38=1;
            			}
            		    break;
            		case LSQBRACKET:
            			{
            				switch ( this->LA(3) )
            				{
            				case RSQBRACKET:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACKET:
            							{
            								alt38=2;
            							}
            						    break;
            						case ID:
            							{
            								alt38=1;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 38 );
            						    ex->set_state( 16 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case INT:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt38=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt38=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 38 );
            								    ex->set_state( 36 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case AT:
            						case BACKGROUND:
            						case DEFER:
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACE:
            						case LBRACKET:
            						case LOW_PRIORITY:
            						case LSQBRACKET:
            						case QUESTION:
            						case SLICETOK:
            						case SSOR:
            						case 72:
            						case 73:
            						case 75:
            						case 76:
            						case 77:
            						case 79:
            						case 81:
            						case 83:
            						case 84:
            						case 86:
            						case 87:
            						case 89:
            						case 90:
            						case 91:
            						case 92:
            							{
            								alt38=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 38 );
            						    ex->set_state( 17 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case SIZE:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt38=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt38=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 38 );
            								    ex->set_state( 36 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case AT:
            						case BACKGROUND:
            						case DEFER:
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACE:
            						case LBRACKET:
            						case LOW_PRIORITY:
            						case LSQBRACKET:
            						case QUESTION:
            						case SLICETOK:
            						case SSOR:
            						case 72:
            						case 73:
            						case 75:
            						case 76:
            						case 77:
            						case 79:
            						case 81:
            						case 83:
            						case 84:
            						case 86:
            						case 87:
            						case 89:
            						case 90:
            						case 91:
            						case 92:
            							{
            								alt38=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 38 );
            						    ex->set_state( 18 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case FLOAT:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt38=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt38=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 38 );
            								    ex->set_state( 36 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case AT:
            						case BACKGROUND:
            						case DEFER:
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACE:
            						case LBRACKET:
            						case LOW_PRIORITY:
            						case LSQBRACKET:
            						case QUESTION:
            						case SLICETOK:
            						case SSOR:
            						case 72:
            						case 73:
            						case 75:
            						case 76:
            						case 77:
            						case 79:
            						case 81:
            						case 83:
            						case 84:
            						case 86:
            						case 87:
            						case 89:
            						case 90:
            						case 91:
            						case 92:
            							{
            								alt38=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 38 );
            						    ex->set_state( 19 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case CHAR:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt38=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt38=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 38 );
            								    ex->set_state( 36 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case AT:
            						case BACKGROUND:
            						case DEFER:
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACE:
            						case LBRACKET:
            						case LOW_PRIORITY:
            						case LSQBRACKET:
            						case QUESTION:
            						case SLICETOK:
            						case SSOR:
            						case 72:
            						case 73:
            						case 75:
            						case 76:
            						case 77:
            						case 79:
            						case 81:
            						case 83:
            						case 84:
            						case 86:
            						case 87:
            						case 89:
            						case 90:
            						case 91:
            						case 92:
            							{
            								alt38=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 38 );
            						    ex->set_state( 20 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case STRING:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt38=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt38=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 38 );
            								    ex->set_state( 36 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case AT:
            						case BACKGROUND:
            						case DEFER:
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACE:
            						case LBRACKET:
            						case LOW_PRIORITY:
            						case LSQBRACKET:
            						case QUESTION:
            						case SLICETOK:
            						case SSOR:
            						case 72:
            						case 73:
            						case 75:
            						case 76:
            						case 77:
            						case 79:
            						case 81:
            						case 83:
            						case 84:
            						case 86:
            						case 87:
            						case 89:
            						case 90:
            						case 91:
            						case 92:
            							{
            								alt38=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 38 );
            						    ex->set_state( 21 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case BOOL:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt38=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt38=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 38 );
            								    ex->set_state( 36 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case AT:
            						case BACKGROUND:
            						case DEFER:
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACE:
            						case LBRACKET:
            						case LOW_PRIORITY:
            						case LSQBRACKET:
            						case QUESTION:
            						case SLICETOK:
            						case SSOR:
            						case 72:
            						case 73:
            						case 75:
            						case 76:
            						case 77:
            						case 79:
            						case 81:
            						case 83:
            						case 84:
            						case 86:
            						case 87:
            						case 89:
            						case 90:
            						case 91:
            						case 92:
            							{
            								alt38=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 38 );
            						    ex->set_state( 22 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case NULLTOK:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt38=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt38=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 38 );
            								    ex->set_state( 36 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case AT:
            						case BACKGROUND:
            						case DEFER:
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACE:
            						case LBRACKET:
            						case LOW_PRIORITY:
            						case LSQBRACKET:
            						case QUESTION:
            						case SLICETOK:
            						case SSOR:
            						case 72:
            						case 73:
            						case 75:
            						case 76:
            						case 77:
            						case 79:
            						case 81:
            						case 83:
            						case 84:
            						case 86:
            						case 87:
            						case 89:
            						case 90:
            						case 91:
            						case 92:
            							{
            								alt38=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 38 );
            						    ex->set_state( 23 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case THIS_TOK:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt38=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt38=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 38 );
            								    ex->set_state( 36 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case AT:
            						case BACKGROUND:
            						case DEFER:
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACE:
            						case LBRACKET:
            						case LOW_PRIORITY:
            						case LSQBRACKET:
            						case QUESTION:
            						case SLICETOK:
            						case SSOR:
            						case 72:
            						case 73:
            						case 75:
            						case 76:
            						case 77:
            						case 79:
            						case 81:
            						case 83:
            						case 84:
            						case 86:
            						case 87:
            						case 89:
            						case 90:
            						case 91:
            						case 92:
            							{
            								alt38=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 38 );
            						    ex->set_state( 24 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case VOID_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt38=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt38=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 38 );
            														    ex->set_state( 36 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case AT:
            												case BACKGROUND:
            												case DEFER:
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACE:
            												case LBRACKET:
            												case LOW_PRIORITY:
            												case LSQBRACKET:
            												case QUESTION:
            												case SLICETOK:
            												case SSOR:
            												case 72:
            												case 73:
            												case 75:
            												case 76:
            												case 77:
            												case 79:
            												case 81:
            												case 83:
            												case 84:
            												case 86:
            												case 87:
            												case 89:
            												case 90:
            												case 91:
            												case 92:
            													{
            														alt38=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 38 );
            												    ex->set_state( 59 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 38 );
            										    ex->set_state( 56 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 38 );
            								    ex->set_state( 37 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt38=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 38 );
            						    ex->set_state( 25 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case INT_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt38=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt38=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 38 );
            														    ex->set_state( 36 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case AT:
            												case BACKGROUND:
            												case DEFER:
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACE:
            												case LBRACKET:
            												case LOW_PRIORITY:
            												case LSQBRACKET:
            												case QUESTION:
            												case SLICETOK:
            												case SSOR:
            												case 72:
            												case 73:
            												case 75:
            												case 76:
            												case 77:
            												case 79:
            												case 81:
            												case 83:
            												case 84:
            												case 86:
            												case 87:
            												case 89:
            												case 90:
            												case 91:
            												case 92:
            													{
            														alt38=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 38 );
            												    ex->set_state( 59 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 38 );
            										    ex->set_state( 56 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 38 );
            								    ex->set_state( 37 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt38=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 38 );
            						    ex->set_state( 26 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case SIZE_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt38=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt38=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 38 );
            														    ex->set_state( 36 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case AT:
            												case BACKGROUND:
            												case DEFER:
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACE:
            												case LBRACKET:
            												case LOW_PRIORITY:
            												case LSQBRACKET:
            												case QUESTION:
            												case SLICETOK:
            												case SSOR:
            												case 72:
            												case 73:
            												case 75:
            												case 76:
            												case 77:
            												case 79:
            												case 81:
            												case 83:
            												case 84:
            												case 86:
            												case 87:
            												case 89:
            												case 90:
            												case 91:
            												case 92:
            													{
            														alt38=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 38 );
            												    ex->set_state( 59 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 38 );
            										    ex->set_state( 56 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 38 );
            								    ex->set_state( 37 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt38=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 38 );
            						    ex->set_state( 27 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case FLOAT_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt38=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt38=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 38 );
            														    ex->set_state( 36 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case AT:
            												case BACKGROUND:
            												case DEFER:
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACE:
            												case LBRACKET:
            												case LOW_PRIORITY:
            												case LSQBRACKET:
            												case QUESTION:
            												case SLICETOK:
            												case SSOR:
            												case 72:
            												case 73:
            												case 75:
            												case 76:
            												case 77:
            												case 79:
            												case 81:
            												case 83:
            												case 84:
            												case 86:
            												case 87:
            												case 89:
            												case 90:
            												case 91:
            												case 92:
            													{
            														alt38=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 38 );
            												    ex->set_state( 59 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 38 );
            										    ex->set_state( 56 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 38 );
            								    ex->set_state( 37 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt38=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 38 );
            						    ex->set_state( 28 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case CHAR_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt38=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt38=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 38 );
            														    ex->set_state( 36 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case AT:
            												case BACKGROUND:
            												case DEFER:
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACE:
            												case LBRACKET:
            												case LOW_PRIORITY:
            												case LSQBRACKET:
            												case QUESTION:
            												case SLICETOK:
            												case SSOR:
            												case 72:
            												case 73:
            												case 75:
            												case 76:
            												case 77:
            												case 79:
            												case 81:
            												case 83:
            												case 84:
            												case 86:
            												case 87:
            												case 89:
            												case 90:
            												case 91:
            												case 92:
            													{
            														alt38=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 38 );
            												    ex->set_state( 59 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 38 );
            										    ex->set_state( 56 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 38 );
            								    ex->set_state( 37 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt38=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 38 );
            						    ex->set_state( 29 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case BOOL_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt38=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt38=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 38 );
            														    ex->set_state( 36 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case AT:
            												case BACKGROUND:
            												case DEFER:
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACE:
            												case LBRACKET:
            												case LOW_PRIORITY:
            												case LSQBRACKET:
            												case QUESTION:
            												case SLICETOK:
            												case SSOR:
            												case 72:
            												case 73:
            												case 75:
            												case 76:
            												case 77:
            												case 79:
            												case 81:
            												case 83:
            												case 84:
            												case 86:
            												case 87:
            												case 89:
            												case 90:
            												case 91:
            												case 92:
            													{
            														alt38=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 38 );
            												    ex->set_state( 59 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 38 );
            										    ex->set_state( 56 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 38 );
            								    ex->set_state( 37 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt38=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 38 );
            						    ex->set_state( 30 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case CPTR_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt38=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt38=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 38 );
            														    ex->set_state( 36 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case AT:
            												case BACKGROUND:
            												case DEFER:
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACE:
            												case LBRACKET:
            												case LOW_PRIORITY:
            												case LSQBRACKET:
            												case QUESTION:
            												case SLICETOK:
            												case SSOR:
            												case 72:
            												case 73:
            												case 75:
            												case 76:
            												case 77:
            												case 79:
            												case 81:
            												case 83:
            												case 84:
            												case 86:
            												case 87:
            												case 89:
            												case 90:
            												case 91:
            												case 92:
            													{
            														alt38=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 38 );
            												    ex->set_state( 59 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 38 );
            										    ex->set_state( 56 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 38 );
            								    ex->set_state( 37 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt38=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 38 );
            						    ex->set_state( 31 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case STRING_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt38=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt38=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 38 );
            														    ex->set_state( 36 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case AT:
            												case BACKGROUND:
            												case DEFER:
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACE:
            												case LBRACKET:
            												case LOW_PRIORITY:
            												case LSQBRACKET:
            												case QUESTION:
            												case SLICETOK:
            												case SSOR:
            												case 72:
            												case 73:
            												case 75:
            												case 76:
            												case 77:
            												case 79:
            												case 81:
            												case 83:
            												case 84:
            												case 86:
            												case 87:
            												case 89:
            												case 90:
            												case 91:
            												case 92:
            													{
            														alt38=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 38 );
            												    ex->set_state( 59 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 38 );
            										    ex->set_state( 56 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 38 );
            								    ex->set_state( 37 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt38=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 38 );
            						    ex->set_state( 32 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case DOUBDEC:
            				case DOUBINC:
            				case ID:
            				case LBRACKET:
            				case LENGTH:
            				case RESOURCE:
            				case SHARED_REF:
            				case TYPE:
            				case 71:
            				case 81:
            					{
            						alt38=2;
            					}
            				    break;

            				default:
            				    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 38 );
            				    ex->set_state( 13 );


            				    goto ruleinstructionScalarEx;

            				}

            			}
            		    break;
            		case DLSQBRACKET:
            			{
            				switch ( this->LA(3) )
            				{
            				case DRSQBRACKET:
            					{
            						switch ( this->LA(4) )
            						{
            						case ID:
            							{
            								alt38=1;
            							}
            						    break;
            						case LBRACKET:
            							{
            								alt38=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 38 );
            						    ex->set_state( 33 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case BOOL:
            				case BOOL_TYPE:
            				case CHAR:
            				case CHAR_TYPE:
            				case CPTR_TYPE:
            				case DOUBDEC:
            				case DOUBINC:
            				case FLOAT:
            				case FLOAT_TYPE:
            				case ID:
            				case INT:
            				case INT_TYPE:
            				case LBRACKET:
            				case LENGTH:
            				case NULLTOK:
            				case RESOURCE:
            				case SHARED_REF:
            				case SIZE:
            				case SIZE_TYPE:
            				case STRING:
            				case STRING_TYPE:
            				case THIS_TOK:
            				case TYPE:
            				case VOID_TYPE:
            				case 71:
            				case 81:
            					{
            						alt38=2;
            					}
            				    break;

            				default:
            				    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 38 );
            				    ex->set_state( 14 );


            				    goto ruleinstructionScalarEx;

            				}

            			}
            		    break;
            		case LBRACE:
            		case LBRACKET:
            			{
            				alt38=2;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 38 );
            		    ex->set_state( 4 );


            		    goto ruleinstructionScalarEx;

            		}

            	}
                break;
            case CHAR_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case ID:
            		case SLICETOK:
            		case SSOR:
            			{
            				alt38=1;
            			}
            		    break;
            		case LSQBRACKET:
            			{
            				switch ( this->LA(3) )
            				{
            				case RSQBRACKET:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACKET:
            							{
            								alt38=2;
            							}
            						    break;
            						case ID:
            							{
            								alt38=1;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 38 );
            						    ex->set_state( 16 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case INT:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt38=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt38=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 38 );
            								    ex->set_state( 36 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case AT:
            						case BACKGROUND:
            						case DEFER:
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACE:
            						case LBRACKET:
            						case LOW_PRIORITY:
            						case LSQBRACKET:
            						case QUESTION:
            						case SLICETOK:
            						case SSOR:
            						case 72:
            						case 73:
            						case 75:
            						case 76:
            						case 77:
            						case 79:
            						case 81:
            						case 83:
            						case 84:
            						case 86:
            						case 87:
            						case 89:
            						case 90:
            						case 91:
            						case 92:
            							{
            								alt38=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 38 );
            						    ex->set_state( 17 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case SIZE:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt38=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt38=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 38 );
            								    ex->set_state( 36 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case AT:
            						case BACKGROUND:
            						case DEFER:
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACE:
            						case LBRACKET:
            						case LOW_PRIORITY:
            						case LSQBRACKET:
            						case QUESTION:
            						case SLICETOK:
            						case SSOR:
            						case 72:
            						case 73:
            						case 75:
            						case 76:
            						case 77:
            						case 79:
            						case 81:
            						case 83:
            						case 84:
            						case 86:
            						case 87:
            						case 89:
            						case 90:
            						case 91:
            						case 92:
            							{
            								alt38=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 38 );
            						    ex->set_state( 18 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case FLOAT:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt38=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt38=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 38 );
            								    ex->set_state( 36 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case AT:
            						case BACKGROUND:
            						case DEFER:
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACE:
            						case LBRACKET:
            						case LOW_PRIORITY:
            						case LSQBRACKET:
            						case QUESTION:
            						case SLICETOK:
            						case SSOR:
            						case 72:
            						case 73:
            						case 75:
            						case 76:
            						case 77:
            						case 79:
            						case 81:
            						case 83:
            						case 84:
            						case 86:
            						case 87:
            						case 89:
            						case 90:
            						case 91:
            						case 92:
            							{
            								alt38=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 38 );
            						    ex->set_state( 19 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case CHAR:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt38=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt38=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 38 );
            								    ex->set_state( 36 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case AT:
            						case BACKGROUND:
            						case DEFER:
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACE:
            						case LBRACKET:
            						case LOW_PRIORITY:
            						case LSQBRACKET:
            						case QUESTION:
            						case SLICETOK:
            						case SSOR:
            						case 72:
            						case 73:
            						case 75:
            						case 76:
            						case 77:
            						case 79:
            						case 81:
            						case 83:
            						case 84:
            						case 86:
            						case 87:
            						case 89:
            						case 90:
            						case 91:
            						case 92:
            							{
            								alt38=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 38 );
            						    ex->set_state( 20 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case STRING:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt38=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt38=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 38 );
            								    ex->set_state( 36 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case AT:
            						case BACKGROUND:
            						case DEFER:
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACE:
            						case LBRACKET:
            						case LOW_PRIORITY:
            						case LSQBRACKET:
            						case QUESTION:
            						case SLICETOK:
            						case SSOR:
            						case 72:
            						case 73:
            						case 75:
            						case 76:
            						case 77:
            						case 79:
            						case 81:
            						case 83:
            						case 84:
            						case 86:
            						case 87:
            						case 89:
            						case 90:
            						case 91:
            						case 92:
            							{
            								alt38=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 38 );
            						    ex->set_state( 21 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case BOOL:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt38=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt38=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 38 );
            								    ex->set_state( 36 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case AT:
            						case BACKGROUND:
            						case DEFER:
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACE:
            						case LBRACKET:
            						case LOW_PRIORITY:
            						case LSQBRACKET:
            						case QUESTION:
            						case SLICETOK:
            						case SSOR:
            						case 72:
            						case 73:
            						case 75:
            						case 76:
            						case 77:
            						case 79:
            						case 81:
            						case 83:
            						case 84:
            						case 86:
            						case 87:
            						case 89:
            						case 90:
            						case 91:
            						case 92:
            							{
            								alt38=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 38 );
            						    ex->set_state( 22 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case NULLTOK:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt38=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt38=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 38 );
            								    ex->set_state( 36 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case AT:
            						case BACKGROUND:
            						case DEFER:
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACE:
            						case LBRACKET:
            						case LOW_PRIORITY:
            						case LSQBRACKET:
            						case QUESTION:
            						case SLICETOK:
            						case SSOR:
            						case 72:
            						case 73:
            						case 75:
            						case 76:
            						case 77:
            						case 79:
            						case 81:
            						case 83:
            						case 84:
            						case 86:
            						case 87:
            						case 89:
            						case 90:
            						case 91:
            						case 92:
            							{
            								alt38=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 38 );
            						    ex->set_state( 23 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case THIS_TOK:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt38=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt38=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 38 );
            								    ex->set_state( 36 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case AT:
            						case BACKGROUND:
            						case DEFER:
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACE:
            						case LBRACKET:
            						case LOW_PRIORITY:
            						case LSQBRACKET:
            						case QUESTION:
            						case SLICETOK:
            						case SSOR:
            						case 72:
            						case 73:
            						case 75:
            						case 76:
            						case 77:
            						case 79:
            						case 81:
            						case 83:
            						case 84:
            						case 86:
            						case 87:
            						case 89:
            						case 90:
            						case 91:
            						case 92:
            							{
            								alt38=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 38 );
            						    ex->set_state( 24 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case VOID_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt38=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt38=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 38 );
            														    ex->set_state( 36 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case AT:
            												case BACKGROUND:
            												case DEFER:
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACE:
            												case LBRACKET:
            												case LOW_PRIORITY:
            												case LSQBRACKET:
            												case QUESTION:
            												case SLICETOK:
            												case SSOR:
            												case 72:
            												case 73:
            												case 75:
            												case 76:
            												case 77:
            												case 79:
            												case 81:
            												case 83:
            												case 84:
            												case 86:
            												case 87:
            												case 89:
            												case 90:
            												case 91:
            												case 92:
            													{
            														alt38=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 38 );
            												    ex->set_state( 59 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 38 );
            										    ex->set_state( 56 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 38 );
            								    ex->set_state( 37 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt38=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 38 );
            						    ex->set_state( 25 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case INT_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt38=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt38=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 38 );
            														    ex->set_state( 36 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case AT:
            												case BACKGROUND:
            												case DEFER:
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACE:
            												case LBRACKET:
            												case LOW_PRIORITY:
            												case LSQBRACKET:
            												case QUESTION:
            												case SLICETOK:
            												case SSOR:
            												case 72:
            												case 73:
            												case 75:
            												case 76:
            												case 77:
            												case 79:
            												case 81:
            												case 83:
            												case 84:
            												case 86:
            												case 87:
            												case 89:
            												case 90:
            												case 91:
            												case 92:
            													{
            														alt38=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 38 );
            												    ex->set_state( 59 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 38 );
            										    ex->set_state( 56 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 38 );
            								    ex->set_state( 37 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt38=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 38 );
            						    ex->set_state( 26 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case SIZE_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt38=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt38=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 38 );
            														    ex->set_state( 36 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case AT:
            												case BACKGROUND:
            												case DEFER:
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACE:
            												case LBRACKET:
            												case LOW_PRIORITY:
            												case LSQBRACKET:
            												case QUESTION:
            												case SLICETOK:
            												case SSOR:
            												case 72:
            												case 73:
            												case 75:
            												case 76:
            												case 77:
            												case 79:
            												case 81:
            												case 83:
            												case 84:
            												case 86:
            												case 87:
            												case 89:
            												case 90:
            												case 91:
            												case 92:
            													{
            														alt38=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 38 );
            												    ex->set_state( 59 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 38 );
            										    ex->set_state( 56 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 38 );
            								    ex->set_state( 37 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt38=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 38 );
            						    ex->set_state( 27 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case FLOAT_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt38=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt38=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 38 );
            														    ex->set_state( 36 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case AT:
            												case BACKGROUND:
            												case DEFER:
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACE:
            												case LBRACKET:
            												case LOW_PRIORITY:
            												case LSQBRACKET:
            												case QUESTION:
            												case SLICETOK:
            												case SSOR:
            												case 72:
            												case 73:
            												case 75:
            												case 76:
            												case 77:
            												case 79:
            												case 81:
            												case 83:
            												case 84:
            												case 86:
            												case 87:
            												case 89:
            												case 90:
            												case 91:
            												case 92:
            													{
            														alt38=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 38 );
            												    ex->set_state( 59 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 38 );
            										    ex->set_state( 56 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 38 );
            								    ex->set_state( 37 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt38=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 38 );
            						    ex->set_state( 28 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case CHAR_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt38=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt38=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 38 );
            														    ex->set_state( 36 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case AT:
            												case BACKGROUND:
            												case DEFER:
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACE:
            												case LBRACKET:
            												case LOW_PRIORITY:
            												case LSQBRACKET:
            												case QUESTION:
            												case SLICETOK:
            												case SSOR:
            												case 72:
            												case 73:
            												case 75:
            												case 76:
            												case 77:
            												case 79:
            												case 81:
            												case 83:
            												case 84:
            												case 86:
            												case 87:
            												case 89:
            												case 90:
            												case 91:
            												case 92:
            													{
            														alt38=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 38 );
            												    ex->set_state( 59 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 38 );
            										    ex->set_state( 56 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 38 );
            								    ex->set_state( 37 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt38=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 38 );
            						    ex->set_state( 29 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case BOOL_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt38=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt38=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 38 );
            														    ex->set_state( 36 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case AT:
            												case BACKGROUND:
            												case DEFER:
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACE:
            												case LBRACKET:
            												case LOW_PRIORITY:
            												case LSQBRACKET:
            												case QUESTION:
            												case SLICETOK:
            												case SSOR:
            												case 72:
            												case 73:
            												case 75:
            												case 76:
            												case 77:
            												case 79:
            												case 81:
            												case 83:
            												case 84:
            												case 86:
            												case 87:
            												case 89:
            												case 90:
            												case 91:
            												case 92:
            													{
            														alt38=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 38 );
            												    ex->set_state( 59 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 38 );
            										    ex->set_state( 56 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 38 );
            								    ex->set_state( 37 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt38=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 38 );
            						    ex->set_state( 30 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case CPTR_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt38=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt38=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 38 );
            														    ex->set_state( 36 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case AT:
            												case BACKGROUND:
            												case DEFER:
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACE:
            												case LBRACKET:
            												case LOW_PRIORITY:
            												case LSQBRACKET:
            												case QUESTION:
            												case SLICETOK:
            												case SSOR:
            												case 72:
            												case 73:
            												case 75:
            												case 76:
            												case 77:
            												case 79:
            												case 81:
            												case 83:
            												case 84:
            												case 86:
            												case 87:
            												case 89:
            												case 90:
            												case 91:
            												case 92:
            													{
            														alt38=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 38 );
            												    ex->set_state( 59 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 38 );
            										    ex->set_state( 56 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 38 );
            								    ex->set_state( 37 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt38=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 38 );
            						    ex->set_state( 31 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case STRING_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt38=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt38=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 38 );
            														    ex->set_state( 36 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case AT:
            												case BACKGROUND:
            												case DEFER:
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACE:
            												case LBRACKET:
            												case LOW_PRIORITY:
            												case LSQBRACKET:
            												case QUESTION:
            												case SLICETOK:
            												case SSOR:
            												case 72:
            												case 73:
            												case 75:
            												case 76:
            												case 77:
            												case 79:
            												case 81:
            												case 83:
            												case 84:
            												case 86:
            												case 87:
            												case 89:
            												case 90:
            												case 91:
            												case 92:
            													{
            														alt38=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 38 );
            												    ex->set_state( 59 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 38 );
            										    ex->set_state( 56 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 38 );
            								    ex->set_state( 37 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt38=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 38 );
            						    ex->set_state( 32 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case DOUBDEC:
            				case DOUBINC:
            				case ID:
            				case LBRACKET:
            				case LENGTH:
            				case RESOURCE:
            				case SHARED_REF:
            				case TYPE:
            				case 71:
            				case 81:
            					{
            						alt38=2;
            					}
            				    break;

            				default:
            				    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 38 );
            				    ex->set_state( 13 );


            				    goto ruleinstructionScalarEx;

            				}

            			}
            		    break;
            		case DLSQBRACKET:
            			{
            				switch ( this->LA(3) )
            				{
            				case DRSQBRACKET:
            					{
            						switch ( this->LA(4) )
            						{
            						case ID:
            							{
            								alt38=1;
            							}
            						    break;
            						case LBRACKET:
            							{
            								alt38=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 38 );
            						    ex->set_state( 33 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case BOOL:
            				case BOOL_TYPE:
            				case CHAR:
            				case CHAR_TYPE:
            				case CPTR_TYPE:
            				case DOUBDEC:
            				case DOUBINC:
            				case FLOAT:
            				case FLOAT_TYPE:
            				case ID:
            				case INT:
            				case INT_TYPE:
            				case LBRACKET:
            				case LENGTH:
            				case NULLTOK:
            				case RESOURCE:
            				case SHARED_REF:
            				case SIZE:
            				case SIZE_TYPE:
            				case STRING:
            				case STRING_TYPE:
            				case THIS_TOK:
            				case TYPE:
            				case VOID_TYPE:
            				case 71:
            				case 81:
            					{
            						alt38=2;
            					}
            				    break;

            				default:
            				    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 38 );
            				    ex->set_state( 14 );


            				    goto ruleinstructionScalarEx;

            				}

            			}
            		    break;
            		case LBRACE:
            		case LBRACKET:
            			{
            				alt38=2;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 38 );
            		    ex->set_state( 5 );


            		    goto ruleinstructionScalarEx;

            		}

            	}
                break;
            case BOOL_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case ID:
            		case SLICETOK:
            		case SSOR:
            			{
            				alt38=1;
            			}
            		    break;
            		case LSQBRACKET:
            			{
            				switch ( this->LA(3) )
            				{
            				case RSQBRACKET:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACKET:
            							{
            								alt38=2;
            							}
            						    break;
            						case ID:
            							{
            								alt38=1;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 38 );
            						    ex->set_state( 16 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case INT:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt38=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt38=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 38 );
            								    ex->set_state( 36 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case AT:
            						case BACKGROUND:
            						case DEFER:
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACE:
            						case LBRACKET:
            						case LOW_PRIORITY:
            						case LSQBRACKET:
            						case QUESTION:
            						case SLICETOK:
            						case SSOR:
            						case 72:
            						case 73:
            						case 75:
            						case 76:
            						case 77:
            						case 79:
            						case 81:
            						case 83:
            						case 84:
            						case 86:
            						case 87:
            						case 89:
            						case 90:
            						case 91:
            						case 92:
            							{
            								alt38=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 38 );
            						    ex->set_state( 17 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case SIZE:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt38=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt38=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 38 );
            								    ex->set_state( 36 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case AT:
            						case BACKGROUND:
            						case DEFER:
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACE:
            						case LBRACKET:
            						case LOW_PRIORITY:
            						case LSQBRACKET:
            						case QUESTION:
            						case SLICETOK:
            						case SSOR:
            						case 72:
            						case 73:
            						case 75:
            						case 76:
            						case 77:
            						case 79:
            						case 81:
            						case 83:
            						case 84:
            						case 86:
            						case 87:
            						case 89:
            						case 90:
            						case 91:
            						case 92:
            							{
            								alt38=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 38 );
            						    ex->set_state( 18 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case FLOAT:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt38=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt38=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 38 );
            								    ex->set_state( 36 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case AT:
            						case BACKGROUND:
            						case DEFER:
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACE:
            						case LBRACKET:
            						case LOW_PRIORITY:
            						case LSQBRACKET:
            						case QUESTION:
            						case SLICETOK:
            						case SSOR:
            						case 72:
            						case 73:
            						case 75:
            						case 76:
            						case 77:
            						case 79:
            						case 81:
            						case 83:
            						case 84:
            						case 86:
            						case 87:
            						case 89:
            						case 90:
            						case 91:
            						case 92:
            							{
            								alt38=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 38 );
            						    ex->set_state( 19 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case CHAR:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt38=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt38=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 38 );
            								    ex->set_state( 36 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case AT:
            						case BACKGROUND:
            						case DEFER:
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACE:
            						case LBRACKET:
            						case LOW_PRIORITY:
            						case LSQBRACKET:
            						case QUESTION:
            						case SLICETOK:
            						case SSOR:
            						case 72:
            						case 73:
            						case 75:
            						case 76:
            						case 77:
            						case 79:
            						case 81:
            						case 83:
            						case 84:
            						case 86:
            						case 87:
            						case 89:
            						case 90:
            						case 91:
            						case 92:
            							{
            								alt38=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 38 );
            						    ex->set_state( 20 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case STRING:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt38=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt38=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 38 );
            								    ex->set_state( 36 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case AT:
            						case BACKGROUND:
            						case DEFER:
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACE:
            						case LBRACKET:
            						case LOW_PRIORITY:
            						case LSQBRACKET:
            						case QUESTION:
            						case SLICETOK:
            						case SSOR:
            						case 72:
            						case 73:
            						case 75:
            						case 76:
            						case 77:
            						case 79:
            						case 81:
            						case 83:
            						case 84:
            						case 86:
            						case 87:
            						case 89:
            						case 90:
            						case 91:
            						case 92:
            							{
            								alt38=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 38 );
            						    ex->set_state( 21 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case BOOL:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt38=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt38=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 38 );
            								    ex->set_state( 36 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case AT:
            						case BACKGROUND:
            						case DEFER:
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACE:
            						case LBRACKET:
            						case LOW_PRIORITY:
            						case LSQBRACKET:
            						case QUESTION:
            						case SLICETOK:
            						case SSOR:
            						case 72:
            						case 73:
            						case 75:
            						case 76:
            						case 77:
            						case 79:
            						case 81:
            						case 83:
            						case 84:
            						case 86:
            						case 87:
            						case 89:
            						case 90:
            						case 91:
            						case 92:
            							{
            								alt38=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 38 );
            						    ex->set_state( 22 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case NULLTOK:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt38=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt38=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 38 );
            								    ex->set_state( 36 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case AT:
            						case BACKGROUND:
            						case DEFER:
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACE:
            						case LBRACKET:
            						case LOW_PRIORITY:
            						case LSQBRACKET:
            						case QUESTION:
            						case SLICETOK:
            						case SSOR:
            						case 72:
            						case 73:
            						case 75:
            						case 76:
            						case 77:
            						case 79:
            						case 81:
            						case 83:
            						case 84:
            						case 86:
            						case 87:
            						case 89:
            						case 90:
            						case 91:
            						case 92:
            							{
            								alt38=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 38 );
            						    ex->set_state( 23 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case THIS_TOK:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt38=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt38=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 38 );
            								    ex->set_state( 36 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case AT:
            						case BACKGROUND:
            						case DEFER:
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACE:
            						case LBRACKET:
            						case LOW_PRIORITY:
            						case LSQBRACKET:
            						case QUESTION:
            						case SLICETOK:
            						case SSOR:
            						case 72:
            						case 73:
            						case 75:
            						case 76:
            						case 77:
            						case 79:
            						case 81:
            						case 83:
            						case 84:
            						case 86:
            						case 87:
            						case 89:
            						case 90:
            						case 91:
            						case 92:
            							{
            								alt38=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 38 );
            						    ex->set_state( 24 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case VOID_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt38=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt38=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 38 );
            														    ex->set_state( 36 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case AT:
            												case BACKGROUND:
            												case DEFER:
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACE:
            												case LBRACKET:
            												case LOW_PRIORITY:
            												case LSQBRACKET:
            												case QUESTION:
            												case SLICETOK:
            												case SSOR:
            												case 72:
            												case 73:
            												case 75:
            												case 76:
            												case 77:
            												case 79:
            												case 81:
            												case 83:
            												case 84:
            												case 86:
            												case 87:
            												case 89:
            												case 90:
            												case 91:
            												case 92:
            													{
            														alt38=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 38 );
            												    ex->set_state( 59 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 38 );
            										    ex->set_state( 56 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 38 );
            								    ex->set_state( 37 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt38=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 38 );
            						    ex->set_state( 25 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case INT_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt38=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt38=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 38 );
            														    ex->set_state( 36 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case AT:
            												case BACKGROUND:
            												case DEFER:
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACE:
            												case LBRACKET:
            												case LOW_PRIORITY:
            												case LSQBRACKET:
            												case QUESTION:
            												case SLICETOK:
            												case SSOR:
            												case 72:
            												case 73:
            												case 75:
            												case 76:
            												case 77:
            												case 79:
            												case 81:
            												case 83:
            												case 84:
            												case 86:
            												case 87:
            												case 89:
            												case 90:
            												case 91:
            												case 92:
            													{
            														alt38=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 38 );
            												    ex->set_state( 59 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 38 );
            										    ex->set_state( 56 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 38 );
            								    ex->set_state( 37 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt38=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 38 );
            						    ex->set_state( 26 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case SIZE_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt38=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt38=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 38 );
            														    ex->set_state( 36 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case AT:
            												case BACKGROUND:
            												case DEFER:
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACE:
            												case LBRACKET:
            												case LOW_PRIORITY:
            												case LSQBRACKET:
            												case QUESTION:
            												case SLICETOK:
            												case SSOR:
            												case 72:
            												case 73:
            												case 75:
            												case 76:
            												case 77:
            												case 79:
            												case 81:
            												case 83:
            												case 84:
            												case 86:
            												case 87:
            												case 89:
            												case 90:
            												case 91:
            												case 92:
            													{
            														alt38=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 38 );
            												    ex->set_state( 59 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 38 );
            										    ex->set_state( 56 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 38 );
            								    ex->set_state( 37 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt38=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 38 );
            						    ex->set_state( 27 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case FLOAT_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt38=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt38=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 38 );
            														    ex->set_state( 36 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case AT:
            												case BACKGROUND:
            												case DEFER:
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACE:
            												case LBRACKET:
            												case LOW_PRIORITY:
            												case LSQBRACKET:
            												case QUESTION:
            												case SLICETOK:
            												case SSOR:
            												case 72:
            												case 73:
            												case 75:
            												case 76:
            												case 77:
            												case 79:
            												case 81:
            												case 83:
            												case 84:
            												case 86:
            												case 87:
            												case 89:
            												case 90:
            												case 91:
            												case 92:
            													{
            														alt38=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 38 );
            												    ex->set_state( 59 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 38 );
            										    ex->set_state( 56 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 38 );
            								    ex->set_state( 37 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt38=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 38 );
            						    ex->set_state( 28 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case CHAR_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt38=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt38=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 38 );
            														    ex->set_state( 36 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case AT:
            												case BACKGROUND:
            												case DEFER:
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACE:
            												case LBRACKET:
            												case LOW_PRIORITY:
            												case LSQBRACKET:
            												case QUESTION:
            												case SLICETOK:
            												case SSOR:
            												case 72:
            												case 73:
            												case 75:
            												case 76:
            												case 77:
            												case 79:
            												case 81:
            												case 83:
            												case 84:
            												case 86:
            												case 87:
            												case 89:
            												case 90:
            												case 91:
            												case 92:
            													{
            														alt38=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 38 );
            												    ex->set_state( 59 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 38 );
            										    ex->set_state( 56 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 38 );
            								    ex->set_state( 37 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt38=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 38 );
            						    ex->set_state( 29 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case BOOL_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt38=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt38=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 38 );
            														    ex->set_state( 36 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case AT:
            												case BACKGROUND:
            												case DEFER:
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACE:
            												case LBRACKET:
            												case LOW_PRIORITY:
            												case LSQBRACKET:
            												case QUESTION:
            												case SLICETOK:
            												case SSOR:
            												case 72:
            												case 73:
            												case 75:
            												case 76:
            												case 77:
            												case 79:
            												case 81:
            												case 83:
            												case 84:
            												case 86:
            												case 87:
            												case 89:
            												case 90:
            												case 91:
            												case 92:
            													{
            														alt38=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 38 );
            												    ex->set_state( 59 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 38 );
            										    ex->set_state( 56 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 38 );
            								    ex->set_state( 37 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt38=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 38 );
            						    ex->set_state( 30 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case CPTR_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt38=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt38=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 38 );
            														    ex->set_state( 36 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case AT:
            												case BACKGROUND:
            												case DEFER:
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACE:
            												case LBRACKET:
            												case LOW_PRIORITY:
            												case LSQBRACKET:
            												case QUESTION:
            												case SLICETOK:
            												case SSOR:
            												case 72:
            												case 73:
            												case 75:
            												case 76:
            												case 77:
            												case 79:
            												case 81:
            												case 83:
            												case 84:
            												case 86:
            												case 87:
            												case 89:
            												case 90:
            												case 91:
            												case 92:
            													{
            														alt38=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 38 );
            												    ex->set_state( 59 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 38 );
            										    ex->set_state( 56 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 38 );
            								    ex->set_state( 37 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt38=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 38 );
            						    ex->set_state( 31 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case STRING_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt38=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt38=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 38 );
            														    ex->set_state( 36 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case AT:
            												case BACKGROUND:
            												case DEFER:
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACE:
            												case LBRACKET:
            												case LOW_PRIORITY:
            												case LSQBRACKET:
            												case QUESTION:
            												case SLICETOK:
            												case SSOR:
            												case 72:
            												case 73:
            												case 75:
            												case 76:
            												case 77:
            												case 79:
            												case 81:
            												case 83:
            												case 84:
            												case 86:
            												case 87:
            												case 89:
            												case 90:
            												case 91:
            												case 92:
            													{
            														alt38=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 38 );
            												    ex->set_state( 59 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 38 );
            										    ex->set_state( 56 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 38 );
            								    ex->set_state( 37 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt38=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 38 );
            						    ex->set_state( 32 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case DOUBDEC:
            				case DOUBINC:
            				case ID:
            				case LBRACKET:
            				case LENGTH:
            				case RESOURCE:
            				case SHARED_REF:
            				case TYPE:
            				case 71:
            				case 81:
            					{
            						alt38=2;
            					}
            				    break;

            				default:
            				    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 38 );
            				    ex->set_state( 13 );


            				    goto ruleinstructionScalarEx;

            				}

            			}
            		    break;
            		case DLSQBRACKET:
            			{
            				switch ( this->LA(3) )
            				{
            				case DRSQBRACKET:
            					{
            						switch ( this->LA(4) )
            						{
            						case ID:
            							{
            								alt38=1;
            							}
            						    break;
            						case LBRACKET:
            							{
            								alt38=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 38 );
            						    ex->set_state( 33 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case BOOL:
            				case BOOL_TYPE:
            				case CHAR:
            				case CHAR_TYPE:
            				case CPTR_TYPE:
            				case DOUBDEC:
            				case DOUBINC:
            				case FLOAT:
            				case FLOAT_TYPE:
            				case ID:
            				case INT:
            				case INT_TYPE:
            				case LBRACKET:
            				case LENGTH:
            				case NULLTOK:
            				case RESOURCE:
            				case SHARED_REF:
            				case SIZE:
            				case SIZE_TYPE:
            				case STRING:
            				case STRING_TYPE:
            				case THIS_TOK:
            				case TYPE:
            				case VOID_TYPE:
            				case 71:
            				case 81:
            					{
            						alt38=2;
            					}
            				    break;

            				default:
            				    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 38 );
            				    ex->set_state( 14 );


            				    goto ruleinstructionScalarEx;

            				}

            			}
            		    break;
            		case LBRACE:
            		case LBRACKET:
            			{
            				alt38=2;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 38 );
            		    ex->set_state( 6 );


            		    goto ruleinstructionScalarEx;

            		}

            	}
                break;
            case CPTR_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case ID:
            		case SLICETOK:
            		case SSOR:
            			{
            				alt38=1;
            			}
            		    break;
            		case LSQBRACKET:
            			{
            				switch ( this->LA(3) )
            				{
            				case RSQBRACKET:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACKET:
            							{
            								alt38=2;
            							}
            						    break;
            						case ID:
            							{
            								alt38=1;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 38 );
            						    ex->set_state( 16 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case INT:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt38=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt38=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 38 );
            								    ex->set_state( 36 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case AT:
            						case BACKGROUND:
            						case DEFER:
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACE:
            						case LBRACKET:
            						case LOW_PRIORITY:
            						case LSQBRACKET:
            						case QUESTION:
            						case SLICETOK:
            						case SSOR:
            						case 72:
            						case 73:
            						case 75:
            						case 76:
            						case 77:
            						case 79:
            						case 81:
            						case 83:
            						case 84:
            						case 86:
            						case 87:
            						case 89:
            						case 90:
            						case 91:
            						case 92:
            							{
            								alt38=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 38 );
            						    ex->set_state( 17 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case SIZE:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt38=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt38=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 38 );
            								    ex->set_state( 36 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case AT:
            						case BACKGROUND:
            						case DEFER:
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACE:
            						case LBRACKET:
            						case LOW_PRIORITY:
            						case LSQBRACKET:
            						case QUESTION:
            						case SLICETOK:
            						case SSOR:
            						case 72:
            						case 73:
            						case 75:
            						case 76:
            						case 77:
            						case 79:
            						case 81:
            						case 83:
            						case 84:
            						case 86:
            						case 87:
            						case 89:
            						case 90:
            						case 91:
            						case 92:
            							{
            								alt38=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 38 );
            						    ex->set_state( 18 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case FLOAT:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt38=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt38=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 38 );
            								    ex->set_state( 36 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case AT:
            						case BACKGROUND:
            						case DEFER:
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACE:
            						case LBRACKET:
            						case LOW_PRIORITY:
            						case LSQBRACKET:
            						case QUESTION:
            						case SLICETOK:
            						case SSOR:
            						case 72:
            						case 73:
            						case 75:
            						case 76:
            						case 77:
            						case 79:
            						case 81:
            						case 83:
            						case 84:
            						case 86:
            						case 87:
            						case 89:
            						case 90:
            						case 91:
            						case 92:
            							{
            								alt38=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 38 );
            						    ex->set_state( 19 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case CHAR:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt38=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt38=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 38 );
            								    ex->set_state( 36 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case AT:
            						case BACKGROUND:
            						case DEFER:
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACE:
            						case LBRACKET:
            						case LOW_PRIORITY:
            						case LSQBRACKET:
            						case QUESTION:
            						case SLICETOK:
            						case SSOR:
            						case 72:
            						case 73:
            						case 75:
            						case 76:
            						case 77:
            						case 79:
            						case 81:
            						case 83:
            						case 84:
            						case 86:
            						case 87:
            						case 89:
            						case 90:
            						case 91:
            						case 92:
            							{
            								alt38=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 38 );
            						    ex->set_state( 20 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case STRING:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt38=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt38=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 38 );
            								    ex->set_state( 36 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case AT:
            						case BACKGROUND:
            						case DEFER:
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACE:
            						case LBRACKET:
            						case LOW_PRIORITY:
            						case LSQBRACKET:
            						case QUESTION:
            						case SLICETOK:
            						case SSOR:
            						case 72:
            						case 73:
            						case 75:
            						case 76:
            						case 77:
            						case 79:
            						case 81:
            						case 83:
            						case 84:
            						case 86:
            						case 87:
            						case 89:
            						case 90:
            						case 91:
            						case 92:
            							{
            								alt38=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 38 );
            						    ex->set_state( 21 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case BOOL:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt38=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt38=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 38 );
            								    ex->set_state( 36 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case AT:
            						case BACKGROUND:
            						case DEFER:
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACE:
            						case LBRACKET:
            						case LOW_PRIORITY:
            						case LSQBRACKET:
            						case QUESTION:
            						case SLICETOK:
            						case SSOR:
            						case 72:
            						case 73:
            						case 75:
            						case 76:
            						case 77:
            						case 79:
            						case 81:
            						case 83:
            						case 84:
            						case 86:
            						case 87:
            						case 89:
            						case 90:
            						case 91:
            						case 92:
            							{
            								alt38=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 38 );
            						    ex->set_state( 22 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case NULLTOK:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt38=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt38=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 38 );
            								    ex->set_state( 36 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case AT:
            						case BACKGROUND:
            						case DEFER:
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACE:
            						case LBRACKET:
            						case LOW_PRIORITY:
            						case LSQBRACKET:
            						case QUESTION:
            						case SLICETOK:
            						case SSOR:
            						case 72:
            						case 73:
            						case 75:
            						case 76:
            						case 77:
            						case 79:
            						case 81:
            						case 83:
            						case 84:
            						case 86:
            						case 87:
            						case 89:
            						case 90:
            						case 91:
            						case 92:
            							{
            								alt38=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 38 );
            						    ex->set_state( 23 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case THIS_TOK:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt38=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt38=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 38 );
            								    ex->set_state( 36 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case AT:
            						case BACKGROUND:
            						case DEFER:
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACE:
            						case LBRACKET:
            						case LOW_PRIORITY:
            						case LSQBRACKET:
            						case QUESTION:
            						case SLICETOK:
            						case SSOR:
            						case 72:
            						case 73:
            						case 75:
            						case 76:
            						case 77:
            						case 79:
            						case 81:
            						case 83:
            						case 84:
            						case 86:
            						case 87:
            						case 89:
            						case 90:
            						case 91:
            						case 92:
            							{
            								alt38=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 38 );
            						    ex->set_state( 24 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case VOID_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt38=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt38=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 38 );
            														    ex->set_state( 36 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case AT:
            												case BACKGROUND:
            												case DEFER:
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACE:
            												case LBRACKET:
            												case LOW_PRIORITY:
            												case LSQBRACKET:
            												case QUESTION:
            												case SLICETOK:
            												case SSOR:
            												case 72:
            												case 73:
            												case 75:
            												case 76:
            												case 77:
            												case 79:
            												case 81:
            												case 83:
            												case 84:
            												case 86:
            												case 87:
            												case 89:
            												case 90:
            												case 91:
            												case 92:
            													{
            														alt38=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 38 );
            												    ex->set_state( 59 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 38 );
            										    ex->set_state( 56 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 38 );
            								    ex->set_state( 37 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt38=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 38 );
            						    ex->set_state( 25 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case INT_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt38=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt38=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 38 );
            														    ex->set_state( 36 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case AT:
            												case BACKGROUND:
            												case DEFER:
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACE:
            												case LBRACKET:
            												case LOW_PRIORITY:
            												case LSQBRACKET:
            												case QUESTION:
            												case SLICETOK:
            												case SSOR:
            												case 72:
            												case 73:
            												case 75:
            												case 76:
            												case 77:
            												case 79:
            												case 81:
            												case 83:
            												case 84:
            												case 86:
            												case 87:
            												case 89:
            												case 90:
            												case 91:
            												case 92:
            													{
            														alt38=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 38 );
            												    ex->set_state( 59 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 38 );
            										    ex->set_state( 56 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 38 );
            								    ex->set_state( 37 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt38=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 38 );
            						    ex->set_state( 26 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case SIZE_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt38=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt38=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 38 );
            														    ex->set_state( 36 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case AT:
            												case BACKGROUND:
            												case DEFER:
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACE:
            												case LBRACKET:
            												case LOW_PRIORITY:
            												case LSQBRACKET:
            												case QUESTION:
            												case SLICETOK:
            												case SSOR:
            												case 72:
            												case 73:
            												case 75:
            												case 76:
            												case 77:
            												case 79:
            												case 81:
            												case 83:
            												case 84:
            												case 86:
            												case 87:
            												case 89:
            												case 90:
            												case 91:
            												case 92:
            													{
            														alt38=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 38 );
            												    ex->set_state( 59 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 38 );
            										    ex->set_state( 56 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 38 );
            								    ex->set_state( 37 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt38=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 38 );
            						    ex->set_state( 27 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case FLOAT_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt38=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt38=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 38 );
            														    ex->set_state( 36 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case AT:
            												case BACKGROUND:
            												case DEFER:
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACE:
            												case LBRACKET:
            												case LOW_PRIORITY:
            												case LSQBRACKET:
            												case QUESTION:
            												case SLICETOK:
            												case SSOR:
            												case 72:
            												case 73:
            												case 75:
            												case 76:
            												case 77:
            												case 79:
            												case 81:
            												case 83:
            												case 84:
            												case 86:
            												case 87:
            												case 89:
            												case 90:
            												case 91:
            												case 92:
            													{
            														alt38=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 38 );
            												    ex->set_state( 59 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 38 );
            										    ex->set_state( 56 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 38 );
            								    ex->set_state( 37 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt38=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 38 );
            						    ex->set_state( 28 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case CHAR_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt38=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt38=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 38 );
            														    ex->set_state( 36 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case AT:
            												case BACKGROUND:
            												case DEFER:
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACE:
            												case LBRACKET:
            												case LOW_PRIORITY:
            												case LSQBRACKET:
            												case QUESTION:
            												case SLICETOK:
            												case SSOR:
            												case 72:
            												case 73:
            												case 75:
            												case 76:
            												case 77:
            												case 79:
            												case 81:
            												case 83:
            												case 84:
            												case 86:
            												case 87:
            												case 89:
            												case 90:
            												case 91:
            												case 92:
            													{
            														alt38=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 38 );
            												    ex->set_state( 59 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 38 );
            										    ex->set_state( 56 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 38 );
            								    ex->set_state( 37 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt38=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 38 );
            						    ex->set_state( 29 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case BOOL_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt38=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt38=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 38 );
            														    ex->set_state( 36 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case AT:
            												case BACKGROUND:
            												case DEFER:
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACE:
            												case LBRACKET:
            												case LOW_PRIORITY:
            												case LSQBRACKET:
            												case QUESTION:
            												case SLICETOK:
            												case SSOR:
            												case 72:
            												case 73:
            												case 75:
            												case 76:
            												case 77:
            												case 79:
            												case 81:
            												case 83:
            												case 84:
            												case 86:
            												case 87:
            												case 89:
            												case 90:
            												case 91:
            												case 92:
            													{
            														alt38=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 38 );
            												    ex->set_state( 59 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 38 );
            										    ex->set_state( 56 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 38 );
            								    ex->set_state( 37 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt38=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 38 );
            						    ex->set_state( 30 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case CPTR_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt38=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt38=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 38 );
            														    ex->set_state( 36 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case AT:
            												case BACKGROUND:
            												case DEFER:
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACE:
            												case LBRACKET:
            												case LOW_PRIORITY:
            												case LSQBRACKET:
            												case QUESTION:
            												case SLICETOK:
            												case SSOR:
            												case 72:
            												case 73:
            												case 75:
            												case 76:
            												case 77:
            												case 79:
            												case 81:
            												case 83:
            												case 84:
            												case 86:
            												case 87:
            												case 89:
            												case 90:
            												case 91:
            												case 92:
            													{
            														alt38=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 38 );
            												    ex->set_state( 59 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 38 );
            										    ex->set_state( 56 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 38 );
            								    ex->set_state( 37 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt38=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 38 );
            						    ex->set_state( 31 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case STRING_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt38=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt38=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 38 );
            														    ex->set_state( 36 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case AT:
            												case BACKGROUND:
            												case DEFER:
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACE:
            												case LBRACKET:
            												case LOW_PRIORITY:
            												case LSQBRACKET:
            												case QUESTION:
            												case SLICETOK:
            												case SSOR:
            												case 72:
            												case 73:
            												case 75:
            												case 76:
            												case 77:
            												case 79:
            												case 81:
            												case 83:
            												case 84:
            												case 86:
            												case 87:
            												case 89:
            												case 90:
            												case 91:
            												case 92:
            													{
            														alt38=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 38 );
            												    ex->set_state( 59 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 38 );
            										    ex->set_state( 56 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 38 );
            								    ex->set_state( 37 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt38=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 38 );
            						    ex->set_state( 32 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case DOUBDEC:
            				case DOUBINC:
            				case ID:
            				case LBRACKET:
            				case LENGTH:
            				case RESOURCE:
            				case SHARED_REF:
            				case TYPE:
            				case 71:
            				case 81:
            					{
            						alt38=2;
            					}
            				    break;

            				default:
            				    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 38 );
            				    ex->set_state( 13 );


            				    goto ruleinstructionScalarEx;

            				}

            			}
            		    break;
            		case DLSQBRACKET:
            			{
            				switch ( this->LA(3) )
            				{
            				case DRSQBRACKET:
            					{
            						switch ( this->LA(4) )
            						{
            						case ID:
            							{
            								alt38=1;
            							}
            						    break;
            						case LBRACKET:
            							{
            								alt38=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 38 );
            						    ex->set_state( 33 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case BOOL:
            				case BOOL_TYPE:
            				case CHAR:
            				case CHAR_TYPE:
            				case CPTR_TYPE:
            				case DOUBDEC:
            				case DOUBINC:
            				case FLOAT:
            				case FLOAT_TYPE:
            				case ID:
            				case INT:
            				case INT_TYPE:
            				case LBRACKET:
            				case LENGTH:
            				case NULLTOK:
            				case RESOURCE:
            				case SHARED_REF:
            				case SIZE:
            				case SIZE_TYPE:
            				case STRING:
            				case STRING_TYPE:
            				case THIS_TOK:
            				case TYPE:
            				case VOID_TYPE:
            				case 71:
            				case 81:
            					{
            						alt38=2;
            					}
            				    break;

            				default:
            				    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 38 );
            				    ex->set_state( 14 );


            				    goto ruleinstructionScalarEx;

            				}

            			}
            		    break;
            		case LBRACE:
            		case LBRACKET:
            			{
            				alt38=2;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 38 );
            		    ex->set_state( 7 );


            		    goto ruleinstructionScalarEx;

            		}

            	}
                break;
            case STRING_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case ID:
            		case SLICETOK:
            		case SSOR:
            			{
            				alt38=1;
            			}
            		    break;
            		case LSQBRACKET:
            			{
            				switch ( this->LA(3) )
            				{
            				case RSQBRACKET:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACKET:
            							{
            								alt38=2;
            							}
            						    break;
            						case ID:
            							{
            								alt38=1;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 38 );
            						    ex->set_state( 16 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case INT:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt38=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt38=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 38 );
            								    ex->set_state( 36 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case AT:
            						case BACKGROUND:
            						case DEFER:
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACE:
            						case LBRACKET:
            						case LOW_PRIORITY:
            						case LSQBRACKET:
            						case QUESTION:
            						case SLICETOK:
            						case SSOR:
            						case 72:
            						case 73:
            						case 75:
            						case 76:
            						case 77:
            						case 79:
            						case 81:
            						case 83:
            						case 84:
            						case 86:
            						case 87:
            						case 89:
            						case 90:
            						case 91:
            						case 92:
            							{
            								alt38=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 38 );
            						    ex->set_state( 17 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case SIZE:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt38=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt38=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 38 );
            								    ex->set_state( 36 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case AT:
            						case BACKGROUND:
            						case DEFER:
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACE:
            						case LBRACKET:
            						case LOW_PRIORITY:
            						case LSQBRACKET:
            						case QUESTION:
            						case SLICETOK:
            						case SSOR:
            						case 72:
            						case 73:
            						case 75:
            						case 76:
            						case 77:
            						case 79:
            						case 81:
            						case 83:
            						case 84:
            						case 86:
            						case 87:
            						case 89:
            						case 90:
            						case 91:
            						case 92:
            							{
            								alt38=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 38 );
            						    ex->set_state( 18 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case FLOAT:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt38=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt38=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 38 );
            								    ex->set_state( 36 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case AT:
            						case BACKGROUND:
            						case DEFER:
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACE:
            						case LBRACKET:
            						case LOW_PRIORITY:
            						case LSQBRACKET:
            						case QUESTION:
            						case SLICETOK:
            						case SSOR:
            						case 72:
            						case 73:
            						case 75:
            						case 76:
            						case 77:
            						case 79:
            						case 81:
            						case 83:
            						case 84:
            						case 86:
            						case 87:
            						case 89:
            						case 90:
            						case 91:
            						case 92:
            							{
            								alt38=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 38 );
            						    ex->set_state( 19 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case CHAR:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt38=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt38=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 38 );
            								    ex->set_state( 36 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case AT:
            						case BACKGROUND:
            						case DEFER:
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACE:
            						case LBRACKET:
            						case LOW_PRIORITY:
            						case LSQBRACKET:
            						case QUESTION:
            						case SLICETOK:
            						case SSOR:
            						case 72:
            						case 73:
            						case 75:
            						case 76:
            						case 77:
            						case 79:
            						case 81:
            						case 83:
            						case 84:
            						case 86:
            						case 87:
            						case 89:
            						case 90:
            						case 91:
            						case 92:
            							{
            								alt38=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 38 );
            						    ex->set_state( 20 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case STRING:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt38=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt38=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 38 );
            								    ex->set_state( 36 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case AT:
            						case BACKGROUND:
            						case DEFER:
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACE:
            						case LBRACKET:
            						case LOW_PRIORITY:
            						case LSQBRACKET:
            						case QUESTION:
            						case SLICETOK:
            						case SSOR:
            						case 72:
            						case 73:
            						case 75:
            						case 76:
            						case 77:
            						case 79:
            						case 81:
            						case 83:
            						case 84:
            						case 86:
            						case 87:
            						case 89:
            						case 90:
            						case 91:
            						case 92:
            							{
            								alt38=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 38 );
            						    ex->set_state( 21 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case BOOL:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt38=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt38=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 38 );
            								    ex->set_state( 36 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case AT:
            						case BACKGROUND:
            						case DEFER:
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACE:
            						case LBRACKET:
            						case LOW_PRIORITY:
            						case LSQBRACKET:
            						case QUESTION:
            						case SLICETOK:
            						case SSOR:
            						case 72:
            						case 73:
            						case 75:
            						case 76:
            						case 77:
            						case 79:
            						case 81:
            						case 83:
            						case 84:
            						case 86:
            						case 87:
            						case 89:
            						case 90:
            						case 91:
            						case 92:
            							{
            								alt38=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 38 );
            						    ex->set_state( 22 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case NULLTOK:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt38=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt38=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 38 );
            								    ex->set_state( 36 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case AT:
            						case BACKGROUND:
            						case DEFER:
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACE:
            						case LBRACKET:
            						case LOW_PRIORITY:
            						case LSQBRACKET:
            						case QUESTION:
            						case SLICETOK:
            						case SSOR:
            						case 72:
            						case 73:
            						case 75:
            						case 76:
            						case 77:
            						case 79:
            						case 81:
            						case 83:
            						case 84:
            						case 86:
            						case 87:
            						case 89:
            						case 90:
            						case 91:
            						case 92:
            							{
            								alt38=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 38 );
            						    ex->set_state( 23 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case THIS_TOK:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt38=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt38=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 38 );
            								    ex->set_state( 36 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case AT:
            						case BACKGROUND:
            						case DEFER:
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACE:
            						case LBRACKET:
            						case LOW_PRIORITY:
            						case LSQBRACKET:
            						case QUESTION:
            						case SLICETOK:
            						case SSOR:
            						case 72:
            						case 73:
            						case 75:
            						case 76:
            						case 77:
            						case 79:
            						case 81:
            						case 83:
            						case 84:
            						case 86:
            						case 87:
            						case 89:
            						case 90:
            						case 91:
            						case 92:
            							{
            								alt38=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 38 );
            						    ex->set_state( 24 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case VOID_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt38=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt38=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 38 );
            														    ex->set_state( 36 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case AT:
            												case BACKGROUND:
            												case DEFER:
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACE:
            												case LBRACKET:
            												case LOW_PRIORITY:
            												case LSQBRACKET:
            												case QUESTION:
            												case SLICETOK:
            												case SSOR:
            												case 72:
            												case 73:
            												case 75:
            												case 76:
            												case 77:
            												case 79:
            												case 81:
            												case 83:
            												case 84:
            												case 86:
            												case 87:
            												case 89:
            												case 90:
            												case 91:
            												case 92:
            													{
            														alt38=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 38 );
            												    ex->set_state( 59 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 38 );
            										    ex->set_state( 56 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 38 );
            								    ex->set_state( 37 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt38=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 38 );
            						    ex->set_state( 25 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case INT_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt38=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt38=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 38 );
            														    ex->set_state( 36 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case AT:
            												case BACKGROUND:
            												case DEFER:
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACE:
            												case LBRACKET:
            												case LOW_PRIORITY:
            												case LSQBRACKET:
            												case QUESTION:
            												case SLICETOK:
            												case SSOR:
            												case 72:
            												case 73:
            												case 75:
            												case 76:
            												case 77:
            												case 79:
            												case 81:
            												case 83:
            												case 84:
            												case 86:
            												case 87:
            												case 89:
            												case 90:
            												case 91:
            												case 92:
            													{
            														alt38=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 38 );
            												    ex->set_state( 59 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 38 );
            										    ex->set_state( 56 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 38 );
            								    ex->set_state( 37 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt38=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 38 );
            						    ex->set_state( 26 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case SIZE_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt38=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt38=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 38 );
            														    ex->set_state( 36 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case AT:
            												case BACKGROUND:
            												case DEFER:
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACE:
            												case LBRACKET:
            												case LOW_PRIORITY:
            												case LSQBRACKET:
            												case QUESTION:
            												case SLICETOK:
            												case SSOR:
            												case 72:
            												case 73:
            												case 75:
            												case 76:
            												case 77:
            												case 79:
            												case 81:
            												case 83:
            												case 84:
            												case 86:
            												case 87:
            												case 89:
            												case 90:
            												case 91:
            												case 92:
            													{
            														alt38=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 38 );
            												    ex->set_state( 59 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 38 );
            										    ex->set_state( 56 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 38 );
            								    ex->set_state( 37 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt38=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 38 );
            						    ex->set_state( 27 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case FLOAT_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt38=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt38=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 38 );
            														    ex->set_state( 36 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case AT:
            												case BACKGROUND:
            												case DEFER:
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACE:
            												case LBRACKET:
            												case LOW_PRIORITY:
            												case LSQBRACKET:
            												case QUESTION:
            												case SLICETOK:
            												case SSOR:
            												case 72:
            												case 73:
            												case 75:
            												case 76:
            												case 77:
            												case 79:
            												case 81:
            												case 83:
            												case 84:
            												case 86:
            												case 87:
            												case 89:
            												case 90:
            												case 91:
            												case 92:
            													{
            														alt38=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 38 );
            												    ex->set_state( 59 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 38 );
            										    ex->set_state( 56 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 38 );
            								    ex->set_state( 37 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt38=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 38 );
            						    ex->set_state( 28 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case CHAR_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt38=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt38=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 38 );
            														    ex->set_state( 36 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case AT:
            												case BACKGROUND:
            												case DEFER:
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACE:
            												case LBRACKET:
            												case LOW_PRIORITY:
            												case LSQBRACKET:
            												case QUESTION:
            												case SLICETOK:
            												case SSOR:
            												case 72:
            												case 73:
            												case 75:
            												case 76:
            												case 77:
            												case 79:
            												case 81:
            												case 83:
            												case 84:
            												case 86:
            												case 87:
            												case 89:
            												case 90:
            												case 91:
            												case 92:
            													{
            														alt38=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 38 );
            												    ex->set_state( 59 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 38 );
            										    ex->set_state( 56 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 38 );
            								    ex->set_state( 37 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt38=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 38 );
            						    ex->set_state( 29 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case BOOL_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt38=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt38=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 38 );
            														    ex->set_state( 36 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case AT:
            												case BACKGROUND:
            												case DEFER:
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACE:
            												case LBRACKET:
            												case LOW_PRIORITY:
            												case LSQBRACKET:
            												case QUESTION:
            												case SLICETOK:
            												case SSOR:
            												case 72:
            												case 73:
            												case 75:
            												case 76:
            												case 77:
            												case 79:
            												case 81:
            												case 83:
            												case 84:
            												case 86:
            												case 87:
            												case 89:
            												case 90:
            												case 91:
            												case 92:
            													{
            														alt38=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 38 );
            												    ex->set_state( 59 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 38 );
            										    ex->set_state( 56 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 38 );
            								    ex->set_state( 37 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt38=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 38 );
            						    ex->set_state( 30 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case CPTR_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt38=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt38=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 38 );
            														    ex->set_state( 36 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case AT:
            												case BACKGROUND:
            												case DEFER:
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACE:
            												case LBRACKET:
            												case LOW_PRIORITY:
            												case LSQBRACKET:
            												case QUESTION:
            												case SLICETOK:
            												case SSOR:
            												case 72:
            												case 73:
            												case 75:
            												case 76:
            												case 77:
            												case 79:
            												case 81:
            												case 83:
            												case 84:
            												case 86:
            												case 87:
            												case 89:
            												case 90:
            												case 91:
            												case 92:
            													{
            														alt38=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 38 );
            												    ex->set_state( 59 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 38 );
            										    ex->set_state( 56 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 38 );
            								    ex->set_state( 37 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt38=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 38 );
            						    ex->set_state( 31 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case STRING_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt38=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt38=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 38 );
            														    ex->set_state( 36 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case AT:
            												case BACKGROUND:
            												case DEFER:
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACE:
            												case LBRACKET:
            												case LOW_PRIORITY:
            												case LSQBRACKET:
            												case QUESTION:
            												case SLICETOK:
            												case SSOR:
            												case 72:
            												case 73:
            												case 75:
            												case 76:
            												case 77:
            												case 79:
            												case 81:
            												case 83:
            												case 84:
            												case 86:
            												case 87:
            												case 89:
            												case 90:
            												case 91:
            												case 92:
            													{
            														alt38=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 38 );
            												    ex->set_state( 59 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 38 );
            										    ex->set_state( 56 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 38 );
            								    ex->set_state( 37 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt38=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 38 );
            						    ex->set_state( 32 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case DOUBDEC:
            				case DOUBINC:
            				case ID:
            				case LBRACKET:
            				case LENGTH:
            				case RESOURCE:
            				case SHARED_REF:
            				case TYPE:
            				case 71:
            				case 81:
            					{
            						alt38=2;
            					}
            				    break;

            				default:
            				    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 38 );
            				    ex->set_state( 13 );


            				    goto ruleinstructionScalarEx;

            				}

            			}
            		    break;
            		case DLSQBRACKET:
            			{
            				switch ( this->LA(3) )
            				{
            				case DRSQBRACKET:
            					{
            						switch ( this->LA(4) )
            						{
            						case ID:
            							{
            								alt38=1;
            							}
            						    break;
            						case LBRACKET:
            							{
            								alt38=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 38 );
            						    ex->set_state( 33 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case BOOL:
            				case BOOL_TYPE:
            				case CHAR:
            				case CHAR_TYPE:
            				case CPTR_TYPE:
            				case DOUBDEC:
            				case DOUBINC:
            				case FLOAT:
            				case FLOAT_TYPE:
            				case ID:
            				case INT:
            				case INT_TYPE:
            				case LBRACKET:
            				case LENGTH:
            				case NULLTOK:
            				case RESOURCE:
            				case SHARED_REF:
            				case SIZE:
            				case SIZE_TYPE:
            				case STRING:
            				case STRING_TYPE:
            				case THIS_TOK:
            				case TYPE:
            				case VOID_TYPE:
            				case 71:
            				case 81:
            					{
            						alt38=2;
            					}
            				    break;

            				default:
            				    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 38 );
            				    ex->set_state( 14 );


            				    goto ruleinstructionScalarEx;

            				}

            			}
            		    break;
            		case LBRACE:
            		case LBRACKET:
            			{
            				alt38=2;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 38 );
            		    ex->set_state( 8 );


            		    goto ruleinstructionScalarEx;

            		}

            	}
                break;
            case TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case ID:
            		case QUESTION:
            			{
            				alt38=1;
            			}
            		    break;
            		case LSQBRACKET:
            			{
            				switch ( this->LA(3) )
            				{
            				case RSQBRACKET:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACKET:
            							{
            								alt38=2;
            							}
            						    break;
            						case ID:
            							{
            								alt38=1;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 38 );
            						    ex->set_state( 16 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case INT:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt38=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt38=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 38 );
            								    ex->set_state( 36 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case AT:
            						case BACKGROUND:
            						case DEFER:
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACE:
            						case LBRACKET:
            						case LOW_PRIORITY:
            						case LSQBRACKET:
            						case QUESTION:
            						case SLICETOK:
            						case SSOR:
            						case 72:
            						case 73:
            						case 75:
            						case 76:
            						case 77:
            						case 79:
            						case 81:
            						case 83:
            						case 84:
            						case 86:
            						case 87:
            						case 89:
            						case 90:
            						case 91:
            						case 92:
            							{
            								alt38=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 38 );
            						    ex->set_state( 17 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case SIZE:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt38=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt38=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 38 );
            								    ex->set_state( 36 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case AT:
            						case BACKGROUND:
            						case DEFER:
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACE:
            						case LBRACKET:
            						case LOW_PRIORITY:
            						case LSQBRACKET:
            						case QUESTION:
            						case SLICETOK:
            						case SSOR:
            						case 72:
            						case 73:
            						case 75:
            						case 76:
            						case 77:
            						case 79:
            						case 81:
            						case 83:
            						case 84:
            						case 86:
            						case 87:
            						case 89:
            						case 90:
            						case 91:
            						case 92:
            							{
            								alt38=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 38 );
            						    ex->set_state( 18 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case FLOAT:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt38=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt38=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 38 );
            								    ex->set_state( 36 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case AT:
            						case BACKGROUND:
            						case DEFER:
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACE:
            						case LBRACKET:
            						case LOW_PRIORITY:
            						case LSQBRACKET:
            						case QUESTION:
            						case SLICETOK:
            						case SSOR:
            						case 72:
            						case 73:
            						case 75:
            						case 76:
            						case 77:
            						case 79:
            						case 81:
            						case 83:
            						case 84:
            						case 86:
            						case 87:
            						case 89:
            						case 90:
            						case 91:
            						case 92:
            							{
            								alt38=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 38 );
            						    ex->set_state( 19 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case CHAR:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt38=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt38=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 38 );
            								    ex->set_state( 36 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case AT:
            						case BACKGROUND:
            						case DEFER:
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACE:
            						case LBRACKET:
            						case LOW_PRIORITY:
            						case LSQBRACKET:
            						case QUESTION:
            						case SLICETOK:
            						case SSOR:
            						case 72:
            						case 73:
            						case 75:
            						case 76:
            						case 77:
            						case 79:
            						case 81:
            						case 83:
            						case 84:
            						case 86:
            						case 87:
            						case 89:
            						case 90:
            						case 91:
            						case 92:
            							{
            								alt38=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 38 );
            						    ex->set_state( 20 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case STRING:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt38=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt38=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 38 );
            								    ex->set_state( 36 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case AT:
            						case BACKGROUND:
            						case DEFER:
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACE:
            						case LBRACKET:
            						case LOW_PRIORITY:
            						case LSQBRACKET:
            						case QUESTION:
            						case SLICETOK:
            						case SSOR:
            						case 72:
            						case 73:
            						case 75:
            						case 76:
            						case 77:
            						case 79:
            						case 81:
            						case 83:
            						case 84:
            						case 86:
            						case 87:
            						case 89:
            						case 90:
            						case 91:
            						case 92:
            							{
            								alt38=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 38 );
            						    ex->set_state( 21 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case BOOL:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt38=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt38=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 38 );
            								    ex->set_state( 36 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case AT:
            						case BACKGROUND:
            						case DEFER:
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACE:
            						case LBRACKET:
            						case LOW_PRIORITY:
            						case LSQBRACKET:
            						case QUESTION:
            						case SLICETOK:
            						case SSOR:
            						case 72:
            						case 73:
            						case 75:
            						case 76:
            						case 77:
            						case 79:
            						case 81:
            						case 83:
            						case 84:
            						case 86:
            						case 87:
            						case 89:
            						case 90:
            						case 91:
            						case 92:
            							{
            								alt38=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 38 );
            						    ex->set_state( 22 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case NULLTOK:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt38=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt38=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 38 );
            								    ex->set_state( 36 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case AT:
            						case BACKGROUND:
            						case DEFER:
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACE:
            						case LBRACKET:
            						case LOW_PRIORITY:
            						case LSQBRACKET:
            						case QUESTION:
            						case SLICETOK:
            						case SSOR:
            						case 72:
            						case 73:
            						case 75:
            						case 76:
            						case 77:
            						case 79:
            						case 81:
            						case 83:
            						case 84:
            						case 86:
            						case 87:
            						case 89:
            						case 90:
            						case 91:
            						case 92:
            							{
            								alt38=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 38 );
            						    ex->set_state( 23 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case THIS_TOK:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt38=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt38=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 38 );
            								    ex->set_state( 36 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case AT:
            						case BACKGROUND:
            						case DEFER:
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACE:
            						case LBRACKET:
            						case LOW_PRIORITY:
            						case LSQBRACKET:
            						case QUESTION:
            						case SLICETOK:
            						case SSOR:
            						case 72:
            						case 73:
            						case 75:
            						case 76:
            						case 77:
            						case 79:
            						case 81:
            						case 83:
            						case 84:
            						case 86:
            						case 87:
            						case 89:
            						case 90:
            						case 91:
            						case 92:
            							{
            								alt38=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 38 );
            						    ex->set_state( 24 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case VOID_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt38=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt38=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 38 );
            														    ex->set_state( 36 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case AT:
            												case BACKGROUND:
            												case DEFER:
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACE:
            												case LBRACKET:
            												case LOW_PRIORITY:
            												case LSQBRACKET:
            												case QUESTION:
            												case SLICETOK:
            												case SSOR:
            												case 72:
            												case 73:
            												case 75:
            												case 76:
            												case 77:
            												case 79:
            												case 81:
            												case 83:
            												case 84:
            												case 86:
            												case 87:
            												case 89:
            												case 90:
            												case 91:
            												case 92:
            													{
            														alt38=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 38 );
            												    ex->set_state( 59 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 38 );
            										    ex->set_state( 56 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 38 );
            								    ex->set_state( 37 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt38=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 38 );
            						    ex->set_state( 25 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case INT_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt38=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt38=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 38 );
            														    ex->set_state( 36 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case AT:
            												case BACKGROUND:
            												case DEFER:
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACE:
            												case LBRACKET:
            												case LOW_PRIORITY:
            												case LSQBRACKET:
            												case QUESTION:
            												case SLICETOK:
            												case SSOR:
            												case 72:
            												case 73:
            												case 75:
            												case 76:
            												case 77:
            												case 79:
            												case 81:
            												case 83:
            												case 84:
            												case 86:
            												case 87:
            												case 89:
            												case 90:
            												case 91:
            												case 92:
            													{
            														alt38=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 38 );
            												    ex->set_state( 59 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 38 );
            										    ex->set_state( 56 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 38 );
            								    ex->set_state( 37 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt38=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 38 );
            						    ex->set_state( 26 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case SIZE_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt38=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt38=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 38 );
            														    ex->set_state( 36 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case AT:
            												case BACKGROUND:
            												case DEFER:
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACE:
            												case LBRACKET:
            												case LOW_PRIORITY:
            												case LSQBRACKET:
            												case QUESTION:
            												case SLICETOK:
            												case SSOR:
            												case 72:
            												case 73:
            												case 75:
            												case 76:
            												case 77:
            												case 79:
            												case 81:
            												case 83:
            												case 84:
            												case 86:
            												case 87:
            												case 89:
            												case 90:
            												case 91:
            												case 92:
            													{
            														alt38=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 38 );
            												    ex->set_state( 59 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 38 );
            										    ex->set_state( 56 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 38 );
            								    ex->set_state( 37 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt38=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 38 );
            						    ex->set_state( 27 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case FLOAT_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt38=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt38=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 38 );
            														    ex->set_state( 36 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case AT:
            												case BACKGROUND:
            												case DEFER:
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACE:
            												case LBRACKET:
            												case LOW_PRIORITY:
            												case LSQBRACKET:
            												case QUESTION:
            												case SLICETOK:
            												case SSOR:
            												case 72:
            												case 73:
            												case 75:
            												case 76:
            												case 77:
            												case 79:
            												case 81:
            												case 83:
            												case 84:
            												case 86:
            												case 87:
            												case 89:
            												case 90:
            												case 91:
            												case 92:
            													{
            														alt38=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 38 );
            												    ex->set_state( 59 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 38 );
            										    ex->set_state( 56 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 38 );
            								    ex->set_state( 37 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt38=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 38 );
            						    ex->set_state( 28 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case CHAR_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt38=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt38=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 38 );
            														    ex->set_state( 36 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case AT:
            												case BACKGROUND:
            												case DEFER:
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACE:
            												case LBRACKET:
            												case LOW_PRIORITY:
            												case LSQBRACKET:
            												case QUESTION:
            												case SLICETOK:
            												case SSOR:
            												case 72:
            												case 73:
            												case 75:
            												case 76:
            												case 77:
            												case 79:
            												case 81:
            												case 83:
            												case 84:
            												case 86:
            												case 87:
            												case 89:
            												case 90:
            												case 91:
            												case 92:
            													{
            														alt38=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 38 );
            												    ex->set_state( 59 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 38 );
            										    ex->set_state( 56 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 38 );
            								    ex->set_state( 37 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt38=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 38 );
            						    ex->set_state( 29 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case BOOL_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt38=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt38=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 38 );
            														    ex->set_state( 36 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case AT:
            												case BACKGROUND:
            												case DEFER:
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACE:
            												case LBRACKET:
            												case LOW_PRIORITY:
            												case LSQBRACKET:
            												case QUESTION:
            												case SLICETOK:
            												case SSOR:
            												case 72:
            												case 73:
            												case 75:
            												case 76:
            												case 77:
            												case 79:
            												case 81:
            												case 83:
            												case 84:
            												case 86:
            												case 87:
            												case 89:
            												case 90:
            												case 91:
            												case 92:
            													{
            														alt38=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 38 );
            												    ex->set_state( 59 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 38 );
            										    ex->set_state( 56 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 38 );
            								    ex->set_state( 37 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt38=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 38 );
            						    ex->set_state( 30 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case CPTR_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt38=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt38=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 38 );
            														    ex->set_state( 36 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case AT:
            												case BACKGROUND:
            												case DEFER:
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACE:
            												case LBRACKET:
            												case LOW_PRIORITY:
            												case LSQBRACKET:
            												case QUESTION:
            												case SLICETOK:
            												case SSOR:
            												case 72:
            												case 73:
            												case 75:
            												case 76:
            												case 77:
            												case 79:
            												case 81:
            												case 83:
            												case 84:
            												case 86:
            												case 87:
            												case 89:
            												case 90:
            												case 91:
            												case 92:
            													{
            														alt38=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 38 );
            												    ex->set_state( 59 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 38 );
            										    ex->set_state( 56 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 38 );
            								    ex->set_state( 37 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt38=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 38 );
            						    ex->set_state( 31 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case STRING_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt38=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt38=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 38 );
            														    ex->set_state( 36 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case AT:
            												case BACKGROUND:
            												case DEFER:
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACE:
            												case LBRACKET:
            												case LOW_PRIORITY:
            												case LSQBRACKET:
            												case QUESTION:
            												case SLICETOK:
            												case SSOR:
            												case 72:
            												case 73:
            												case 75:
            												case 76:
            												case 77:
            												case 79:
            												case 81:
            												case 83:
            												case 84:
            												case 86:
            												case 87:
            												case 89:
            												case 90:
            												case 91:
            												case 92:
            													{
            														alt38=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 38 );
            												    ex->set_state( 59 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 38 );
            										    ex->set_state( 56 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 38 );
            								    ex->set_state( 37 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt38=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 38 );
            						    ex->set_state( 32 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case DOUBDEC:
            				case DOUBINC:
            				case ID:
            				case LBRACKET:
            				case LENGTH:
            				case RESOURCE:
            				case SHARED_REF:
            				case TYPE:
            				case 71:
            				case 81:
            					{
            						alt38=2;
            					}
            				    break;

            				default:
            				    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 38 );
            				    ex->set_state( 13 );


            				    goto ruleinstructionScalarEx;

            				}

            			}
            		    break;
            		case DLSQBRACKET:
            			{
            				switch ( this->LA(3) )
            				{
            				case DRSQBRACKET:
            					{
            						switch ( this->LA(4) )
            						{
            						case ID:
            							{
            								alt38=1;
            							}
            						    break;
            						case LBRACKET:
            							{
            								alt38=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 38 );
            						    ex->set_state( 33 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case BOOL:
            				case BOOL_TYPE:
            				case CHAR:
            				case CHAR_TYPE:
            				case CPTR_TYPE:
            				case DOUBDEC:
            				case DOUBINC:
            				case FLOAT:
            				case FLOAT_TYPE:
            				case ID:
            				case INT:
            				case INT_TYPE:
            				case LBRACKET:
            				case LENGTH:
            				case NULLTOK:
            				case RESOURCE:
            				case SHARED_REF:
            				case SIZE:
            				case SIZE_TYPE:
            				case STRING:
            				case STRING_TYPE:
            				case THIS_TOK:
            				case TYPE:
            				case VOID_TYPE:
            				case 71:
            				case 81:
            					{
            						alt38=2;
            					}
            				    break;

            				default:
            				    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 38 );
            				    ex->set_state( 14 );


            				    goto ruleinstructionScalarEx;

            				}

            			}
            		    break;
            		case LBRACKET:
            			{
            				alt38=2;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 38 );
            		    ex->set_state( 9 );


            		    goto ruleinstructionScalarEx;

            		}

            	}
                break;
            case SHARED_REF:
            	{
            		switch ( this->LA(2) )
            		{
            		case TYPE:
            			{
            				switch ( this->LA(3) )
            				{
            				case LSQBRACKET:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case LBRACKET:
            									{
            										alt38=2;
            									}
            								    break;
            								case ID:
            									{
            										alt38=1;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 38 );
            								    ex->set_state( 38 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case INT:
            							{
            								switch ( this->LA(5) )
            								{
            								case RSQBRACKET:
            									{
            										switch ( this->LA(6) )
            										{
            										case ID:
            											{
            												alt38=1;
            											}
            										    break;
            										case LBRACKET:
            											{
            												alt38=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 38 );
            										    ex->set_state( 57 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;
            								case AT:
            								case BACKGROUND:
            								case DEFER:
            								case DOUBDEC:
            								case DOUBINC:
            								case LBRACE:
            								case LBRACKET:
            								case LOW_PRIORITY:
            								case LSQBRACKET:
            								case QUESTION:
            								case SLICETOK:
            								case SSOR:
            								case 72:
            								case 73:
            								case 75:
            								case 76:
            								case 77:
            								case 79:
            								case 81:
            								case 83:
            								case 84:
            								case 86:
            								case 87:
            								case 89:
            								case 90:
            								case 91:
            								case 92:
            									{
            										alt38=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 38 );
            								    ex->set_state( 39 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case SIZE:
            							{
            								switch ( this->LA(5) )
            								{
            								case RSQBRACKET:
            									{
            										switch ( this->LA(6) )
            										{
            										case ID:
            											{
            												alt38=1;
            											}
            										    break;
            										case LBRACKET:
            											{
            												alt38=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 38 );
            										    ex->set_state( 57 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;
            								case AT:
            								case BACKGROUND:
            								case DEFER:
            								case DOUBDEC:
            								case DOUBINC:
            								case LBRACE:
            								case LBRACKET:
            								case LOW_PRIORITY:
            								case LSQBRACKET:
            								case QUESTION:
            								case SLICETOK:
            								case SSOR:
            								case 72:
            								case 73:
            								case 75:
            								case 76:
            								case 77:
            								case 79:
            								case 81:
            								case 83:
            								case 84:
            								case 86:
            								case 87:
            								case 89:
            								case 90:
            								case 91:
            								case 92:
            									{
            										alt38=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 38 );
            								    ex->set_state( 40 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case FLOAT:
            							{
            								switch ( this->LA(5) )
            								{
            								case RSQBRACKET:
            									{
            										switch ( this->LA(6) )
            										{
            										case ID:
            											{
            												alt38=1;
            											}
            										    break;
            										case LBRACKET:
            											{
            												alt38=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 38 );
            										    ex->set_state( 57 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;
            								case AT:
            								case BACKGROUND:
            								case DEFER:
            								case DOUBDEC:
            								case DOUBINC:
            								case LBRACE:
            								case LBRACKET:
            								case LOW_PRIORITY:
            								case LSQBRACKET:
            								case QUESTION:
            								case SLICETOK:
            								case SSOR:
            								case 72:
            								case 73:
            								case 75:
            								case 76:
            								case 77:
            								case 79:
            								case 81:
            								case 83:
            								case 84:
            								case 86:
            								case 87:
            								case 89:
            								case 90:
            								case 91:
            								case 92:
            									{
            										alt38=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 38 );
            								    ex->set_state( 41 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case CHAR:
            							{
            								switch ( this->LA(5) )
            								{
            								case RSQBRACKET:
            									{
            										switch ( this->LA(6) )
            										{
            										case ID:
            											{
            												alt38=1;
            											}
            										    break;
            										case LBRACKET:
            											{
            												alt38=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 38 );
            										    ex->set_state( 57 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;
            								case AT:
            								case BACKGROUND:
            								case DEFER:
            								case DOUBDEC:
            								case DOUBINC:
            								case LBRACE:
            								case LBRACKET:
            								case LOW_PRIORITY:
            								case LSQBRACKET:
            								case QUESTION:
            								case SLICETOK:
            								case SSOR:
            								case 72:
            								case 73:
            								case 75:
            								case 76:
            								case 77:
            								case 79:
            								case 81:
            								case 83:
            								case 84:
            								case 86:
            								case 87:
            								case 89:
            								case 90:
            								case 91:
            								case 92:
            									{
            										alt38=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 38 );
            								    ex->set_state( 42 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case STRING:
            							{
            								switch ( this->LA(5) )
            								{
            								case RSQBRACKET:
            									{
            										switch ( this->LA(6) )
            										{
            										case ID:
            											{
            												alt38=1;
            											}
            										    break;
            										case LBRACKET:
            											{
            												alt38=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 38 );
            										    ex->set_state( 57 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;
            								case AT:
            								case BACKGROUND:
            								case DEFER:
            								case DOUBDEC:
            								case DOUBINC:
            								case LBRACE:
            								case LBRACKET:
            								case LOW_PRIORITY:
            								case LSQBRACKET:
            								case QUESTION:
            								case SLICETOK:
            								case SSOR:
            								case 72:
            								case 73:
            								case 75:
            								case 76:
            								case 77:
            								case 79:
            								case 81:
            								case 83:
            								case 84:
            								case 86:
            								case 87:
            								case 89:
            								case 90:
            								case 91:
            								case 92:
            									{
            										alt38=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 38 );
            								    ex->set_state( 43 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case BOOL:
            							{
            								switch ( this->LA(5) )
            								{
            								case RSQBRACKET:
            									{
            										switch ( this->LA(6) )
            										{
            										case ID:
            											{
            												alt38=1;
            											}
            										    break;
            										case LBRACKET:
            											{
            												alt38=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 38 );
            										    ex->set_state( 57 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;
            								case AT:
            								case BACKGROUND:
            								case DEFER:
            								case DOUBDEC:
            								case DOUBINC:
            								case LBRACE:
            								case LBRACKET:
            								case LOW_PRIORITY:
            								case LSQBRACKET:
            								case QUESTION:
            								case SLICETOK:
            								case SSOR:
            								case 72:
            								case 73:
            								case 75:
            								case 76:
            								case 77:
            								case 79:
            								case 81:
            								case 83:
            								case 84:
            								case 86:
            								case 87:
            								case 89:
            								case 90:
            								case 91:
            								case 92:
            									{
            										alt38=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 38 );
            								    ex->set_state( 44 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case NULLTOK:
            							{
            								switch ( this->LA(5) )
            								{
            								case RSQBRACKET:
            									{
            										switch ( this->LA(6) )
            										{
            										case ID:
            											{
            												alt38=1;
            											}
            										    break;
            										case LBRACKET:
            											{
            												alt38=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 38 );
            										    ex->set_state( 57 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;
            								case AT:
            								case BACKGROUND:
            								case DEFER:
            								case DOUBDEC:
            								case DOUBINC:
            								case LBRACE:
            								case LBRACKET:
            								case LOW_PRIORITY:
            								case LSQBRACKET:
            								case QUESTION:
            								case SLICETOK:
            								case SSOR:
            								case 72:
            								case 73:
            								case 75:
            								case 76:
            								case 77:
            								case 79:
            								case 81:
            								case 83:
            								case 84:
            								case 86:
            								case 87:
            								case 89:
            								case 90:
            								case 91:
            								case 92:
            									{
            										alt38=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 38 );
            								    ex->set_state( 45 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case THIS_TOK:
            							{
            								switch ( this->LA(5) )
            								{
            								case RSQBRACKET:
            									{
            										switch ( this->LA(6) )
            										{
            										case ID:
            											{
            												alt38=1;
            											}
            										    break;
            										case LBRACKET:
            											{
            												alt38=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 38 );
            										    ex->set_state( 57 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;
            								case AT:
            								case BACKGROUND:
            								case DEFER:
            								case DOUBDEC:
            								case DOUBINC:
            								case LBRACE:
            								case LBRACKET:
            								case LOW_PRIORITY:
            								case LSQBRACKET:
            								case QUESTION:
            								case SLICETOK:
            								case SSOR:
            								case 72:
            								case 73:
            								case 75:
            								case 76:
            								case 77:
            								case 79:
            								case 81:
            								case 83:
            								case 84:
            								case 86:
            								case 87:
            								case 89:
            								case 90:
            								case 91:
            								case 92:
            									{
            										alt38=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 38 );
            								    ex->set_state( 46 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case VOID_TYPE:
            							{
            								switch ( this->LA(5) )
            								{
            								case LBRACE:
            									{
            										switch ( this->LA(6) )
            										{
            										case STRING:
            											{
            												switch ( this->LA(7) )
            												{
            												case RBRACE:
            													{
            														switch ( this->LA(8) )
            														{
            														case RSQBRACKET:
            															{
            																switch ( this->LA(9) )
            																{
            																case ID:
            																	{
            																		alt38=1;
            																	}
            																    break;
            																case LBRACKET:
            																	{
            																		alt38=2;
            																	}
            																    break;

            																default:
            																    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            																    ex->set_decisionNum( 38 );
            																    ex->set_state( 57 );


            																    goto ruleinstructionScalarEx;

            																}

            															}
            														    break;
            														case AT:
            														case BACKGROUND:
            														case DEFER:
            														case DOUBDEC:
            														case DOUBINC:
            														case LBRACE:
            														case LBRACKET:
            														case LOW_PRIORITY:
            														case LSQBRACKET:
            														case QUESTION:
            														case SLICETOK:
            														case SSOR:
            														case 72:
            														case 73:
            														case 75:
            														case 76:
            														case 77:
            														case 79:
            														case 81:
            														case 83:
            														case 84:
            														case 86:
            														case 87:
            														case 89:
            														case 90:
            														case 91:
            														case 92:
            															{
            																alt38=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 38 );
            														    ex->set_state( 61 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 38 );
            												    ex->set_state( 60 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 38 );
            										    ex->set_state( 58 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;
            								case DLSQBRACKET:
            								case LBRACKET:
            								case LSQBRACKET:
            									{
            										alt38=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 38 );
            								    ex->set_state( 47 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case INT_TYPE:
            							{
            								switch ( this->LA(5) )
            								{
            								case LBRACE:
            									{
            										switch ( this->LA(6) )
            										{
            										case STRING:
            											{
            												switch ( this->LA(7) )
            												{
            												case RBRACE:
            													{
            														switch ( this->LA(8) )
            														{
            														case RSQBRACKET:
            															{
            																switch ( this->LA(9) )
            																{
            																case ID:
            																	{
            																		alt38=1;
            																	}
            																    break;
            																case LBRACKET:
            																	{
            																		alt38=2;
            																	}
            																    break;

            																default:
            																    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            																    ex->set_decisionNum( 38 );
            																    ex->set_state( 57 );


            																    goto ruleinstructionScalarEx;

            																}

            															}
            														    break;
            														case AT:
            														case BACKGROUND:
            														case DEFER:
            														case DOUBDEC:
            														case DOUBINC:
            														case LBRACE:
            														case LBRACKET:
            														case LOW_PRIORITY:
            														case LSQBRACKET:
            														case QUESTION:
            														case SLICETOK:
            														case SSOR:
            														case 72:
            														case 73:
            														case 75:
            														case 76:
            														case 77:
            														case 79:
            														case 81:
            														case 83:
            														case 84:
            														case 86:
            														case 87:
            														case 89:
            														case 90:
            														case 91:
            														case 92:
            															{
            																alt38=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 38 );
            														    ex->set_state( 61 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 38 );
            												    ex->set_state( 60 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 38 );
            										    ex->set_state( 58 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;
            								case DLSQBRACKET:
            								case LBRACKET:
            								case LSQBRACKET:
            									{
            										alt38=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 38 );
            								    ex->set_state( 48 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case SIZE_TYPE:
            							{
            								switch ( this->LA(5) )
            								{
            								case LBRACE:
            									{
            										switch ( this->LA(6) )
            										{
            										case STRING:
            											{
            												switch ( this->LA(7) )
            												{
            												case RBRACE:
            													{
            														switch ( this->LA(8) )
            														{
            														case RSQBRACKET:
            															{
            																switch ( this->LA(9) )
            																{
            																case ID:
            																	{
            																		alt38=1;
            																	}
            																    break;
            																case LBRACKET:
            																	{
            																		alt38=2;
            																	}
            																    break;

            																default:
            																    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            																    ex->set_decisionNum( 38 );
            																    ex->set_state( 57 );


            																    goto ruleinstructionScalarEx;

            																}

            															}
            														    break;
            														case AT:
            														case BACKGROUND:
            														case DEFER:
            														case DOUBDEC:
            														case DOUBINC:
            														case LBRACE:
            														case LBRACKET:
            														case LOW_PRIORITY:
            														case LSQBRACKET:
            														case QUESTION:
            														case SLICETOK:
            														case SSOR:
            														case 72:
            														case 73:
            														case 75:
            														case 76:
            														case 77:
            														case 79:
            														case 81:
            														case 83:
            														case 84:
            														case 86:
            														case 87:
            														case 89:
            														case 90:
            														case 91:
            														case 92:
            															{
            																alt38=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 38 );
            														    ex->set_state( 61 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 38 );
            												    ex->set_state( 60 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 38 );
            										    ex->set_state( 58 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;
            								case DLSQBRACKET:
            								case LBRACKET:
            								case LSQBRACKET:
            									{
            										alt38=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 38 );
            								    ex->set_state( 49 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case FLOAT_TYPE:
            							{
            								switch ( this->LA(5) )
            								{
            								case LBRACE:
            									{
            										switch ( this->LA(6) )
            										{
            										case STRING:
            											{
            												switch ( this->LA(7) )
            												{
            												case RBRACE:
            													{
            														switch ( this->LA(8) )
            														{
            														case RSQBRACKET:
            															{
            																switch ( this->LA(9) )
            																{
            																case ID:
            																	{
            																		alt38=1;
            																	}
            																    break;
            																case LBRACKET:
            																	{
            																		alt38=2;
            																	}
            																    break;

            																default:
            																    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            																    ex->set_decisionNum( 38 );
            																    ex->set_state( 57 );


            																    goto ruleinstructionScalarEx;

            																}

            															}
            														    break;
            														case AT:
            														case BACKGROUND:
            														case DEFER:
            														case DOUBDEC:
            														case DOUBINC:
            														case LBRACE:
            														case LBRACKET:
            														case LOW_PRIORITY:
            														case LSQBRACKET:
            														case QUESTION:
            														case SLICETOK:
            														case SSOR:
            														case 72:
            														case 73:
            														case 75:
            														case 76:
            														case 77:
            														case 79:
            														case 81:
            														case 83:
            														case 84:
            														case 86:
            														case 87:
            														case 89:
            														case 90:
            														case 91:
            														case 92:
            															{
            																alt38=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 38 );
            														    ex->set_state( 61 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 38 );
            												    ex->set_state( 60 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 38 );
            										    ex->set_state( 58 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;
            								case DLSQBRACKET:
            								case LBRACKET:
            								case LSQBRACKET:
            									{
            										alt38=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 38 );
            								    ex->set_state( 50 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case CHAR_TYPE:
            							{
            								switch ( this->LA(5) )
            								{
            								case LBRACE:
            									{
            										switch ( this->LA(6) )
            										{
            										case STRING:
            											{
            												switch ( this->LA(7) )
            												{
            												case RBRACE:
            													{
            														switch ( this->LA(8) )
            														{
            														case RSQBRACKET:
            															{
            																switch ( this->LA(9) )
            																{
            																case ID:
            																	{
            																		alt38=1;
            																	}
            																    break;
            																case LBRACKET:
            																	{
            																		alt38=2;
            																	}
            																    break;

            																default:
            																    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            																    ex->set_decisionNum( 38 );
            																    ex->set_state( 57 );


            																    goto ruleinstructionScalarEx;

            																}

            															}
            														    break;
            														case AT:
            														case BACKGROUND:
            														case DEFER:
            														case DOUBDEC:
            														case DOUBINC:
            														case LBRACE:
            														case LBRACKET:
            														case LOW_PRIORITY:
            														case LSQBRACKET:
            														case QUESTION:
            														case SLICETOK:
            														case SSOR:
            														case 72:
            														case 73:
            														case 75:
            														case 76:
            														case 77:
            														case 79:
            														case 81:
            														case 83:
            														case 84:
            														case 86:
            														case 87:
            														case 89:
            														case 90:
            														case 91:
            														case 92:
            															{
            																alt38=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 38 );
            														    ex->set_state( 61 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 38 );
            												    ex->set_state( 60 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 38 );
            										    ex->set_state( 58 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;
            								case DLSQBRACKET:
            								case LBRACKET:
            								case LSQBRACKET:
            									{
            										alt38=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 38 );
            								    ex->set_state( 51 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case BOOL_TYPE:
            							{
            								switch ( this->LA(5) )
            								{
            								case LBRACE:
            									{
            										switch ( this->LA(6) )
            										{
            										case STRING:
            											{
            												switch ( this->LA(7) )
            												{
            												case RBRACE:
            													{
            														switch ( this->LA(8) )
            														{
            														case RSQBRACKET:
            															{
            																switch ( this->LA(9) )
            																{
            																case ID:
            																	{
            																		alt38=1;
            																	}
            																    break;
            																case LBRACKET:
            																	{
            																		alt38=2;
            																	}
            																    break;

            																default:
            																    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            																    ex->set_decisionNum( 38 );
            																    ex->set_state( 57 );


            																    goto ruleinstructionScalarEx;

            																}

            															}
            														    break;
            														case AT:
            														case BACKGROUND:
            														case DEFER:
            														case DOUBDEC:
            														case DOUBINC:
            														case LBRACE:
            														case LBRACKET:
            														case LOW_PRIORITY:
            														case LSQBRACKET:
            														case QUESTION:
            														case SLICETOK:
            														case SSOR:
            														case 72:
            														case 73:
            														case 75:
            														case 76:
            														case 77:
            														case 79:
            														case 81:
            														case 83:
            														case 84:
            														case 86:
            														case 87:
            														case 89:
            														case 90:
            														case 91:
            														case 92:
            															{
            																alt38=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 38 );
            														    ex->set_state( 61 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 38 );
            												    ex->set_state( 60 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 38 );
            										    ex->set_state( 58 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;
            								case DLSQBRACKET:
            								case LBRACKET:
            								case LSQBRACKET:
            									{
            										alt38=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 38 );
            								    ex->set_state( 52 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case CPTR_TYPE:
            							{
            								switch ( this->LA(5) )
            								{
            								case LBRACE:
            									{
            										switch ( this->LA(6) )
            										{
            										case STRING:
            											{
            												switch ( this->LA(7) )
            												{
            												case RBRACE:
            													{
            														switch ( this->LA(8) )
            														{
            														case RSQBRACKET:
            															{
            																switch ( this->LA(9) )
            																{
            																case ID:
            																	{
            																		alt38=1;
            																	}
            																    break;
            																case LBRACKET:
            																	{
            																		alt38=2;
            																	}
            																    break;

            																default:
            																    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            																    ex->set_decisionNum( 38 );
            																    ex->set_state( 57 );


            																    goto ruleinstructionScalarEx;

            																}

            															}
            														    break;
            														case AT:
            														case BACKGROUND:
            														case DEFER:
            														case DOUBDEC:
            														case DOUBINC:
            														case LBRACE:
            														case LBRACKET:
            														case LOW_PRIORITY:
            														case LSQBRACKET:
            														case QUESTION:
            														case SLICETOK:
            														case SSOR:
            														case 72:
            														case 73:
            														case 75:
            														case 76:
            														case 77:
            														case 79:
            														case 81:
            														case 83:
            														case 84:
            														case 86:
            														case 87:
            														case 89:
            														case 90:
            														case 91:
            														case 92:
            															{
            																alt38=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 38 );
            														    ex->set_state( 61 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 38 );
            												    ex->set_state( 60 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 38 );
            										    ex->set_state( 58 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;
            								case DLSQBRACKET:
            								case LBRACKET:
            								case LSQBRACKET:
            									{
            										alt38=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 38 );
            								    ex->set_state( 53 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case STRING_TYPE:
            							{
            								switch ( this->LA(5) )
            								{
            								case LBRACE:
            									{
            										switch ( this->LA(6) )
            										{
            										case STRING:
            											{
            												switch ( this->LA(7) )
            												{
            												case RBRACE:
            													{
            														switch ( this->LA(8) )
            														{
            														case RSQBRACKET:
            															{
            																switch ( this->LA(9) )
            																{
            																case ID:
            																	{
            																		alt38=1;
            																	}
            																    break;
            																case LBRACKET:
            																	{
            																		alt38=2;
            																	}
            																    break;

            																default:
            																    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            																    ex->set_decisionNum( 38 );
            																    ex->set_state( 57 );


            																    goto ruleinstructionScalarEx;

            																}

            															}
            														    break;
            														case AT:
            														case BACKGROUND:
            														case DEFER:
            														case DOUBDEC:
            														case DOUBINC:
            														case LBRACE:
            														case LBRACKET:
            														case LOW_PRIORITY:
            														case LSQBRACKET:
            														case QUESTION:
            														case SLICETOK:
            														case SSOR:
            														case 72:
            														case 73:
            														case 75:
            														case 76:
            														case 77:
            														case 79:
            														case 81:
            														case 83:
            														case 84:
            														case 86:
            														case 87:
            														case 89:
            														case 90:
            														case 91:
            														case 92:
            															{
            																alt38=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 38 );
            														    ex->set_state( 61 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 38 );
            												    ex->set_state( 60 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 38 );
            										    ex->set_state( 58 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;
            								case DLSQBRACKET:
            								case LBRACKET:
            								case LSQBRACKET:
            									{
            										alt38=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 38 );
            								    ex->set_state( 54 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DOUBDEC:
            						case DOUBINC:
            						case ID:
            						case LBRACKET:
            						case LENGTH:
            						case RESOURCE:
            						case SHARED_REF:
            						case TYPE:
            						case 71:
            						case 81:
            							{
            								alt38=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 38 );
            						    ex->set_state( 34 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case DLSQBRACKET:
            					{
            						switch ( this->LA(4) )
            						{
            						case DRSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt38=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt38=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 38 );
            								    ex->set_state( 55 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case BOOL:
            						case BOOL_TYPE:
            						case CHAR:
            						case CHAR_TYPE:
            						case CPTR_TYPE:
            						case DOUBDEC:
            						case DOUBINC:
            						case FLOAT:
            						case FLOAT_TYPE:
            						case ID:
            						case INT:
            						case INT_TYPE:
            						case LBRACKET:
            						case LENGTH:
            						case NULLTOK:
            						case RESOURCE:
            						case SHARED_REF:
            						case SIZE:
            						case SIZE_TYPE:
            						case STRING:
            						case STRING_TYPE:
            						case THIS_TOK:
            						case TYPE:
            						case VOID_TYPE:
            						case 71:
            						case 81:
            							{
            								alt38=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 38 );
            						    ex->set_state( 35 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case ID:
            					{
            						alt38=1;
            					}
            				    break;
            				case LBRACKET:
            					{
            						alt38=2;
            					}
            				    break;

            				default:
            				    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 38 );
            				    ex->set_state( 15 );


            				    goto ruleinstructionScalarEx;

            				}

            			}
            		    break;
            		case BOOL_TYPE:
            		case CHAR_TYPE:
            		case CPTR_TYPE:
            		case FLOAT_TYPE:
            		case INT_TYPE:
            		case SIZE_TYPE:
            		case STRING_TYPE:
            		case VOID_TYPE:
            			{
            				alt38=2;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 38 );
            		    ex->set_state( 10 );


            		    goto ruleinstructionScalarEx;

            		}

            	}
                break;
            case WEAK_REF:
            	{
            		alt38=1;
            	}
                break;
            case BOOL:
            case CHAR:
            case DOUBDEC:
            case DOUBINC:
            case FLOAT:
            case ID:
            case INT:
            case LBRACKET:
            case LENGTH:
            case NULLTOK:
            case RESOURCE:
            case SIZE:
            case STRING:
            case THIS_TOK:
            case 71:
            case 81:
            	{
            		alt38=2;
            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 38 );
                ex->set_state( 0 );


                goto ruleinstructionScalarEx;

            }

            switch (alt38)
            {
        	case 1:
        	    {
        	        this->followPush(FOLLOW_declaration_in_instructionScalar5202);
        	        declaration43=declaration();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleinstructionScalarEx;
        	        }


        	        {
        	            node = declaration43
        	            ;
        	        }


        	    }
        	    break;
        	case 2:
        	    {
        	        this->followPush(FOLLOW_assignment_or_expression_in_instructionScalar5215);
        	        assignment_or_expression44=assignment_or_expression();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleinstructionScalarEx;
        	        }


        	        {
        	            node = assignment_or_expression44
        	            ;
        	        }


        	    }
        	    break;

            }
        }
    }
    goto ruleinstructionScalarEx;
    ruleinstructionScalarEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::continue_instruction*
WNScriptASTParser::continueInst()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::continue_instruction* node;


    ImplTraits::CommonTokenType const* a = NULL;
    ImplTraits::CommonTokenType const* b = NULL;






      node = nullptr;



    {
        {
            a =  this->matchToken(CONTINUE, &FOLLOW_CONTINUE_in_continueInst5245);
            if  (this->hasException())
            {
                goto rulecontinueInstEx;
            }


            b =  this->matchToken(SEMICOLON, &FOLLOW_SEMICOLON_in_continueInst5249);
            if  (this->hasException())
            {
                goto rulecontinueInstEx;
            }


            {
                 node = m_allocator->construct<scripting::continue_instruction>(m_allocator); SET_LOCATION(node, a); SET_END_LOCATION(node, b);
            }


        }

    }
    goto rulecontinueInstEx;
    rulecontinueInstEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::break_instruction*
WNScriptASTParser::breakInst()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::break_instruction* node;


    ImplTraits::CommonTokenType const* a = NULL;
    ImplTraits::CommonTokenType const* b = NULL;






        node = nullptr;



    {
        {
            a =  this->matchToken(BREAK, &FOLLOW_BREAK_in_breakInst5275);
            if  (this->hasException())
            {
                goto rulebreakInstEx;
            }


            b =  this->matchToken(SEMICOLON, &FOLLOW_SEMICOLON_in_breakInst5279);
            if  (this->hasException())
            {
                goto rulebreakInstEx;
            }


            {
                 node = m_allocator->construct<scripting::break_instruction>(m_allocator); SET_LOCATION(node, a); SET_END_LOCATION(node, b);
            }


        }

    }
    goto rulebreakInstEx;
    rulebreakInstEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::return_instruction*
WNScriptASTParser::returnInst()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::return_instruction* node;


    ImplTraits::CommonTokenType const* a = NULL;
    ImplTraits::CommonTokenType const* b = NULL;
    ImplTraits::CommonTokenType const* c = NULL;
    ImplTraits::CommonTokenType const* d = NULL;
    scripting::expression* expr45;





        node = nullptr;



    {
        {

            ANTLR_UINT32 alt39;

            alt39=2;

            switch ( this->LA(1) )
            {
            case RETURN:
            	{
            		switch ( this->LA(2) )
            		{
            		case SEMICOLON:
            			{
            				alt39=2;
            			}
            		    break;
            		case BOOL:
            		case BOOL_TYPE:
            		case CHAR:
            		case CHAR_TYPE:
            		case CPTR_TYPE:
            		case DOUBDEC:
            		case DOUBINC:
            		case FLOAT:
            		case FLOAT_TYPE:
            		case ID:
            		case INT:
            		case INT_TYPE:
            		case LBRACKET:
            		case LENGTH:
            		case NULLTOK:
            		case RESOURCE:
            		case SHARED_REF:
            		case SIZE:
            		case SIZE_TYPE:
            		case STRING:
            		case STRING_TYPE:
            		case THIS_TOK:
            		case TYPE:
            		case VOID_TYPE:
            		case 71:
            		case 81:
            			{
            				alt39=1;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 39 );
            		    ex->set_state( 1 );


            		    goto rulereturnInstEx;

            		}

            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 39 );
                ex->set_state( 0 );


                goto rulereturnInstEx;

            }

            switch (alt39)
            {
        	case 1:
        	    {
        	        a =  this->matchToken(RETURN, &FOLLOW_RETURN_in_returnInst5306);
        	        if  (this->hasException())
        	        {
        	            goto rulereturnInstEx;
        	        }


        	        this->followPush(FOLLOW_expr_in_returnInst5308);
        	        expr45=expr();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulereturnInstEx;
        	        }


        	        b =  this->matchToken(SEMICOLON, &FOLLOW_SEMICOLON_in_returnInst5312);
        	        if  (this->hasException())
        	        {
        	            goto rulereturnInstEx;
        	        }


        	        {
        	             node = m_allocator->construct<scripting::return_instruction>(m_allocator, expr45
        	            ); SET_LOCATION(node, a); SET_END_LOCATION(node, b);
        	        }


        	    }
        	    break;
        	case 2:
        	    {
        	        c =  this->matchToken(RETURN, &FOLLOW_RETURN_in_returnInst5326);
        	        if  (this->hasException())
        	        {
        	            goto rulereturnInstEx;
        	        }


        	        d =  this->matchToken(SEMICOLON, &FOLLOW_SEMICOLON_in_returnInst5330);
        	        if  (this->hasException())
        	        {
        	            goto rulereturnInstEx;
        	        }


        	        {
        	             node = m_allocator->construct<scripting::return_instruction>(m_allocator); SET_LOCATION(node, c); SET_END_LOCATION(node, d);
        	        }


        	    }
        	    break;

            }
        }
    }
    goto rulereturnInstEx;
    rulereturnInstEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::instruction*
WNScriptASTParser::whileInst()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::instruction* node;


    ImplTraits::CommonTokenType const* WHILE48 = NULL;
    scripting::expression* expr46;
    scripting::instruction_list* instruction_list47;





        node = nullptr;



    {
        {
            WHILE48 =  this->matchToken(WHILE, &FOLLOW_WHILE_in_whileInst5363);
            if  (this->hasException())
            {
                goto rulewhileInstEx;
            }


             this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_whileInst5365);
            if  (this->hasException())
            {
                goto rulewhileInstEx;
            }


            this->followPush(FOLLOW_expr_in_whileInst5367);
            expr46=expr();

            this->followPop();
            if  (this->hasException())
            {
                goto rulewhileInstEx;
            }


             this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_whileInst5369);
            if  (this->hasException())
            {
                goto rulewhileInstEx;
            }


            this->followPush(FOLLOW_instruction_list_in_whileInst5371);
            instruction_list47=instruction_list();

            this->followPop();
            if  (this->hasException())
            {
                goto rulewhileInstEx;
            }


            {
                 node = m_allocator->construct<scripting::while_instruction>(m_allocator, expr46
                , instruction_list47
                ); SET_LOCATION(node, WHILE48); SET_END_LOCATION_FROM_NODE(node,
                instruction_list47
                );
            }


        }

    }
    goto rulewhileInstEx;
    rulewhileInstEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::instruction*
WNScriptASTParser::doInst()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::instruction* node;


    ImplTraits::CommonTokenType const* DO51 = NULL;
    ImplTraits::CommonTokenType const* SEMICOLON52 = NULL;
    scripting::expression* expr49;
    scripting::instruction_list* instruction_list50;





        node = nullptr;



    {
        {
            DO51 =  this->matchToken(DO, &FOLLOW_DO_in_doInst5407);
            if  (this->hasException())
            {
                goto ruledoInstEx;
            }


            this->followPush(FOLLOW_instruction_list_in_doInst5409);
            instruction_list50=instruction_list();

            this->followPop();
            if  (this->hasException())
            {
                goto ruledoInstEx;
            }


             this->matchToken(WHILE, &FOLLOW_WHILE_in_doInst5411);
            if  (this->hasException())
            {
                goto ruledoInstEx;
            }


             this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_doInst5413);
            if  (this->hasException())
            {
                goto ruledoInstEx;
            }


            this->followPush(FOLLOW_expr_in_doInst5415);
            expr49=expr();

            this->followPop();
            if  (this->hasException())
            {
                goto ruledoInstEx;
            }


             this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_doInst5417);
            if  (this->hasException())
            {
                goto ruledoInstEx;
            }


            SEMICOLON52 =  this->matchToken(SEMICOLON, &FOLLOW_SEMICOLON_in_doInst5419);
            if  (this->hasException())
            {
                goto ruledoInstEx;
            }


            {
                node = m_allocator->construct<scripting::do_instruction>(m_allocator, expr49
                , instruction_list50
                ); SET_LOCATION(node, DO51); SET_END_LOCATION(node, SEMICOLON52);
            }


        }

    }
    goto ruledoInstEx;
    ruledoInstEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::for_instruction*
WNScriptASTParser::forInst()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::for_instruction* node;


    ImplTraits::CommonTokenType const* FOR53 = NULL;
    scripting::instruction* a;
    scripting::expression* b;
    scripting::instruction* c;
    scripting::instruction_list* d;





        node =  m_allocator->construct<scripting::for_instruction>(m_allocator);



    {
        {
            FOR53 =  this->matchToken(FOR, &FOLLOW_FOR_in_forInst5451);
            if  (this->hasException())
            {
                goto ruleforInstEx;
            }


             this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_forInst5453);
            if  (this->hasException())
            {
                goto ruleforInstEx;
            }


            {
                 SET_LOCATION(node, FOR53);
            }


            {
                int alt40=2;
                switch ( this->LA(1) )
                {
                    case BOOL:
                    case BOOL_TYPE:
                    case CHAR:
                    case CHAR_TYPE:
                    case CPTR_TYPE:
                    case DOUBDEC:
                    case DOUBINC:
                    case FLOAT:
                    case FLOAT_TYPE:
                    case ID:
                    case INT:
                    case INT_TYPE:
                    case LBRACKET:
                    case LENGTH:
                    case NULLTOK:
                    case RESOURCE:
                    case SHARED_REF:
                    case SIZE:
                    case SIZE_TYPE:
                    case STRING:
                    case STRING_TYPE:
                    case THIS_TOK:
                    case TYPE:
                    case VOID_TYPE:
                    case WEAK_REF:
                    case 71:
                    case 81:
                    	{
                    		alt40=1;
                    	}
                        break;
                }

                switch (alt40)
                {
            	case 1:
            	    {
            	        this->followPush(FOLLOW_instructionScalar_in_forInst5481);
            	        a=instructionScalar();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleforInstEx;
            	        }


            	        {
            	            node->add_initializer(a
            	            );
            	        }


            	    }
            	    break;

                }
            }

             this->matchToken(SEMICOLON, &FOLLOW_SEMICOLON_in_forInst5487);
            if  (this->hasException())
            {
                goto ruleforInstEx;
            }


            {
                int alt41=2;
                switch ( this->LA(1) )
                {
                    case BOOL:
                    case BOOL_TYPE:
                    case CHAR:
                    case CHAR_TYPE:
                    case CPTR_TYPE:
                    case DOUBDEC:
                    case DOUBINC:
                    case FLOAT:
                    case FLOAT_TYPE:
                    case ID:
                    case INT:
                    case INT_TYPE:
                    case LBRACKET:
                    case LENGTH:
                    case NULLTOK:
                    case RESOURCE:
                    case SHARED_REF:
                    case SIZE:
                    case SIZE_TYPE:
                    case STRING:
                    case STRING_TYPE:
                    case THIS_TOK:
                    case TYPE:
                    case VOID_TYPE:
                    case 71:
                    case 81:
                    	{
                    		alt41=1;
                    	}
                        break;
                }

                switch (alt41)
                {
            	case 1:
            	    {
            	        this->followPush(FOLLOW_expr_in_forInst5512);
            	        b=expr();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleforInstEx;
            	        }


            	        {
            	            node->add_condition(b
            	            );
            	        }


            	    }
            	    break;

                }
            }

             this->matchToken(SEMICOLON, &FOLLOW_SEMICOLON_in_forInst5526);
            if  (this->hasException())
            {
                goto ruleforInstEx;
            }


            {
                int alt42=2;
                switch ( this->LA(1) )
                {
                    case BOOL:
                    case BOOL_TYPE:
                    case CHAR:
                    case CHAR_TYPE:
                    case CPTR_TYPE:
                    case DOUBDEC:
                    case DOUBINC:
                    case FLOAT:
                    case FLOAT_TYPE:
                    case ID:
                    case INT:
                    case INT_TYPE:
                    case LBRACKET:
                    case LENGTH:
                    case NULLTOK:
                    case RESOURCE:
                    case SHARED_REF:
                    case SIZE:
                    case SIZE_TYPE:
                    case STRING:
                    case STRING_TYPE:
                    case THIS_TOK:
                    case TYPE:
                    case VOID_TYPE:
                    case WEAK_REF:
                    case 71:
                    case 81:
                    	{
                    		alt42=1;
                    	}
                        break;
                }

                switch (alt42)
                {
            	case 1:
            	    {
            	        this->followPush(FOLLOW_instructionScalar_in_forInst5551);
            	        c=instructionScalar();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleforInstEx;
            	        }


            	        {
            	            node->add_post_op(c
            	            );
            	        }


            	    }
            	    break;

                }
            }

             this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_forInst5557);
            if  (this->hasException())
            {
                goto ruleforInstEx;
            }


            {
                this->followPush(FOLLOW_instruction_list_in_forInst5582);
                d=instruction_list();

                this->followPop();
                if  (this->hasException())
                {
                    goto ruleforInstEx;
                }


                {
                    node->add_body(d
                    ); SET_END_LOCATION_FROM_NODE(node, d
                    );
                }


            }


        }

    }
    goto ruleforInstEx;
    ruleforInstEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::else_if_instruction*
WNScriptASTParser::elsemiddle()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::else_if_instruction* node;


    ImplTraits::CommonTokenType const* ELSE56 = NULL;
    scripting::expression* expr54;
    scripting::instruction_list* instruction_list55;





        node = nullptr;



    {
        {
            ELSE56 =  this->matchToken(ELSE, &FOLLOW_ELSE_in_elsemiddle5630);
            if  (this->hasException())
            {
                goto ruleelsemiddleEx;
            }


             this->matchToken(IF, &FOLLOW_IF_in_elsemiddle5632);
            if  (this->hasException())
            {
                goto ruleelsemiddleEx;
            }


             this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_elsemiddle5634);
            if  (this->hasException())
            {
                goto ruleelsemiddleEx;
            }


            this->followPush(FOLLOW_expr_in_elsemiddle5636);
            expr54=expr();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleelsemiddleEx;
            }


             this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_elsemiddle5638);
            if  (this->hasException())
            {
                goto ruleelsemiddleEx;
            }


            this->followPush(FOLLOW_instruction_list_in_elsemiddle5640);
            instruction_list55=instruction_list();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleelsemiddleEx;
            }


            {
                 node = m_allocator->construct<scripting::else_if_instruction>(m_allocator, expr54
                , instruction_list55
                ); SET_LOCATION(node, ELSE56); SET_END_LOCATION_FROM_NODE(node,
                instruction_list55
                );
            }


        }

    }
    goto ruleelsemiddleEx;
    ruleelsemiddleEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::instruction_list*
WNScriptASTParser::endif()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::instruction_list* node;


    scripting::instruction_list* instruction_list57;





        node = nullptr;



    {
        {
             this->matchToken(ELSE, &FOLLOW_ELSE_in_endif5673);
            if  (this->hasException())
            {
                goto ruleendifEx;
            }


            this->followPush(FOLLOW_instruction_list_in_endif5675);
            instruction_list57=instruction_list();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleendifEx;
            }


            {
                node = instruction_list57
                ;
            }


        }

    }
    goto ruleendifEx;
    ruleendifEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::if_instruction*
WNScriptASTParser::ifInst()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::if_instruction* node;


    ImplTraits::CommonTokenType const* IF60 = NULL;
    scripting::expression* expr58;
    scripting::instruction_list* instruction_list59;
    scripting::else_if_instruction* elsemiddle61;
    scripting::instruction_list* endif62;





        node = nullptr;



    {
        {
            IF60 =  this->matchToken(IF, &FOLLOW_IF_in_ifInst5705);
            if  (this->hasException())
            {
                goto ruleifInstEx;
            }


             this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_ifInst5707);
            if  (this->hasException())
            {
                goto ruleifInstEx;
            }


            this->followPush(FOLLOW_expr_in_ifInst5709);
            expr58=expr();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleifInstEx;
            }


             this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_ifInst5711);
            if  (this->hasException())
            {
                goto ruleifInstEx;
            }


            this->followPush(FOLLOW_instruction_list_in_ifInst5713);
            instruction_list59=instruction_list();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleifInstEx;
            }


            {
                node = m_allocator->construct<scripting::if_instruction>(m_allocator, expr58
                , instruction_list59
                ); SET_LOCATION(node, IF60); SET_END_LOCATION_FROM_NODE(node,
                instruction_list59
                );
            }



            for (;;)
            {
                int alt43=2;
                switch ( this->LA(1) )
                {
                case ELSE:
                	{
                		switch ( this->LA(2) )
                		{
                		case IF:
                			{
                				alt43=1;
                			}
                		    break;

                		}

                	}
                    break;

                }

                switch (alt43)
                {
            	case 1:
            	    {
            	        this->followPush(FOLLOW_elsemiddle_in_ifInst5730);
            	        elsemiddle61=elsemiddle();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleifInstEx;
            	        }


            	        {
            	            node->add_else_if(elsemiddle61
            	            ); SET_END_LOCATION_FROM_NODE(node, elsemiddle61
            	            );
            	        }


            	    }
            	    break;

            	default:
            	    goto loop43;
            	    break;
                }
            }
            loop43: ;


            {
                int alt44=2;
                switch ( this->LA(1) )
                {
                    case ELSE:
                    	{
                    		alt44=1;
                    	}
                        break;
                }

                switch (alt44)
                {
            	case 1:
            	    {
            	        this->followPush(FOLLOW_endif_in_ifInst5750);
            	        endif62=endif();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleifInstEx;
            	        }


            	        {
            	            node->add_else(endif62
            	            ); SET_LOCATION(node, IF60); SET_END_LOCATION_FROM_NODE(node,
            	            endif62
            	            );
            	        }


            	    }
            	    break;

                }
            }

        }

    }
    goto ruleifInstEx;
    ruleifInstEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::instruction*
WNScriptASTParser::instruction()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::instruction* node;


    scripting::if_instruction* ifInst63;
    scripting::instruction* whileInst64;
    scripting::instruction* doInst65;
    scripting::for_instruction* forInst66;
    scripting::instruction* instructionScalar67;
    scripting::break_instruction* breakInst68;
    scripting::continue_instruction* continueInst69;
    scripting::return_instruction* returnInst70;
    scripting::instruction_list* instruction_list71;





        node = nullptr;



    {
        {

            ANTLR_UINT32 alt45;

            alt45=9;

            switch ( this->LA(1) )
            {
            case IF:
            	{
            		alt45=1;
            	}
                break;
            case WHILE:
            	{
            		alt45=2;
            	}
                break;
            case DO:
            	{
            		alt45=3;
            	}
                break;
            case FOR:
            	{
            		alt45=4;
            	}
                break;
            case BOOL:
            case BOOL_TYPE:
            case CHAR:
            case CHAR_TYPE:
            case CPTR_TYPE:
            case DOUBDEC:
            case DOUBINC:
            case FLOAT:
            case FLOAT_TYPE:
            case ID:
            case INT:
            case INT_TYPE:
            case LBRACKET:
            case LENGTH:
            case NULLTOK:
            case RESOURCE:
            case SHARED_REF:
            case SIZE:
            case SIZE_TYPE:
            case STRING:
            case STRING_TYPE:
            case THIS_TOK:
            case TYPE:
            case VOID_TYPE:
            case WEAK_REF:
            case 71:
            case 81:
            	{
            		alt45=5;
            	}
                break;
            case BREAK:
            	{
            		alt45=6;
            	}
                break;
            case CONTINUE:
            	{
            		alt45=7;
            	}
                break;
            case RETURN:
            	{
            		alt45=8;
            	}
                break;
            case LBRACE:
            	{
            		alt45=9;
            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 45 );
                ex->set_state( 0 );


                goto ruleinstructionEx;

            }

            switch (alt45)
            {
        	case 1:
        	    {
        	        this->followPush(FOLLOW_ifInst_in_instruction5784);
        	        ifInst63=ifInst();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleinstructionEx;
        	        }


        	        {
        	             node = ifInst63
        	            ;
        	        }


        	    }
        	    break;
        	case 2:
        	    {
        	        this->followPush(FOLLOW_whileInst_in_instruction5805);
        	        whileInst64=whileInst();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleinstructionEx;
        	        }


        	        {
        	            node = whileInst64
        	            ;
        	        }


        	    }
        	    break;
        	case 3:
        	    {
        	        this->followPush(FOLLOW_doInst_in_instruction5822);
        	        doInst65=doInst();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleinstructionEx;
        	        }


        	        {
        	            node = doInst65
        	            ;
        	        }


        	    }
        	    break;
        	case 4:
        	    {
        	        this->followPush(FOLLOW_forInst_in_instruction5842);
        	        forInst66=forInst();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleinstructionEx;
        	        }


        	        {
        	            node = forInst66
        	            ;
        	        }


        	    }
        	    break;
        	case 5:
        	    {
        	        this->followPush(FOLLOW_instructionScalar_in_instruction5862);
        	        instructionScalar67=instructionScalar();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleinstructionEx;
        	        }


        	         this->matchToken(SEMICOLON, &FOLLOW_SEMICOLON_in_instruction5864);
        	        if  (this->hasException())
        	        {
        	            goto ruleinstructionEx;
        	        }


        	        {
        	            node = instructionScalar67
        	            ;
        	        }


        	    }
        	    break;
        	case 6:
        	    {
        	        this->followPush(FOLLOW_breakInst_in_instruction5877);
        	        breakInst68=breakInst();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleinstructionEx;
        	        }


        	        {
        	            node = breakInst68
        	            ;
        	        }


        	    }
        	    break;
        	case 7:
        	    {
        	        this->followPush(FOLLOW_continueInst_in_instruction5890);
        	        continueInst69=continueInst();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleinstructionEx;
        	        }


        	        {
        	            node = continueInst69
        	            ;
        	        }


        	    }
        	    break;
        	case 8:
        	    {
        	        this->followPush(FOLLOW_returnInst_in_instruction5903);
        	        returnInst70=returnInst();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleinstructionEx;
        	        }


        	        {
        	            node = returnInst70
        	            ;
        	        }


        	    }
        	    break;
        	case 9:
        	    {
        	        this->followPush(FOLLOW_instruction_list_in_instruction5916);
        	        instruction_list71=instruction_list();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleinstructionEx;
        	        }


        	        {
        	             node = instruction_list71
        	            ;
        	        }


        	    }
        	    break;

            }
        }
    }
    goto ruleinstructionEx;
    ruleinstructionEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::instruction_list*
WNScriptASTParser::instruction_list()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::instruction_list* node;


    ImplTraits::CommonTokenType const* lb = NULL;
    ImplTraits::CommonTokenType const* rb = NULL;
    scripting::instruction* b;





        node = m_allocator->construct<scripting::instruction_list>(m_allocator);



    {
        {
            lb =  this->matchToken(LBRACE, &FOLLOW_LBRACE_in_instruction_list5948);
            if  (this->hasException())
            {
                goto ruleinstruction_listEx;
            }



            for (;;)
            {
                int alt46=2;
                switch ( this->LA(1) )
                {
                case BOOL:
                case BOOL_TYPE:
                case BREAK:
                case CHAR:
                case CHAR_TYPE:
                case CONTINUE:
                case CPTR_TYPE:
                case DO:
                case DOUBDEC:
                case DOUBINC:
                case FLOAT:
                case FLOAT_TYPE:
                case FOR:
                case ID:
                case IF:
                case INT:
                case INT_TYPE:
                case LBRACE:
                case LBRACKET:
                case LENGTH:
                case NULLTOK:
                case RESOURCE:
                case RETURN:
                case SHARED_REF:
                case SIZE:
                case SIZE_TYPE:
                case STRING:
                case STRING_TYPE:
                case THIS_TOK:
                case TYPE:
                case VOID_TYPE:
                case WEAK_REF:
                case WHILE:
                case 71:
                case 81:
                	{
                		alt46=1;
                	}
                    break;

                }

                switch (alt46)
                {
            	case 1:
            	    {
            	        this->followPush(FOLLOW_instruction_in_instruction_list5965);
            	        b=instruction();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleinstruction_listEx;
            	        }


            	        {
            	            node->add_instruction(b
            	            );
            	        }


            	    }
            	    break;

            	default:
            	    goto loop46;
            	    break;
                }
            }
            loop46: ;


            rb =  this->matchToken(RBRACE, &FOLLOW_RBRACE_in_instruction_list5982);
            if  (this->hasException())
            {
                goto ruleinstruction_listEx;
            }


            {

                          SET_LOCATION(node, lb); SET_END_LOCATION(node, rb);

            }


        }

    }
    goto ruleinstruction_listEx;
    ruleinstruction_listEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::function*
WNScriptASTParser::function()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::function* node;


    scripting::parameter* param72;
    scripting::parameter_list* parameterList73;
    scripting::instruction_list* instruction_list74;





        node = nullptr;



    {
        {
            this->followPush(FOLLOW_param_in_function6012);
            param72=param();

            this->followPop();
            if  (this->hasException())
            {
                goto rulefunctionEx;
            }


            this->followPush(FOLLOW_parameterList_in_function6014);
            parameterList73=parameterList();

            this->followPop();
            if  (this->hasException())
            {
                goto rulefunctionEx;
            }


            this->followPush(FOLLOW_instruction_list_in_function6016);
            instruction_list74=instruction_list();

            this->followPop();
            if  (this->hasException())
            {
                goto rulefunctionEx;
            }


            {
                 node = m_allocator->construct<scripting::function>(m_allocator, param72
                , parameterList73
                , instruction_list74
                ); SET_LOCATION_FROM_NODE(node, param72
                ); SET_END_LOCATION_FROM_NODE(node, instruction_list74
                );
            }


        }

    }
    goto rulefunctionEx;
    rulefunctionEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::struct_definition*
WNScriptASTParser::structDecl()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::struct_definition* node;


    ImplTraits::CommonTokenType const* f = NULL;
    ImplTraits::CommonTokenType const* c = NULL;
    ImplTraits::CommonTokenType const* g = NULL;
    ImplTraits::CommonTokenType const* d = NULL;
    ImplTraits::CommonTokenType const* e = NULL;
    ImplTraits::CommonTokenType const* RBRACE76 = NULL;
    scripting::declaration* a;
    scripting::declaration* j;
    scripting::function* b;
    scripting::parameter_list* parameterList75;





        node = nullptr;



    {
        {
            {
                int alt47=2;
                switch ( this->LA(1) )
                {
                case STRUCT:
                	{
                		switch ( this->LA(2) )
                		{
                		case TYPE:
                			{
                				switch ( this->LA(3) )
                				{
                				case COLON:
                					{
                						alt47=2;
                					}
                				    break;
                				case LBRACE:
                				case LBRACKET:
                					{
                						alt47=1;
                					}
                				    break;

                				default:
                				    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                				    ex->set_decisionNum( 47 );
                				    ex->set_state( 2 );


                				    goto rulestructDeclEx;

                				}

                			}
                		    break;

                		default:
                		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		    ex->set_decisionNum( 47 );
                		    ex->set_state( 1 );


                		    goto rulestructDeclEx;

                		}

                	}
                    break;

                default:
                    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 47 );
                    ex->set_state( 0 );


                    goto rulestructDeclEx;

                }

                switch (alt47)
                {
            	case 1:
            	    {
            	        {
            	            f =  this->matchToken(STRUCT, &FOLLOW_STRUCT_in_structDecl6068);
            	            if  (this->hasException())
            	            {
            	                goto rulestructDeclEx;
            	            }


            	            c =  this->matchToken(TYPE, &FOLLOW_TYPE_in_structDecl6072);
            	            if  (this->hasException())
            	            {
            	                goto rulestructDeclEx;
            	            }


            	            {
            	                node= m_allocator->construct<scripting::struct_definition>(m_allocator, (c->getText()).c_str(), false); SET_LOCATION(node, f);
            	            }


            	        }


            	    }
            	    break;
            	case 2:
            	    {
            	        {
            	            g =  this->matchToken(STRUCT, &FOLLOW_STRUCT_in_structDecl6092);
            	            if  (this->hasException())
            	            {
            	                goto rulestructDeclEx;
            	            }


            	            d =  this->matchToken(TYPE, &FOLLOW_TYPE_in_structDecl6096);
            	            if  (this->hasException())
            	            {
            	                goto rulestructDeclEx;
            	            }


            	             this->matchToken(COLON, &FOLLOW_COLON_in_structDecl6098);
            	            if  (this->hasException())
            	            {
            	                goto rulestructDeclEx;
            	            }


            	            e =  this->matchToken(TYPE, &FOLLOW_TYPE_in_structDecl6102);
            	            if  (this->hasException())
            	            {
            	                goto rulestructDeclEx;
            	            }


            	            {
            	                node= m_allocator->construct<scripting::struct_definition>(m_allocator, (d->getText()).c_str(), false, (e->getText()).c_str()); SET_LOCATION(node, g);
            	            }


            	        }


            	    }
            	    break;

                }
            }

            {
                int alt48=2;
                switch ( this->LA(1) )
                {
                    case LBRACKET:
                    	{
                    		alt48=1;
                    	}
                        break;
                }

                switch (alt48)
                {
            	case 1:
            	    {
            	        this->followPush(FOLLOW_parameterList_in_structDecl6130);
            	        parameterList75=parameterList();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulestructDeclEx;
            	        }


            	        {
            	             node->set_constructor_parameters(parameterList75
            	            );
            	        }


            	    }
            	    break;

                }
            }

             this->matchToken(LBRACE, &FOLLOW_LBRACE_in_structDecl6148);
            if  (this->hasException())
            {
                goto rulestructDeclEx;
            }



            for (;;)
            {
                int alt49=4;
                switch ( this->LA(1) )
                {
                case VOID_TYPE:
                	{
                		switch ( this->LA(2) )
                		{
                		case ID:
                			{
                				switch ( this->LA(3) )
                				{
                				case 88:
                					{
                						alt49=1;
                					}
                				    break;
                				case LBRACKET:
                					{
                						alt49=3;
                					}
                				    break;

                				}

                			}
                		    break;
                		case LSQBRACKET:
                			{
                				switch ( this->LA(3) )
                				{
                				case INT:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 88:
                											{
                												alt49=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt49=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case SIZE:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 88:
                											{
                												alt49=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt49=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case FLOAT:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 88:
                											{
                												alt49=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt49=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case CHAR:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 88:
                											{
                												alt49=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt49=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case STRING:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 88:
                											{
                												alt49=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt49=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case BOOL:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 88:
                											{
                												alt49=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt49=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case NULLTOK:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 88:
                											{
                												alt49=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt49=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case THIS_TOK:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 88:
                											{
                												alt49=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt49=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case VOID_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 88:
                																	{
                																		alt49=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt49=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case INT_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 88:
                																	{
                																		alt49=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt49=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case SIZE_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 88:
                																	{
                																		alt49=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt49=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case FLOAT_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 88:
                																	{
                																		alt49=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt49=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case CHAR_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 88:
                																	{
                																		alt49=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt49=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case BOOL_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 88:
                																	{
                																		alt49=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt49=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case CPTR_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 88:
                																	{
                																		alt49=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt49=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case STRING_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 88:
                																	{
                																		alt49=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt49=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case RSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case ID:
                							{
                								switch ( this->LA(5) )
                								{
                								case 88:
                									{
                										alt49=1;
                									}
                								    break;
                								case LBRACKET:
                									{
                										alt49=3;
                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case DLSQBRACKET:
                			{
                				switch ( this->LA(3) )
                				{
                				case DRSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case ID:
                							{
                								switch ( this->LA(5) )
                								{
                								case 88:
                									{
                										alt49=1;
                									}
                								    break;
                								case LBRACKET:
                									{
                										alt49=3;
                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case SLICETOK:
                			{
                				switch ( this->LA(3) )
                				{
                				case INT:
                					{
                						switch ( this->LA(4) )
                						{
                						case SLICETOK:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 88:
                											{
                												alt49=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt49=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case SSOR:
                			{
                				switch ( this->LA(3) )
                				{
                				case ID:
                					{
                						switch ( this->LA(4) )
                						{
                						case 88:
                							{
                								alt49=1;
                							}
                						    break;
                						case LBRACKET:
                							{
                								alt49=3;
                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;

                		}

                	}
                    break;
                case INT_TYPE:
                	{
                		switch ( this->LA(2) )
                		{
                		case ID:
                			{
                				switch ( this->LA(3) )
                				{
                				case 88:
                					{
                						alt49=1;
                					}
                				    break;
                				case LBRACKET:
                					{
                						alt49=3;
                					}
                				    break;

                				}

                			}
                		    break;
                		case LSQBRACKET:
                			{
                				switch ( this->LA(3) )
                				{
                				case INT:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 88:
                											{
                												alt49=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt49=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case SIZE:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 88:
                											{
                												alt49=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt49=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case FLOAT:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 88:
                											{
                												alt49=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt49=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case CHAR:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 88:
                											{
                												alt49=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt49=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case STRING:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 88:
                											{
                												alt49=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt49=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case BOOL:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 88:
                											{
                												alt49=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt49=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case NULLTOK:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 88:
                											{
                												alt49=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt49=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case THIS_TOK:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 88:
                											{
                												alt49=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt49=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case VOID_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 88:
                																	{
                																		alt49=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt49=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case INT_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 88:
                																	{
                																		alt49=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt49=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case SIZE_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 88:
                																	{
                																		alt49=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt49=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case FLOAT_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 88:
                																	{
                																		alt49=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt49=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case CHAR_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 88:
                																	{
                																		alt49=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt49=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case BOOL_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 88:
                																	{
                																		alt49=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt49=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case CPTR_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 88:
                																	{
                																		alt49=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt49=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case STRING_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 88:
                																	{
                																		alt49=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt49=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case RSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case ID:
                							{
                								switch ( this->LA(5) )
                								{
                								case 88:
                									{
                										alt49=1;
                									}
                								    break;
                								case LBRACKET:
                									{
                										alt49=3;
                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case DLSQBRACKET:
                			{
                				switch ( this->LA(3) )
                				{
                				case DRSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case ID:
                							{
                								switch ( this->LA(5) )
                								{
                								case 88:
                									{
                										alt49=1;
                									}
                								    break;
                								case LBRACKET:
                									{
                										alt49=3;
                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case SLICETOK:
                			{
                				switch ( this->LA(3) )
                				{
                				case INT:
                					{
                						switch ( this->LA(4) )
                						{
                						case SLICETOK:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 88:
                											{
                												alt49=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt49=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case SSOR:
                			{
                				switch ( this->LA(3) )
                				{
                				case ID:
                					{
                						switch ( this->LA(4) )
                						{
                						case 88:
                							{
                								alt49=1;
                							}
                						    break;
                						case LBRACKET:
                							{
                								alt49=3;
                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;

                		}

                	}
                    break;
                case SIZE_TYPE:
                	{
                		switch ( this->LA(2) )
                		{
                		case ID:
                			{
                				switch ( this->LA(3) )
                				{
                				case 88:
                					{
                						alt49=1;
                					}
                				    break;
                				case LBRACKET:
                					{
                						alt49=3;
                					}
                				    break;

                				}

                			}
                		    break;
                		case LSQBRACKET:
                			{
                				switch ( this->LA(3) )
                				{
                				case INT:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 88:
                											{
                												alt49=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt49=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case SIZE:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 88:
                											{
                												alt49=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt49=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case FLOAT:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 88:
                											{
                												alt49=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt49=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case CHAR:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 88:
                											{
                												alt49=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt49=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case STRING:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 88:
                											{
                												alt49=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt49=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case BOOL:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 88:
                											{
                												alt49=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt49=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case NULLTOK:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 88:
                											{
                												alt49=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt49=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case THIS_TOK:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 88:
                											{
                												alt49=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt49=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case VOID_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 88:
                																	{
                																		alt49=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt49=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case INT_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 88:
                																	{
                																		alt49=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt49=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case SIZE_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 88:
                																	{
                																		alt49=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt49=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case FLOAT_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 88:
                																	{
                																		alt49=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt49=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case CHAR_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 88:
                																	{
                																		alt49=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt49=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case BOOL_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 88:
                																	{
                																		alt49=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt49=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case CPTR_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 88:
                																	{
                																		alt49=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt49=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case STRING_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 88:
                																	{
                																		alt49=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt49=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case RSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case ID:
                							{
                								switch ( this->LA(5) )
                								{
                								case 88:
                									{
                										alt49=1;
                									}
                								    break;
                								case LBRACKET:
                									{
                										alt49=3;
                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case DLSQBRACKET:
                			{
                				switch ( this->LA(3) )
                				{
                				case DRSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case ID:
                							{
                								switch ( this->LA(5) )
                								{
                								case 88:
                									{
                										alt49=1;
                									}
                								    break;
                								case LBRACKET:
                									{
                										alt49=3;
                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case SLICETOK:
                			{
                				switch ( this->LA(3) )
                				{
                				case INT:
                					{
                						switch ( this->LA(4) )
                						{
                						case SLICETOK:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 88:
                											{
                												alt49=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt49=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case SSOR:
                			{
                				switch ( this->LA(3) )
                				{
                				case ID:
                					{
                						switch ( this->LA(4) )
                						{
                						case 88:
                							{
                								alt49=1;
                							}
                						    break;
                						case LBRACKET:
                							{
                								alt49=3;
                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;

                		}

                	}
                    break;
                case FLOAT_TYPE:
                	{
                		switch ( this->LA(2) )
                		{
                		case ID:
                			{
                				switch ( this->LA(3) )
                				{
                				case 88:
                					{
                						alt49=1;
                					}
                				    break;
                				case LBRACKET:
                					{
                						alt49=3;
                					}
                				    break;

                				}

                			}
                		    break;
                		case LSQBRACKET:
                			{
                				switch ( this->LA(3) )
                				{
                				case INT:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 88:
                											{
                												alt49=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt49=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case SIZE:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 88:
                											{
                												alt49=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt49=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case FLOAT:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 88:
                											{
                												alt49=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt49=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case CHAR:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 88:
                											{
                												alt49=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt49=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case STRING:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 88:
                											{
                												alt49=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt49=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case BOOL:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 88:
                											{
                												alt49=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt49=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case NULLTOK:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 88:
                											{
                												alt49=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt49=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case THIS_TOK:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 88:
                											{
                												alt49=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt49=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case VOID_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 88:
                																	{
                																		alt49=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt49=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case INT_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 88:
                																	{
                																		alt49=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt49=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case SIZE_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 88:
                																	{
                																		alt49=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt49=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case FLOAT_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 88:
                																	{
                																		alt49=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt49=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case CHAR_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 88:
                																	{
                																		alt49=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt49=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case BOOL_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 88:
                																	{
                																		alt49=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt49=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case CPTR_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 88:
                																	{
                																		alt49=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt49=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case STRING_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 88:
                																	{
                																		alt49=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt49=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case RSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case ID:
                							{
                								switch ( this->LA(5) )
                								{
                								case 88:
                									{
                										alt49=1;
                									}
                								    break;
                								case LBRACKET:
                									{
                										alt49=3;
                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case DLSQBRACKET:
                			{
                				switch ( this->LA(3) )
                				{
                				case DRSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case ID:
                							{
                								switch ( this->LA(5) )
                								{
                								case 88:
                									{
                										alt49=1;
                									}
                								    break;
                								case LBRACKET:
                									{
                										alt49=3;
                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case SLICETOK:
                			{
                				switch ( this->LA(3) )
                				{
                				case INT:
                					{
                						switch ( this->LA(4) )
                						{
                						case SLICETOK:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 88:
                											{
                												alt49=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt49=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case SSOR:
                			{
                				switch ( this->LA(3) )
                				{
                				case ID:
                					{
                						switch ( this->LA(4) )
                						{
                						case 88:
                							{
                								alt49=1;
                							}
                						    break;
                						case LBRACKET:
                							{
                								alt49=3;
                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;

                		}

                	}
                    break;
                case CHAR_TYPE:
                	{
                		switch ( this->LA(2) )
                		{
                		case ID:
                			{
                				switch ( this->LA(3) )
                				{
                				case 88:
                					{
                						alt49=1;
                					}
                				    break;
                				case LBRACKET:
                					{
                						alt49=3;
                					}
                				    break;

                				}

                			}
                		    break;
                		case LSQBRACKET:
                			{
                				switch ( this->LA(3) )
                				{
                				case INT:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 88:
                											{
                												alt49=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt49=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case SIZE:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 88:
                											{
                												alt49=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt49=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case FLOAT:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 88:
                											{
                												alt49=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt49=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case CHAR:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 88:
                											{
                												alt49=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt49=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case STRING:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 88:
                											{
                												alt49=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt49=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case BOOL:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 88:
                											{
                												alt49=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt49=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case NULLTOK:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 88:
                											{
                												alt49=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt49=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case THIS_TOK:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 88:
                											{
                												alt49=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt49=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case VOID_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 88:
                																	{
                																		alt49=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt49=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case INT_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 88:
                																	{
                																		alt49=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt49=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case SIZE_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 88:
                																	{
                																		alt49=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt49=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case FLOAT_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 88:
                																	{
                																		alt49=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt49=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case CHAR_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 88:
                																	{
                																		alt49=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt49=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case BOOL_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 88:
                																	{
                																		alt49=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt49=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case CPTR_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 88:
                																	{
                																		alt49=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt49=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case STRING_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 88:
                																	{
                																		alt49=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt49=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case RSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case ID:
                							{
                								switch ( this->LA(5) )
                								{
                								case 88:
                									{
                										alt49=1;
                									}
                								    break;
                								case LBRACKET:
                									{
                										alt49=3;
                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case DLSQBRACKET:
                			{
                				switch ( this->LA(3) )
                				{
                				case DRSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case ID:
                							{
                								switch ( this->LA(5) )
                								{
                								case 88:
                									{
                										alt49=1;
                									}
                								    break;
                								case LBRACKET:
                									{
                										alt49=3;
                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case SLICETOK:
                			{
                				switch ( this->LA(3) )
                				{
                				case INT:
                					{
                						switch ( this->LA(4) )
                						{
                						case SLICETOK:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 88:
                											{
                												alt49=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt49=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case SSOR:
                			{
                				switch ( this->LA(3) )
                				{
                				case ID:
                					{
                						switch ( this->LA(4) )
                						{
                						case 88:
                							{
                								alt49=1;
                							}
                						    break;
                						case LBRACKET:
                							{
                								alt49=3;
                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;

                		}

                	}
                    break;
                case BOOL_TYPE:
                	{
                		switch ( this->LA(2) )
                		{
                		case ID:
                			{
                				switch ( this->LA(3) )
                				{
                				case 88:
                					{
                						alt49=1;
                					}
                				    break;
                				case LBRACKET:
                					{
                						alt49=3;
                					}
                				    break;

                				}

                			}
                		    break;
                		case LSQBRACKET:
                			{
                				switch ( this->LA(3) )
                				{
                				case INT:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 88:
                											{
                												alt49=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt49=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case SIZE:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 88:
                											{
                												alt49=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt49=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case FLOAT:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 88:
                											{
                												alt49=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt49=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case CHAR:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 88:
                											{
                												alt49=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt49=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case STRING:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 88:
                											{
                												alt49=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt49=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case BOOL:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 88:
                											{
                												alt49=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt49=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case NULLTOK:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 88:
                											{
                												alt49=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt49=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case THIS_TOK:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 88:
                											{
                												alt49=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt49=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case VOID_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 88:
                																	{
                																		alt49=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt49=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case INT_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 88:
                																	{
                																		alt49=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt49=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case SIZE_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 88:
                																	{
                																		alt49=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt49=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case FLOAT_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 88:
                																	{
                																		alt49=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt49=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case CHAR_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 88:
                																	{
                																		alt49=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt49=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case BOOL_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 88:
                																	{
                																		alt49=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt49=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case CPTR_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 88:
                																	{
                																		alt49=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt49=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case STRING_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 88:
                																	{
                																		alt49=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt49=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case RSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case ID:
                							{
                								switch ( this->LA(5) )
                								{
                								case 88:
                									{
                										alt49=1;
                									}
                								    break;
                								case LBRACKET:
                									{
                										alt49=3;
                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case DLSQBRACKET:
                			{
                				switch ( this->LA(3) )
                				{
                				case DRSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case ID:
                							{
                								switch ( this->LA(5) )
                								{
                								case 88:
                									{
                										alt49=1;
                									}
                								    break;
                								case LBRACKET:
                									{
                										alt49=3;
                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case SLICETOK:
                			{
                				switch ( this->LA(3) )
                				{
                				case INT:
                					{
                						switch ( this->LA(4) )
                						{
                						case SLICETOK:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 88:
                											{
                												alt49=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt49=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case SSOR:
                			{
                				switch ( this->LA(3) )
                				{
                				case ID:
                					{
                						switch ( this->LA(4) )
                						{
                						case 88:
                							{
                								alt49=1;
                							}
                						    break;
                						case LBRACKET:
                							{
                								alt49=3;
                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;

                		}

                	}
                    break;
                case CPTR_TYPE:
                	{
                		switch ( this->LA(2) )
                		{
                		case ID:
                			{
                				switch ( this->LA(3) )
                				{
                				case 88:
                					{
                						alt49=1;
                					}
                				    break;
                				case LBRACKET:
                					{
                						alt49=3;
                					}
                				    break;

                				}

                			}
                		    break;
                		case LSQBRACKET:
                			{
                				switch ( this->LA(3) )
                				{
                				case INT:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 88:
                											{
                												alt49=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt49=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case SIZE:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 88:
                											{
                												alt49=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt49=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case FLOAT:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 88:
                											{
                												alt49=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt49=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case CHAR:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 88:
                											{
                												alt49=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt49=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case STRING:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 88:
                											{
                												alt49=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt49=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case BOOL:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 88:
                											{
                												alt49=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt49=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case NULLTOK:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 88:
                											{
                												alt49=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt49=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case THIS_TOK:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 88:
                											{
                												alt49=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt49=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case VOID_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 88:
                																	{
                																		alt49=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt49=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case INT_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 88:
                																	{
                																		alt49=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt49=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case SIZE_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 88:
                																	{
                																		alt49=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt49=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case FLOAT_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 88:
                																	{
                																		alt49=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt49=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case CHAR_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 88:
                																	{
                																		alt49=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt49=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case BOOL_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 88:
                																	{
                																		alt49=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt49=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case CPTR_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 88:
                																	{
                																		alt49=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt49=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case STRING_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 88:
                																	{
                																		alt49=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt49=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case RSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case ID:
                							{
                								switch ( this->LA(5) )
                								{
                								case 88:
                									{
                										alt49=1;
                									}
                								    break;
                								case LBRACKET:
                									{
                										alt49=3;
                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case DLSQBRACKET:
                			{
                				switch ( this->LA(3) )
                				{
                				case DRSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case ID:
                							{
                								switch ( this->LA(5) )
                								{
                								case 88:
                									{
                										alt49=1;
                									}
                								    break;
                								case LBRACKET:
                									{
                										alt49=3;
                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case SLICETOK:
                			{
                				switch ( this->LA(3) )
                				{
                				case INT:
                					{
                						switch ( this->LA(4) )
                						{
                						case SLICETOK:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 88:
                											{
                												alt49=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt49=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case SSOR:
                			{
                				switch ( this->LA(3) )
                				{
                				case ID:
                					{
                						switch ( this->LA(4) )
                						{
                						case 88:
                							{
                								alt49=1;
                							}
                						    break;
                						case LBRACKET:
                							{
                								alt49=3;
                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;

                		}

                	}
                    break;
                case STRING_TYPE:
                	{
                		switch ( this->LA(2) )
                		{
                		case ID:
                			{
                				switch ( this->LA(3) )
                				{
                				case 88:
                					{
                						alt49=1;
                					}
                				    break;
                				case LBRACKET:
                					{
                						alt49=3;
                					}
                				    break;

                				}

                			}
                		    break;
                		case LSQBRACKET:
                			{
                				switch ( this->LA(3) )
                				{
                				case INT:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 88:
                											{
                												alt49=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt49=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case SIZE:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 88:
                											{
                												alt49=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt49=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case FLOAT:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 88:
                											{
                												alt49=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt49=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case CHAR:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 88:
                											{
                												alt49=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt49=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case STRING:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 88:
                											{
                												alt49=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt49=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case BOOL:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 88:
                											{
                												alt49=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt49=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case NULLTOK:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 88:
                											{
                												alt49=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt49=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case THIS_TOK:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 88:
                											{
                												alt49=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt49=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case VOID_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 88:
                																	{
                																		alt49=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt49=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case INT_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 88:
                																	{
                																		alt49=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt49=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case SIZE_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 88:
                																	{
                																		alt49=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt49=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case FLOAT_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 88:
                																	{
                																		alt49=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt49=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case CHAR_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 88:
                																	{
                																		alt49=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt49=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case BOOL_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 88:
                																	{
                																		alt49=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt49=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case CPTR_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 88:
                																	{
                																		alt49=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt49=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case STRING_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 88:
                																	{
                																		alt49=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt49=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case RSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case ID:
                							{
                								switch ( this->LA(5) )
                								{
                								case 88:
                									{
                										alt49=1;
                									}
                								    break;
                								case LBRACKET:
                									{
                										alt49=3;
                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case DLSQBRACKET:
                			{
                				switch ( this->LA(3) )
                				{
                				case DRSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case ID:
                							{
                								switch ( this->LA(5) )
                								{
                								case 88:
                									{
                										alt49=1;
                									}
                								    break;
                								case LBRACKET:
                									{
                										alt49=3;
                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case SLICETOK:
                			{
                				switch ( this->LA(3) )
                				{
                				case INT:
                					{
                						switch ( this->LA(4) )
                						{
                						case SLICETOK:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 88:
                											{
                												alt49=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt49=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case SSOR:
                			{
                				switch ( this->LA(3) )
                				{
                				case ID:
                					{
                						switch ( this->LA(4) )
                						{
                						case 88:
                							{
                								alt49=1;
                							}
                						    break;
                						case LBRACKET:
                							{
                								alt49=3;
                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;

                		}

                	}
                    break;
                case TYPE:
                	{
                		switch ( this->LA(2) )
                		{
                		case ID:
                			{
                				switch ( this->LA(3) )
                				{
                				case 88:
                					{
                						alt49=1;
                					}
                				    break;
                				case LBRACKET:
                					{
                						alt49=3;
                					}
                				    break;

                				}

                			}
                		    break;
                		case LSQBRACKET:
                			{
                				switch ( this->LA(3) )
                				{
                				case INT:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 88:
                											{
                												alt49=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt49=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case SIZE:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 88:
                											{
                												alt49=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt49=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case FLOAT:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 88:
                											{
                												alt49=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt49=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case CHAR:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 88:
                											{
                												alt49=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt49=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case STRING:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 88:
                											{
                												alt49=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt49=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case BOOL:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 88:
                											{
                												alt49=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt49=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case NULLTOK:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 88:
                											{
                												alt49=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt49=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case THIS_TOK:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 88:
                											{
                												alt49=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt49=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case VOID_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 88:
                																	{
                																		alt49=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt49=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case INT_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 88:
                																	{
                																		alt49=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt49=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case SIZE_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 88:
                																	{
                																		alt49=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt49=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case FLOAT_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 88:
                																	{
                																		alt49=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt49=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case CHAR_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 88:
                																	{
                																		alt49=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt49=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case BOOL_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 88:
                																	{
                																		alt49=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt49=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case CPTR_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 88:
                																	{
                																		alt49=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt49=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case STRING_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 88:
                																	{
                																		alt49=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt49=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case RSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case ID:
                							{
                								switch ( this->LA(5) )
                								{
                								case 88:
                									{
                										alt49=1;
                									}
                								    break;
                								case LBRACKET:
                									{
                										alt49=3;
                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case DLSQBRACKET:
                			{
                				switch ( this->LA(3) )
                				{
                				case DRSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case ID:
                							{
                								switch ( this->LA(5) )
                								{
                								case 88:
                									{
                										alt49=1;
                									}
                								    break;
                								case LBRACKET:
                									{
                										alt49=3;
                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case QUESTION:
                			{
                				switch ( this->LA(3) )
                				{
                				case ID:
                					{
                						switch ( this->LA(4) )
                						{
                						case 88:
                							{
                								alt49=1;
                							}
                						    break;
                						case LBRACKET:
                							{
                								alt49=3;
                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;

                		}

                	}
                    break;
                case SHARED_REF:
                	{
                		switch ( this->LA(2) )
                		{
                		case TYPE:
                			{
                				switch ( this->LA(3) )
                				{
                				case LSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case INT:
                							{
                								switch ( this->LA(5) )
                								{
                								case RSQBRACKET:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 88:
                													{
                														alt49=1;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt49=3;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case SIZE:
                							{
                								switch ( this->LA(5) )
                								{
                								case RSQBRACKET:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 88:
                													{
                														alt49=1;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt49=3;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case FLOAT:
                							{
                								switch ( this->LA(5) )
                								{
                								case RSQBRACKET:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 88:
                													{
                														alt49=1;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt49=3;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case CHAR:
                							{
                								switch ( this->LA(5) )
                								{
                								case RSQBRACKET:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 88:
                													{
                														alt49=1;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt49=3;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case STRING:
                							{
                								switch ( this->LA(5) )
                								{
                								case RSQBRACKET:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 88:
                													{
                														alt49=1;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt49=3;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case BOOL:
                							{
                								switch ( this->LA(5) )
                								{
                								case RSQBRACKET:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 88:
                													{
                														alt49=1;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt49=3;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case NULLTOK:
                							{
                								switch ( this->LA(5) )
                								{
                								case RSQBRACKET:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 88:
                													{
                														alt49=1;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt49=3;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case THIS_TOK:
                							{
                								switch ( this->LA(5) )
                								{
                								case RSQBRACKET:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 88:
                													{
                														alt49=1;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt49=3;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case VOID_TYPE:
                							{
                								switch ( this->LA(5) )
                								{
                								case LBRACE:
                									{
                										switch ( this->LA(6) )
                										{
                										case STRING:
                											{
                												switch ( this->LA(7) )
                												{
                												case RBRACE:
                													{
                														switch ( this->LA(8) )
                														{
                														case RSQBRACKET:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 88:
                																			{
                																				alt49=1;
                																			}
                																		    break;
                																		case LBRACKET:
                																			{
                																				alt49=3;
                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case INT_TYPE:
                							{
                								switch ( this->LA(5) )
                								{
                								case LBRACE:
                									{
                										switch ( this->LA(6) )
                										{
                										case STRING:
                											{
                												switch ( this->LA(7) )
                												{
                												case RBRACE:
                													{
                														switch ( this->LA(8) )
                														{
                														case RSQBRACKET:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 88:
                																			{
                																				alt49=1;
                																			}
                																		    break;
                																		case LBRACKET:
                																			{
                																				alt49=3;
                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case SIZE_TYPE:
                							{
                								switch ( this->LA(5) )
                								{
                								case LBRACE:
                									{
                										switch ( this->LA(6) )
                										{
                										case STRING:
                											{
                												switch ( this->LA(7) )
                												{
                												case RBRACE:
                													{
                														switch ( this->LA(8) )
                														{
                														case RSQBRACKET:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 88:
                																			{
                																				alt49=1;
                																			}
                																		    break;
                																		case LBRACKET:
                																			{
                																				alt49=3;
                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case FLOAT_TYPE:
                							{
                								switch ( this->LA(5) )
                								{
                								case LBRACE:
                									{
                										switch ( this->LA(6) )
                										{
                										case STRING:
                											{
                												switch ( this->LA(7) )
                												{
                												case RBRACE:
                													{
                														switch ( this->LA(8) )
                														{
                														case RSQBRACKET:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 88:
                																			{
                																				alt49=1;
                																			}
                																		    break;
                																		case LBRACKET:
                																			{
                																				alt49=3;
                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case CHAR_TYPE:
                							{
                								switch ( this->LA(5) )
                								{
                								case LBRACE:
                									{
                										switch ( this->LA(6) )
                										{
                										case STRING:
                											{
                												switch ( this->LA(7) )
                												{
                												case RBRACE:
                													{
                														switch ( this->LA(8) )
                														{
                														case RSQBRACKET:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 88:
                																			{
                																				alt49=1;
                																			}
                																		    break;
                																		case LBRACKET:
                																			{
                																				alt49=3;
                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case BOOL_TYPE:
                							{
                								switch ( this->LA(5) )
                								{
                								case LBRACE:
                									{
                										switch ( this->LA(6) )
                										{
                										case STRING:
                											{
                												switch ( this->LA(7) )
                												{
                												case RBRACE:
                													{
                														switch ( this->LA(8) )
                														{
                														case RSQBRACKET:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 88:
                																			{
                																				alt49=1;
                																			}
                																		    break;
                																		case LBRACKET:
                																			{
                																				alt49=3;
                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case CPTR_TYPE:
                							{
                								switch ( this->LA(5) )
                								{
                								case LBRACE:
                									{
                										switch ( this->LA(6) )
                										{
                										case STRING:
                											{
                												switch ( this->LA(7) )
                												{
                												case RBRACE:
                													{
                														switch ( this->LA(8) )
                														{
                														case RSQBRACKET:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 88:
                																			{
                																				alt49=1;
                																			}
                																		    break;
                																		case LBRACKET:
                																			{
                																				alt49=3;
                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case STRING_TYPE:
                							{
                								switch ( this->LA(5) )
                								{
                								case LBRACE:
                									{
                										switch ( this->LA(6) )
                										{
                										case STRING:
                											{
                												switch ( this->LA(7) )
                												{
                												case RBRACE:
                													{
                														switch ( this->LA(8) )
                														{
                														case RSQBRACKET:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 88:
                																			{
                																				alt49=1;
                																			}
                																		    break;
                																		case LBRACKET:
                																			{
                																				alt49=3;
                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 88:
                											{
                												alt49=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt49=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case DLSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case DRSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 88:
                											{
                												alt49=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt49=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case ID:
                					{
                						switch ( this->LA(4) )
                						{
                						case 88:
                							{
                								alt49=1;
                							}
                						    break;
                						case LBRACKET:
                							{
                								alt49=3;
                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;

                		}

                	}
                    break;
                case WEAK_REF:
                	{
                		switch ( this->LA(2) )
                		{
                		case TYPE:
                			{
                				switch ( this->LA(3) )
                				{
                				case ID:
                					{
                						switch ( this->LA(4) )
                						{
                						case 88:
                							{
                								alt49=1;
                							}
                						    break;
                						case LBRACKET:
                							{
                								alt49=3;
                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;

                		}

                	}
                    break;
                case 83:
                	{
                		alt49=2;
                	}
                    break;

                }

                switch (alt49)
                {
            	case 1:
            	    {
            	        {
            	            this->followPush(FOLLOW_declaration_in_structDecl6191);
            	            a=declaration();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulestructDeclEx;
            	            }


            	            {
            	                 node->add_struct_elem(a
            	                );
            	            }


            	             this->matchToken(SEMICOLON, &FOLLOW_SEMICOLON_in_structDecl6195);
            	            if  (this->hasException())
            	            {
            	                goto rulestructDeclEx;
            	            }


            	        }


            	    }
            	    break;
            	case 2:
            	    {
            	        {
            	            this->followPush(FOLLOW_inherited_declaration_in_structDecl6221);
            	            j=inherited_declaration();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulestructDeclEx;
            	            }


            	            {
            	                 node->add_struct_elem(j
            	                );
            	            }


            	             this->matchToken(SEMICOLON, &FOLLOW_SEMICOLON_in_structDecl6225);
            	            if  (this->hasException())
            	            {
            	                goto rulestructDeclEx;
            	            }


            	        }


            	    }
            	    break;
            	case 3:
            	    {
            	        {
            	            this->followPush(FOLLOW_function_in_structDecl6251);
            	            b=function();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulestructDeclEx;
            	            }


            	            {
            	                 node->add_function(b
            	                );
            	            }


            	        }


            	    }
            	    break;

            	default:
            	    goto loop49;
            	    break;
                }
            }
            loop49: ;


            RBRACE76 =  this->matchToken(RBRACE, &FOLLOW_RBRACE_in_structDecl6290);
            if  (this->hasException())
            {
                goto rulestructDeclEx;
            }


            {
                 SET_END_LOCATION(node, RBRACE76);
            }


        }

    }
    goto rulestructDeclEx;
    rulestructDeclEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::struct_definition*
WNScriptASTParser::classDecl()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::struct_definition* node;


    ImplTraits::CommonTokenType const* ff = NULL;
    ImplTraits::CommonTokenType const* cc = NULL;
    ImplTraits::CommonTokenType const* gg = NULL;
    ImplTraits::CommonTokenType const* dd = NULL;
    ImplTraits::CommonTokenType const* ee = NULL;
    ImplTraits::CommonTokenType const* f = NULL;
    ImplTraits::CommonTokenType const* c = NULL;
    ImplTraits::CommonTokenType const* g = NULL;
    ImplTraits::CommonTokenType const* d = NULL;
    ImplTraits::CommonTokenType const* e = NULL;
    ImplTraits::CommonTokenType const* RBRACE78 = NULL;
    scripting::declaration* a;
    scripting::declaration* aa;
    scripting::declaration* j;
    scripting::declaration* jj;
    scripting::function* b;
    scripting::function* bb;
    scripting::function* bbb;
    scripting::function* h;
    scripting::function* hh;
    scripting::function* hhh;
    scripting::function* i;
    scripting::function* ii;
    scripting::function* iii;
    scripting::parameter_list* parameterList77;





        node = nullptr;



    {
        {
            {
                int alt50=4;
                switch ( this->LA(1) )
                {
                case ACTOR:
                	{
                		switch ( this->LA(2) )
                		{
                		case TYPE:
                			{
                				switch ( this->LA(3) )
                				{
                				case COLON:
                					{
                						alt50=2;
                					}
                				    break;
                				case LBRACE:
                				case LBRACKET:
                					{
                						alt50=1;
                					}
                				    break;

                				default:
                				    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                				    ex->set_decisionNum( 50 );
                				    ex->set_state( 3 );


                				    goto ruleclassDeclEx;

                				}

                			}
                		    break;

                		default:
                		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		    ex->set_decisionNum( 50 );
                		    ex->set_state( 1 );


                		    goto ruleclassDeclEx;

                		}

                	}
                    break;
                case CLASS:
                	{
                		switch ( this->LA(2) )
                		{
                		case TYPE:
                			{
                				switch ( this->LA(3) )
                				{
                				case COLON:
                					{
                						alt50=4;
                					}
                				    break;
                				case LBRACE:
                				case LBRACKET:
                					{
                						alt50=3;
                					}
                				    break;

                				default:
                				    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                				    ex->set_decisionNum( 50 );
                				    ex->set_state( 4 );


                				    goto ruleclassDeclEx;

                				}

                			}
                		    break;

                		default:
                		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		    ex->set_decisionNum( 50 );
                		    ex->set_state( 2 );


                		    goto ruleclassDeclEx;

                		}

                	}
                    break;

                default:
                    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 50 );
                    ex->set_state( 0 );


                    goto ruleclassDeclEx;

                }

                switch (alt50)
                {
            	case 1:
            	    {
            	        {
            	            ff =  this->matchToken(ACTOR, &FOLLOW_ACTOR_in_classDecl6343);
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            cc =  this->matchToken(TYPE, &FOLLOW_TYPE_in_classDecl6347);
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            {
            	                node=m_allocator->construct<scripting::struct_definition>(m_allocator, (cc->getText()).c_str(), true); node->set_synchronized(true); SET_LOCATION(node, ff);
            	            }


            	        }


            	    }
            	    break;
            	case 2:
            	    {
            	        {
            	            gg =  this->matchToken(ACTOR, &FOLLOW_ACTOR_in_classDecl6367);
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            dd =  this->matchToken(TYPE, &FOLLOW_TYPE_in_classDecl6371);
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	             this->matchToken(COLON, &FOLLOW_COLON_in_classDecl6373);
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            ee =  this->matchToken(TYPE, &FOLLOW_TYPE_in_classDecl6377);
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            {
            	                node=m_allocator->construct<scripting::struct_definition>(m_allocator, (dd->getText()).c_str(), true, (ee->getText()).c_str());  node->set_synchronized(true); SET_LOCATION(node, gg);
            	            }


            	        }


            	    }
            	    break;
            	case 3:
            	    {
            	        {
            	            f =  this->matchToken(CLASS, &FOLLOW_CLASS_in_classDecl6397);
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            c =  this->matchToken(TYPE, &FOLLOW_TYPE_in_classDecl6401);
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            {
            	                node=m_allocator->construct<scripting::struct_definition>(m_allocator, (c->getText()).c_str(), true); SET_LOCATION(node, f);
            	            }


            	        }


            	    }
            	    break;
            	case 4:
            	    {
            	        {
            	            g =  this->matchToken(CLASS, &FOLLOW_CLASS_in_classDecl6421);
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            d =  this->matchToken(TYPE, &FOLLOW_TYPE_in_classDecl6425);
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	             this->matchToken(COLON, &FOLLOW_COLON_in_classDecl6427);
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            e =  this->matchToken(TYPE, &FOLLOW_TYPE_in_classDecl6431);
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            {
            	                node=m_allocator->construct<scripting::struct_definition>(m_allocator, (d->getText()).c_str(), true, (e->getText()).c_str()); SET_LOCATION(node, g);
            	            }


            	        }


            	    }
            	    break;

                }
            }

            {
                int alt51=2;
                switch ( this->LA(1) )
                {
                    case LBRACKET:
                    	{
                    		alt51=1;
                    	}
                        break;
                }

                switch (alt51)
                {
            	case 1:
            	    {
            	        this->followPush(FOLLOW_parameterList_in_classDecl6459);
            	        parameterList77=parameterList();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleclassDeclEx;
            	        }


            	        {
            	             node->set_constructor_parameters(parameterList77
            	            );
            	        }


            	    }
            	    break;

                }
            }

             this->matchToken(LBRACE, &FOLLOW_LBRACE_in_classDecl6477);
            if  (this->hasException())
            {
                goto ruleclassDeclEx;
            }



            for (;;)
            {
                int alt52=14;
                switch ( this->LA(1) )
                {
                case VOID_TYPE:
                	{
                		switch ( this->LA(2) )
                		{
                		case ID:
                			{
                				switch ( this->LA(3) )
                				{
                				case 88:
                					{
                						alt52=1;
                					}
                				    break;
                				case LBRACKET:
                					{
                						alt52=5;
                					}
                				    break;

                				}

                			}
                		    break;
                		case LSQBRACKET:
                			{
                				switch ( this->LA(3) )
                				{
                				case INT:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 88:
                											{
                												alt52=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt52=5;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case SIZE:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 88:
                											{
                												alt52=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt52=5;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case FLOAT:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 88:
                											{
                												alt52=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt52=5;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case CHAR:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 88:
                											{
                												alt52=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt52=5;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case STRING:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 88:
                											{
                												alt52=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt52=5;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case BOOL:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 88:
                											{
                												alt52=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt52=5;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case NULLTOK:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 88:
                											{
                												alt52=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt52=5;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case THIS_TOK:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 88:
                											{
                												alt52=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt52=5;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case VOID_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 88:
                																	{
                																		alt52=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt52=5;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case INT_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 88:
                																	{
                																		alt52=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt52=5;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case SIZE_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 88:
                																	{
                																		alt52=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt52=5;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case FLOAT_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 88:
                																	{
                																		alt52=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt52=5;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case CHAR_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 88:
                																	{
                																		alt52=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt52=5;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case BOOL_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 88:
                																	{
                																		alt52=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt52=5;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case CPTR_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 88:
                																	{
                																		alt52=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt52=5;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case STRING_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 88:
                																	{
                																		alt52=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt52=5;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case RSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case ID:
                							{
                								switch ( this->LA(5) )
                								{
                								case 88:
                									{
                										alt52=1;
                									}
                								    break;
                								case LBRACKET:
                									{
                										alt52=5;
                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case DLSQBRACKET:
                			{
                				switch ( this->LA(3) )
                				{
                				case DRSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case ID:
                							{
                								switch ( this->LA(5) )
                								{
                								case 88:
                									{
                										alt52=1;
                									}
                								    break;
                								case LBRACKET:
                									{
                										alt52=5;
                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case SLICETOK:
                			{
                				switch ( this->LA(3) )
                				{
                				case INT:
                					{
                						switch ( this->LA(4) )
                						{
                						case SLICETOK:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 88:
                											{
                												alt52=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt52=5;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case SSOR:
                			{
                				switch ( this->LA(3) )
                				{
                				case ID:
                					{
                						switch ( this->LA(4) )
                						{
                						case 88:
                							{
                								alt52=1;
                							}
                						    break;
                						case LBRACKET:
                							{
                								alt52=5;
                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;

                		}

                	}
                    break;
                case INT_TYPE:
                	{
                		switch ( this->LA(2) )
                		{
                		case ID:
                			{
                				switch ( this->LA(3) )
                				{
                				case 88:
                					{
                						alt52=1;
                					}
                				    break;
                				case LBRACKET:
                					{
                						alt52=5;
                					}
                				    break;

                				}

                			}
                		    break;
                		case LSQBRACKET:
                			{
                				switch ( this->LA(3) )
                				{
                				case INT:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 88:
                											{
                												alt52=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt52=5;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case SIZE:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 88:
                											{
                												alt52=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt52=5;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case FLOAT:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 88:
                											{
                												alt52=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt52=5;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case CHAR:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 88:
                											{
                												alt52=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt52=5;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case STRING:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 88:
                											{
                												alt52=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt52=5;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case BOOL:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 88:
                											{
                												alt52=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt52=5;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case NULLTOK:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 88:
                											{
                												alt52=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt52=5;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case THIS_TOK:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 88:
                											{
                												alt52=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt52=5;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case VOID_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 88:
                																	{
                																		alt52=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt52=5;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case INT_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 88:
                																	{
                																		alt52=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt52=5;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case SIZE_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 88:
                																	{
                																		alt52=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt52=5;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case FLOAT_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 88:
                																	{
                																		alt52=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt52=5;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case CHAR_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 88:
                																	{
                																		alt52=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt52=5;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case BOOL_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 88:
                																	{
                																		alt52=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt52=5;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case CPTR_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 88:
                																	{
                																		alt52=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt52=5;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case STRING_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 88:
                																	{
                																		alt52=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt52=5;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case RSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case ID:
                							{
                								switch ( this->LA(5) )
                								{
                								case 88:
                									{
                										alt52=1;
                									}
                								    break;
                								case LBRACKET:
                									{
                										alt52=5;
                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case DLSQBRACKET:
                			{
                				switch ( this->LA(3) )
                				{
                				case DRSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case ID:
                							{
                								switch ( this->LA(5) )
                								{
                								case 88:
                									{
                										alt52=1;
                									}
                								    break;
                								case LBRACKET:
                									{
                										alt52=5;
                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case SLICETOK:
                			{
                				switch ( this->LA(3) )
                				{
                				case INT:
                					{
                						switch ( this->LA(4) )
                						{
                						case SLICETOK:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 88:
                											{
                												alt52=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt52=5;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case SSOR:
                			{
                				switch ( this->LA(3) )
                				{
                				case ID:
                					{
                						switch ( this->LA(4) )
                						{
                						case 88:
                							{
                								alt52=1;
                							}
                						    break;
                						case LBRACKET:
                							{
                								alt52=5;
                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;

                		}

                	}
                    break;
                case SIZE_TYPE:
                	{
                		switch ( this->LA(2) )
                		{
                		case ID:
                			{
                				switch ( this->LA(3) )
                				{
                				case 88:
                					{
                						alt52=1;
                					}
                				    break;
                				case LBRACKET:
                					{
                						alt52=5;
                					}
                				    break;

                				}

                			}
                		    break;
                		case LSQBRACKET:
                			{
                				switch ( this->LA(3) )
                				{
                				case INT:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 88:
                											{
                												alt52=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt52=5;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case SIZE:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 88:
                											{
                												alt52=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt52=5;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case FLOAT:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 88:
                											{
                												alt52=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt52=5;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case CHAR:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 88:
                											{
                												alt52=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt52=5;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case STRING:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 88:
                											{
                												alt52=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt52=5;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case BOOL:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 88:
                											{
                												alt52=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt52=5;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case NULLTOK:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 88:
                											{
                												alt52=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt52=5;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case THIS_TOK:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 88:
                											{
                												alt52=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt52=5;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case VOID_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 88:
                																	{
                																		alt52=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt52=5;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case INT_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 88:
                																	{
                																		alt52=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt52=5;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case SIZE_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 88:
                																	{
                																		alt52=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt52=5;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case FLOAT_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 88:
                																	{
                																		alt52=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt52=5;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case CHAR_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 88:
                																	{
                																		alt52=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt52=5;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case BOOL_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 88:
                																	{
                																		alt52=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt52=5;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case CPTR_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 88:
                																	{
                																		alt52=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt52=5;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case STRING_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 88:
                																	{
                																		alt52=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt52=5;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case RSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case ID:
                							{
                								switch ( this->LA(5) )
                								{
                								case 88:
                									{
                										alt52=1;
                									}
                								    break;
                								case LBRACKET:
                									{
                										alt52=5;
                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case DLSQBRACKET:
                			{
                				switch ( this->LA(3) )
                				{
                				case DRSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case ID:
                							{
                								switch ( this->LA(5) )
                								{
                								case 88:
                									{
                										alt52=1;
                									}
                								    break;
                								case LBRACKET:
                									{
                										alt52=5;
                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case SLICETOK:
                			{
                				switch ( this->LA(3) )
                				{
                				case INT:
                					{
                						switch ( this->LA(4) )
                						{
                						case SLICETOK:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 88:
                											{
                												alt52=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt52=5;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case SSOR:
                			{
                				switch ( this->LA(3) )
                				{
                				case ID:
                					{
                						switch ( this->LA(4) )
                						{
                						case 88:
                							{
                								alt52=1;
                							}
                						    break;
                						case LBRACKET:
                							{
                								alt52=5;
                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;

                		}

                	}
                    break;
                case FLOAT_TYPE:
                	{
                		switch ( this->LA(2) )
                		{
                		case ID:
                			{
                				switch ( this->LA(3) )
                				{
                				case 88:
                					{
                						alt52=1;
                					}
                				    break;
                				case LBRACKET:
                					{
                						alt52=5;
                					}
                				    break;

                				}

                			}
                		    break;
                		case LSQBRACKET:
                			{
                				switch ( this->LA(3) )
                				{
                				case INT:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 88:
                											{
                												alt52=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt52=5;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case SIZE:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 88:
                											{
                												alt52=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt52=5;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case FLOAT:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 88:
                											{
                												alt52=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt52=5;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case CHAR:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 88:
                											{
                												alt52=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt52=5;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case STRING:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 88:
                											{
                												alt52=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt52=5;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case BOOL:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 88:
                											{
                												alt52=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt52=5;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case NULLTOK:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 88:
                											{
                												alt52=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt52=5;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case THIS_TOK:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 88:
                											{
                												alt52=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt52=5;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case VOID_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 88:
                																	{
                																		alt52=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt52=5;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case INT_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 88:
                																	{
                																		alt52=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt52=5;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case SIZE_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 88:
                																	{
                																		alt52=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt52=5;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case FLOAT_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 88:
                																	{
                																		alt52=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt52=5;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case CHAR_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 88:
                																	{
                																		alt52=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt52=5;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case BOOL_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 88:
                																	{
                																		alt52=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt52=5;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case CPTR_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 88:
                																	{
                																		alt52=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt52=5;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case STRING_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 88:
                																	{
                																		alt52=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt52=5;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case RSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case ID:
                							{
                								switch ( this->LA(5) )
                								{
                								case 88:
                									{
                										alt52=1;
                									}
                								    break;
                								case LBRACKET:
                									{
                										alt52=5;
                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case DLSQBRACKET:
                			{
                				switch ( this->LA(3) )
                				{
                				case DRSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case ID:
                							{
                								switch ( this->LA(5) )
                								{
                								case 88:
                									{
                										alt52=1;
                									}
                								    break;
                								case LBRACKET:
                									{
                										alt52=5;
                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case SLICETOK:
                			{
                				switch ( this->LA(3) )
                				{
                				case INT:
                					{
                						switch ( this->LA(4) )
                						{
                						case SLICETOK:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 88:
                											{
                												alt52=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt52=5;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case SSOR:
                			{
                				switch ( this->LA(3) )
                				{
                				case ID:
                					{
                						switch ( this->LA(4) )
                						{
                						case 88:
                							{
                								alt52=1;
                							}
                						    break;
                						case LBRACKET:
                							{
                								alt52=5;
                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;

                		}

                	}
                    break;
                case CHAR_TYPE:
                	{
                		switch ( this->LA(2) )
                		{
                		case ID:
                			{
                				switch ( this->LA(3) )
                				{
                				case 88:
                					{
                						alt52=1;
                					}
                				    break;
                				case LBRACKET:
                					{
                						alt52=5;
                					}
                				    break;

                				}

                			}
                		    break;
                		case LSQBRACKET:
                			{
                				switch ( this->LA(3) )
                				{
                				case INT:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 88:
                											{
                												alt52=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt52=5;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case SIZE:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 88:
                											{
                												alt52=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt52=5;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case FLOAT:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 88:
                											{
                												alt52=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt52=5;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case CHAR:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 88:
                											{
                												alt52=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt52=5;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case STRING:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 88:
                											{
                												alt52=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt52=5;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case BOOL:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 88:
                											{
                												alt52=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt52=5;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case NULLTOK:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 88:
                											{
                												alt52=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt52=5;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case THIS_TOK:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 88:
                											{
                												alt52=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt52=5;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case VOID_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 88:
                																	{
                																		alt52=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt52=5;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case INT_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 88:
                																	{
                																		alt52=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt52=5;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case SIZE_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 88:
                																	{
                																		alt52=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt52=5;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case FLOAT_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 88:
                																	{
                																		alt52=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt52=5;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case CHAR_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 88:
                																	{
                																		alt52=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt52=5;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case BOOL_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 88:
                																	{
                																		alt52=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt52=5;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case CPTR_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 88:
                																	{
                																		alt52=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt52=5;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case STRING_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 88:
                																	{
                																		alt52=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt52=5;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case RSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case ID:
                							{
                								switch ( this->LA(5) )
                								{
                								case 88:
                									{
                										alt52=1;
                									}
                								    break;
                								case LBRACKET:
                									{
                										alt52=5;
                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case DLSQBRACKET:
                			{
                				switch ( this->LA(3) )
                				{
                				case DRSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case ID:
                							{
                								switch ( this->LA(5) )
                								{
                								case 88:
                									{
                										alt52=1;
                									}
                								    break;
                								case LBRACKET:
                									{
                										alt52=5;
                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case SLICETOK:
                			{
                				switch ( this->LA(3) )
                				{
                				case INT:
                					{
                						switch ( this->LA(4) )
                						{
                						case SLICETOK:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 88:
                											{
                												alt52=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt52=5;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case SSOR:
                			{
                				switch ( this->LA(3) )
                				{
                				case ID:
                					{
                						switch ( this->LA(4) )
                						{
                						case 88:
                							{
                								alt52=1;
                							}
                						    break;
                						case LBRACKET:
                							{
                								alt52=5;
                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;

                		}

                	}
                    break;
                case BOOL_TYPE:
                	{
                		switch ( this->LA(2) )
                		{
                		case ID:
                			{
                				switch ( this->LA(3) )
                				{
                				case 88:
                					{
                						alt52=1;
                					}
                				    break;
                				case LBRACKET:
                					{
                						alt52=5;
                					}
                				    break;

                				}

                			}
                		    break;
                		case LSQBRACKET:
                			{
                				switch ( this->LA(3) )
                				{
                				case INT:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 88:
                											{
                												alt52=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt52=5;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case SIZE:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 88:
                											{
                												alt52=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt52=5;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case FLOAT:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 88:
                											{
                												alt52=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt52=5;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case CHAR:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 88:
                											{
                												alt52=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt52=5;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case STRING:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 88:
                											{
                												alt52=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt52=5;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case BOOL:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 88:
                											{
                												alt52=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt52=5;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case NULLTOK:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 88:
                											{
                												alt52=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt52=5;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case THIS_TOK:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 88:
                											{
                												alt52=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt52=5;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case VOID_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 88:
                																	{
                																		alt52=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt52=5;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case INT_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 88:
                																	{
                																		alt52=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt52=5;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case SIZE_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 88:
                																	{
                																		alt52=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt52=5;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case FLOAT_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 88:
                																	{
                																		alt52=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt52=5;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case CHAR_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 88:
                																	{
                																		alt52=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt52=5;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case BOOL_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 88:
                																	{
                																		alt52=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt52=5;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case CPTR_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 88:
                																	{
                																		alt52=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt52=5;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case STRING_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 88:
                																	{
                																		alt52=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt52=5;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case RSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case ID:
                							{
                								switch ( this->LA(5) )
                								{
                								case 88:
                									{
                										alt52=1;
                									}
                								    break;
                								case LBRACKET:
                									{
                										alt52=5;
                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case DLSQBRACKET:
                			{
                				switch ( this->LA(3) )
                				{
                				case DRSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case ID:
                							{
                								switch ( this->LA(5) )
                								{
                								case 88:
                									{
                										alt52=1;
                									}
                								    break;
                								case LBRACKET:
                									{
                										alt52=5;
                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case SLICETOK:
                			{
                				switch ( this->LA(3) )
                				{
                				case INT:
                					{
                						switch ( this->LA(4) )
                						{
                						case SLICETOK:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 88:
                											{
                												alt52=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt52=5;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case SSOR:
                			{
                				switch ( this->LA(3) )
                				{
                				case ID:
                					{
                						switch ( this->LA(4) )
                						{
                						case 88:
                							{
                								alt52=1;
                							}
                						    break;
                						case LBRACKET:
                							{
                								alt52=5;
                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;

                		}

                	}
                    break;
                case CPTR_TYPE:
                	{
                		switch ( this->LA(2) )
                		{
                		case ID:
                			{
                				switch ( this->LA(3) )
                				{
                				case 88:
                					{
                						alt52=1;
                					}
                				    break;
                				case LBRACKET:
                					{
                						alt52=5;
                					}
                				    break;

                				}

                			}
                		    break;
                		case LSQBRACKET:
                			{
                				switch ( this->LA(3) )
                				{
                				case INT:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 88:
                											{
                												alt52=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt52=5;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case SIZE:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 88:
                											{
                												alt52=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt52=5;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case FLOAT:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 88:
                											{
                												alt52=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt52=5;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case CHAR:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 88:
                											{
                												alt52=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt52=5;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case STRING:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 88:
                											{
                												alt52=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt52=5;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case BOOL:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 88:
                											{
                												alt52=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt52=5;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case NULLTOK:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 88:
                											{
                												alt52=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt52=5;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case THIS_TOK:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 88:
                											{
                												alt52=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt52=5;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case VOID_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 88:
                																	{
                																		alt52=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt52=5;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case INT_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 88:
                																	{
                																		alt52=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt52=5;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case SIZE_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 88:
                																	{
                																		alt52=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt52=5;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case FLOAT_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 88:
                																	{
                																		alt52=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt52=5;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case CHAR_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 88:
                																	{
                																		alt52=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt52=5;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case BOOL_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 88:
                																	{
                																		alt52=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt52=5;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case CPTR_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 88:
                																	{
                																		alt52=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt52=5;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case STRING_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 88:
                																	{
                																		alt52=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt52=5;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case RSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case ID:
                							{
                								switch ( this->LA(5) )
                								{
                								case 88:
                									{
                										alt52=1;
                									}
                								    break;
                								case LBRACKET:
                									{
                										alt52=5;
                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case DLSQBRACKET:
                			{
                				switch ( this->LA(3) )
                				{
                				case DRSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case ID:
                							{
                								switch ( this->LA(5) )
                								{
                								case 88:
                									{
                										alt52=1;
                									}
                								    break;
                								case LBRACKET:
                									{
                										alt52=5;
                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case SLICETOK:
                			{
                				switch ( this->LA(3) )
                				{
                				case INT:
                					{
                						switch ( this->LA(4) )
                						{
                						case SLICETOK:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 88:
                											{
                												alt52=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt52=5;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case SSOR:
                			{
                				switch ( this->LA(3) )
                				{
                				case ID:
                					{
                						switch ( this->LA(4) )
                						{
                						case 88:
                							{
                								alt52=1;
                							}
                						    break;
                						case LBRACKET:
                							{
                								alt52=5;
                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;

                		}

                	}
                    break;
                case STRING_TYPE:
                	{
                		switch ( this->LA(2) )
                		{
                		case ID:
                			{
                				switch ( this->LA(3) )
                				{
                				case 88:
                					{
                						alt52=1;
                					}
                				    break;
                				case LBRACKET:
                					{
                						alt52=5;
                					}
                				    break;

                				}

                			}
                		    break;
                		case LSQBRACKET:
                			{
                				switch ( this->LA(3) )
                				{
                				case INT:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 88:
                											{
                												alt52=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt52=5;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case SIZE:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 88:
                											{
                												alt52=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt52=5;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case FLOAT:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 88:
                											{
                												alt52=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt52=5;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case CHAR:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 88:
                											{
                												alt52=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt52=5;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case STRING:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 88:
                											{
                												alt52=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt52=5;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case BOOL:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 88:
                											{
                												alt52=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt52=5;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case NULLTOK:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 88:
                											{
                												alt52=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt52=5;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case THIS_TOK:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 88:
                											{
                												alt52=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt52=5;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case VOID_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 88:
                																	{
                																		alt52=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt52=5;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case INT_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 88:
                																	{
                																		alt52=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt52=5;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case SIZE_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 88:
                																	{
                																		alt52=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt52=5;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case FLOAT_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 88:
                																	{
                																		alt52=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt52=5;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case CHAR_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 88:
                																	{
                																		alt52=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt52=5;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case BOOL_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 88:
                																	{
                																		alt52=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt52=5;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case CPTR_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 88:
                																	{
                																		alt52=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt52=5;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case STRING_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 88:
                																	{
                																		alt52=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt52=5;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case RSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case ID:
                							{
                								switch ( this->LA(5) )
                								{
                								case 88:
                									{
                										alt52=1;
                									}
                								    break;
                								case LBRACKET:
                									{
                										alt52=5;
                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case DLSQBRACKET:
                			{
                				switch ( this->LA(3) )
                				{
                				case DRSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case ID:
                							{
                								switch ( this->LA(5) )
                								{
                								case 88:
                									{
                										alt52=1;
                									}
                								    break;
                								case LBRACKET:
                									{
                										alt52=5;
                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case SLICETOK:
                			{
                				switch ( this->LA(3) )
                				{
                				case INT:
                					{
                						switch ( this->LA(4) )
                						{
                						case SLICETOK:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 88:
                											{
                												alt52=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt52=5;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case SSOR:
                			{
                				switch ( this->LA(3) )
                				{
                				case ID:
                					{
                						switch ( this->LA(4) )
                						{
                						case 88:
                							{
                								alt52=1;
                							}
                						    break;
                						case LBRACKET:
                							{
                								alt52=5;
                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;

                		}

                	}
                    break;
                case TYPE:
                	{
                		switch ( this->LA(2) )
                		{
                		case ID:
                			{
                				switch ( this->LA(3) )
                				{
                				case 88:
                					{
                						alt52=1;
                					}
                				    break;
                				case LBRACKET:
                					{
                						alt52=5;
                					}
                				    break;

                				}

                			}
                		    break;
                		case LSQBRACKET:
                			{
                				switch ( this->LA(3) )
                				{
                				case INT:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 88:
                											{
                												alt52=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt52=5;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case SIZE:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 88:
                											{
                												alt52=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt52=5;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case FLOAT:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 88:
                											{
                												alt52=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt52=5;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case CHAR:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 88:
                											{
                												alt52=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt52=5;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case STRING:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 88:
                											{
                												alt52=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt52=5;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case BOOL:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 88:
                											{
                												alt52=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt52=5;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case NULLTOK:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 88:
                											{
                												alt52=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt52=5;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case THIS_TOK:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 88:
                											{
                												alt52=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt52=5;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case VOID_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 88:
                																	{
                																		alt52=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt52=5;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case INT_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 88:
                																	{
                																		alt52=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt52=5;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case SIZE_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 88:
                																	{
                																		alt52=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt52=5;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case FLOAT_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 88:
                																	{
                																		alt52=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt52=5;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case CHAR_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 88:
                																	{
                																		alt52=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt52=5;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case BOOL_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 88:
                																	{
                																		alt52=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt52=5;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case CPTR_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 88:
                																	{
                																		alt52=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt52=5;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case STRING_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 88:
                																	{
                																		alt52=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt52=5;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case RSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case ID:
                							{
                								switch ( this->LA(5) )
                								{
                								case 88:
                									{
                										alt52=1;
                									}
                								    break;
                								case LBRACKET:
                									{
                										alt52=5;
                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case DLSQBRACKET:
                			{
                				switch ( this->LA(3) )
                				{
                				case DRSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case ID:
                							{
                								switch ( this->LA(5) )
                								{
                								case 88:
                									{
                										alt52=1;
                									}
                								    break;
                								case LBRACKET:
                									{
                										alt52=5;
                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case QUESTION:
                			{
                				switch ( this->LA(3) )
                				{
                				case ID:
                					{
                						switch ( this->LA(4) )
                						{
                						case 88:
                							{
                								alt52=1;
                							}
                						    break;
                						case LBRACKET:
                							{
                								alt52=5;
                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;

                		}

                	}
                    break;
                case SHARED_REF:
                	{
                		switch ( this->LA(2) )
                		{
                		case TYPE:
                			{
                				switch ( this->LA(3) )
                				{
                				case LSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case INT:
                							{
                								switch ( this->LA(5) )
                								{
                								case RSQBRACKET:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 88:
                													{
                														alt52=1;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt52=5;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case SIZE:
                							{
                								switch ( this->LA(5) )
                								{
                								case RSQBRACKET:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 88:
                													{
                														alt52=1;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt52=5;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case FLOAT:
                							{
                								switch ( this->LA(5) )
                								{
                								case RSQBRACKET:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 88:
                													{
                														alt52=1;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt52=5;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case CHAR:
                							{
                								switch ( this->LA(5) )
                								{
                								case RSQBRACKET:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 88:
                													{
                														alt52=1;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt52=5;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case STRING:
                							{
                								switch ( this->LA(5) )
                								{
                								case RSQBRACKET:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 88:
                													{
                														alt52=1;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt52=5;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case BOOL:
                							{
                								switch ( this->LA(5) )
                								{
                								case RSQBRACKET:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 88:
                													{
                														alt52=1;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt52=5;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case NULLTOK:
                							{
                								switch ( this->LA(5) )
                								{
                								case RSQBRACKET:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 88:
                													{
                														alt52=1;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt52=5;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case THIS_TOK:
                							{
                								switch ( this->LA(5) )
                								{
                								case RSQBRACKET:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 88:
                													{
                														alt52=1;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt52=5;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case VOID_TYPE:
                							{
                								switch ( this->LA(5) )
                								{
                								case LBRACE:
                									{
                										switch ( this->LA(6) )
                										{
                										case STRING:
                											{
                												switch ( this->LA(7) )
                												{
                												case RBRACE:
                													{
                														switch ( this->LA(8) )
                														{
                														case RSQBRACKET:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 88:
                																			{
                																				alt52=1;
                																			}
                																		    break;
                																		case LBRACKET:
                																			{
                																				alt52=5;
                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case INT_TYPE:
                							{
                								switch ( this->LA(5) )
                								{
                								case LBRACE:
                									{
                										switch ( this->LA(6) )
                										{
                										case STRING:
                											{
                												switch ( this->LA(7) )
                												{
                												case RBRACE:
                													{
                														switch ( this->LA(8) )
                														{
                														case RSQBRACKET:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 88:
                																			{
                																				alt52=1;
                																			}
                																		    break;
                																		case LBRACKET:
                																			{
                																				alt52=5;
                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case SIZE_TYPE:
                							{
                								switch ( this->LA(5) )
                								{
                								case LBRACE:
                									{
                										switch ( this->LA(6) )
                										{
                										case STRING:
                											{
                												switch ( this->LA(7) )
                												{
                												case RBRACE:
                													{
                														switch ( this->LA(8) )
                														{
                														case RSQBRACKET:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 88:
                																			{
                																				alt52=1;
                																			}
                																		    break;
                																		case LBRACKET:
                																			{
                																				alt52=5;
                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case FLOAT_TYPE:
                							{
                								switch ( this->LA(5) )
                								{
                								case LBRACE:
                									{
                										switch ( this->LA(6) )
                										{
                										case STRING:
                											{
                												switch ( this->LA(7) )
                												{
                												case RBRACE:
                													{
                														switch ( this->LA(8) )
                														{
                														case RSQBRACKET:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 88:
                																			{
                																				alt52=1;
                																			}
                																		    break;
                																		case LBRACKET:
                																			{
                																				alt52=5;
                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case CHAR_TYPE:
                							{
                								switch ( this->LA(5) )
                								{
                								case LBRACE:
                									{
                										switch ( this->LA(6) )
                										{
                										case STRING:
                											{
                												switch ( this->LA(7) )
                												{
                												case RBRACE:
                													{
                														switch ( this->LA(8) )
                														{
                														case RSQBRACKET:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 88:
                																			{
                																				alt52=1;
                																			}
                																		    break;
                																		case LBRACKET:
                																			{
                																				alt52=5;
                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case BOOL_TYPE:
                							{
                								switch ( this->LA(5) )
                								{
                								case LBRACE:
                									{
                										switch ( this->LA(6) )
                										{
                										case STRING:
                											{
                												switch ( this->LA(7) )
                												{
                												case RBRACE:
                													{
                														switch ( this->LA(8) )
                														{
                														case RSQBRACKET:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 88:
                																			{
                																				alt52=1;
                																			}
                																		    break;
                																		case LBRACKET:
                																			{
                																				alt52=5;
                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case CPTR_TYPE:
                							{
                								switch ( this->LA(5) )
                								{
                								case LBRACE:
                									{
                										switch ( this->LA(6) )
                										{
                										case STRING:
                											{
                												switch ( this->LA(7) )
                												{
                												case RBRACE:
                													{
                														switch ( this->LA(8) )
                														{
                														case RSQBRACKET:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 88:
                																			{
                																				alt52=1;
                																			}
                																		    break;
                																		case LBRACKET:
                																			{
                																				alt52=5;
                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case STRING_TYPE:
                							{
                								switch ( this->LA(5) )
                								{
                								case LBRACE:
                									{
                										switch ( this->LA(6) )
                										{
                										case STRING:
                											{
                												switch ( this->LA(7) )
                												{
                												case RBRACE:
                													{
                														switch ( this->LA(8) )
                														{
                														case RSQBRACKET:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 88:
                																			{
                																				alt52=1;
                																			}
                																		    break;
                																		case LBRACKET:
                																			{
                																				alt52=5;
                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 88:
                											{
                												alt52=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt52=5;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case DLSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case DRSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 88:
                											{
                												alt52=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt52=5;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case ID:
                					{
                						switch ( this->LA(4) )
                						{
                						case 88:
                							{
                								alt52=1;
                							}
                						    break;
                						case LBRACKET:
                							{
                								alt52=5;
                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;

                		}

                	}
                    break;
                case WEAK_REF:
                	{
                		switch ( this->LA(2) )
                		{
                		case TYPE:
                			{
                				switch ( this->LA(3) )
                				{
                				case ID:
                					{
                						switch ( this->LA(4) )
                						{
                						case 88:
                							{
                								alt52=1;
                							}
                						    break;
                						case LBRACKET:
                							{
                								alt52=5;
                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;

                		}

                	}
                    break;
                case SYNCHRONIZED:
                	{
                		switch ( this->LA(2) )
                		{
                		case VIRTUAL:
                			{
                				alt52=9;
                			}
                		    break;
                		case OVERRIDE:
                			{
                				alt52=12;
                			}
                		    break;
                		case VOID_TYPE:
                			{
                				switch ( this->LA(3) )
                				{
                				case ID:
                					{
                						switch ( this->LA(4) )
                						{
                						case 88:
                							{
                								alt52=2;
                							}
                						    break;
                						case LBRACKET:
                							{
                								alt52=6;
                							}
                						    break;

                						}

                					}
                				    break;
                				case LSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case INT:
                							{
                								switch ( this->LA(5) )
                								{
                								case RSQBRACKET:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 88:
                													{
                														alt52=2;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt52=6;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case SIZE:
                							{
                								switch ( this->LA(5) )
                								{
                								case RSQBRACKET:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 88:
                													{
                														alt52=2;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt52=6;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case FLOAT:
                							{
                								switch ( this->LA(5) )
                								{
                								case RSQBRACKET:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 88:
                													{
                														alt52=2;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt52=6;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case CHAR:
                							{
                								switch ( this->LA(5) )
                								{
                								case RSQBRACKET:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 88:
                													{
                														alt52=2;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt52=6;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case STRING:
                							{
                								switch ( this->LA(5) )
                								{
                								case RSQBRACKET:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 88:
                													{
                														alt52=2;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt52=6;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case BOOL:
                							{
                								switch ( this->LA(5) )
                								{
                								case RSQBRACKET:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 88:
                													{
                														alt52=2;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt52=6;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case NULLTOK:
                							{
                								switch ( this->LA(5) )
                								{
                								case RSQBRACKET:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 88:
                													{
                														alt52=2;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt52=6;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case THIS_TOK:
                							{
                								switch ( this->LA(5) )
                								{
                								case RSQBRACKET:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 88:
                													{
                														alt52=2;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt52=6;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case VOID_TYPE:
                							{
                								switch ( this->LA(5) )
                								{
                								case LBRACE:
                									{
                										switch ( this->LA(6) )
                										{
                										case STRING:
                											{
                												switch ( this->LA(7) )
                												{
                												case RBRACE:
                													{
                														switch ( this->LA(8) )
                														{
                														case RSQBRACKET:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 88:
                																			{
                																				alt52=2;
                																			}
                																		    break;
                																		case LBRACKET:
                																			{
                																				alt52=6;
                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case INT_TYPE:
                							{
                								switch ( this->LA(5) )
                								{
                								case LBRACE:
                									{
                										switch ( this->LA(6) )
                										{
                										case STRING:
                											{
                												switch ( this->LA(7) )
                												{
                												case RBRACE:
                													{
                														switch ( this->LA(8) )
                														{
                														case RSQBRACKET:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 88:
                																			{
                																				alt52=2;
                																			}
                																		    break;
                																		case LBRACKET:
                																			{
                																				alt52=6;
                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case SIZE_TYPE:
                							{
                								switch ( this->LA(5) )
                								{
                								case LBRACE:
                									{
                										switch ( this->LA(6) )
                										{
                										case STRING:
                											{
                												switch ( this->LA(7) )
                												{
                												case RBRACE:
                													{
                														switch ( this->LA(8) )
                														{
                														case RSQBRACKET:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 88:
                																			{
                																				alt52=2;
                																			}
                																		    break;
                																		case LBRACKET:
                																			{
                																				alt52=6;
                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case FLOAT_TYPE:
                							{
                								switch ( this->LA(5) )
                								{
                								case LBRACE:
                									{
                										switch ( this->LA(6) )
                										{
                										case STRING:
                											{
                												switch ( this->LA(7) )
                												{
                												case RBRACE:
                													{
                														switch ( this->LA(8) )
                														{
                														case RSQBRACKET:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 88:
                																			{
                																				alt52=2;
                																			}
                																		    break;
                																		case LBRACKET:
                																			{
                																				alt52=6;
                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case CHAR_TYPE:
                							{
                								switch ( this->LA(5) )
                								{
                								case LBRACE:
                									{
                										switch ( this->LA(6) )
                										{
                										case STRING:
                											{
                												switch ( this->LA(7) )
                												{
                												case RBRACE:
                													{
                														switch ( this->LA(8) )
                														{
                														case RSQBRACKET:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 88:
                																			{
                																				alt52=2;
                																			}
                																		    break;
                																		case LBRACKET:
                																			{
                																				alt52=6;
                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case BOOL_TYPE:
                							{
                								switch ( this->LA(5) )
                								{
                								case LBRACE:
                									{
                										switch ( this->LA(6) )
                										{
                										case STRING:
                											{
                												switch ( this->LA(7) )
                												{
                												case RBRACE:
                													{
                														switch ( this->LA(8) )
                														{
                														case RSQBRACKET:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 88:
                																			{
                																				alt52=2;
                																			}
                																		    break;
                																		case LBRACKET:
                																			{
                																				alt52=6;
                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case CPTR_TYPE:
                							{
                								switch ( this->LA(5) )
                								{
                								case LBRACE:
                									{
                										switch ( this->LA(6) )
                										{
                										case STRING:
                											{
                												switch ( this->LA(7) )
                												{
                												case RBRACE:
                													{
                														switch ( this->LA(8) )
                														{
                														case RSQBRACKET:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 88:
                																			{
                																				alt52=2;
                																			}
                																		    break;
                																		case LBRACKET:
                																			{
                																				alt52=6;
                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case STRING_TYPE:
                							{
                								switch ( this->LA(5) )
                								{
                								case LBRACE:
                									{
                										switch ( this->LA(6) )
                										{
                										case STRING:
                											{
                												switch ( this->LA(7) )
                												{
                												case RBRACE:
                													{
                														switch ( this->LA(8) )
                														{
                														case RSQBRACKET:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 88:
                																			{
                																				alt52=2;
                																			}
                																		    break;
                																		case LBRACKET:
                																			{
                																				alt52=6;
                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 88:
                											{
                												alt52=2;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt52=6;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case DLSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case DRSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 88:
                											{
                												alt52=2;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt52=6;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case SLICETOK:
                					{
                						switch ( this->LA(4) )
                						{
                						case INT:
                							{
                								switch ( this->LA(5) )
                								{
                								case SLICETOK:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 88:
                													{
                														alt52=2;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt52=6;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case SSOR:
                					{
                						switch ( this->LA(4) )
                						{
                						case ID:
                							{
                								switch ( this->LA(5) )
                								{
                								case 88:
                									{
                										alt52=2;
                									}
                								    break;
                								case LBRACKET:
                									{
                										alt52=6;
                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case INT_TYPE:
                			{
                				switch ( this->LA(3) )
                				{
                				case ID:
                					{
                						switch ( this->LA(4) )
                						{
                						case 88:
                							{
                								alt52=2;
                							}
                						    break;
                						case LBRACKET:
                							{
                								alt52=6;
                							}
                						    break;

                						}

                					}
                				    break;
                				case LSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case INT:
                							{
                								switch ( this->LA(5) )
                								{
                								case RSQBRACKET:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 88:
                													{
                														alt52=2;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt52=6;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case SIZE:
                							{
                								switch ( this->LA(5) )
                								{
                								case RSQBRACKET:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 88:
                													{
                														alt52=2;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt52=6;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case FLOAT:
                							{
                								switch ( this->LA(5) )
                								{
                								case RSQBRACKET:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 88:
                													{
                														alt52=2;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt52=6;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case CHAR:
                							{
                								switch ( this->LA(5) )
                								{
                								case RSQBRACKET:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 88:
                													{
                														alt52=2;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt52=6;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case STRING:
                							{
                								switch ( this->LA(5) )
                								{
                								case RSQBRACKET:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 88:
                													{
                														alt52=2;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt52=6;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case BOOL:
                							{
                								switch ( this->LA(5) )
                								{
                								case RSQBRACKET:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 88:
                													{
                														alt52=2;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt52=6;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case NULLTOK:
                							{
                								switch ( this->LA(5) )
                								{
                								case RSQBRACKET:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 88:
                													{
                														alt52=2;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt52=6;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case THIS_TOK:
                							{
                								switch ( this->LA(5) )
                								{
                								case RSQBRACKET:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 88:
                													{
                														alt52=2;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt52=6;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case VOID_TYPE:
                							{
                								switch ( this->LA(5) )
                								{
                								case LBRACE:
                									{
                										switch ( this->LA(6) )
                										{
                										case STRING:
                											{
                												switch ( this->LA(7) )
                												{
                												case RBRACE:
                													{
                														switch ( this->LA(8) )
                														{
                														case RSQBRACKET:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 88:
                																			{
                																				alt52=2;
                																			}
                																		    break;
                																		case LBRACKET:
                																			{
                																				alt52=6;
                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case INT_TYPE:
                							{
                								switch ( this->LA(5) )
                								{
                								case LBRACE:
                									{
                										switch ( this->LA(6) )
                										{
                										case STRING:
                											{
                												switch ( this->LA(7) )
                												{
                												case RBRACE:
                													{
                														switch ( this->LA(8) )
                														{
                														case RSQBRACKET:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 88:
                																			{
                																				alt52=2;
                																			}
                																		    break;
                																		case LBRACKET:
                																			{
                																				alt52=6;
                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case SIZE_TYPE:
                							{
                								switch ( this->LA(5) )
                								{
                								case LBRACE:
                									{
                										switch ( this->LA(6) )
                										{
                										case STRING:
                											{
                												switch ( this->LA(7) )
                												{
                												case RBRACE:
                													{
                														switch ( this->LA(8) )
                														{
                														case RSQBRACKET:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 88:
                																			{
                																				alt52=2;
                																			}
                																		    break;
                																		case LBRACKET:
                																			{
                																				alt52=6;
                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case FLOAT_TYPE:
                							{
                								switch ( this->LA(5) )
                								{
                								case LBRACE:
                									{
                										switch ( this->LA(6) )
                										{
                										case STRING:
                											{
                												switch ( this->LA(7) )
                												{
                												case RBRACE:
                													{
                														switch ( this->LA(8) )
                														{
                														case RSQBRACKET:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 88:
                																			{
                																				alt52=2;
                																			}
                																		    break;
                																		case LBRACKET:
                																			{
                																				alt52=6;
                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case CHAR_TYPE:
                							{
                								switch ( this->LA(5) )
                								{
                								case LBRACE:
                									{
                										switch ( this->LA(6) )
                										{
                										case STRING:
                											{
                												switch ( this->LA(7) )
                												{
                												case RBRACE:
                													{
                														switch ( this->LA(8) )
                														{
                														case RSQBRACKET:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 88:
                																			{
                																				alt52=2;
                																			}
                																		    break;
                																		case LBRACKET:
                																			{
                																				alt52=6;
                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case BOOL_TYPE:
                							{
                								switch ( this->LA(5) )
                								{
                								case LBRACE:
                									{
                										switch ( this->LA(6) )
                										{
                										case STRING:
                											{
                												switch ( this->LA(7) )
                												{
                												case RBRACE:
                													{
                														switch ( this->LA(8) )
                														{
                														case RSQBRACKET:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 88:
                																			{
                																				alt52=2;
                																			}
                																		    break;
                																		case LBRACKET:
                																			{
                																				alt52=6;
                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case CPTR_TYPE:
                							{
                								switch ( this->LA(5) )
                								{
                								case LBRACE:
                									{
                										switch ( this->LA(6) )
                										{
                										case STRING:
                											{
                												switch ( this->LA(7) )
                												{
                												case RBRACE:
                													{
                														switch ( this->LA(8) )
                														{
                														case RSQBRACKET:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 88:
                																			{
                																				alt52=2;
                																			}
                																		    break;
                																		case LBRACKET:
                																			{
                																				alt52=6;
                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case STRING_TYPE:
                							{
                								switch ( this->LA(5) )
                								{
                								case LBRACE:
                									{
                										switch ( this->LA(6) )
                										{
                										case STRING:
                											{
                												switch ( this->LA(7) )
                												{
                												case RBRACE:
                													{
                														switch ( this->LA(8) )
                														{
                														case RSQBRACKET:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 88:
                																			{
                																				alt52=2;
                																			}
                																		    break;
                																		case LBRACKET:
                																			{
                																				alt52=6;
                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 88:
                											{
                												alt52=2;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt52=6;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case DLSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case DRSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 88:
                											{
                												alt52=2;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt52=6;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case SLICETOK:
                					{
                						switch ( this->LA(4) )
                						{
                						case INT:
                							{
                								switch ( this->LA(5) )
                								{
                								case SLICETOK:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 88:
                													{
                														alt52=2;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt52=6;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case SSOR:
                					{
                						switch ( this->LA(4) )
                						{
                						case ID:
                							{
                								switch ( this->LA(5) )
                								{
                								case 88:
                									{
                										alt52=2;
                									}
                								    break;
                								case LBRACKET:
                									{
                										alt52=6;
                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case SIZE_TYPE:
                			{
                				switch ( this->LA(3) )
                				{
                				case ID:
                					{
                						switch ( this->LA(4) )
                						{
                						case 88:
                							{
                								alt52=2;
                							}
                						    break;
                						case LBRACKET:
                							{
                								alt52=6;
                							}
                						    break;

                						}

                					}
                				    break;
                				case LSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case INT:
                							{
                								switch ( this->LA(5) )
                								{
                								case RSQBRACKET:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 88:
                													{
                														alt52=2;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt52=6;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case SIZE:
                							{
                								switch ( this->LA(5) )
                								{
                								case RSQBRACKET:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 88:
                													{
                														alt52=2;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt52=6;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case FLOAT:
                							{
                								switch ( this->LA(5) )
                								{
                								case RSQBRACKET:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 88:
                													{
                														alt52=2;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt52=6;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case CHAR:
                							{
                								switch ( this->LA(5) )
                								{
                								case RSQBRACKET:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 88:
                													{
                														alt52=2;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt52=6;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case STRING:
                							{
                								switch ( this->LA(5) )
                								{
                								case RSQBRACKET:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 88:
                													{
                														alt52=2;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt52=6;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case BOOL:
                							{
                								switch ( this->LA(5) )
                								{
                								case RSQBRACKET:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 88:
                													{
                														alt52=2;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt52=6;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case NULLTOK:
                							{
                								switch ( this->LA(5) )
                								{
                								case RSQBRACKET:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 88:
                													{
                														alt52=2;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt52=6;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case THIS_TOK:
                							{
                								switch ( this->LA(5) )
                								{
                								case RSQBRACKET:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 88:
                													{
                														alt52=2;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt52=6;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case VOID_TYPE:
                							{
                								switch ( this->LA(5) )
                								{
                								case LBRACE:
                									{
                										switch ( this->LA(6) )
                										{
                										case STRING:
                											{
                												switch ( this->LA(7) )
                												{
                												case RBRACE:
                													{
                														switch ( this->LA(8) )
                														{
                														case RSQBRACKET:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 88:
                																			{
                																				alt52=2;
                																			}
                																		    break;
                																		case LBRACKET:
                																			{
                																				alt52=6;
                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case INT_TYPE:
                							{
                								switch ( this->LA(5) )
                								{
                								case LBRACE:
                									{
                										switch ( this->LA(6) )
                										{
                										case STRING:
                											{
                												switch ( this->LA(7) )
                												{
                												case RBRACE:
                													{
                														switch ( this->LA(8) )
                														{
                														case RSQBRACKET:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 88:
                																			{
                																				alt52=2;
                																			}
                																		    break;
                																		case LBRACKET:
                																			{
                																				alt52=6;
                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case SIZE_TYPE:
                							{
                								switch ( this->LA(5) )
                								{
                								case LBRACE:
                									{
                										switch ( this->LA(6) )
                										{
                										case STRING:
                											{
                												switch ( this->LA(7) )
                												{
                												case RBRACE:
                													{
                														switch ( this->LA(8) )
                														{
                														case RSQBRACKET:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 88:
                																			{
                																				alt52=2;
                																			}
                																		    break;
                																		case LBRACKET:
                																			{
                																				alt52=6;
                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case FLOAT_TYPE:
                							{
                								switch ( this->LA(5) )
                								{
                								case LBRACE:
                									{
                										switch ( this->LA(6) )
                										{
                										case STRING:
                											{
                												switch ( this->LA(7) )
                												{
                												case RBRACE:
                													{
                														switch ( this->LA(8) )
                														{
                														case RSQBRACKET:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 88:
                																			{
                																				alt52=2;
                																			}
                																		    break;
                																		case LBRACKET:
                																			{
                																				alt52=6;
                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case CHAR_TYPE:
                							{
                								switch ( this->LA(5) )
                								{
                								case LBRACE:
                									{
                										switch ( this->LA(6) )
                										{
                										case STRING:
                											{
                												switch ( this->LA(7) )
                												{
                												case RBRACE:
                													{
                														switch ( this->LA(8) )
                														{
                														case RSQBRACKET:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 88:
                																			{
                																				alt52=2;
                																			}
                																		    break;
                																		case LBRACKET:
                																			{
                																				alt52=6;
                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case BOOL_TYPE:
                							{
                								switch ( this->LA(5) )
                								{
                								case LBRACE:
                									{
                										switch ( this->LA(6) )
                										{
                										case STRING:
                											{
                												switch ( this->LA(7) )
                												{
                												case RBRACE:
                													{
                														switch ( this->LA(8) )
                														{
                														case RSQBRACKET:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 88:
                																			{
                																				alt52=2;
                																			}
                																		    break;
                																		case LBRACKET:
                																			{
                																				alt52=6;
                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case CPTR_TYPE:
                							{
                								switch ( this->LA(5) )
                								{
                								case LBRACE:
                									{
                										switch ( this->LA(6) )
                										{
                										case STRING:
                											{
                												switch ( this->LA(7) )
                												{
                												case RBRACE:
                													{
                														switch ( this->LA(8) )
                														{
                														case RSQBRACKET:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 88:
                																			{
                																				alt52=2;
                																			}
                																		    break;
                																		case LBRACKET:
                																			{
                																				alt52=6;
                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case STRING_TYPE:
                							{
                								switch ( this->LA(5) )
                								{
                								case LBRACE:
                									{
                										switch ( this->LA(6) )
                										{
                										case STRING:
                											{
                												switch ( this->LA(7) )
                												{
                												case RBRACE:
                													{
                														switch ( this->LA(8) )
                														{
                														case RSQBRACKET:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 88:
                																			{
                																				alt52=2;
                																			}
                																		    break;
                																		case LBRACKET:
                																			{
                																				alt52=6;
                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 88:
                											{
                												alt52=2;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt52=6;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case DLSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case DRSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 88:
                											{
                												alt52=2;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt52=6;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case SLICETOK:
                					{
                						switch ( this->LA(4) )
                						{
                						case INT:
                							{
                								switch ( this->LA(5) )
                								{
                								case SLICETOK:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 88:
                													{
                														alt52=2;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt52=6;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case SSOR:
                					{
                						switch ( this->LA(4) )
                						{
                						case ID:
                							{
                								switch ( this->LA(5) )
                								{
                								case 88:
                									{
                										alt52=2;
                									}
                								    break;
                								case LBRACKET:
                									{
                										alt52=6;
                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case FLOAT_TYPE:
                			{
                				switch ( this->LA(3) )
                				{
                				case ID:
                					{
                						switch ( this->LA(4) )
                						{
                						case 88:
                							{
                								alt52=2;
                							}
                						    break;
                						case LBRACKET:
                							{
                								alt52=6;
                							}
                						    break;

                						}

                					}
                				    break;
                				case LSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case INT:
                							{
                								switch ( this->LA(5) )
                								{
                								case RSQBRACKET:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 88:
                													{
                														alt52=2;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt52=6;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case SIZE:
                							{
                								switch ( this->LA(5) )
                								{
                								case RSQBRACKET:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 88:
                													{
                														alt52=2;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt52=6;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case FLOAT:
                							{
                								switch ( this->LA(5) )
                								{
                								case RSQBRACKET:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 88:
                													{
                														alt52=2;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt52=6;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case CHAR:
                							{
                								switch ( this->LA(5) )
                								{
                								case RSQBRACKET:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 88:
                													{
                														alt52=2;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt52=6;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case STRING:
                							{
                								switch ( this->LA(5) )
                								{
                								case RSQBRACKET:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 88:
                													{
                														alt52=2;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt52=6;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case BOOL:
                							{
                								switch ( this->LA(5) )
                								{
                								case RSQBRACKET:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 88:
                													{
                														alt52=2;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt52=6;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case NULLTOK:
                							{
                								switch ( this->LA(5) )
                								{
                								case RSQBRACKET:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 88:
                													{
                														alt52=2;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt52=6;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case THIS_TOK:
                							{
                								switch ( this->LA(5) )
                								{
                								case RSQBRACKET:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 88:
                													{
                														alt52=2;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt52=6;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case VOID_TYPE:
                							{
                								switch ( this->LA(5) )
                								{
                								case LBRACE:
                									{
                										switch ( this->LA(6) )
                										{
                										case STRING:
                											{
                												switch ( this->LA(7) )
                												{
                												case RBRACE:
                													{
                														switch ( this->LA(8) )
                														{
                														case RSQBRACKET:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 88:
                																			{
                																				alt52=2;
                																			}
                																		    break;
                																		case LBRACKET:
                																			{
                																				alt52=6;
                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case INT_TYPE:
                							{
                								switch ( this->LA(5) )
                								{
                								case LBRACE:
                									{
                										switch ( this->LA(6) )
                										{
                										case STRING:
                											{
                												switch ( this->LA(7) )
                												{
                												case RBRACE:
                													{
                														switch ( this->LA(8) )
                														{
                														case RSQBRACKET:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 88:
                																			{
                																				alt52=2;
                																			}
                																		    break;
                																		case LBRACKET:
                																			{
                																				alt52=6;
                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case SIZE_TYPE:
                							{
                								switch ( this->LA(5) )
                								{
                								case LBRACE:
                									{
                										switch ( this->LA(6) )
                										{
                										case STRING:
                											{
                												switch ( this->LA(7) )
                												{
                												case RBRACE:
                													{
                														switch ( this->LA(8) )
                														{
                														case RSQBRACKET:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 88:
                																			{
                																				alt52=2;
                																			}
                																		    break;
                																		case LBRACKET:
                																			{
                																				alt52=6;
                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case FLOAT_TYPE:
                							{
                								switch ( this->LA(5) )
                								{
                								case LBRACE:
                									{
                										switch ( this->LA(6) )
                										{
                										case STRING:
                											{
                												switch ( this->LA(7) )
                												{
                												case RBRACE:
                													{
                														switch ( this->LA(8) )
                														{
                														case RSQBRACKET:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 88:
                																			{
                																				alt52=2;
                																			}
                																		    break;
                																		case LBRACKET:
                																			{
                																				alt52=6;
                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case CHAR_TYPE:
                							{
                								switch ( this->LA(5) )
                								{
                								case LBRACE:
                									{
                										switch ( this->LA(6) )
                										{
                										case STRING:
                											{
                												switch ( this->LA(7) )
                												{
                												case RBRACE:
                													{
                														switch ( this->LA(8) )
                														{
                														case RSQBRACKET:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 88:
                																			{
                																				alt52=2;
                																			}
                																		    break;
                																		case LBRACKET:
                																			{
                																				alt52=6;
                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case BOOL_TYPE:
                							{
                								switch ( this->LA(5) )
                								{
                								case LBRACE:
                									{
                										switch ( this->LA(6) )
                										{
                										case STRING:
                											{
                												switch ( this->LA(7) )
                												{
                												case RBRACE:
                													{
                														switch ( this->LA(8) )
                														{
                														case RSQBRACKET:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 88:
                																			{
                																				alt52=2;
                																			}
                																		    break;
                																		case LBRACKET:
                																			{
                																				alt52=6;
                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case CPTR_TYPE:
                							{
                								switch ( this->LA(5) )
                								{
                								case LBRACE:
                									{
                										switch ( this->LA(6) )
                										{
                										case STRING:
                											{
                												switch ( this->LA(7) )
                												{
                												case RBRACE:
                													{
                														switch ( this->LA(8) )
                														{
                														case RSQBRACKET:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 88:
                																			{
                																				alt52=2;
                																			}
                																		    break;
                																		case LBRACKET:
                																			{
                																				alt52=6;
                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case STRING_TYPE:
                							{
                								switch ( this->LA(5) )
                								{
                								case LBRACE:
                									{
                										switch ( this->LA(6) )
                										{
                										case STRING:
                											{
                												switch ( this->LA(7) )
                												{
                												case RBRACE:
                													{
                														switch ( this->LA(8) )
                														{
                														case RSQBRACKET:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 88:
                																			{
                																				alt52=2;
                																			}
                																		    break;
                																		case LBRACKET:
                																			{
                																				alt52=6;
                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 88:
                											{
                												alt52=2;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt52=6;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case DLSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case DRSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 88:
                											{
                												alt52=2;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt52=6;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case SLICETOK:
                					{
                						switch ( this->LA(4) )
                						{
                						case INT:
                							{
                								switch ( this->LA(5) )
                								{
                								case SLICETOK:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 88:
                													{
                														alt52=2;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt52=6;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case SSOR:
                					{
                						switch ( this->LA(4) )
                						{
                						case ID:
                							{
                								switch ( this->LA(5) )
                								{
                								case 88:
                									{
                										alt52=2;
                									}
                								    break;
                								case LBRACKET:
                									{
                										alt52=6;
                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case CHAR_TYPE:
                			{
                				switch ( this->LA(3) )
                				{
                				case ID:
                					{
                						switch ( this->LA(4) )
                						{
                						case 88:
                							{
                								alt52=2;
                							}
                						    break;
                						case LBRACKET:
                							{
                								alt52=6;
                							}
                						    break;

                						}

                					}
                				    break;
                				case LSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case INT:
                							{
                								switch ( this->LA(5) )
                								{
                								case RSQBRACKET:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 88:
                													{
                														alt52=2;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt52=6;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case SIZE:
                							{
                								switch ( this->LA(5) )
                								{
                								case RSQBRACKET:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 88:
                													{
                														alt52=2;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt52=6;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case FLOAT:
                							{
                								switch ( this->LA(5) )
                								{
                								case RSQBRACKET:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 88:
                													{
                														alt52=2;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt52=6;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case CHAR:
                							{
                								switch ( this->LA(5) )
                								{
                								case RSQBRACKET:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 88:
                													{
                														alt52=2;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt52=6;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case STRING:
                							{
                								switch ( this->LA(5) )
                								{
                								case RSQBRACKET:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 88:
                													{
                														alt52=2;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt52=6;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case BOOL:
                							{
                								switch ( this->LA(5) )
                								{
                								case RSQBRACKET:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 88:
                													{
                														alt52=2;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt52=6;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case NULLTOK:
                							{
                								switch ( this->LA(5) )
                								{
                								case RSQBRACKET:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 88:
                													{
                														alt52=2;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt52=6;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case THIS_TOK:
                							{
                								switch ( this->LA(5) )
                								{
                								case RSQBRACKET:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 88:
                													{
                														alt52=2;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt52=6;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case VOID_TYPE:
                							{
                								switch ( this->LA(5) )
                								{
                								case LBRACE:
                									{
                										switch ( this->LA(6) )
                										{
                										case STRING:
                											{
                												switch ( this->LA(7) )
                												{
                												case RBRACE:
                													{
                														switch ( this->LA(8) )
                														{
                														case RSQBRACKET:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 88:
                																			{
                																				alt52=2;
                																			}
                																		    break;
                																		case LBRACKET:
                																			{
                																				alt52=6;
                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case INT_TYPE:
                							{
                								switch ( this->LA(5) )
                								{
                								case LBRACE:
                									{
                										switch ( this->LA(6) )
                										{
                										case STRING:
                											{
                												switch ( this->LA(7) )
                												{
                												case RBRACE:
                													{
                														switch ( this->LA(8) )
                														{
                														case RSQBRACKET:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 88:
                																			{
                																				alt52=2;
                																			}
                																		    break;
                																		case LBRACKET:
                																			{
                																				alt52=6;
                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case SIZE_TYPE:
                							{
                								switch ( this->LA(5) )
                								{
                								case LBRACE:
                									{
                										switch ( this->LA(6) )
                										{
                										case STRING:
                											{
                												switch ( this->LA(7) )
                												{
                												case RBRACE:
                													{
                														switch ( this->LA(8) )
                														{
                														case RSQBRACKET:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 88:
                																			{
                																				alt52=2;
                																			}
                																		    break;
                																		case LBRACKET:
                																			{
                																				alt52=6;
                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case FLOAT_TYPE:
                							{
                								switch ( this->LA(5) )
                								{
                								case LBRACE:
                									{
                										switch ( this->LA(6) )
                										{
                										case STRING:
                											{
                												switch ( this->LA(7) )
                												{
                												case RBRACE:
                													{
                														switch ( this->LA(8) )
                														{
                														case RSQBRACKET:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 88:
                																			{
                																				alt52=2;
                																			}
                																		    break;
                																		case LBRACKET:
                																			{
                																				alt52=6;
                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case CHAR_TYPE:
                							{
                								switch ( this->LA(5) )
                								{
                								case LBRACE:
                									{
                										switch ( this->LA(6) )
                										{
                										case STRING:
                											{
                												switch ( this->LA(7) )
                												{
                												case RBRACE:
                													{
                														switch ( this->LA(8) )
                														{
                														case RSQBRACKET:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 88:
                																			{
                																				alt52=2;
                																			}
                																		    break;
                																		case LBRACKET:
                																			{
                																				alt52=6;
                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case BOOL_TYPE:
                							{
                								switch ( this->LA(5) )
                								{
                								case LBRACE:
                									{
                										switch ( this->LA(6) )
                										{
                										case STRING:
                											{
                												switch ( this->LA(7) )
                												{
                												case RBRACE:
                													{
                														switch ( this->LA(8) )
                														{
                														case RSQBRACKET:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 88:
                																			{
                																				alt52=2;
                																			}
                																		    break;
                																		case LBRACKET:
                																			{
                																				alt52=6;
                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case CPTR_TYPE:
                							{
                								switch ( this->LA(5) )
                								{
                								case LBRACE:
                									{
                										switch ( this->LA(6) )
                										{
                										case STRING:
                											{
                												switch ( this->LA(7) )
                												{
                												case RBRACE:
                													{
                														switch ( this->LA(8) )
                														{
                														case RSQBRACKET:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 88:
                																			{
                																				alt52=2;
                																			}
                																		    break;
                																		case LBRACKET:
                																			{
                																				alt52=6;
                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case STRING_TYPE:
                							{
                								switch ( this->LA(5) )
                								{
                								case LBRACE:
                									{
                										switch ( this->LA(6) )
                										{
                										case STRING:
                											{
                												switch ( this->LA(7) )
                												{
                												case RBRACE:
                													{
                														switch ( this->LA(8) )
                														{
                														case RSQBRACKET:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 88:
                																			{
                																				alt52=2;
                																			}
                																		    break;
                																		case LBRACKET:
                																			{
                																				alt52=6;
                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 88:
                											{
                												alt52=2;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt52=6;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case DLSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case DRSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 88:
                											{
                												alt52=2;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt52=6;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case SLICETOK:
                					{
                						switch ( this->LA(4) )
                						{
                						case INT:
                							{
                								switch ( this->LA(5) )
                								{
                								case SLICETOK:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 88:
                													{
                														alt52=2;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt52=6;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case SSOR:
                					{
                						switch ( this->LA(4) )
                						{
                						case ID:
                							{
                								switch ( this->LA(5) )
                								{
                								case 88:
                									{
                										alt52=2;
                									}
                								    break;
                								case LBRACKET:
                									{
                										alt52=6;
                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case BOOL_TYPE:
                			{
                				switch ( this->LA(3) )
                				{
                				case ID:
                					{
                						switch ( this->LA(4) )
                						{
                						case 88:
                							{
                								alt52=2;
                							}
                						    break;
                						case LBRACKET:
                							{
                								alt52=6;
                							}
                						    break;

                						}

                					}
                				    break;
                				case LSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case INT:
                							{
                								switch ( this->LA(5) )
                								{
                								case RSQBRACKET:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 88:
                													{
                														alt52=2;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt52=6;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case SIZE:
                							{
                								switch ( this->LA(5) )
                								{
                								case RSQBRACKET:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 88:
                													{
                														alt52=2;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt52=6;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case FLOAT:
                							{
                								switch ( this->LA(5) )
                								{
                								case RSQBRACKET:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 88:
                													{
                														alt52=2;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt52=6;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case CHAR:
                							{
                								switch ( this->LA(5) )
                								{
                								case RSQBRACKET:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 88:
                													{
                														alt52=2;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt52=6;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case STRING:
                							{
                								switch ( this->LA(5) )
                								{
                								case RSQBRACKET:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 88:
                													{
                														alt52=2;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt52=6;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case BOOL:
                							{
                								switch ( this->LA(5) )
                								{
                								case RSQBRACKET:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 88:
                													{
                														alt52=2;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt52=6;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case NULLTOK:
                							{
                								switch ( this->LA(5) )
                								{
                								case RSQBRACKET:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 88:
                													{
                														alt52=2;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt52=6;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case THIS_TOK:
                							{
                								switch ( this->LA(5) )
                								{
                								case RSQBRACKET:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 88:
                													{
                														alt52=2;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt52=6;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case VOID_TYPE:
                							{
                								switch ( this->LA(5) )
                								{
                								case LBRACE:
                									{
                										switch ( this->LA(6) )
                										{
                										case STRING:
                											{
                												switch ( this->LA(7) )
                												{
                												case RBRACE:
                													{
                														switch ( this->LA(8) )
                														{
                														case RSQBRACKET:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 88:
                																			{
                																				alt52=2;
                																			}
                																		    break;
                																		case LBRACKET:
                																			{
                																				alt52=6;
                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case INT_TYPE:
                							{
                								switch ( this->LA(5) )
                								{
                								case LBRACE:
                									{
                										switch ( this->LA(6) )
                										{
                										case STRING:
                											{
                												switch ( this->LA(7) )
                												{
                												case RBRACE:
                													{
                														switch ( this->LA(8) )
                														{
                														case RSQBRACKET:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 88:
                																			{
                																				alt52=2;
                																			}
                																		    break;
                																		case LBRACKET:
                																			{
                																				alt52=6;
                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case SIZE_TYPE:
                							{
                								switch ( this->LA(5) )
                								{
                								case LBRACE:
                									{
                										switch ( this->LA(6) )
                										{
                										case STRING:
                											{
                												switch ( this->LA(7) )
                												{
                												case RBRACE:
                													{
                														switch ( this->LA(8) )
                														{
                														case RSQBRACKET:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 88:
                																			{
                																				alt52=2;
                																			}
                																		    break;
                																		case LBRACKET:
                																			{
                																				alt52=6;
                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case FLOAT_TYPE:
                							{
                								switch ( this->LA(5) )
                								{
                								case LBRACE:
                									{
                										switch ( this->LA(6) )
                										{
                										case STRING:
                											{
                												switch ( this->LA(7) )
                												{
                												case RBRACE:
                													{
                														switch ( this->LA(8) )
                														{
                														case RSQBRACKET:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 88:
                																			{
                																				alt52=2;
                																			}
                																		    break;
                																		case LBRACKET:
                																			{
                																				alt52=6;
                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case CHAR_TYPE:
                							{
                								switch ( this->LA(5) )
                								{
                								case LBRACE:
                									{
                										switch ( this->LA(6) )
                										{
                										case STRING:
                											{
                												switch ( this->LA(7) )
                												{
                												case RBRACE:
                													{
                														switch ( this->LA(8) )
                														{
                														case RSQBRACKET:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 88:
                																			{
                																				alt52=2;
                																			}
                																		    break;
                																		case LBRACKET:
                																			{
                																				alt52=6;
                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case BOOL_TYPE:
                							{
                								switch ( this->LA(5) )
                								{
                								case LBRACE:
                									{
                										switch ( this->LA(6) )
                										{
                										case STRING:
                											{
                												switch ( this->LA(7) )
                												{
                												case RBRACE:
                													{
                														switch ( this->LA(8) )
                														{
                														case RSQBRACKET:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 88:
                																			{
                																				alt52=2;
                																			}
                																		    break;
                																		case LBRACKET:
                																			{
                																				alt52=6;
                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case CPTR_TYPE:
                							{
                								switch ( this->LA(5) )
                								{
                								case LBRACE:
                									{
                										switch ( this->LA(6) )
                										{
                										case STRING:
                											{
                												switch ( this->LA(7) )
                												{
                												case RBRACE:
                													{
                														switch ( this->LA(8) )
                														{
                														case RSQBRACKET:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 88:
                																			{
                																				alt52=2;
                																			}
                																		    break;
                																		case LBRACKET:
                																			{
                																				alt52=6;
                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case STRING_TYPE:
                							{
                								switch ( this->LA(5) )
                								{
                								case LBRACE:
                									{
                										switch ( this->LA(6) )
                										{
                										case STRING:
                											{
                												switch ( this->LA(7) )
                												{
                												case RBRACE:
                													{
                														switch ( this->LA(8) )
                														{
                														case RSQBRACKET:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 88:
                																			{
                																				alt52=2;
                																			}
                																		    break;
                																		case LBRACKET:
                																			{
                																				alt52=6;
                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 88:
                											{
                												alt52=2;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt52=6;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case DLSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case DRSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 88:
                											{
                												alt52=2;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt52=6;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case SLICETOK:
                					{
                						switch ( this->LA(4) )
                						{
                						case INT:
                							{
                								switch ( this->LA(5) )
                								{
                								case SLICETOK:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 88:
                													{
                														alt52=2;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt52=6;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case SSOR:
                					{
                						switch ( this->LA(4) )
                						{
                						case ID:
                							{
                								switch ( this->LA(5) )
                								{
                								case 88:
                									{
                										alt52=2;
                									}
                								    break;
                								case LBRACKET:
                									{
                										alt52=6;
                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case CPTR_TYPE:
                			{
                				switch ( this->LA(3) )
                				{
                				case ID:
                					{
                						switch ( this->LA(4) )
                						{
                						case 88:
                							{
                								alt52=2;
                							}
                						    break;
                						case LBRACKET:
                							{
                								alt52=6;
                							}
                						    break;

                						}

                					}
                				    break;
                				case LSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case INT:
                							{
                								switch ( this->LA(5) )
                								{
                								case RSQBRACKET:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 88:
                													{
                														alt52=2;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt52=6;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case SIZE:
                							{
                								switch ( this->LA(5) )
                								{
                								case RSQBRACKET:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 88:
                													{
                														alt52=2;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt52=6;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case FLOAT:
                							{
                								switch ( this->LA(5) )
                								{
                								case RSQBRACKET:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 88:
                													{
                														alt52=2;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt52=6;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case CHAR:
                							{
                								switch ( this->LA(5) )
                								{
                								case RSQBRACKET:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 88:
                													{
                														alt52=2;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt52=6;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case STRING:
                							{
                								switch ( this->LA(5) )
                								{
                								case RSQBRACKET:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 88:
                													{
                														alt52=2;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt52=6;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case BOOL:
                							{
                								switch ( this->LA(5) )
                								{
                								case RSQBRACKET:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 88:
                													{
                														alt52=2;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt52=6;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case NULLTOK:
                							{
                								switch ( this->LA(5) )
                								{
                								case RSQBRACKET:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 88:
                													{
                														alt52=2;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt52=6;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case THIS_TOK:
                							{
                								switch ( this->LA(5) )
                								{
                								case RSQBRACKET:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 88:
                													{
                														alt52=2;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt52=6;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case VOID_TYPE:
                							{
                								switch ( this->LA(5) )
                								{
                								case LBRACE:
                									{
                										switch ( this->LA(6) )
                										{
                										case STRING:
                											{
                												switch ( this->LA(7) )
                												{
                												case RBRACE:
                													{
                														switch ( this->LA(8) )
                														{
                														case RSQBRACKET:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 88:
                																			{
                																				alt52=2;
                																			}
                																		    break;
                																		case LBRACKET:
                																			{
                																				alt52=6;
                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case INT_TYPE:
                							{
                								switch ( this->LA(5) )
                								{
                								case LBRACE:
                									{
                										switch ( this->LA(6) )
                										{
                										case STRING:
                											{
                												switch ( this->LA(7) )
                												{
                												case RBRACE:
                													{
                														switch ( this->LA(8) )
                														{
                														case RSQBRACKET:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 88:
                																			{
                																				alt52=2;
                																			}
                																		    break;
                																		case LBRACKET:
                																			{
                																				alt52=6;
                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case SIZE_TYPE:
                							{
                								switch ( this->LA(5) )
                								{
                								case LBRACE:
                									{
                										switch ( this->LA(6) )
                										{
                										case STRING:
                											{
                												switch ( this->LA(7) )
                												{
                												case RBRACE:
                													{
                														switch ( this->LA(8) )
                														{
                														case RSQBRACKET:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 88:
                																			{
                																				alt52=2;
                																			}
                																		    break;
                																		case LBRACKET:
                																			{
                																				alt52=6;
                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case FLOAT_TYPE:
                							{
                								switch ( this->LA(5) )
                								{
                								case LBRACE:
                									{
                										switch ( this->LA(6) )
                										{
                										case STRING:
                											{
                												switch ( this->LA(7) )
                												{
                												case RBRACE:
                													{
                														switch ( this->LA(8) )
                														{
                														case RSQBRACKET:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 88:
                																			{
                																				alt52=2;
                																			}
                																		    break;
                																		case LBRACKET:
                																			{
                																				alt52=6;
                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case CHAR_TYPE:
                							{
                								switch ( this->LA(5) )
                								{
                								case LBRACE:
                									{
                										switch ( this->LA(6) )
                										{
                										case STRING:
                											{
                												switch ( this->LA(7) )
                												{
                												case RBRACE:
                													{
                														switch ( this->LA(8) )
                														{
                														case RSQBRACKET:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 88:
                																			{
                																				alt52=2;
                																			}
                																		    break;
                																		case LBRACKET:
                																			{
                																				alt52=6;
                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case BOOL_TYPE:
                							{
                								switch ( this->LA(5) )
                								{
                								case LBRACE:
                									{
                										switch ( this->LA(6) )
                										{
                										case STRING:
                											{
                												switch ( this->LA(7) )
                												{
                												case RBRACE:
                													{
                														switch ( this->LA(8) )
                														{
                														case RSQBRACKET:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 88:
                																			{
                																				alt52=2;
                																			}
                																		    break;
                																		case LBRACKET:
                																			{
                																				alt52=6;
                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case CPTR_TYPE:
                							{
                								switch ( this->LA(5) )
                								{
                								case LBRACE:
                									{
                										switch ( this->LA(6) )
                										{
                										case STRING:
                											{
                												switch ( this->LA(7) )
                												{
                												case RBRACE:
                													{
                														switch ( this->LA(8) )
                														{
                														case RSQBRACKET:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 88:
                																			{
                																				alt52=2;
                																			}
                																		    break;
                																		case LBRACKET:
                																			{
                																				alt52=6;
                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case STRING_TYPE:
                							{
                								switch ( this->LA(5) )
                								{
                								case LBRACE:
                									{
                										switch ( this->LA(6) )
                										{
                										case STRING:
                											{
                												switch ( this->LA(7) )
                												{
                												case RBRACE:
                													{
                														switch ( this->LA(8) )
                														{
                														case RSQBRACKET:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 88:
                																			{
                																				alt52=2;
                																			}
                																		    break;
                																		case LBRACKET:
                																			{
                																				alt52=6;
                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 88:
                											{
                												alt52=2;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt52=6;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case DLSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case DRSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 88:
                											{
                												alt52=2;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt52=6;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case SLICETOK:
                					{
                						switch ( this->LA(4) )
                						{
                						case INT:
                							{
                								switch ( this->LA(5) )
                								{
                								case SLICETOK:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 88:
                													{
                														alt52=2;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt52=6;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case SSOR:
                					{
                						switch ( this->LA(4) )
                						{
                						case ID:
                							{
                								switch ( this->LA(5) )
                								{
                								case 88:
                									{
                										alt52=2;
                									}
                								    break;
                								case LBRACKET:
                									{
                										alt52=6;
                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case STRING_TYPE:
                			{
                				switch ( this->LA(3) )
                				{
                				case ID:
                					{
                						switch ( this->LA(4) )
                						{
                						case 88:
                							{
                								alt52=2;
                							}
                						    break;
                						case LBRACKET:
                							{
                								alt52=6;
                							}
                						    break;

                						}

                					}
                				    break;
                				case LSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case INT:
                							{
                								switch ( this->LA(5) )
                								{
                								case RSQBRACKET:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 88:
                													{
                														alt52=2;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt52=6;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case SIZE:
                							{
                								switch ( this->LA(5) )
                								{
                								case RSQBRACKET:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 88:
                													{
                														alt52=2;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt52=6;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case FLOAT:
                							{
                								switch ( this->LA(5) )
                								{
                								case RSQBRACKET:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 88:
                													{
                														alt52=2;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt52=6;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case CHAR:
                							{
                								switch ( this->LA(5) )
                								{
                								case RSQBRACKET:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 88:
                													{
                														alt52=2;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt52=6;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case STRING:
                							{
                								switch ( this->LA(5) )
                								{
                								case RSQBRACKET:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 88:
                													{
                														alt52=2;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt52=6;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case BOOL:
                							{
                								switch ( this->LA(5) )
                								{
                								case RSQBRACKET:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 88:
                													{
                														alt52=2;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt52=6;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case NULLTOK:
                							{
                								switch ( this->LA(5) )
                								{
                								case RSQBRACKET:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 88:
                													{
                														alt52=2;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt52=6;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case THIS_TOK:
                							{
                								switch ( this->LA(5) )
                								{
                								case RSQBRACKET:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 88:
                													{
                														alt52=2;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt52=6;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case VOID_TYPE:
                							{
                								switch ( this->LA(5) )
                								{
                								case LBRACE:
                									{
                										switch ( this->LA(6) )
                										{
                										case STRING:
                											{
                												switch ( this->LA(7) )
                												{
                												case RBRACE:
                													{
                														switch ( this->LA(8) )
                														{
                														case RSQBRACKET:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 88:
                																			{
                																				alt52=2;
                																			}
                																		    break;
                																		case LBRACKET:
                																			{
                																				alt52=6;
                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case INT_TYPE:
                							{
                								switch ( this->LA(5) )
                								{
                								case LBRACE:
                									{
                										switch ( this->LA(6) )
                										{
                										case STRING:
                											{
                												switch ( this->LA(7) )
                												{
                												case RBRACE:
                													{
                														switch ( this->LA(8) )
                														{
                														case RSQBRACKET:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 88:
                																			{
                																				alt52=2;
                																			}
                																		    break;
                																		case LBRACKET:
                																			{
                																				alt52=6;
                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case SIZE_TYPE:
                							{
                								switch ( this->LA(5) )
                								{
                								case LBRACE:
                									{
                										switch ( this->LA(6) )
                										{
                										case STRING:
                											{
                												switch ( this->LA(7) )
                												{
                												case RBRACE:
                													{
                														switch ( this->LA(8) )
                														{
                														case RSQBRACKET:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 88:
                																			{
                																				alt52=2;
                																			}
                																		    break;
                																		case LBRACKET:
                																			{
                																				alt52=6;
                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case FLOAT_TYPE:
                							{
                								switch ( this->LA(5) )
                								{
                								case LBRACE:
                									{
                										switch ( this->LA(6) )
                										{
                										case STRING:
                											{
                												switch ( this->LA(7) )
                												{
                												case RBRACE:
                													{
                														switch ( this->LA(8) )
                														{
                														case RSQBRACKET:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 88:
                																			{
                																				alt52=2;
                																			}
                																		    break;
                																		case LBRACKET:
                																			{
                																				alt52=6;
                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case CHAR_TYPE:
                							{
                								switch ( this->LA(5) )
                								{
                								case LBRACE:
                									{
                										switch ( this->LA(6) )
                										{
                										case STRING:
                											{
                												switch ( this->LA(7) )
                												{
                												case RBRACE:
                													{
                														switch ( this->LA(8) )
                														{
                														case RSQBRACKET:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 88:
                																			{
                																				alt52=2;
                																			}
                																		    break;
                																		case LBRACKET:
                																			{
                																				alt52=6;
                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case BOOL_TYPE:
                							{
                								switch ( this->LA(5) )
                								{
                								case LBRACE:
                									{
                										switch ( this->LA(6) )
                										{
                										case STRING:
                											{
                												switch ( this->LA(7) )
                												{
                												case RBRACE:
                													{
                														switch ( this->LA(8) )
                														{
                														case RSQBRACKET:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 88:
                																			{
                																				alt52=2;
                																			}
                																		    break;
                																		case LBRACKET:
                																			{
                																				alt52=6;
                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case CPTR_TYPE:
                							{
                								switch ( this->LA(5) )
                								{
                								case LBRACE:
                									{
                										switch ( this->LA(6) )
                										{
                										case STRING:
                											{
                												switch ( this->LA(7) )
                												{
                												case RBRACE:
                													{
                														switch ( this->LA(8) )
                														{
                														case RSQBRACKET:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 88:
                																			{
                																				alt52=2;
                																			}
                																		    break;
                																		case LBRACKET:
                																			{
                																				alt52=6;
                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case STRING_TYPE:
                							{
                								switch ( this->LA(5) )
                								{
                								case LBRACE:
                									{
                										switch ( this->LA(6) )
                										{
                										case STRING:
                											{
                												switch ( this->LA(7) )
                												{
                												case RBRACE:
                													{
                														switch ( this->LA(8) )
                														{
                														case RSQBRACKET:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 88:
                																			{
                																				alt52=2;
                																			}
                																		    break;
                																		case LBRACKET:
                																			{
                																				alt52=6;
                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 88:
                											{
                												alt52=2;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt52=6;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case DLSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case DRSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 88:
                											{
                												alt52=2;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt52=6;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case SLICETOK:
                					{
                						switch ( this->LA(4) )
                						{
                						case INT:
                							{
                								switch ( this->LA(5) )
                								{
                								case SLICETOK:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 88:
                													{
                														alt52=2;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt52=6;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case SSOR:
                					{
                						switch ( this->LA(4) )
                						{
                						case ID:
                							{
                								switch ( this->LA(5) )
                								{
                								case 88:
                									{
                										alt52=2;
                									}
                								    break;
                								case LBRACKET:
                									{
                										alt52=6;
                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case TYPE:
                			{
                				switch ( this->LA(3) )
                				{
                				case ID:
                					{
                						switch ( this->LA(4) )
                						{
                						case 88:
                							{
                								alt52=2;
                							}
                						    break;
                						case LBRACKET:
                							{
                								alt52=6;
                							}
                						    break;

                						}

                					}
                				    break;
                				case LSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case INT:
                							{
                								switch ( this->LA(5) )
                								{
                								case RSQBRACKET:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 88:
                													{
                														alt52=2;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt52=6;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case SIZE:
                							{
                								switch ( this->LA(5) )
                								{
                								case RSQBRACKET:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 88:
                													{
                														alt52=2;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt52=6;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case FLOAT:
                							{
                								switch ( this->LA(5) )
                								{
                								case RSQBRACKET:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 88:
                													{
                														alt52=2;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt52=6;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case CHAR:
                							{
                								switch ( this->LA(5) )
                								{
                								case RSQBRACKET:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 88:
                													{
                														alt52=2;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt52=6;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case STRING:
                							{
                								switch ( this->LA(5) )
                								{
                								case RSQBRACKET:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 88:
                													{
                														alt52=2;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt52=6;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case BOOL:
                							{
                								switch ( this->LA(5) )
                								{
                								case RSQBRACKET:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 88:
                													{
                														alt52=2;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt52=6;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case NULLTOK:
                							{
                								switch ( this->LA(5) )
                								{
                								case RSQBRACKET:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 88:
                													{
                														alt52=2;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt52=6;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case THIS_TOK:
                							{
                								switch ( this->LA(5) )
                								{
                								case RSQBRACKET:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 88:
                													{
                														alt52=2;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt52=6;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case VOID_TYPE:
                							{
                								switch ( this->LA(5) )
                								{
                								case LBRACE:
                									{
                										switch ( this->LA(6) )
                										{
                										case STRING:
                											{
                												switch ( this->LA(7) )
                												{
                												case RBRACE:
                													{
                														switch ( this->LA(8) )
                														{
                														case RSQBRACKET:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 88:
                																			{
                																				alt52=2;
                																			}
                																		    break;
                																		case LBRACKET:
                																			{
                																				alt52=6;
                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case INT_TYPE:
                							{
                								switch ( this->LA(5) )
                								{
                								case LBRACE:
                									{
                										switch ( this->LA(6) )
                										{
                										case STRING:
                											{
                												switch ( this->LA(7) )
                												{
                												case RBRACE:
                													{
                														switch ( this->LA(8) )
                														{
                														case RSQBRACKET:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 88:
                																			{
                																				alt52=2;
                																			}
                																		    break;
                																		case LBRACKET:
                																			{
                																				alt52=6;
                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case SIZE_TYPE:
                							{
                								switch ( this->LA(5) )
                								{
                								case LBRACE:
                									{
                										switch ( this->LA(6) )
                										{
                										case STRING:
                											{
                												switch ( this->LA(7) )
                												{
                												case RBRACE:
                													{
                														switch ( this->LA(8) )
                														{
                														case RSQBRACKET:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 88:
                																			{
                																				alt52=2;
                																			}
                																		    break;
                																		case LBRACKET:
                																			{
                																				alt52=6;
                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case FLOAT_TYPE:
                							{
                								switch ( this->LA(5) )
                								{
                								case LBRACE:
                									{
                										switch ( this->LA(6) )
                										{
                										case STRING:
                											{
                												switch ( this->LA(7) )
                												{
                												case RBRACE:
                													{
                														switch ( this->LA(8) )
                														{
                														case RSQBRACKET:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 88:
                																			{
                																				alt52=2;
                																			}
                																		    break;
                																		case LBRACKET:
                																			{
                																				alt52=6;
                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case CHAR_TYPE:
                							{
                								switch ( this->LA(5) )
                								{
                								case LBRACE:
                									{
                										switch ( this->LA(6) )
                										{
                										case STRING:
                											{
                												switch ( this->LA(7) )
                												{
                												case RBRACE:
                													{
                														switch ( this->LA(8) )
                														{
                														case RSQBRACKET:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 88:
                																			{
                																				alt52=2;
                																			}
                																		    break;
                																		case LBRACKET:
                																			{
                																				alt52=6;
                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case BOOL_TYPE:
                							{
                								switch ( this->LA(5) )
                								{
                								case LBRACE:
                									{
                										switch ( this->LA(6) )
                										{
                										case STRING:
                											{
                												switch ( this->LA(7) )
                												{
                												case RBRACE:
                													{
                														switch ( this->LA(8) )
                														{
                														case RSQBRACKET:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 88:
                																			{
                																				alt52=2;
                																			}
                																		    break;
                																		case LBRACKET:
                																			{
                																				alt52=6;
                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case CPTR_TYPE:
                							{
                								switch ( this->LA(5) )
                								{
                								case LBRACE:
                									{
                										switch ( this->LA(6) )
                										{
                										case STRING:
                											{
                												switch ( this->LA(7) )
                												{
                												case RBRACE:
                													{
                														switch ( this->LA(8) )
                														{
                														case RSQBRACKET:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 88:
                																			{
                																				alt52=2;
                																			}
                																		    break;
                																		case LBRACKET:
                																			{
                																				alt52=6;
                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case STRING_TYPE:
                							{
                								switch ( this->LA(5) )
                								{
                								case LBRACE:
                									{
                										switch ( this->LA(6) )
                										{
                										case STRING:
                											{
                												switch ( this->LA(7) )
                												{
                												case RBRACE:
                													{
                														switch ( this->LA(8) )
                														{
                														case RSQBRACKET:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 88:
                																			{
                																				alt52=2;
                																			}
                																		    break;
                																		case LBRACKET:
                																			{
                																				alt52=6;
                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 88:
                											{
                												alt52=2;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt52=6;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case DLSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case DRSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 88:
                											{
                												alt52=2;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt52=6;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case QUESTION:
                					{
                						switch ( this->LA(4) )
                						{
                						case ID:
                							{
                								switch ( this->LA(5) )
                								{
                								case 88:
                									{
                										alt52=2;
                									}
                								    break;
                								case LBRACKET:
                									{
                										alt52=6;
                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case SHARED_REF:
                			{
                				switch ( this->LA(3) )
                				{
                				case TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case INT:
                									{
                										switch ( this->LA(6) )
                										{
                										case RSQBRACKET:
                											{
                												switch ( this->LA(7) )
                												{
                												case ID:
                													{
                														switch ( this->LA(8) )
                														{
                														case 88:
                															{
                																alt52=2;
                															}
                														    break;
                														case LBRACKET:
                															{
                																alt52=6;
                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;
                								case SIZE:
                									{
                										switch ( this->LA(6) )
                										{
                										case RSQBRACKET:
                											{
                												switch ( this->LA(7) )
                												{
                												case ID:
                													{
                														switch ( this->LA(8) )
                														{
                														case 88:
                															{
                																alt52=2;
                															}
                														    break;
                														case LBRACKET:
                															{
                																alt52=6;
                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;
                								case FLOAT:
                									{
                										switch ( this->LA(6) )
                										{
                										case RSQBRACKET:
                											{
                												switch ( this->LA(7) )
                												{
                												case ID:
                													{
                														switch ( this->LA(8) )
                														{
                														case 88:
                															{
                																alt52=2;
                															}
                														    break;
                														case LBRACKET:
                															{
                																alt52=6;
                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;
                								case CHAR:
                									{
                										switch ( this->LA(6) )
                										{
                										case RSQBRACKET:
                											{
                												switch ( this->LA(7) )
                												{
                												case ID:
                													{
                														switch ( this->LA(8) )
                														{
                														case 88:
                															{
                																alt52=2;
                															}
                														    break;
                														case LBRACKET:
                															{
                																alt52=6;
                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RSQBRACKET:
                											{
                												switch ( this->LA(7) )
                												{
                												case ID:
                													{
                														switch ( this->LA(8) )
                														{
                														case 88:
                															{
                																alt52=2;
                															}
                														    break;
                														case LBRACKET:
                															{
                																alt52=6;
                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;
                								case BOOL:
                									{
                										switch ( this->LA(6) )
                										{
                										case RSQBRACKET:
                											{
                												switch ( this->LA(7) )
                												{
                												case ID:
                													{
                														switch ( this->LA(8) )
                														{
                														case 88:
                															{
                																alt52=2;
                															}
                														    break;
                														case LBRACKET:
                															{
                																alt52=6;
                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;
                								case NULLTOK:
                									{
                										switch ( this->LA(6) )
                										{
                										case RSQBRACKET:
                											{
                												switch ( this->LA(7) )
                												{
                												case ID:
                													{
                														switch ( this->LA(8) )
                														{
                														case 88:
                															{
                																alt52=2;
                															}
                														    break;
                														case LBRACKET:
                															{
                																alt52=6;
                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;
                								case THIS_TOK:
                									{
                										switch ( this->LA(6) )
                										{
                										case RSQBRACKET:
                											{
                												switch ( this->LA(7) )
                												{
                												case ID:
                													{
                														switch ( this->LA(8) )
                														{
                														case 88:
                															{
                																alt52=2;
                															}
                														    break;
                														case LBRACKET:
                															{
                																alt52=6;
                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;
                								case VOID_TYPE:
                									{
                										switch ( this->LA(6) )
                										{
                										case LBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case STRING:
                													{
                														switch ( this->LA(8) )
                														{
                														case RBRACE:
                															{
                																switch ( this->LA(9) )
                																{
                																case RSQBRACKET:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case ID:
                																			{
                																				switch ( this->LA(11) )
                																				{
                																				case 88:
                																					{
                																						alt52=2;
                																					}
                																				    break;
                																				case LBRACKET:
                																					{
                																						alt52=6;
                																					}
                																				    break;

                																				}

                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;
                								case INT_TYPE:
                									{
                										switch ( this->LA(6) )
                										{
                										case LBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case STRING:
                													{
                														switch ( this->LA(8) )
                														{
                														case RBRACE:
                															{
                																switch ( this->LA(9) )
                																{
                																case RSQBRACKET:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case ID:
                																			{
                																				switch ( this->LA(11) )
                																				{
                																				case 88:
                																					{
                																						alt52=2;
                																					}
                																				    break;
                																				case LBRACKET:
                																					{
                																						alt52=6;
                																					}
                																				    break;

                																				}

                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;
                								case SIZE_TYPE:
                									{
                										switch ( this->LA(6) )
                										{
                										case LBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case STRING:
                													{
                														switch ( this->LA(8) )
                														{
                														case RBRACE:
                															{
                																switch ( this->LA(9) )
                																{
                																case RSQBRACKET:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case ID:
                																			{
                																				switch ( this->LA(11) )
                																				{
                																				case 88:
                																					{
                																						alt52=2;
                																					}
                																				    break;
                																				case LBRACKET:
                																					{
                																						alt52=6;
                																					}
                																				    break;

                																				}

                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;
                								case FLOAT_TYPE:
                									{
                										switch ( this->LA(6) )
                										{
                										case LBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case STRING:
                													{
                														switch ( this->LA(8) )
                														{
                														case RBRACE:
                															{
                																switch ( this->LA(9) )
                																{
                																case RSQBRACKET:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case ID:
                																			{
                																				switch ( this->LA(11) )
                																				{
                																				case 88:
                																					{
                																						alt52=2;
                																					}
                																				    break;
                																				case LBRACKET:
                																					{
                																						alt52=6;
                																					}
                																				    break;

                																				}

                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;
                								case CHAR_TYPE:
                									{
                										switch ( this->LA(6) )
                										{
                										case LBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case STRING:
                													{
                														switch ( this->LA(8) )
                														{
                														case RBRACE:
                															{
                																switch ( this->LA(9) )
                																{
                																case RSQBRACKET:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case ID:
                																			{
                																				switch ( this->LA(11) )
                																				{
                																				case 88:
                																					{
                																						alt52=2;
                																					}
                																				    break;
                																				case LBRACKET:
                																					{
                																						alt52=6;
                																					}
                																				    break;

                																				}

                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;
                								case BOOL_TYPE:
                									{
                										switch ( this->LA(6) )
                										{
                										case LBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case STRING:
                													{
                														switch ( this->LA(8) )
                														{
                														case RBRACE:
                															{
                																switch ( this->LA(9) )
                																{
                																case RSQBRACKET:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case ID:
                																			{
                																				switch ( this->LA(11) )
                																				{
                																				case 88:
                																					{
                																						alt52=2;
                																					}
                																				    break;
                																				case LBRACKET:
                																					{
                																						alt52=6;
                																					}
                																				    break;

                																				}

                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;
                								case CPTR_TYPE:
                									{
                										switch ( this->LA(6) )
                										{
                										case LBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case STRING:
                													{
                														switch ( this->LA(8) )
                														{
                														case RBRACE:
                															{
                																switch ( this->LA(9) )
                																{
                																case RSQBRACKET:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case ID:
                																			{
                																				switch ( this->LA(11) )
                																				{
                																				case 88:
                																					{
                																						alt52=2;
                																					}
                																				    break;
                																				case LBRACKET:
                																					{
                																						alt52=6;
                																					}
                																				    break;

                																				}

                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;
                								case STRING_TYPE:
                									{
                										switch ( this->LA(6) )
                										{
                										case LBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case STRING:
                													{
                														switch ( this->LA(8) )
                														{
                														case RBRACE:
                															{
                																switch ( this->LA(9) )
                																{
                																case RSQBRACKET:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case ID:
                																			{
                																				switch ( this->LA(11) )
                																				{
                																				case 88:
                																					{
                																						alt52=2;
                																					}
                																				    break;
                																				case LBRACKET:
                																					{
                																						alt52=6;
                																					}
                																				    break;

                																				}

                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;
                								case RSQBRACKET:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 88:
                													{
                														alt52=2;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt52=6;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case DLSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case DRSQBRACKET:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 88:
                													{
                														alt52=2;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt52=6;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case ID:
                							{
                								switch ( this->LA(5) )
                								{
                								case 88:
                									{
                										alt52=2;
                									}
                								    break;
                								case LBRACKET:
                									{
                										alt52=6;
                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case WEAK_REF:
                			{
                				switch ( this->LA(3) )
                				{
                				case TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case ID:
                							{
                								switch ( this->LA(5) )
                								{
                								case 88:
                									{
                										alt52=2;
                									}
                								    break;
                								case LBRACKET:
                									{
                										alt52=6;
                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case 83:
                			{
                				alt52=4;
                			}
                		    break;

                		}

                	}
                    break;
                case 83:
                	{
                		alt52=3;
                	}
                    break;
                case ACTION:
                	{
                		switch ( this->LA(2) )
                		{
                		case VIRTUAL:
                			{
                				alt52=10;
                			}
                		    break;
                		case OVERRIDE:
                			{
                				alt52=13;
                			}
                		    break;
                		case BOOL_TYPE:
                		case CHAR_TYPE:
                		case CPTR_TYPE:
                		case FLOAT_TYPE:
                		case INT_TYPE:
                		case SHARED_REF:
                		case SIZE_TYPE:
                		case STRING_TYPE:
                		case TYPE:
                		case VOID_TYPE:
                		case WEAK_REF:
                			{
                				alt52=7;
                			}
                		    break;

                		}

                	}
                    break;
                case VIRTUAL:
                	{
                		alt52=8;
                	}
                    break;
                case OVERRIDE:
                	{
                		alt52=11;
                	}
                    break;

                }

                switch (alt52)
                {
            	case 1:
            	    {
            	        {
            	            this->followPush(FOLLOW_declaration_in_classDecl6520);
            	            a=declaration();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            {
            	                 node->add_struct_elem(a
            	                );
            	            }


            	             this->matchToken(SEMICOLON, &FOLLOW_SEMICOLON_in_classDecl6524);
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	        }


            	    }
            	    break;
            	case 2:
            	    {
            	        {
            	             this->matchToken(SYNCHRONIZED, &FOLLOW_SYNCHRONIZED_in_classDecl6548);
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            this->followPush(FOLLOW_declaration_in_classDecl6552);
            	            aa=declaration();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            {
            	                 node->add_struct_elem(aa
            	                , true);
            	            }


            	             this->matchToken(SEMICOLON, &FOLLOW_SEMICOLON_in_classDecl6556);
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	        }


            	    }
            	    break;
            	case 3:
            	    {
            	        {
            	            this->followPush(FOLLOW_inherited_declaration_in_classDecl6583);
            	            j=inherited_declaration();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            {
            	                 node->add_struct_elem(j
            	                );
            	            }


            	             this->matchToken(SEMICOLON, &FOLLOW_SEMICOLON_in_classDecl6587);
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	        }


            	    }
            	    break;
            	case 4:
            	    {
            	        {
            	             this->matchToken(SYNCHRONIZED, &FOLLOW_SYNCHRONIZED_in_classDecl6611);
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            this->followPush(FOLLOW_inherited_declaration_in_classDecl6615);
            	            jj=inherited_declaration();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            {
            	                 node->add_struct_elem(j
            	                , true);
            	            }


            	             this->matchToken(SEMICOLON, &FOLLOW_SEMICOLON_in_classDecl6619);
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	        }


            	    }
            	    break;
            	case 5:
            	    {
            	        {
            	            this->followPush(FOLLOW_function_in_classDecl6645);
            	            b=function();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            {
            	                 node->add_function(b
            	                );
            	            }


            	        }


            	    }
            	    break;
            	case 6:
            	    {
            	        {
            	             this->matchToken(SYNCHRONIZED, &FOLLOW_SYNCHRONIZED_in_classDecl6674);
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            this->followPush(FOLLOW_function_in_classDecl6678);
            	            bb=function();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            {
            	                 bb
            	                ->set_synchronized(true); node->add_function(bb
            	                );
            	            }


            	        }


            	    }
            	    break;
            	case 7:
            	    {
            	        {
            	             this->matchToken(ACTION, &FOLLOW_ACTION_in_classDecl6707);
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            this->followPush(FOLLOW_function_in_classDecl6711);
            	            bbb=function();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            {
            	                 bbb
            	                ->set_action(true); node->add_function(bbb
            	                );
            	            }


            	        }


            	    }
            	    break;
            	case 8:
            	    {
            	        {
            	             this->matchToken(VIRTUAL, &FOLLOW_VIRTUAL_in_classDecl6740);
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            this->followPush(FOLLOW_function_in_classDecl6744);
            	            h=function();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            {
            	                 node->add_function(h
            	                ); h
            	                ->set_is_virtual(true);
            	            }


            	        }


            	    }
            	    break;
            	case 9:
            	    {
            	        {
            	             this->matchToken(SYNCHRONIZED, &FOLLOW_SYNCHRONIZED_in_classDecl6770);
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	             this->matchToken(VIRTUAL, &FOLLOW_VIRTUAL_in_classDecl6772);
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            this->followPush(FOLLOW_function_in_classDecl6776);
            	            hh=function();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            {
            	                 hh
            	                ->set_synchronized(true); node->add_function(hh
            	                ); hh
            	                ->set_is_virtual(true);
            	            }


            	        }


            	    }
            	    break;
            	case 10:
            	    {
            	        {
            	             this->matchToken(ACTION, &FOLLOW_ACTION_in_classDecl6802);
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	             this->matchToken(VIRTUAL, &FOLLOW_VIRTUAL_in_classDecl6804);
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            this->followPush(FOLLOW_function_in_classDecl6808);
            	            hhh=function();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            {
            	                 hhh
            	                ->set_action(true); node->add_function(hhh
            	                ); hhh
            	                ->set_is_virtual(true);
            	            }


            	        }


            	    }
            	    break;
            	case 11:
            	    {
            	        {
            	             this->matchToken(OVERRIDE, &FOLLOW_OVERRIDE_in_classDecl6834);
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            this->followPush(FOLLOW_function_in_classDecl6838);
            	            i=function();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            {
            	                 node->add_function(i
            	                ); i
            	                ->set_is_override(true);
            	            }


            	        }


            	    }
            	    break;
            	case 12:
            	    {
            	        {
            	             this->matchToken(SYNCHRONIZED, &FOLLOW_SYNCHRONIZED_in_classDecl6864);
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	             this->matchToken(OVERRIDE, &FOLLOW_OVERRIDE_in_classDecl6866);
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            this->followPush(FOLLOW_function_in_classDecl6870);
            	            ii=function();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            {
            	                 ii
            	                ->set_synchronized(true); node->add_function(ii
            	                ); ii
            	                ->set_is_override(true);
            	            }


            	        }


            	    }
            	    break;
            	case 13:
            	    {
            	        {
            	             this->matchToken(ACTION, &FOLLOW_ACTION_in_classDecl6896);
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	             this->matchToken(OVERRIDE, &FOLLOW_OVERRIDE_in_classDecl6898);
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            this->followPush(FOLLOW_function_in_classDecl6902);
            	            iii=function();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            {
            	                 iii
            	                ->set_action(true); node->add_function(iii
            	                ); iii
            	                ->set_is_override(true);
            	            }


            	        }


            	    }
            	    break;

            	default:
            	    goto loop52;
            	    break;
                }
            }
            loop52: ;


            RBRACE78 =  this->matchToken(RBRACE, &FOLLOW_RBRACE_in_classDecl6938);
            if  (this->hasException())
            {
                goto ruleclassDeclEx;
            }


            {
                 SET_END_LOCATION(node, RBRACE78);
            }


        }

    }
    goto ruleclassDeclEx;
    ruleclassDeclEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::top_level_resource*
WNScriptASTParser::topLevelRes()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::top_level_resource* node;


    ImplTraits::CommonTokenType const* rlb = NULL;
    ImplTraits::CommonTokenType const* rls = NULL;
    ImplTraits::CommonTokenType const* rrb = NULL;
    ImplTraits::CommonTokenType const* RESOURCE79 = NULL;






        node = nullptr;



    {
        {
            RESOURCE79 =  this->matchToken(RESOURCE, &FOLLOW_RESOURCE_in_topLevelRes6966);
            if  (this->hasException())
            {
                goto ruletopLevelResEx;
            }


            rlb =  this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_topLevelRes6970);
            if  (this->hasException())
            {
                goto ruletopLevelResEx;
            }


            rls =  this->matchToken(STRING, &FOLLOW_STRING_in_topLevelRes6974);
            if  (this->hasException())
            {
                goto ruletopLevelResEx;
            }


            rrb =  this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_topLevelRes6978);
            if  (this->hasException())
            {
                goto ruletopLevelResEx;
            }


            {
                 auto n = m_allocator->construct<scripting::top_level_resource>(m_allocator, (RESOURCE79->getText()).c_str()+1, (rls->getText()).c_str()); m_file->add_resource((RESOURCE79->getText()).c_str()+1,(rls->getText()).c_str(), false); node = n; SET_LOCATION(node, RESOURCE79); SET_END_LOCATION(node, rrb);
            }


        }

    }
    goto ruletopLevelResEx;
    ruletopLevelResEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






containers::string
WNScriptASTParser::inc()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    containers::string file;


    ImplTraits::CommonTokenType const* STRING80 = NULL;









    {
        {
             this->matchToken(INCLUDE, &FOLLOW_INCLUDE_in_inc7007);
            if  (this->hasException())
            {
                goto ruleincEx;
            }


            STRING80 =  this->matchToken(STRING, &FOLLOW_STRING_in_inc7009);
            if  (this->hasException())
            {
                goto ruleincEx;
            }


            {
                 file = containers::string(m_allocator, (STRING80->getText()).c_str());
            }


        }

    }
    goto ruleincEx;
    ruleincEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return file;
}






scripting::script_file*
WNScriptASTParser::program()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::script_file* node;


    containers::string inc81;
    scripting::function* function82;
    scripting::struct_definition* structDecl83;
    scripting::struct_definition* classDecl84;
    scripting::top_level_resource* topLevelRes85;





        node = m_allocator->construct<scripting::script_file>(m_allocator);
        m_file = node;



    {
        {

            for (;;)
            {
                int alt53=2;
                switch ( this->LA(1) )
                {
                case INCLUDE:
                	{
                		alt53=1;
                	}
                    break;

                }

                switch (alt53)
                {
            	case 1:
            	    {
            	        this->followPush(FOLLOW_inc_in_program7038);
            	        inc81=inc();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleprogramEx;
            	        }


            	        {
            	             node->add_include(core::move(inc81
            	            ));
            	        }


            	    }
            	    break;

            	default:
            	    goto loop53;
            	    break;
                }
            }
            loop53: ;



            for (;;)
            {
                int alt54=5;
                switch ( this->LA(1) )
                {
                case BOOL_TYPE:
                case CHAR_TYPE:
                case CPTR_TYPE:
                case FLOAT_TYPE:
                case INT_TYPE:
                case SHARED_REF:
                case SIZE_TYPE:
                case STRING_TYPE:
                case TYPE:
                case VOID_TYPE:
                case WEAK_REF:
                	{
                		alt54=1;
                	}
                    break;
                case STRUCT:
                	{
                		alt54=2;
                	}
                    break;
                case ACTOR:
                case CLASS:
                	{
                		alt54=3;
                	}
                    break;
                case RESOURCE:
                	{
                		alt54=4;
                	}
                    break;

                }

                switch (alt54)
                {
            	case 1:
            	    {
            	        this->followPush(FOLLOW_function_in_program7077);
            	        function82=function();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleprogramEx;
            	        }


            	        {
            	             node->add_function(function82
            	            );
            	        }


            	    }
            	    break;
            	case 2:
            	    {
            	        this->followPush(FOLLOW_structDecl_in_program7099);
            	        structDecl83=structDecl();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleprogramEx;
            	        }


            	        {
            	             node->add_struct(structDecl83
            	            );
            	        }


            	    }
            	    break;
            	case 3:
            	    {
            	        this->followPush(FOLLOW_classDecl_in_program7119);
            	        classDecl84=classDecl();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleprogramEx;
            	        }


            	        {
            	             node->add_struct(classDecl84
            	            );
            	        }


            	    }
            	    break;
            	case 4:
            	    {
            	        this->followPush(FOLLOW_topLevelRes_in_program7140);
            	        topLevelRes85=topLevelRes();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleprogramEx;
            	        }


            	        {
            	             node->add_top_level_resource(topLevelRes85
            	            );
            	        }


            	    }
            	    break;

            	default:
            	    goto loop54;
            	    break;
                }
            }
            loop54: ;


        }

    }
    goto ruleprogramEx;
    ruleprogramEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}

















