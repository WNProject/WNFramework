// clang-format off
/** \file
 *  This C++ source file was generated by $ANTLR version 3.5.2
 *
 *     -                for the parser : WNScriptASTParserParser
 *
 * Editing it, at least manually, is not wise.
 *
 * C++ language generator and runtime by Gokulakannan Somasundaram ( heavy lifting from C Run-time by Jim Idle )
 *
 *
*/
// [The "BSD license"]
// Copyright (c) 2005-2009 Gokulakannan Somasundaram, ElectronDB
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF






    #include "core/inc/base.h"
#ifdef _WN_MSVC
    #pragma warning(disable: 4100)
    #pragma warning(disable: 4459)
    #pragma warning(disable: 4703)
#endif
#ifdef _WN_CLANG
    #pragma clang diagnostic ignored "-Wunused-function"
    #pragma clang diagnostic ignored "-Wduplicate-decl-specifier"
#if __clang_major__ >= 13
    #pragma GCC diagnostic ignored "-Wunused-but-set-variable"
#endif
#endif
#ifdef _WN_GCC
    #pragma GCC diagnostic ignored "-Wunused-function"
    #pragma GCC diagnostic ignored "-Wunused-variable"
    #pragma GCC diagnostic ignored "-Wunused-but-set-variable"
    #pragma GCC diagnostic ignored "-Wsign-compare"
#endif
    #include "WNMemory/inc/allocator.h"
    #include "WNScripting/src/WNScriptASTLexer.hpp"
    #include "WNScripting/inc/WNNodeTypes.h"

    using namespace wn;

    #ifndef SET_LOCATION
    #define SET_LOCATION(node, tok) { scripting::source_location loc; \
                                     loc.m_start_index = tok->get_startIndex();\
                                     loc.m_end_index = tok->get_stopIndex();\
                                     loc.m_line_start = tok->get_lineStart();\
                                     loc.m_line_number = tok->get_line();\
                                     loc.m_char_number = tok->get_charPositionInLine();\
                                     node->set_start_location(loc); \
                                   }

    #define SET_LOCATION_FROM_NODE(node, node2) { \
                                        if(node2) { \
                                        node->set_start_location(node2->get_start_location()); \
                                        } \
                                   }
    #define SET_START_LOCATION_FROM_NODE(node, node2) { \
                                        if(node2) { \
                                        scripting::source_location loc = node->get_start_location(); \
                                        scripting::source_location loc2 = node2->get_start_location(); \
                                        loc.m_start_index = loc2.m_start_index; \
                                        loc.m_line_start = loc2.m_line_start; \
                                        loc.m_line_number = loc2.m_line_number; \
                                        loc.m_char_number = loc2.m_char_number; \
                                        node->set_start_location(loc); \
                                        } \
                                    }
    #define SET_END_LOCATION(node, tok) { \
                                        node->set_end_index(tok->get_stopIndex()); \
                                      }
    #define SET_END_LOCATION_FROM_NODE(node, node2) { \
                                            if(node2) { \
                                            node->set_end_index(node2->get_start_location().m_end_index); \
                                            } \
                                            }
    #endif








#include    "WNScriptASTParser.hpp"









using namespace antlr3;



ANTLR_UINT8* WNScriptASTParserTokenNames[86+4]
     = {
        (ANTLR_UINT8*) "<invalid>",
        (ANTLR_UINT8*) "<EOR>",
        (ANTLR_UINT8*) "<DOWN>",
        (ANTLR_UINT8*) "<UP>",
        (ANTLR_UINT8*) "ACTION",
        (ANTLR_UINT8*) "ACTOR",
        (ANTLR_UINT8*) "AT",
        (ANTLR_UINT8*) "BACKGROUND",
        (ANTLR_UINT8*) "BOOL",
        (ANTLR_UINT8*) "BOOL_TYPE",
        (ANTLR_UINT8*) "BREAK",
        (ANTLR_UINT8*) "CHAR",
        (ANTLR_UINT8*) "CHAR_TYPE",
        (ANTLR_UINT8*) "CLASS",
        (ANTLR_UINT8*) "COLON",
        (ANTLR_UINT8*) "COMMA",
        (ANTLR_UINT8*) "COMMENT",
        (ANTLR_UINT8*) "CONTINUE",
        (ANTLR_UINT8*) "CPTR_TYPE",
        (ANTLR_UINT8*) "DEFAULT",
        (ANTLR_UINT8*) "DEFER",
        (ANTLR_UINT8*) "DLSQBRACKET",
        (ANTLR_UINT8*) "DO",
        (ANTLR_UINT8*) "DOUBDEC",
        (ANTLR_UINT8*) "DOUBINC",
        (ANTLR_UINT8*) "DRSQBRACKET",
        (ANTLR_UINT8*) "ELSE",
        (ANTLR_UINT8*) "ESC_SEQ",
        (ANTLR_UINT8*) "EXPONENT",
        (ANTLR_UINT8*) "FLOAT",
        (ANTLR_UINT8*) "FLOAT_TYPE",
        (ANTLR_UINT8*) "FOR",
        (ANTLR_UINT8*) "HEX_DIGIT",
        (ANTLR_UINT8*) "ID",
        (ANTLR_UINT8*) "IF",
        (ANTLR_UINT8*) "INCLUDE",
        (ANTLR_UINT8*) "INT",
        (ANTLR_UINT8*) "INT_TYPE",
        (ANTLR_UINT8*) "LBRACE",
        (ANTLR_UINT8*) "LBRACKET",
        (ANTLR_UINT8*) "LENGTH",
        (ANTLR_UINT8*) "LOW_PRIORITY",
        (ANTLR_UINT8*) "LSQBRACKET",
        (ANTLR_UINT8*) "NULLTOK",
        (ANTLR_UINT8*) "OCTAL_ESC",
        (ANTLR_UINT8*) "OVERRIDE",
        (ANTLR_UINT8*) "QUESTION",
        (ANTLR_UINT8*) "RBRACE",
        (ANTLR_UINT8*) "RBRACKET",
        (ANTLR_UINT8*) "RESOURCE",
        (ANTLR_UINT8*) "RETURN",
        (ANTLR_UINT8*) "RSQBRACKET",
        (ANTLR_UINT8*) "SEMICOLON",
        (ANTLR_UINT8*) "SHARED_REF",
        (ANTLR_UINT8*) "SLICETOK",
        (ANTLR_UINT8*) "SSOR",
        (ANTLR_UINT8*) "STRING",
        (ANTLR_UINT8*) "STRING_TYPE",
        (ANTLR_UINT8*) "STRUCT",
        (ANTLR_UINT8*) "SYNCHRONIZED",
        (ANTLR_UINT8*) "TYPE",
        (ANTLR_UINT8*) "T_TYPE",
        (ANTLR_UINT8*) "UNICODE_ESC",
        (ANTLR_UINT8*) "VIRTUAL",
        (ANTLR_UINT8*) "VOID_TYPE",
        (ANTLR_UINT8*) "WEAK_REF",
        (ANTLR_UINT8*) "WHILE",
        (ANTLR_UINT8*) "WS",
        (ANTLR_UINT8*) "'!'",
        (ANTLR_UINT8*) "'!='",
        (ANTLR_UINT8*) "'%'",
        (ANTLR_UINT8*) "'%='",
        (ANTLR_UINT8*) "'&&'",
        (ANTLR_UINT8*) "'&'",
        (ANTLR_UINT8*) "'*'",
        (ANTLR_UINT8*) "'*='",
        (ANTLR_UINT8*) "'+'",
        (ANTLR_UINT8*) "'+='",
        (ANTLR_UINT8*) "'-'",
        (ANTLR_UINT8*) "'-='",
        (ANTLR_UINT8*) "'.'",
        (ANTLR_UINT8*) "'/'",
        (ANTLR_UINT8*) "'/='",
        (ANTLR_UINT8*) "'<'",
        (ANTLR_UINT8*) "'<='",
        (ANTLR_UINT8*) "'='",
        (ANTLR_UINT8*) "'=='",
        (ANTLR_UINT8*) "'>'",
        (ANTLR_UINT8*) "'>='",
        (ANTLR_UINT8*) "'^'"
       };




static const char fileName[] = "WNScriptAST.g";



const char* WNScriptASTParser::getGrammarFileName()
{
	return fileName;
}






WNScriptASTParser::WNScriptASTParser( StreamType* instream)
    :ImplTraits::BaseParserType(ANTLR_SIZE_HINT, instream, NULL)

{
	this->init(instream);
}







WNScriptASTParser::WNScriptASTParser( StreamType* instream, RecognizerSharedStateType* state)
    :ImplTraits::BaseParserType(ANTLR_SIZE_HINT, instream, state)

{
	this->init(instream );
}

void WNScriptASTParser::init(StreamType* instream)
{


	this->get_psrstate()->set_tokenNames( WNScriptASTParserTokenNames );


}

void
WNScriptASTParser::reset()
{
    this->get_rec()->reset();
}



WNScriptASTParser::~WNScriptASTParser()
 {
}








static ANTLR_UINT8**	getTokenNames()
{
        return WNScriptASTParserTokenNames;
}





static	ANTLR_BITWORD FOLLOW_TYPE_in_objectType1376_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_TYPE_in_objectType1376( FOLLOW_TYPE_in_objectType1376_bits, 1 );

static	ANTLR_BITWORD FOLLOW_VOID_TYPE_in_scalarType1408_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_VOID_TYPE_in_scalarType1408( FOLLOW_VOID_TYPE_in_scalarType1408_bits, 1 );

static	ANTLR_BITWORD FOLLOW_INT_TYPE_in_scalarType1420_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_INT_TYPE_in_scalarType1420( FOLLOW_INT_TYPE_in_scalarType1420_bits, 1 );

static	ANTLR_BITWORD FOLLOW_FLOAT_TYPE_in_scalarType1432_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_FLOAT_TYPE_in_scalarType1432( FOLLOW_FLOAT_TYPE_in_scalarType1432_bits, 1 );

static	ANTLR_BITWORD FOLLOW_CHAR_TYPE_in_scalarType1444_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_CHAR_TYPE_in_scalarType1444( FOLLOW_CHAR_TYPE_in_scalarType1444_bits, 1 );

static	ANTLR_BITWORD FOLLOW_BOOL_TYPE_in_scalarType1456_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_BOOL_TYPE_in_scalarType1456( FOLLOW_BOOL_TYPE_in_scalarType1456_bits, 1 );

static	ANTLR_BITWORD FOLLOW_CPTR_TYPE_in_scalarType1468_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_CPTR_TYPE_in_scalarType1468( FOLLOW_CPTR_TYPE_in_scalarType1468_bits, 1 );

static	ANTLR_BITWORD FOLLOW_STRING_TYPE_in_scalarType1480_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_STRING_TYPE_in_scalarType1480( FOLLOW_STRING_TYPE_in_scalarType1480_bits, 1 );

static	ANTLR_BITWORD FOLLOW_scalarType_in_arrayType1517_bits[]	= { ANTLR_UINT64_LIT(0x0000040000200000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_scalarType_in_arrayType1517( FOLLOW_scalarType_in_arrayType1517_bits, 1 );

static	ANTLR_BITWORD FOLLOW_objectType_in_arrayType1533_bits[]	= { ANTLR_UINT64_LIT(0x0000040000200000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_objectType_in_arrayType1533( FOLLOW_objectType_in_arrayType1533_bits, 1 );

static	ANTLR_BITWORD FOLLOW_SHARED_REF_in_arrayType1547_bits[]	= { ANTLR_UINT64_LIT(0x1000000000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SHARED_REF_in_arrayType1547( FOLLOW_SHARED_REF_in_arrayType1547_bits, 1 );

static	ANTLR_BITWORD FOLLOW_objectType_in_arrayType1551_bits[]	= { ANTLR_UINT64_LIT(0x0000040000200000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_objectType_in_arrayType1551( FOLLOW_objectType_in_arrayType1551_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LSQBRACKET_in_arrayType1585_bits[]	= { ANTLR_UINT64_LIT(0x0308083060041B00), ANTLR_UINT64_LIT(0x0000000000000001) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LSQBRACKET_in_arrayType1585( FOLLOW_LSQBRACKET_in_arrayType1585_bits, 2 );

static	ANTLR_BITWORD FOLLOW_constant_in_arrayType1604_bits[]	= { ANTLR_UINT64_LIT(0x0008000000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_constant_in_arrayType1604( FOLLOW_constant_in_arrayType1604_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RSQBRACKET_in_arrayType1626_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RSQBRACKET_in_arrayType1626( FOLLOW_RSQBRACKET_in_arrayType1626_bits, 1 );

static	ANTLR_BITWORD FOLLOW_DLSQBRACKET_in_arrayType1655_bits[]	= { ANTLR_UINT64_LIT(0x0000000002000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_DLSQBRACKET_in_arrayType1655( FOLLOW_DLSQBRACKET_in_arrayType1655_bits, 1 );

static	ANTLR_BITWORD FOLLOW_DRSQBRACKET_in_arrayType1657_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_DRSQBRACKET_in_arrayType1657( FOLLOW_DRSQBRACKET_in_arrayType1657_bits, 1 );

static	ANTLR_BITWORD FOLLOW_scalarType_in_sliceType1707_bits[]	= { ANTLR_UINT64_LIT(0x00C0000000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_scalarType_in_sliceType1707( FOLLOW_scalarType_in_sliceType1707_bits, 1 );

static	ANTLR_BITWORD FOLLOW_SLICETOK_in_sliceType1723_bits[]	= { ANTLR_UINT64_LIT(0x0000001000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SLICETOK_in_sliceType1723( FOLLOW_SLICETOK_in_sliceType1723_bits, 1 );

static	ANTLR_BITWORD FOLLOW_INT_in_sliceType1725_bits[]	= { ANTLR_UINT64_LIT(0x0040000000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_INT_in_sliceType1725( FOLLOW_INT_in_sliceType1725_bits, 1 );

static	ANTLR_BITWORD FOLLOW_SLICETOK_in_sliceType1729_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SLICETOK_in_sliceType1729( FOLLOW_SLICETOK_in_sliceType1729_bits, 1 );

static	ANTLR_BITWORD FOLLOW_SSOR_in_sliceType1748_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SSOR_in_sliceType1748( FOLLOW_SSOR_in_sliceType1748_bits, 1 );

static	ANTLR_BITWORD FOLLOW_objectType_in_compoundType1783_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_objectType_in_compoundType1783( FOLLOW_objectType_in_compoundType1783_bits, 1 );

static	ANTLR_BITWORD FOLLOW_scalarType_in_nonArrayType1810_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_scalarType_in_nonArrayType1810( FOLLOW_scalarType_in_nonArrayType1810_bits, 1 );

static	ANTLR_BITWORD FOLLOW_objectType_in_nonArrayType1820_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_objectType_in_nonArrayType1820( FOLLOW_objectType_in_nonArrayType1820_bits, 1 );

static	ANTLR_BITWORD FOLLOW_compoundType_in_type1850_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_compoundType_in_type1850( FOLLOW_compoundType_in_type1850_bits, 1 );

static	ANTLR_BITWORD FOLLOW_arrayType_in_type1860_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_arrayType_in_type1860( FOLLOW_arrayType_in_type1860_bits, 1 );

static	ANTLR_BITWORD FOLLOW_sliceType_in_type1870_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_sliceType_in_type1870( FOLLOW_sliceType_in_type1870_bits, 1 );

static	ANTLR_BITWORD FOLLOW_scalarType_in_type1880_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_scalarType_in_type1880( FOLLOW_scalarType_in_type1880_bits, 1 );

static	ANTLR_BITWORD FOLLOW_scalarType_in_param1912_bits[]	= { ANTLR_UINT64_LIT(0x0000000200000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_scalarType_in_param1912( FOLLOW_scalarType_in_param1912_bits, 1 );

static	ANTLR_BITWORD FOLLOW_ID_in_param1916_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_ID_in_param1916( FOLLOW_ID_in_param1916_bits, 1 );

static	ANTLR_BITWORD FOLLOW_compoundType_in_param1931_bits[]	= { ANTLR_UINT64_LIT(0x0000000200000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_compoundType_in_param1931( FOLLOW_compoundType_in_param1931_bits, 1 );

static	ANTLR_BITWORD FOLLOW_ID_in_param1935_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_ID_in_param1935( FOLLOW_ID_in_param1935_bits, 1 );

static	ANTLR_BITWORD FOLLOW_arrayType_in_param1950_bits[]	= { ANTLR_UINT64_LIT(0x0000000200000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_arrayType_in_param1950( FOLLOW_arrayType_in_param1950_bits, 1 );

static	ANTLR_BITWORD FOLLOW_ID_in_param1954_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_ID_in_param1954( FOLLOW_ID_in_param1954_bits, 1 );

static	ANTLR_BITWORD FOLLOW_sliceType_in_param1969_bits[]	= { ANTLR_UINT64_LIT(0x0000000200000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_sliceType_in_param1969( FOLLOW_sliceType_in_param1969_bits, 1 );

static	ANTLR_BITWORD FOLLOW_ID_in_param1973_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_ID_in_param1973( FOLLOW_ID_in_param1973_bits, 1 );

static	ANTLR_BITWORD FOLLOW_SHARED_REF_in_param1986_bits[]	= { ANTLR_UINT64_LIT(0x1000000000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SHARED_REF_in_param1986( FOLLOW_SHARED_REF_in_param1986_bits, 1 );

static	ANTLR_BITWORD FOLLOW_compoundType_in_param1990_bits[]	= { ANTLR_UINT64_LIT(0x0000000200000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_compoundType_in_param1990( FOLLOW_compoundType_in_param1990_bits, 1 );

static	ANTLR_BITWORD FOLLOW_ID_in_param1994_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_ID_in_param1994( FOLLOW_ID_in_param1994_bits, 1 );

static	ANTLR_BITWORD FOLLOW_WEAK_REF_in_param2007_bits[]	= { ANTLR_UINT64_LIT(0x1000000000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_WEAK_REF_in_param2007( FOLLOW_WEAK_REF_in_param2007_bits, 1 );

static	ANTLR_BITWORD FOLLOW_compoundType_in_param2011_bits[]	= { ANTLR_UINT64_LIT(0x0000000200000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_compoundType_in_param2011( FOLLOW_compoundType_in_param2011_bits, 1 );

static	ANTLR_BITWORD FOLLOW_ID_in_param2016_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_ID_in_param2016( FOLLOW_ID_in_param2016_bits, 1 );

static	ANTLR_BITWORD FOLLOW_compoundType_in_param2031_bits[]	= { ANTLR_UINT64_LIT(0x0000400000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_compoundType_in_param2031( FOLLOW_compoundType_in_param2031_bits, 1 );

static	ANTLR_BITWORD FOLLOW_QUESTION_in_param2033_bits[]	= { ANTLR_UINT64_LIT(0x0000000200000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_QUESTION_in_param2033( FOLLOW_QUESTION_in_param2033_bits, 1 );

static	ANTLR_BITWORD FOLLOW_ID_in_param2038_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_ID_in_param2038( FOLLOW_ID_in_param2038_bits, 1 );

static	ANTLR_BITWORD FOLLOW_param_in_paramList2070_bits[]	= { ANTLR_UINT64_LIT(0x0000000000008002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_param_in_paramList2070( FOLLOW_param_in_paramList2070_bits, 1 );

static	ANTLR_BITWORD FOLLOW_COMMA_in_paramList2083_bits[]	= { ANTLR_UINT64_LIT(0x1220002040041200), ANTLR_UINT64_LIT(0x0000000000000003) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_COMMA_in_paramList2083( FOLLOW_COMMA_in_paramList2083_bits, 2 );

static	ANTLR_BITWORD FOLLOW_param_in_paramList2087_bits[]	= { ANTLR_UINT64_LIT(0x0000000000008002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_param_in_paramList2087( FOLLOW_param_in_paramList2087_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACKET_in_parameterList2119_bits[]	= { ANTLR_UINT64_LIT(0x1220002040041200), ANTLR_UINT64_LIT(0x0000000000000003) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_parameterList2119( FOLLOW_LBRACKET_in_parameterList2119_bits, 2 );

static	ANTLR_BITWORD FOLLOW_paramList_in_parameterList2121_bits[]	= { ANTLR_UINT64_LIT(0x0001000000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_paramList_in_parameterList2121( FOLLOW_paramList_in_parameterList2121_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACKET_in_parameterList2123_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_parameterList2123( FOLLOW_RBRACKET_in_parameterList2123_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACKET_in_parameterList2140_bits[]	= { ANTLR_UINT64_LIT(0x0001000000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_parameterList2140( FOLLOW_LBRACKET_in_parameterList2140_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACKET_in_parameterList2142_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_parameterList2142( FOLLOW_RBRACKET_in_parameterList2142_bits, 1 );

static	ANTLR_BITWORD FOLLOW_85_in_assign_type2178_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_85_in_assign_type2178( FOLLOW_85_in_assign_type2178_bits, 1 );

static	ANTLR_BITWORD FOLLOW_77_in_assign_type2192_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_77_in_assign_type2192( FOLLOW_77_in_assign_type2192_bits, 1 );

static	ANTLR_BITWORD FOLLOW_79_in_assign_type2205_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_79_in_assign_type2205( FOLLOW_79_in_assign_type2205_bits, 1 );

static	ANTLR_BITWORD FOLLOW_75_in_assign_type2218_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_75_in_assign_type2218( FOLLOW_75_in_assign_type2218_bits, 1 );

static	ANTLR_BITWORD FOLLOW_82_in_assign_type2231_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_82_in_assign_type2231( FOLLOW_82_in_assign_type2231_bits, 1 );

static	ANTLR_BITWORD FOLLOW_71_in_assign_type2244_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_71_in_assign_type2244( FOLLOW_71_in_assign_type2244_bits, 1 );

static	ANTLR_BITWORD FOLLOW_expr_in_arglist2302_bits[]	= { ANTLR_UINT64_LIT(0x0000000000008002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_arglist2302( FOLLOW_expr_in_arglist2302_bits, 1 );

static	ANTLR_BITWORD FOLLOW_COMMA_in_arglist2335_bits[]	= { ANTLR_UINT64_LIT(0x132209B261849B02), ANTLR_UINT64_LIT(0x0000000000004011) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_COMMA_in_arglist2335( FOLLOW_COMMA_in_arglist2335_bits, 2 );

static	ANTLR_BITWORD FOLLOW_expr_in_arglist2379_bits[]	= { ANTLR_UINT64_LIT(0x0000000000008002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_arglist2379( FOLLOW_expr_in_arglist2379_bits, 1 );

static	ANTLR_BITWORD FOLLOW_cond_ex_in_expr2454_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_cond_ex_in_expr2454( FOLLOW_cond_ex_in_expr2454_bits, 1 );

static	ANTLR_BITWORD FOLLOW_or_ex_in_cond_ex2492_bits[]	= { ANTLR_UINT64_LIT(0x0000400000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_or_ex_in_cond_ex2492( FOLLOW_or_ex_in_cond_ex2492_bits, 1 );

static	ANTLR_BITWORD FOLLOW_QUESTION_in_cond_ex2515_bits[]	= { ANTLR_UINT64_LIT(0x132209B261841B00), ANTLR_UINT64_LIT(0x0000000000004011) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_QUESTION_in_cond_ex2515( FOLLOW_QUESTION_in_cond_ex2515_bits, 2 );

static	ANTLR_BITWORD FOLLOW_expr_in_cond_ex2519_bits[]	= { ANTLR_UINT64_LIT(0x0000000000004000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_cond_ex2519( FOLLOW_expr_in_cond_ex2519_bits, 1 );

static	ANTLR_BITWORD FOLLOW_COLON_in_cond_ex2521_bits[]	= { ANTLR_UINT64_LIT(0x132209B261841B00), ANTLR_UINT64_LIT(0x0000000000004011) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_COLON_in_cond_ex2521( FOLLOW_COLON_in_cond_ex2521_bits, 2 );

static	ANTLR_BITWORD FOLLOW_cond_ex_in_cond_ex2525_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_cond_ex_in_cond_ex2525( FOLLOW_cond_ex_in_cond_ex2525_bits, 1 );

static	ANTLR_BITWORD FOLLOW_and_ex_in_or_ex2572_bits[]	= { ANTLR_UINT64_LIT(0x0080000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_and_ex_in_or_ex2572( FOLLOW_and_ex_in_or_ex2572_bits, 1 );

static	ANTLR_BITWORD FOLLOW_SSOR_in_or_ex2589_bits[]	= { ANTLR_UINT64_LIT(0x132209B261841B00), ANTLR_UINT64_LIT(0x0000000000004011) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SSOR_in_or_ex2589( FOLLOW_SSOR_in_or_ex2589_bits, 2 );

static	ANTLR_BITWORD FOLLOW_and_ex_in_or_ex2593_bits[]	= { ANTLR_UINT64_LIT(0x0080000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_and_ex_in_or_ex2593( FOLLOW_and_ex_in_or_ex2593_bits, 1 );

static	ANTLR_BITWORD FOLLOW_bit_or_ex_in_and_ex2636_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000100) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_bit_or_ex_in_and_ex2636( FOLLOW_bit_or_ex_in_and_ex2636_bits, 2 );

static	ANTLR_BITWORD FOLLOW_72_in_and_ex2653_bits[]	= { ANTLR_UINT64_LIT(0x132209B261841B00), ANTLR_UINT64_LIT(0x0000000000004011) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_72_in_and_ex2653( FOLLOW_72_in_and_ex2653_bits, 2 );

static	ANTLR_BITWORD FOLLOW_bit_or_ex_in_and_ex2657_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000100) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_bit_or_ex_in_and_ex2657( FOLLOW_bit_or_ex_in_and_ex2657_bits, 2 );

static	ANTLR_BITWORD FOLLOW_bit_xor_ex_in_bit_or_ex2691_bits[]	= { ANTLR_UINT64_LIT(0x0040000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_bit_xor_ex_in_bit_or_ex2691( FOLLOW_bit_xor_ex_in_bit_or_ex2691_bits, 1 );

static	ANTLR_BITWORD FOLLOW_SLICETOK_in_bit_or_ex2708_bits[]	= { ANTLR_UINT64_LIT(0x132209B261841B00), ANTLR_UINT64_LIT(0x0000000000004011) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SLICETOK_in_bit_or_ex2708( FOLLOW_SLICETOK_in_bit_or_ex2708_bits, 2 );

static	ANTLR_BITWORD FOLLOW_bit_xor_ex_in_bit_or_ex2712_bits[]	= { ANTLR_UINT64_LIT(0x0040000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_bit_xor_ex_in_bit_or_ex2712( FOLLOW_bit_xor_ex_in_bit_or_ex2712_bits, 1 );

static	ANTLR_BITWORD FOLLOW_bit_and_ex_in_bit_xor_ex2747_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000002000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_bit_and_ex_in_bit_xor_ex2747( FOLLOW_bit_and_ex_in_bit_xor_ex2747_bits, 2 );

static	ANTLR_BITWORD FOLLOW_89_in_bit_xor_ex2764_bits[]	= { ANTLR_UINT64_LIT(0x132209B261841B00), ANTLR_UINT64_LIT(0x0000000000004011) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_89_in_bit_xor_ex2764( FOLLOW_89_in_bit_xor_ex2764_bits, 2 );

static	ANTLR_BITWORD FOLLOW_bit_and_ex_in_bit_xor_ex2768_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000002000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_bit_and_ex_in_bit_xor_ex2768( FOLLOW_bit_and_ex_in_bit_xor_ex2768_bits, 2 );

static	ANTLR_BITWORD FOLLOW_eq_ex_in_bit_and_ex2803_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000200) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_eq_ex_in_bit_and_ex2803( FOLLOW_eq_ex_in_bit_and_ex2803_bits, 2 );

static	ANTLR_BITWORD FOLLOW_73_in_bit_and_ex2820_bits[]	= { ANTLR_UINT64_LIT(0x132209B261841B00), ANTLR_UINT64_LIT(0x0000000000004011) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_73_in_bit_and_ex2820( FOLLOW_73_in_bit_and_ex2820_bits, 2 );

static	ANTLR_BITWORD FOLLOW_eq_ex_in_bit_and_ex2824_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000000200) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_eq_ex_in_bit_and_ex2824( FOLLOW_eq_ex_in_bit_and_ex2824_bits, 2 );

static	ANTLR_BITWORD FOLLOW_rel_ex_in_eq_ex2862_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000400020) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_rel_ex_in_eq_ex2862( FOLLOW_rel_ex_in_eq_ex2862_bits, 2 );

static	ANTLR_BITWORD FOLLOW_86_in_eq_ex2897_bits[]	= { ANTLR_UINT64_LIT(0x132209B261841B00), ANTLR_UINT64_LIT(0x0000000000004011) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_86_in_eq_ex2897( FOLLOW_86_in_eq_ex2897_bits, 2 );

static	ANTLR_BITWORD FOLLOW_rel_ex_in_eq_ex2901_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000400020) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_rel_ex_in_eq_ex2901( FOLLOW_rel_ex_in_eq_ex2901_bits, 2 );

static	ANTLR_BITWORD FOLLOW_69_in_eq_ex2924_bits[]	= { ANTLR_UINT64_LIT(0x132209B261841B00), ANTLR_UINT64_LIT(0x0000000000004011) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_69_in_eq_ex2924( FOLLOW_69_in_eq_ex2924_bits, 2 );

static	ANTLR_BITWORD FOLLOW_rel_ex_in_eq_ex2928_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000400020) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_rel_ex_in_eq_ex2928( FOLLOW_rel_ex_in_eq_ex2928_bits, 2 );

static	ANTLR_BITWORD FOLLOW_add_ex_in_rel_ex2986_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000001980000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_add_ex_in_rel_ex2986( FOLLOW_add_ex_in_rel_ex2986_bits, 2 );

static	ANTLR_BITWORD FOLLOW_83_in_rel_ex3022_bits[]	= { ANTLR_UINT64_LIT(0x132209B261841B00), ANTLR_UINT64_LIT(0x0000000000004011) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_83_in_rel_ex3022( FOLLOW_83_in_rel_ex3022_bits, 2 );

static	ANTLR_BITWORD FOLLOW_add_ex_in_rel_ex3026_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000001980000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_add_ex_in_rel_ex3026( FOLLOW_add_ex_in_rel_ex3026_bits, 2 );

static	ANTLR_BITWORD FOLLOW_87_in_rel_ex3050_bits[]	= { ANTLR_UINT64_LIT(0x132209B261841B00), ANTLR_UINT64_LIT(0x0000000000004011) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_87_in_rel_ex3050( FOLLOW_87_in_rel_ex3050_bits, 2 );

static	ANTLR_BITWORD FOLLOW_add_ex_in_rel_ex3054_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000001980000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_add_ex_in_rel_ex3054( FOLLOW_add_ex_in_rel_ex3054_bits, 2 );

static	ANTLR_BITWORD FOLLOW_84_in_rel_ex3078_bits[]	= { ANTLR_UINT64_LIT(0x132209B261841B00), ANTLR_UINT64_LIT(0x0000000000004011) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_84_in_rel_ex3078( FOLLOW_84_in_rel_ex3078_bits, 2 );

static	ANTLR_BITWORD FOLLOW_add_ex_in_rel_ex3082_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000001980000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_add_ex_in_rel_ex3082( FOLLOW_add_ex_in_rel_ex3082_bits, 2 );

static	ANTLR_BITWORD FOLLOW_88_in_rel_ex3106_bits[]	= { ANTLR_UINT64_LIT(0x132209B261841B00), ANTLR_UINT64_LIT(0x0000000000004011) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_88_in_rel_ex3106( FOLLOW_88_in_rel_ex3106_bits, 2 );

static	ANTLR_BITWORD FOLLOW_add_ex_in_rel_ex3110_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000001980000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_add_ex_in_rel_ex3110( FOLLOW_add_ex_in_rel_ex3110_bits, 2 );

static	ANTLR_BITWORD FOLLOW_mult_ex_in_add_ex3171_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000005000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_mult_ex_in_add_ex3171( FOLLOW_mult_ex_in_add_ex3171_bits, 2 );

static	ANTLR_BITWORD FOLLOW_76_in_add_ex3206_bits[]	= { ANTLR_UINT64_LIT(0x132209B261841B00), ANTLR_UINT64_LIT(0x0000000000004011) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_76_in_add_ex3206( FOLLOW_76_in_add_ex3206_bits, 2 );

static	ANTLR_BITWORD FOLLOW_mult_ex_in_add_ex3210_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000005000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_mult_ex_in_add_ex3210( FOLLOW_mult_ex_in_add_ex3210_bits, 2 );

static	ANTLR_BITWORD FOLLOW_78_in_add_ex3232_bits[]	= { ANTLR_UINT64_LIT(0x132209B261841B00), ANTLR_UINT64_LIT(0x0000000000004011) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_78_in_add_ex3232( FOLLOW_78_in_add_ex3232_bits, 2 );

static	ANTLR_BITWORD FOLLOW_mult_ex_in_add_ex3236_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000005000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_mult_ex_in_add_ex3236( FOLLOW_mult_ex_in_add_ex3236_bits, 2 );

static	ANTLR_BITWORD FOLLOW_unary_ex_in_mult_ex3295_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000020440) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_unary_ex_in_mult_ex3295( FOLLOW_unary_ex_in_mult_ex3295_bits, 2 );

static	ANTLR_BITWORD FOLLOW_74_in_mult_ex3334_bits[]	= { ANTLR_UINT64_LIT(0x132209B261841B00), ANTLR_UINT64_LIT(0x0000000000004011) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_74_in_mult_ex3334( FOLLOW_74_in_mult_ex3334_bits, 2 );

static	ANTLR_BITWORD FOLLOW_unary_ex_in_mult_ex3338_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000020440) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_unary_ex_in_mult_ex3338( FOLLOW_unary_ex_in_mult_ex3338_bits, 2 );

static	ANTLR_BITWORD FOLLOW_81_in_mult_ex3364_bits[]	= { ANTLR_UINT64_LIT(0x132209B261841B00), ANTLR_UINT64_LIT(0x0000000000004011) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_81_in_mult_ex3364( FOLLOW_81_in_mult_ex3364_bits, 2 );

static	ANTLR_BITWORD FOLLOW_unary_ex_in_mult_ex3368_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000020440) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_unary_ex_in_mult_ex3368( FOLLOW_unary_ex_in_mult_ex3368_bits, 2 );

static	ANTLR_BITWORD FOLLOW_70_in_mult_ex3394_bits[]	= { ANTLR_UINT64_LIT(0x132209B261841B00), ANTLR_UINT64_LIT(0x0000000000004011) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_70_in_mult_ex3394( FOLLOW_70_in_mult_ex3394_bits, 2 );

static	ANTLR_BITWORD FOLLOW_unary_ex_in_mult_ex3398_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000020440) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_unary_ex_in_mult_ex3398( FOLLOW_unary_ex_in_mult_ex3398_bits, 2 );

static	ANTLR_BITWORD FOLLOW_post_ex_in_unary_ex3450_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_post_ex_in_unary_ex3450( FOLLOW_post_ex_in_unary_ex3450_bits, 1 );

static	ANTLR_BITWORD FOLLOW_DOUBINC_in_unary_ex3463_bits[]	= { ANTLR_UINT64_LIT(0x132209B261841B00), ANTLR_UINT64_LIT(0x0000000000004011) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_DOUBINC_in_unary_ex3463( FOLLOW_DOUBINC_in_unary_ex3463_bits, 2 );

static	ANTLR_BITWORD FOLLOW_unary_ex_in_unary_ex3467_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_unary_ex_in_unary_ex3467( FOLLOW_unary_ex_in_unary_ex3467_bits, 1 );

static	ANTLR_BITWORD FOLLOW_DOUBDEC_in_unary_ex3480_bits[]	= { ANTLR_UINT64_LIT(0x132209B261841B00), ANTLR_UINT64_LIT(0x0000000000004011) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_DOUBDEC_in_unary_ex3480( FOLLOW_DOUBDEC_in_unary_ex3480_bits, 2 );

static	ANTLR_BITWORD FOLLOW_unary_ex_in_unary_ex3484_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_unary_ex_in_unary_ex3484( FOLLOW_unary_ex_in_unary_ex3484_bits, 1 );

static	ANTLR_BITWORD FOLLOW_78_in_unary_ex3497_bits[]	= { ANTLR_UINT64_LIT(0x132209B261841B00), ANTLR_UINT64_LIT(0x0000000000004011) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_78_in_unary_ex3497( FOLLOW_78_in_unary_ex3497_bits, 2 );

static	ANTLR_BITWORD FOLLOW_unary_ex_in_unary_ex3501_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_unary_ex_in_unary_ex3501( FOLLOW_unary_ex_in_unary_ex3501_bits, 1 );

static	ANTLR_BITWORD FOLLOW_68_in_unary_ex3515_bits[]	= { ANTLR_UINT64_LIT(0x132209B261841B00), ANTLR_UINT64_LIT(0x0000000000004011) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_68_in_unary_ex3515( FOLLOW_68_in_unary_ex3515_bits, 2 );

static	ANTLR_BITWORD FOLLOW_unary_ex_in_unary_ex3519_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_unary_ex_in_unary_ex3519( FOLLOW_unary_ex_in_unary_ex3519_bits, 1 );

static	ANTLR_BITWORD FOLLOW_AT_in_defer3552_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_AT_in_defer3552( FOLLOW_AT_in_defer3552_bits, 1 );

static	ANTLR_BITWORD FOLLOW_DEFER_in_defer3562_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_DEFER_in_defer3562( FOLLOW_DEFER_in_defer3562_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LOW_PRIORITY_in_defer3572_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LOW_PRIORITY_in_defer3572( FOLLOW_LOW_PRIORITY_in_defer3572_bits, 1 );

static	ANTLR_BITWORD FOLLOW_BACKGROUND_in_defer3582_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_BACKGROUND_in_defer3582( FOLLOW_BACKGROUND_in_defer3582_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LSQBRACKET_in_post_ex_proper3614_bits[]	= { ANTLR_UINT64_LIT(0x132209B261841B00), ANTLR_UINT64_LIT(0x0000000000004011) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LSQBRACKET_in_post_ex_proper3614( FOLLOW_LSQBRACKET_in_post_ex_proper3614_bits, 2 );

static	ANTLR_BITWORD FOLLOW_expr_in_post_ex_proper3618_bits[]	= { ANTLR_UINT64_LIT(0x0008000000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_post_ex_proper3618( FOLLOW_expr_in_post_ex_proper3618_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RSQBRACKET_in_post_ex_proper3622_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RSQBRACKET_in_post_ex_proper3622( FOLLOW_RSQBRACKET_in_post_ex_proper3622_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACKET_in_post_ex_proper3637_bits[]	= { ANTLR_UINT64_LIT(0x0001000000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_post_ex_proper3637( FOLLOW_LBRACKET_in_post_ex_proper3637_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACKET_in_post_ex_proper3641_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_post_ex_proper3641( FOLLOW_RBRACKET_in_post_ex_proper3641_bits, 1 );

static	ANTLR_BITWORD FOLLOW_defer_in_post_ex_proper3669_bits[]	= { ANTLR_UINT64_LIT(0x0000008000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_defer_in_post_ex_proper3669( FOLLOW_defer_in_post_ex_proper3669_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACKET_in_post_ex_proper3673_bits[]	= { ANTLR_UINT64_LIT(0x0001000000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_post_ex_proper3673( FOLLOW_LBRACKET_in_post_ex_proper3673_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACKET_in_post_ex_proper3677_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_post_ex_proper3677( FOLLOW_RBRACKET_in_post_ex_proper3677_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACKET_in_post_ex_proper3705_bits[]	= { ANTLR_UINT64_LIT(0x132209B261841B00), ANTLR_UINT64_LIT(0x0000000000004011) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_post_ex_proper3705( FOLLOW_LBRACKET_in_post_ex_proper3705_bits, 2 );

static	ANTLR_BITWORD FOLLOW_arglist_in_post_ex_proper3711_bits[]	= { ANTLR_UINT64_LIT(0x0001000000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_arglist_in_post_ex_proper3711( FOLLOW_arglist_in_post_ex_proper3711_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACKET_in_post_ex_proper3715_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_post_ex_proper3715( FOLLOW_RBRACKET_in_post_ex_proper3715_bits, 1 );

static	ANTLR_BITWORD FOLLOW_defer_in_post_ex_proper3731_bits[]	= { ANTLR_UINT64_LIT(0x0000008000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_defer_in_post_ex_proper3731( FOLLOW_defer_in_post_ex_proper3731_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACKET_in_post_ex_proper3735_bits[]	= { ANTLR_UINT64_LIT(0x132209B261841B00), ANTLR_UINT64_LIT(0x0000000000004011) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_post_ex_proper3735( FOLLOW_LBRACKET_in_post_ex_proper3735_bits, 2 );

static	ANTLR_BITWORD FOLLOW_arglist_in_post_ex_proper3739_bits[]	= { ANTLR_UINT64_LIT(0x0001000000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_arglist_in_post_ex_proper3739( FOLLOW_arglist_in_post_ex_proper3739_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACKET_in_post_ex_proper3743_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_post_ex_proper3743( FOLLOW_RBRACKET_in_post_ex_proper3743_bits, 1 );

static	ANTLR_BITWORD FOLLOW_80_in_post_ex_proper3756_bits[]	= { ANTLR_UINT64_LIT(0x0000000200000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_80_in_post_ex_proper3756( FOLLOW_80_in_post_ex_proper3756_bits, 1 );

static	ANTLR_BITWORD FOLLOW_ID_in_post_ex_proper3760_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_ID_in_post_ex_proper3760( FOLLOW_ID_in_post_ex_proper3760_bits, 1 );

static	ANTLR_BITWORD FOLLOW_DOUBINC_in_post_ex_proper3787_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_DOUBINC_in_post_ex_proper3787( FOLLOW_DOUBINC_in_post_ex_proper3787_bits, 1 );

static	ANTLR_BITWORD FOLLOW_DOUBDEC_in_post_ex_proper3816_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_DOUBDEC_in_post_ex_proper3816( FOLLOW_DOUBDEC_in_post_ex_proper3816_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACE_in_post_ex_proper3862_bits[]	= { ANTLR_UINT64_LIT(0x132209B261841B00), ANTLR_UINT64_LIT(0x0000000000004011) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACE_in_post_ex_proper3862( FOLLOW_LBRACE_in_post_ex_proper3862_bits, 2 );

static	ANTLR_BITWORD FOLLOW_expr_in_post_ex_proper3882_bits[]	= { ANTLR_UINT64_LIT(0x0000000000004000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_post_ex_proper3882( FOLLOW_expr_in_post_ex_proper3882_bits, 1 );

static	ANTLR_BITWORD FOLLOW_COLON_in_post_ex_proper3899_bits[]	= { ANTLR_UINT64_LIT(0x132209B261841B00), ANTLR_UINT64_LIT(0x0000000000004011) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_COLON_in_post_ex_proper3899( FOLLOW_COLON_in_post_ex_proper3899_bits, 2 );

static	ANTLR_BITWORD FOLLOW_expr_in_post_ex_proper3916_bits[]	= { ANTLR_UINT64_LIT(0x0000800000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_post_ex_proper3916( FOLLOW_expr_in_post_ex_proper3916_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACE_in_post_ex_proper3936_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACE_in_post_ex_proper3936( FOLLOW_RBRACE_in_post_ex_proper3936_bits, 1 );

static	ANTLR_BITWORD FOLLOW_prim_ex_in_post_ex3983_bits[]	= { ANTLR_UINT64_LIT(0x000006C0019000C2), ANTLR_UINT64_LIT(0x0000000000010000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_prim_ex_in_post_ex3983( FOLLOW_prim_ex_in_post_ex3983_bits, 2 );

static	ANTLR_BITWORD FOLLOW_post_ex_proper_in_post_ex4002_bits[]	= { ANTLR_UINT64_LIT(0x000006C0019000C2), ANTLR_UINT64_LIT(0x0000000000010000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_post_ex_proper_in_post_ex4002( FOLLOW_post_ex_proper_in_post_ex4002_bits, 2 );

static	ANTLR_BITWORD FOLLOW_expr_in_assignment_or_expression4033_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x000000000024A880) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_assignment_or_expression4033( FOLLOW_expr_in_assignment_or_expression4033_bits, 2 );

static	ANTLR_BITWORD FOLLOW_assign_type_in_assignment_or_expression4065_bits[]	= { ANTLR_UINT64_LIT(0x132209B261841B00), ANTLR_UINT64_LIT(0x0000000000004011) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_assign_type_in_assignment_or_expression4065( FOLLOW_assign_type_in_assignment_or_expression4065_bits, 2 );

static	ANTLR_BITWORD FOLLOW_expr_in_assignment_or_expression4069_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_assignment_or_expression4069( FOLLOW_expr_in_assignment_or_expression4069_bits, 1 );

static	ANTLR_BITWORD FOLLOW_INT_in_constant4135_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_INT_in_constant4135( FOLLOW_INT_in_constant4135_bits, 1 );

static	ANTLR_BITWORD FOLLOW_FLOAT_in_constant4153_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_FLOAT_in_constant4153( FOLLOW_FLOAT_in_constant4153_bits, 1 );

static	ANTLR_BITWORD FOLLOW_CHAR_in_constant4169_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_CHAR_in_constant4169( FOLLOW_CHAR_in_constant4169_bits, 1 );

static	ANTLR_BITWORD FOLLOW_STRING_in_constant4186_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_STRING_in_constant4186( FOLLOW_STRING_in_constant4186_bits, 1 );

static	ANTLR_BITWORD FOLLOW_BOOL_in_constant4201_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_BOOL_in_constant4201( FOLLOW_BOOL_in_constant4201_bits, 1 );

static	ANTLR_BITWORD FOLLOW_NULLTOK_in_constant4218_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_NULLTOK_in_constant4218( FOLLOW_NULLTOK_in_constant4218_bits, 1 );

static	ANTLR_BITWORD FOLLOW_scalarType_in_constant4233_bits[]	= { ANTLR_UINT64_LIT(0x0000004000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_scalarType_in_constant4233( FOLLOW_scalarType_in_constant4233_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACE_in_constant4237_bits[]	= { ANTLR_UINT64_LIT(0x0100000000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACE_in_constant4237( FOLLOW_LBRACE_in_constant4237_bits, 1 );

static	ANTLR_BITWORD FOLLOW_STRING_in_constant4241_bits[]	= { ANTLR_UINT64_LIT(0x0000800000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_STRING_in_constant4241( FOLLOW_STRING_in_constant4241_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACE_in_constant4245_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACE_in_constant4245( FOLLOW_RBRACE_in_constant4245_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LENGTH_in_builtin_unary4274_bits[]	= { ANTLR_UINT64_LIT(0x0000008000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LENGTH_in_builtin_unary4274( FOLLOW_LENGTH_in_builtin_unary4274_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACKET_in_builtin_unary4276_bits[]	= { ANTLR_UINT64_LIT(0x132209B261841B00), ANTLR_UINT64_LIT(0x0000000000004011) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_builtin_unary4276( FOLLOW_LBRACKET_in_builtin_unary4276_bits, 2 );

static	ANTLR_BITWORD FOLLOW_expr_in_builtin_unary4278_bits[]	= { ANTLR_UINT64_LIT(0x0001000000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_builtin_unary4278( FOLLOW_expr_in_builtin_unary4278_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACKET_in_builtin_unary4280_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_builtin_unary4280( FOLLOW_RBRACKET_in_builtin_unary4280_bits, 1 );

static	ANTLR_BITWORD FOLLOW_ID_in_non_array_prim_ex4309_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_ID_in_non_array_prim_ex4309( FOLLOW_ID_in_non_array_prim_ex4309_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACKET_in_non_array_prim_ex4323_bits[]	= { ANTLR_UINT64_LIT(0x132209B261841B00), ANTLR_UINT64_LIT(0x0000000000004011) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_non_array_prim_ex4323( FOLLOW_LBRACKET_in_non_array_prim_ex4323_bits, 2 );

static	ANTLR_BITWORD FOLLOW_expr_in_non_array_prim_ex4327_bits[]	= { ANTLR_UINT64_LIT(0x0001000000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_non_array_prim_ex4327( FOLLOW_expr_in_non_array_prim_ex4327_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACKET_in_non_array_prim_ex4331_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_non_array_prim_ex4331( FOLLOW_RBRACKET_in_non_array_prim_ex4331_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RESOURCE_in_non_array_prim_ex4343_bits[]	= { ANTLR_UINT64_LIT(0x0000008000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RESOURCE_in_non_array_prim_ex4343( FOLLOW_RESOURCE_in_non_array_prim_ex4343_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACKET_in_non_array_prim_ex4347_bits[]	= { ANTLR_UINT64_LIT(0x0100000000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_non_array_prim_ex4347( FOLLOW_LBRACKET_in_non_array_prim_ex4347_bits, 1 );

static	ANTLR_BITWORD FOLLOW_STRING_in_non_array_prim_ex4351_bits[]	= { ANTLR_UINT64_LIT(0x0001000000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_STRING_in_non_array_prim_ex4351( FOLLOW_STRING_in_non_array_prim_ex4351_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACKET_in_non_array_prim_ex4355_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_non_array_prim_ex4355( FOLLOW_RBRACKET_in_non_array_prim_ex4355_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RESOURCE_in_non_array_prim_ex4367_bits[]	= { ANTLR_UINT64_LIT(0x0000008000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RESOURCE_in_non_array_prim_ex4367( FOLLOW_RESOURCE_in_non_array_prim_ex4367_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACKET_in_non_array_prim_ex4371_bits[]	= { ANTLR_UINT64_LIT(0x0100000000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_non_array_prim_ex4371( FOLLOW_LBRACKET_in_non_array_prim_ex4371_bits, 1 );

static	ANTLR_BITWORD FOLLOW_STRING_in_non_array_prim_ex4375_bits[]	= { ANTLR_UINT64_LIT(0x0000000000008000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_STRING_in_non_array_prim_ex4375( FOLLOW_STRING_in_non_array_prim_ex4375_bits, 1 );

static	ANTLR_BITWORD FOLLOW_COMMA_in_non_array_prim_ex4377_bits[]	= { ANTLR_UINT64_LIT(0x132209B261841B00), ANTLR_UINT64_LIT(0x0000000000004011) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_COMMA_in_non_array_prim_ex4377( FOLLOW_COMMA_in_non_array_prim_ex4377_bits, 2 );

static	ANTLR_BITWORD FOLLOW_arglist_in_non_array_prim_ex4381_bits[]	= { ANTLR_UINT64_LIT(0x0001000000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_arglist_in_non_array_prim_ex4381( FOLLOW_arglist_in_non_array_prim_ex4381_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACKET_in_non_array_prim_ex4385_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_non_array_prim_ex4385( FOLLOW_RBRACKET_in_non_array_prim_ex4385_bits, 1 );

static	ANTLR_BITWORD FOLLOW_constant_in_non_array_prim_ex4399_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_constant_in_non_array_prim_ex4399( FOLLOW_constant_in_non_array_prim_ex4399_bits, 1 );

static	ANTLR_BITWORD FOLLOW_scalarType_in_non_array_prim_ex4414_bits[]	= { ANTLR_UINT64_LIT(0x0000008000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_scalarType_in_non_array_prim_ex4414( FOLLOW_scalarType_in_non_array_prim_ex4414_bits, 1 );

static	ANTLR_BITWORD FOLLOW_cast_in_non_array_prim_ex4420_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_cast_in_non_array_prim_ex4420( FOLLOW_cast_in_non_array_prim_ex4420_bits, 1 );

static	ANTLR_BITWORD FOLLOW_objectType_in_non_array_prim_ex4435_bits[]	= { ANTLR_UINT64_LIT(0x0000008000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_objectType_in_non_array_prim_ex4435( FOLLOW_objectType_in_non_array_prim_ex4435_bits, 1 );

static	ANTLR_BITWORD FOLLOW_structInit_in_non_array_prim_ex4439_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_structInit_in_non_array_prim_ex4439( FOLLOW_structInit_in_non_array_prim_ex4439_bits, 1 );

static	ANTLR_BITWORD FOLLOW_SHARED_REF_in_non_array_prim_ex4451_bits[]	= { ANTLR_UINT64_LIT(0x1000000000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SHARED_REF_in_non_array_prim_ex4451( FOLLOW_SHARED_REF_in_non_array_prim_ex4451_bits, 1 );

static	ANTLR_BITWORD FOLLOW_objectType_in_non_array_prim_ex4455_bits[]	= { ANTLR_UINT64_LIT(0x0000008000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_objectType_in_non_array_prim_ex4455( FOLLOW_objectType_in_non_array_prim_ex4455_bits, 1 );

static	ANTLR_BITWORD FOLLOW_structInit_in_non_array_prim_ex4459_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_structInit_in_non_array_prim_ex4459( FOLLOW_structInit_in_non_array_prim_ex4459_bits, 1 );

static	ANTLR_BITWORD FOLLOW_builtin_unary_in_non_array_prim_ex4473_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_builtin_unary_in_non_array_prim_ex4473( FOLLOW_builtin_unary_in_non_array_prim_ex4473_bits, 1 );

static	ANTLR_BITWORD FOLLOW_non_array_prim_ex_in_prim_ex4502_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_non_array_prim_ex_in_prim_ex4502( FOLLOW_non_array_prim_ex_in_prim_ex4502_bits, 1 );

static	ANTLR_BITWORD FOLLOW_nonArrayType_in_prim_ex4516_bits[]	= { ANTLR_UINT64_LIT(0x0000040000200000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_nonArrayType_in_prim_ex4516( FOLLOW_nonArrayType_in_prim_ex4516_bits, 1 );

static	ANTLR_BITWORD FOLLOW_arrayInit_in_prim_ex4520_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_arrayInit_in_prim_ex4520( FOLLOW_arrayInit_in_prim_ex4520_bits, 1 );

static	ANTLR_BITWORD FOLLOW_SHARED_REF_in_prim_ex4532_bits[]	= { ANTLR_UINT64_LIT(0x1200002040041200), ANTLR_UINT64_LIT(0x0000000000000001) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SHARED_REF_in_prim_ex4532( FOLLOW_SHARED_REF_in_prim_ex4532_bits, 2 );

static	ANTLR_BITWORD FOLLOW_nonArrayType_in_prim_ex4536_bits[]	= { ANTLR_UINT64_LIT(0x0000040000200000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_nonArrayType_in_prim_ex4536( FOLLOW_nonArrayType_in_prim_ex4536_bits, 1 );

static	ANTLR_BITWORD FOLLOW_arrayInit_in_prim_ex4540_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_arrayInit_in_prim_ex4540( FOLLOW_arrayInit_in_prim_ex4540_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACKET_in_cast4569_bits[]	= { ANTLR_UINT64_LIT(0x132209B261841B00), ANTLR_UINT64_LIT(0x0000000000004011) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_cast4569( FOLLOW_LBRACKET_in_cast4569_bits, 2 );

static	ANTLR_BITWORD FOLLOW_expr_in_cast4573_bits[]	= { ANTLR_UINT64_LIT(0x0001000000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_cast4573( FOLLOW_expr_in_cast4573_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACKET_in_cast4577_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_cast4577( FOLLOW_RBRACKET_in_cast4577_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACKET_in_structInit4607_bits[]	= { ANTLR_UINT64_LIT(0x0001000000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_structInit4607( FOLLOW_LBRACKET_in_structInit4607_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACKET_in_structInit4611_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_structInit4611( FOLLOW_RBRACKET_in_structInit4611_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACKET_in_structInit4625_bits[]	= { ANTLR_UINT64_LIT(0x132209B261841B00), ANTLR_UINT64_LIT(0x0000000000004011) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_structInit4625( FOLLOW_LBRACKET_in_structInit4625_bits, 2 );

static	ANTLR_BITWORD FOLLOW_arglist_in_structInit4629_bits[]	= { ANTLR_UINT64_LIT(0x0001000000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_arglist_in_structInit4629( FOLLOW_arglist_in_structInit4629_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACKET_in_structInit4633_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_structInit4633( FOLLOW_RBRACKET_in_structInit4633_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LSQBRACKET_in_arrayInit4685_bits[]	= { ANTLR_UINT64_LIT(0x132209B261841B00), ANTLR_UINT64_LIT(0x0000000000004011) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LSQBRACKET_in_arrayInit4685( FOLLOW_LSQBRACKET_in_arrayInit4685_bits, 2 );

static	ANTLR_BITWORD FOLLOW_expr_in_arrayInit4689_bits[]	= { ANTLR_UINT64_LIT(0x0008000000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_arrayInit4689( FOLLOW_expr_in_arrayInit4689_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RSQBRACKET_in_arrayInit4691_bits[]	= { ANTLR_UINT64_LIT(0x0000008000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RSQBRACKET_in_arrayInit4691( FOLLOW_RSQBRACKET_in_arrayInit4691_bits, 1 );

static	ANTLR_BITWORD FOLLOW_DLSQBRACKET_in_arrayInit4718_bits[]	= { ANTLR_UINT64_LIT(0x132209B261841B00), ANTLR_UINT64_LIT(0x0000000000004011) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_DLSQBRACKET_in_arrayInit4718( FOLLOW_DLSQBRACKET_in_arrayInit4718_bits, 2 );

static	ANTLR_BITWORD FOLLOW_expr_in_arrayInit4722_bits[]	= { ANTLR_UINT64_LIT(0x0000000002000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_arrayInit4722( FOLLOW_expr_in_arrayInit4722_bits, 1 );

static	ANTLR_BITWORD FOLLOW_DRSQBRACKET_in_arrayInit4724_bits[]	= { ANTLR_UINT64_LIT(0x0000008000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_DRSQBRACKET_in_arrayInit4724( FOLLOW_DRSQBRACKET_in_arrayInit4724_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACKET_in_arrayInit4743_bits[]	= { ANTLR_UINT64_LIT(0x132209B261841B00), ANTLR_UINT64_LIT(0x0000000000004011) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_arrayInit4743( FOLLOW_LBRACKET_in_arrayInit4743_bits, 2 );

static	ANTLR_BITWORD FOLLOW_expr_in_arrayInit4747_bits[]	= { ANTLR_UINT64_LIT(0x0001000000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_arrayInit4747( FOLLOW_expr_in_arrayInit4747_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACKET_in_arrayInit4751_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_arrayInit4751( FOLLOW_RBRACKET_in_arrayInit4751_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LSQBRACKET_in_arrayInit4793_bits[]	= { ANTLR_UINT64_LIT(0x0008000000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LSQBRACKET_in_arrayInit4793( FOLLOW_LSQBRACKET_in_arrayInit4793_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RSQBRACKET_in_arrayInit4795_bits[]	= { ANTLR_UINT64_LIT(0x0000008000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RSQBRACKET_in_arrayInit4795( FOLLOW_RSQBRACKET_in_arrayInit4795_bits, 1 );

static	ANTLR_BITWORD FOLLOW_DLSQBRACKET_in_arrayInit4801_bits[]	= { ANTLR_UINT64_LIT(0x0000000002000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_DLSQBRACKET_in_arrayInit4801( FOLLOW_DLSQBRACKET_in_arrayInit4801_bits, 1 );

static	ANTLR_BITWORD FOLLOW_DRSQBRACKET_in_arrayInit4803_bits[]	= { ANTLR_UINT64_LIT(0x0000008000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_DRSQBRACKET_in_arrayInit4803( FOLLOW_DRSQBRACKET_in_arrayInit4803_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACKET_in_arrayInit4822_bits[]	= { ANTLR_UINT64_LIT(0x132209B261841B00), ANTLR_UINT64_LIT(0x0000000000004011) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_arrayInit4822( FOLLOW_LBRACKET_in_arrayInit4822_bits, 2 );

static	ANTLR_BITWORD FOLLOW_arglist_in_arrayInit4826_bits[]	= { ANTLR_UINT64_LIT(0x0001000000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_arglist_in_arrayInit4826( FOLLOW_arglist_in_arrayInit4826_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACKET_in_arrayInit4830_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_arrayInit4830( FOLLOW_RBRACKET_in_arrayInit4830_bits, 1 );

static	ANTLR_BITWORD FOLLOW_param_in_declaration4873_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000200000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_param_in_declaration4873( FOLLOW_param_in_declaration4873_bits, 2 );

static	ANTLR_BITWORD FOLLOW_85_in_declaration4908_bits[]	= { ANTLR_UINT64_LIT(0x132209B261841B00), ANTLR_UINT64_LIT(0x0000000000004011) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_85_in_declaration4908( FOLLOW_85_in_declaration4908_bits, 2 );

static	ANTLR_BITWORD FOLLOW_expr_in_declaration4915_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_declaration4915( FOLLOW_expr_in_declaration4915_bits, 1 );

static	ANTLR_BITWORD FOLLOW_80_in_inherited_declaration4965_bits[]	= { ANTLR_UINT64_LIT(0x0000000200000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_80_in_inherited_declaration4965( FOLLOW_80_in_inherited_declaration4965_bits, 1 );

static	ANTLR_BITWORD FOLLOW_ID_in_inherited_declaration4969_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000200000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_ID_in_inherited_declaration4969( FOLLOW_ID_in_inherited_declaration4969_bits, 2 );

static	ANTLR_BITWORD FOLLOW_85_in_inherited_declaration4982_bits[]	= { ANTLR_UINT64_LIT(0x132209B2618C1B00), ANTLR_UINT64_LIT(0x0000000000004011) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_85_in_inherited_declaration4982( FOLLOW_85_in_inherited_declaration4982_bits, 2 );

static	ANTLR_BITWORD FOLLOW_expr_in_inherited_declaration5018_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_inherited_declaration5018( FOLLOW_expr_in_inherited_declaration5018_bits, 1 );

static	ANTLR_BITWORD FOLLOW_DEFAULT_in_inherited_declaration5044_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_DEFAULT_in_inherited_declaration5044( FOLLOW_DEFAULT_in_inherited_declaration5044_bits, 1 );

static	ANTLR_BITWORD FOLLOW_declaration_in_instructionScalar5100_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_declaration_in_instructionScalar5100( FOLLOW_declaration_in_instructionScalar5100_bits, 1 );

static	ANTLR_BITWORD FOLLOW_assignment_or_expression_in_instructionScalar5113_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_assignment_or_expression_in_instructionScalar5113( FOLLOW_assignment_or_expression_in_instructionScalar5113_bits, 1 );

static	ANTLR_BITWORD FOLLOW_CONTINUE_in_continueInst5143_bits[]	= { ANTLR_UINT64_LIT(0x0010000000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_CONTINUE_in_continueInst5143( FOLLOW_CONTINUE_in_continueInst5143_bits, 1 );

static	ANTLR_BITWORD FOLLOW_SEMICOLON_in_continueInst5147_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SEMICOLON_in_continueInst5147( FOLLOW_SEMICOLON_in_continueInst5147_bits, 1 );

static	ANTLR_BITWORD FOLLOW_BREAK_in_breakInst5173_bits[]	= { ANTLR_UINT64_LIT(0x0010000000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_BREAK_in_breakInst5173( FOLLOW_BREAK_in_breakInst5173_bits, 1 );

static	ANTLR_BITWORD FOLLOW_SEMICOLON_in_breakInst5177_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SEMICOLON_in_breakInst5177( FOLLOW_SEMICOLON_in_breakInst5177_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RETURN_in_returnInst5204_bits[]	= { ANTLR_UINT64_LIT(0x132209B261841B00), ANTLR_UINT64_LIT(0x0000000000004011) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RETURN_in_returnInst5204( FOLLOW_RETURN_in_returnInst5204_bits, 2 );

static	ANTLR_BITWORD FOLLOW_expr_in_returnInst5206_bits[]	= { ANTLR_UINT64_LIT(0x0010000000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_returnInst5206( FOLLOW_expr_in_returnInst5206_bits, 1 );

static	ANTLR_BITWORD FOLLOW_SEMICOLON_in_returnInst5210_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SEMICOLON_in_returnInst5210( FOLLOW_SEMICOLON_in_returnInst5210_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RETURN_in_returnInst5224_bits[]	= { ANTLR_UINT64_LIT(0x0010000000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RETURN_in_returnInst5224( FOLLOW_RETURN_in_returnInst5224_bits, 1 );

static	ANTLR_BITWORD FOLLOW_SEMICOLON_in_returnInst5228_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SEMICOLON_in_returnInst5228( FOLLOW_SEMICOLON_in_returnInst5228_bits, 1 );

static	ANTLR_BITWORD FOLLOW_WHILE_in_whileInst5261_bits[]	= { ANTLR_UINT64_LIT(0x0000008000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_WHILE_in_whileInst5261( FOLLOW_WHILE_in_whileInst5261_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACKET_in_whileInst5263_bits[]	= { ANTLR_UINT64_LIT(0x132209B261841B00), ANTLR_UINT64_LIT(0x0000000000004011) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_whileInst5263( FOLLOW_LBRACKET_in_whileInst5263_bits, 2 );

static	ANTLR_BITWORD FOLLOW_expr_in_whileInst5265_bits[]	= { ANTLR_UINT64_LIT(0x0001000000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_whileInst5265( FOLLOW_expr_in_whileInst5265_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACKET_in_whileInst5267_bits[]	= { ANTLR_UINT64_LIT(0x0000004000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_whileInst5267( FOLLOW_RBRACKET_in_whileInst5267_bits, 1 );

static	ANTLR_BITWORD FOLLOW_instruction_list_in_whileInst5269_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_instruction_list_in_whileInst5269( FOLLOW_instruction_list_in_whileInst5269_bits, 1 );

static	ANTLR_BITWORD FOLLOW_DO_in_doInst5305_bits[]	= { ANTLR_UINT64_LIT(0x0000004000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_DO_in_doInst5305( FOLLOW_DO_in_doInst5305_bits, 1 );

static	ANTLR_BITWORD FOLLOW_instruction_list_in_doInst5307_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000004) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_instruction_list_in_doInst5307( FOLLOW_instruction_list_in_doInst5307_bits, 2 );

static	ANTLR_BITWORD FOLLOW_WHILE_in_doInst5309_bits[]	= { ANTLR_UINT64_LIT(0x0000008000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_WHILE_in_doInst5309( FOLLOW_WHILE_in_doInst5309_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACKET_in_doInst5311_bits[]	= { ANTLR_UINT64_LIT(0x132209B261841B00), ANTLR_UINT64_LIT(0x0000000000004011) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_doInst5311( FOLLOW_LBRACKET_in_doInst5311_bits, 2 );

static	ANTLR_BITWORD FOLLOW_expr_in_doInst5313_bits[]	= { ANTLR_UINT64_LIT(0x0001000000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_doInst5313( FOLLOW_expr_in_doInst5313_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACKET_in_doInst5315_bits[]	= { ANTLR_UINT64_LIT(0x0010000000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_doInst5315( FOLLOW_RBRACKET_in_doInst5315_bits, 1 );

static	ANTLR_BITWORD FOLLOW_SEMICOLON_in_doInst5317_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SEMICOLON_in_doInst5317( FOLLOW_SEMICOLON_in_doInst5317_bits, 1 );

static	ANTLR_BITWORD FOLLOW_FOR_in_forInst5349_bits[]	= { ANTLR_UINT64_LIT(0x0000008000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_FOR_in_forInst5349( FOLLOW_FOR_in_forInst5349_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACKET_in_forInst5351_bits[]	= { ANTLR_UINT64_LIT(0x133209B261841B00), ANTLR_UINT64_LIT(0x0000000000004013) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_forInst5351( FOLLOW_LBRACKET_in_forInst5351_bits, 2 );

static	ANTLR_BITWORD FOLLOW_instructionScalar_in_forInst5379_bits[]	= { ANTLR_UINT64_LIT(0x0010000000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_instructionScalar_in_forInst5379( FOLLOW_instructionScalar_in_forInst5379_bits, 1 );

static	ANTLR_BITWORD FOLLOW_SEMICOLON_in_forInst5385_bits[]	= { ANTLR_UINT64_LIT(0x133209B261841B00), ANTLR_UINT64_LIT(0x0000000000004011) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SEMICOLON_in_forInst5385( FOLLOW_SEMICOLON_in_forInst5385_bits, 2 );

static	ANTLR_BITWORD FOLLOW_expr_in_forInst5410_bits[]	= { ANTLR_UINT64_LIT(0x0010000000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_forInst5410( FOLLOW_expr_in_forInst5410_bits, 1 );

static	ANTLR_BITWORD FOLLOW_SEMICOLON_in_forInst5424_bits[]	= { ANTLR_UINT64_LIT(0x132309B261841B00), ANTLR_UINT64_LIT(0x0000000000004013) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SEMICOLON_in_forInst5424( FOLLOW_SEMICOLON_in_forInst5424_bits, 2 );

static	ANTLR_BITWORD FOLLOW_instructionScalar_in_forInst5449_bits[]	= { ANTLR_UINT64_LIT(0x0001000000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_instructionScalar_in_forInst5449( FOLLOW_instructionScalar_in_forInst5449_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACKET_in_forInst5455_bits[]	= { ANTLR_UINT64_LIT(0x0000004000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_forInst5455( FOLLOW_RBRACKET_in_forInst5455_bits, 1 );

static	ANTLR_BITWORD FOLLOW_instruction_list_in_forInst5480_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_instruction_list_in_forInst5480( FOLLOW_instruction_list_in_forInst5480_bits, 1 );

static	ANTLR_BITWORD FOLLOW_ELSE_in_elsemiddle5528_bits[]	= { ANTLR_UINT64_LIT(0x0000000400000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_ELSE_in_elsemiddle5528( FOLLOW_ELSE_in_elsemiddle5528_bits, 1 );

static	ANTLR_BITWORD FOLLOW_IF_in_elsemiddle5530_bits[]	= { ANTLR_UINT64_LIT(0x0000008000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_IF_in_elsemiddle5530( FOLLOW_IF_in_elsemiddle5530_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACKET_in_elsemiddle5532_bits[]	= { ANTLR_UINT64_LIT(0x132209B261841B00), ANTLR_UINT64_LIT(0x0000000000004011) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_elsemiddle5532( FOLLOW_LBRACKET_in_elsemiddle5532_bits, 2 );

static	ANTLR_BITWORD FOLLOW_expr_in_elsemiddle5534_bits[]	= { ANTLR_UINT64_LIT(0x0001000000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_elsemiddle5534( FOLLOW_expr_in_elsemiddle5534_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACKET_in_elsemiddle5536_bits[]	= { ANTLR_UINT64_LIT(0x0000004000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_elsemiddle5536( FOLLOW_RBRACKET_in_elsemiddle5536_bits, 1 );

static	ANTLR_BITWORD FOLLOW_instruction_list_in_elsemiddle5538_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_instruction_list_in_elsemiddle5538( FOLLOW_instruction_list_in_elsemiddle5538_bits, 1 );

static	ANTLR_BITWORD FOLLOW_ELSE_in_endif5571_bits[]	= { ANTLR_UINT64_LIT(0x0000004000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_ELSE_in_endif5571( FOLLOW_ELSE_in_endif5571_bits, 1 );

static	ANTLR_BITWORD FOLLOW_instruction_list_in_endif5573_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_instruction_list_in_endif5573( FOLLOW_instruction_list_in_endif5573_bits, 1 );

static	ANTLR_BITWORD FOLLOW_IF_in_ifInst5603_bits[]	= { ANTLR_UINT64_LIT(0x0000008000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_IF_in_ifInst5603( FOLLOW_IF_in_ifInst5603_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACKET_in_ifInst5605_bits[]	= { ANTLR_UINT64_LIT(0x132209B261841B00), ANTLR_UINT64_LIT(0x0000000000004011) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_ifInst5605( FOLLOW_LBRACKET_in_ifInst5605_bits, 2 );

static	ANTLR_BITWORD FOLLOW_expr_in_ifInst5607_bits[]	= { ANTLR_UINT64_LIT(0x0001000000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_ifInst5607( FOLLOW_expr_in_ifInst5607_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACKET_in_ifInst5609_bits[]	= { ANTLR_UINT64_LIT(0x0000004000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_ifInst5609( FOLLOW_RBRACKET_in_ifInst5609_bits, 1 );

static	ANTLR_BITWORD FOLLOW_instruction_list_in_ifInst5611_bits[]	= { ANTLR_UINT64_LIT(0x0000000004000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_instruction_list_in_ifInst5611( FOLLOW_instruction_list_in_ifInst5611_bits, 1 );

static	ANTLR_BITWORD FOLLOW_elsemiddle_in_ifInst5628_bits[]	= { ANTLR_UINT64_LIT(0x0000000004000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_elsemiddle_in_ifInst5628( FOLLOW_elsemiddle_in_ifInst5628_bits, 1 );

static	ANTLR_BITWORD FOLLOW_endif_in_ifInst5648_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_endif_in_ifInst5648( FOLLOW_endif_in_ifInst5648_bits, 1 );

static	ANTLR_BITWORD FOLLOW_ifInst_in_instruction5682_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_ifInst_in_instruction5682( FOLLOW_ifInst_in_instruction5682_bits, 1 );

static	ANTLR_BITWORD FOLLOW_whileInst_in_instruction5703_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_whileInst_in_instruction5703( FOLLOW_whileInst_in_instruction5703_bits, 1 );

static	ANTLR_BITWORD FOLLOW_doInst_in_instruction5720_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_doInst_in_instruction5720( FOLLOW_doInst_in_instruction5720_bits, 1 );

static	ANTLR_BITWORD FOLLOW_forInst_in_instruction5740_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_forInst_in_instruction5740( FOLLOW_forInst_in_instruction5740_bits, 1 );

static	ANTLR_BITWORD FOLLOW_instructionScalar_in_instruction5760_bits[]	= { ANTLR_UINT64_LIT(0x0010000000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_instructionScalar_in_instruction5760( FOLLOW_instructionScalar_in_instruction5760_bits, 1 );

static	ANTLR_BITWORD FOLLOW_SEMICOLON_in_instruction5762_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SEMICOLON_in_instruction5762( FOLLOW_SEMICOLON_in_instruction5762_bits, 1 );

static	ANTLR_BITWORD FOLLOW_breakInst_in_instruction5775_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_breakInst_in_instruction5775( FOLLOW_breakInst_in_instruction5775_bits, 1 );

static	ANTLR_BITWORD FOLLOW_continueInst_in_instruction5788_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_continueInst_in_instruction5788( FOLLOW_continueInst_in_instruction5788_bits, 1 );

static	ANTLR_BITWORD FOLLOW_returnInst_in_instruction5801_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_returnInst_in_instruction5801( FOLLOW_returnInst_in_instruction5801_bits, 1 );

static	ANTLR_BITWORD FOLLOW_instruction_list_in_instruction5814_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_instruction_list_in_instruction5814( FOLLOW_instruction_list_in_instruction5814_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACE_in_instruction_list5846_bits[]	= { ANTLR_UINT64_LIT(0x132689F6E1C61F00), ANTLR_UINT64_LIT(0x0000000000004017) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACE_in_instruction_list5846( FOLLOW_LBRACE_in_instruction_list5846_bits, 2 );

static	ANTLR_BITWORD FOLLOW_instruction_in_instruction_list5863_bits[]	= { ANTLR_UINT64_LIT(0x132689F6E1C61F00), ANTLR_UINT64_LIT(0x0000000000004017) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_instruction_in_instruction_list5863( FOLLOW_instruction_in_instruction_list5863_bits, 2 );

static	ANTLR_BITWORD FOLLOW_RBRACE_in_instruction_list5880_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACE_in_instruction_list5880( FOLLOW_RBRACE_in_instruction_list5880_bits, 1 );

static	ANTLR_BITWORD FOLLOW_param_in_function5910_bits[]	= { ANTLR_UINT64_LIT(0x0000008000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_param_in_function5910( FOLLOW_param_in_function5910_bits, 1 );

static	ANTLR_BITWORD FOLLOW_parameterList_in_function5912_bits[]	= { ANTLR_UINT64_LIT(0x0000004000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_parameterList_in_function5912( FOLLOW_parameterList_in_function5912_bits, 1 );

static	ANTLR_BITWORD FOLLOW_instruction_list_in_function5914_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_instruction_list_in_function5914( FOLLOW_instruction_list_in_function5914_bits, 1 );

static	ANTLR_BITWORD FOLLOW_STRUCT_in_structDecl5966_bits[]	= { ANTLR_UINT64_LIT(0x1000000000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_STRUCT_in_structDecl5966( FOLLOW_STRUCT_in_structDecl5966_bits, 1 );

static	ANTLR_BITWORD FOLLOW_TYPE_in_structDecl5970_bits[]	= { ANTLR_UINT64_LIT(0x000000C000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_TYPE_in_structDecl5970( FOLLOW_TYPE_in_structDecl5970_bits, 1 );

static	ANTLR_BITWORD FOLLOW_STRUCT_in_structDecl5990_bits[]	= { ANTLR_UINT64_LIT(0x1000000000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_STRUCT_in_structDecl5990( FOLLOW_STRUCT_in_structDecl5990_bits, 1 );

static	ANTLR_BITWORD FOLLOW_TYPE_in_structDecl5994_bits[]	= { ANTLR_UINT64_LIT(0x0000000000004000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_TYPE_in_structDecl5994( FOLLOW_TYPE_in_structDecl5994_bits, 1 );

static	ANTLR_BITWORD FOLLOW_COLON_in_structDecl5996_bits[]	= { ANTLR_UINT64_LIT(0x1000000000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_COLON_in_structDecl5996( FOLLOW_COLON_in_structDecl5996_bits, 1 );

static	ANTLR_BITWORD FOLLOW_TYPE_in_structDecl6000_bits[]	= { ANTLR_UINT64_LIT(0x000000C000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_TYPE_in_structDecl6000( FOLLOW_TYPE_in_structDecl6000_bits, 1 );

static	ANTLR_BITWORD FOLLOW_parameterList_in_structDecl6028_bits[]	= { ANTLR_UINT64_LIT(0x0000004000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_parameterList_in_structDecl6028( FOLLOW_parameterList_in_structDecl6028_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACE_in_structDecl6046_bits[]	= { ANTLR_UINT64_LIT(0x1220802040041200), ANTLR_UINT64_LIT(0x0000000000010003) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACE_in_structDecl6046( FOLLOW_LBRACE_in_structDecl6046_bits, 2 );

static	ANTLR_BITWORD FOLLOW_declaration_in_structDecl6089_bits[]	= { ANTLR_UINT64_LIT(0x0010000000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_declaration_in_structDecl6089( FOLLOW_declaration_in_structDecl6089_bits, 1 );

static	ANTLR_BITWORD FOLLOW_SEMICOLON_in_structDecl6093_bits[]	= { ANTLR_UINT64_LIT(0x1220802040041200), ANTLR_UINT64_LIT(0x0000000000010003) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SEMICOLON_in_structDecl6093( FOLLOW_SEMICOLON_in_structDecl6093_bits, 2 );

static	ANTLR_BITWORD FOLLOW_inherited_declaration_in_structDecl6119_bits[]	= { ANTLR_UINT64_LIT(0x0010000000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_inherited_declaration_in_structDecl6119( FOLLOW_inherited_declaration_in_structDecl6119_bits, 1 );

static	ANTLR_BITWORD FOLLOW_SEMICOLON_in_structDecl6123_bits[]	= { ANTLR_UINT64_LIT(0x1220802040041200), ANTLR_UINT64_LIT(0x0000000000010003) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SEMICOLON_in_structDecl6123( FOLLOW_SEMICOLON_in_structDecl6123_bits, 2 );

static	ANTLR_BITWORD FOLLOW_function_in_structDecl6149_bits[]	= { ANTLR_UINT64_LIT(0x1220802040041200), ANTLR_UINT64_LIT(0x0000000000010003) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_function_in_structDecl6149( FOLLOW_function_in_structDecl6149_bits, 2 );

static	ANTLR_BITWORD FOLLOW_RBRACE_in_structDecl6188_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACE_in_structDecl6188( FOLLOW_RBRACE_in_structDecl6188_bits, 1 );

static	ANTLR_BITWORD FOLLOW_ACTOR_in_classDecl6241_bits[]	= { ANTLR_UINT64_LIT(0x1000000000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_ACTOR_in_classDecl6241( FOLLOW_ACTOR_in_classDecl6241_bits, 1 );

static	ANTLR_BITWORD FOLLOW_TYPE_in_classDecl6245_bits[]	= { ANTLR_UINT64_LIT(0x000000C000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_TYPE_in_classDecl6245( FOLLOW_TYPE_in_classDecl6245_bits, 1 );

static	ANTLR_BITWORD FOLLOW_ACTOR_in_classDecl6265_bits[]	= { ANTLR_UINT64_LIT(0x1000000000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_ACTOR_in_classDecl6265( FOLLOW_ACTOR_in_classDecl6265_bits, 1 );

static	ANTLR_BITWORD FOLLOW_TYPE_in_classDecl6269_bits[]	= { ANTLR_UINT64_LIT(0x0000000000004000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_TYPE_in_classDecl6269( FOLLOW_TYPE_in_classDecl6269_bits, 1 );

static	ANTLR_BITWORD FOLLOW_COLON_in_classDecl6271_bits[]	= { ANTLR_UINT64_LIT(0x1000000000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_COLON_in_classDecl6271( FOLLOW_COLON_in_classDecl6271_bits, 1 );

static	ANTLR_BITWORD FOLLOW_TYPE_in_classDecl6275_bits[]	= { ANTLR_UINT64_LIT(0x000000C000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_TYPE_in_classDecl6275( FOLLOW_TYPE_in_classDecl6275_bits, 1 );

static	ANTLR_BITWORD FOLLOW_CLASS_in_classDecl6295_bits[]	= { ANTLR_UINT64_LIT(0x1000000000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_CLASS_in_classDecl6295( FOLLOW_CLASS_in_classDecl6295_bits, 1 );

static	ANTLR_BITWORD FOLLOW_TYPE_in_classDecl6299_bits[]	= { ANTLR_UINT64_LIT(0x000000C000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_TYPE_in_classDecl6299( FOLLOW_TYPE_in_classDecl6299_bits, 1 );

static	ANTLR_BITWORD FOLLOW_CLASS_in_classDecl6319_bits[]	= { ANTLR_UINT64_LIT(0x1000000000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_CLASS_in_classDecl6319( FOLLOW_CLASS_in_classDecl6319_bits, 1 );

static	ANTLR_BITWORD FOLLOW_TYPE_in_classDecl6323_bits[]	= { ANTLR_UINT64_LIT(0x0000000000004000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_TYPE_in_classDecl6323( FOLLOW_TYPE_in_classDecl6323_bits, 1 );

static	ANTLR_BITWORD FOLLOW_COLON_in_classDecl6325_bits[]	= { ANTLR_UINT64_LIT(0x1000000000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_COLON_in_classDecl6325( FOLLOW_COLON_in_classDecl6325_bits, 1 );

static	ANTLR_BITWORD FOLLOW_TYPE_in_classDecl6329_bits[]	= { ANTLR_UINT64_LIT(0x000000C000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_TYPE_in_classDecl6329( FOLLOW_TYPE_in_classDecl6329_bits, 1 );

static	ANTLR_BITWORD FOLLOW_parameterList_in_classDecl6357_bits[]	= { ANTLR_UINT64_LIT(0x0000004000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_parameterList_in_classDecl6357( FOLLOW_parameterList_in_classDecl6357_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACE_in_classDecl6375_bits[]	= { ANTLR_UINT64_LIT(0x9A20A02040041210), ANTLR_UINT64_LIT(0x0000000000010003) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACE_in_classDecl6375( FOLLOW_LBRACE_in_classDecl6375_bits, 2 );

static	ANTLR_BITWORD FOLLOW_declaration_in_classDecl6418_bits[]	= { ANTLR_UINT64_LIT(0x0010000000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_declaration_in_classDecl6418( FOLLOW_declaration_in_classDecl6418_bits, 1 );

static	ANTLR_BITWORD FOLLOW_SEMICOLON_in_classDecl6422_bits[]	= { ANTLR_UINT64_LIT(0x9A20A02040041210), ANTLR_UINT64_LIT(0x0000000000010003) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SEMICOLON_in_classDecl6422( FOLLOW_SEMICOLON_in_classDecl6422_bits, 2 );

static	ANTLR_BITWORD FOLLOW_SYNCHRONIZED_in_classDecl6446_bits[]	= { ANTLR_UINT64_LIT(0x1220002040041200), ANTLR_UINT64_LIT(0x0000000000000003) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SYNCHRONIZED_in_classDecl6446( FOLLOW_SYNCHRONIZED_in_classDecl6446_bits, 2 );

static	ANTLR_BITWORD FOLLOW_declaration_in_classDecl6450_bits[]	= { ANTLR_UINT64_LIT(0x0010000000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_declaration_in_classDecl6450( FOLLOW_declaration_in_classDecl6450_bits, 1 );

static	ANTLR_BITWORD FOLLOW_SEMICOLON_in_classDecl6454_bits[]	= { ANTLR_UINT64_LIT(0x9A20A02040041210), ANTLR_UINT64_LIT(0x0000000000010003) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SEMICOLON_in_classDecl6454( FOLLOW_SEMICOLON_in_classDecl6454_bits, 2 );

static	ANTLR_BITWORD FOLLOW_inherited_declaration_in_classDecl6481_bits[]	= { ANTLR_UINT64_LIT(0x0010000000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_inherited_declaration_in_classDecl6481( FOLLOW_inherited_declaration_in_classDecl6481_bits, 1 );

static	ANTLR_BITWORD FOLLOW_SEMICOLON_in_classDecl6485_bits[]	= { ANTLR_UINT64_LIT(0x9A20A02040041210), ANTLR_UINT64_LIT(0x0000000000010003) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SEMICOLON_in_classDecl6485( FOLLOW_SEMICOLON_in_classDecl6485_bits, 2 );

static	ANTLR_BITWORD FOLLOW_SYNCHRONIZED_in_classDecl6509_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000010000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SYNCHRONIZED_in_classDecl6509( FOLLOW_SYNCHRONIZED_in_classDecl6509_bits, 2 );

static	ANTLR_BITWORD FOLLOW_inherited_declaration_in_classDecl6513_bits[]	= { ANTLR_UINT64_LIT(0x0010000000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_inherited_declaration_in_classDecl6513( FOLLOW_inherited_declaration_in_classDecl6513_bits, 1 );

static	ANTLR_BITWORD FOLLOW_SEMICOLON_in_classDecl6517_bits[]	= { ANTLR_UINT64_LIT(0x9A20A02040041210), ANTLR_UINT64_LIT(0x0000000000010003) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SEMICOLON_in_classDecl6517( FOLLOW_SEMICOLON_in_classDecl6517_bits, 2 );

static	ANTLR_BITWORD FOLLOW_function_in_classDecl6543_bits[]	= { ANTLR_UINT64_LIT(0x9A20A02040041210), ANTLR_UINT64_LIT(0x0000000000010003) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_function_in_classDecl6543( FOLLOW_function_in_classDecl6543_bits, 2 );

static	ANTLR_BITWORD FOLLOW_SYNCHRONIZED_in_classDecl6572_bits[]	= { ANTLR_UINT64_LIT(0x1220002040041200), ANTLR_UINT64_LIT(0x0000000000000003) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SYNCHRONIZED_in_classDecl6572( FOLLOW_SYNCHRONIZED_in_classDecl6572_bits, 2 );

static	ANTLR_BITWORD FOLLOW_function_in_classDecl6576_bits[]	= { ANTLR_UINT64_LIT(0x9A20A02040041210), ANTLR_UINT64_LIT(0x0000000000010003) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_function_in_classDecl6576( FOLLOW_function_in_classDecl6576_bits, 2 );

static	ANTLR_BITWORD FOLLOW_ACTION_in_classDecl6605_bits[]	= { ANTLR_UINT64_LIT(0x1220002040041200), ANTLR_UINT64_LIT(0x0000000000000003) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_ACTION_in_classDecl6605( FOLLOW_ACTION_in_classDecl6605_bits, 2 );

static	ANTLR_BITWORD FOLLOW_function_in_classDecl6609_bits[]	= { ANTLR_UINT64_LIT(0x9A20A02040041210), ANTLR_UINT64_LIT(0x0000000000010003) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_function_in_classDecl6609( FOLLOW_function_in_classDecl6609_bits, 2 );

static	ANTLR_BITWORD FOLLOW_VIRTUAL_in_classDecl6638_bits[]	= { ANTLR_UINT64_LIT(0x1220002040041200), ANTLR_UINT64_LIT(0x0000000000000003) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_VIRTUAL_in_classDecl6638( FOLLOW_VIRTUAL_in_classDecl6638_bits, 2 );

static	ANTLR_BITWORD FOLLOW_function_in_classDecl6642_bits[]	= { ANTLR_UINT64_LIT(0x9A20A02040041210), ANTLR_UINT64_LIT(0x0000000000010003) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_function_in_classDecl6642( FOLLOW_function_in_classDecl6642_bits, 2 );

static	ANTLR_BITWORD FOLLOW_SYNCHRONIZED_in_classDecl6668_bits[]	= { ANTLR_UINT64_LIT(0x8000000000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SYNCHRONIZED_in_classDecl6668( FOLLOW_SYNCHRONIZED_in_classDecl6668_bits, 1 );

static	ANTLR_BITWORD FOLLOW_VIRTUAL_in_classDecl6670_bits[]	= { ANTLR_UINT64_LIT(0x1220002040041200), ANTLR_UINT64_LIT(0x0000000000000003) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_VIRTUAL_in_classDecl6670( FOLLOW_VIRTUAL_in_classDecl6670_bits, 2 );

static	ANTLR_BITWORD FOLLOW_function_in_classDecl6674_bits[]	= { ANTLR_UINT64_LIT(0x9A20A02040041210), ANTLR_UINT64_LIT(0x0000000000010003) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_function_in_classDecl6674( FOLLOW_function_in_classDecl6674_bits, 2 );

static	ANTLR_BITWORD FOLLOW_ACTION_in_classDecl6700_bits[]	= { ANTLR_UINT64_LIT(0x8000000000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_ACTION_in_classDecl6700( FOLLOW_ACTION_in_classDecl6700_bits, 1 );

static	ANTLR_BITWORD FOLLOW_VIRTUAL_in_classDecl6702_bits[]	= { ANTLR_UINT64_LIT(0x1220002040041200), ANTLR_UINT64_LIT(0x0000000000000003) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_VIRTUAL_in_classDecl6702( FOLLOW_VIRTUAL_in_classDecl6702_bits, 2 );

static	ANTLR_BITWORD FOLLOW_function_in_classDecl6706_bits[]	= { ANTLR_UINT64_LIT(0x9A20A02040041210), ANTLR_UINT64_LIT(0x0000000000010003) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_function_in_classDecl6706( FOLLOW_function_in_classDecl6706_bits, 2 );

static	ANTLR_BITWORD FOLLOW_OVERRIDE_in_classDecl6732_bits[]	= { ANTLR_UINT64_LIT(0x1220002040041200), ANTLR_UINT64_LIT(0x0000000000000003) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_OVERRIDE_in_classDecl6732( FOLLOW_OVERRIDE_in_classDecl6732_bits, 2 );

static	ANTLR_BITWORD FOLLOW_function_in_classDecl6736_bits[]	= { ANTLR_UINT64_LIT(0x9A20A02040041210), ANTLR_UINT64_LIT(0x0000000000010003) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_function_in_classDecl6736( FOLLOW_function_in_classDecl6736_bits, 2 );

static	ANTLR_BITWORD FOLLOW_SYNCHRONIZED_in_classDecl6762_bits[]	= { ANTLR_UINT64_LIT(0x0000200000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SYNCHRONIZED_in_classDecl6762( FOLLOW_SYNCHRONIZED_in_classDecl6762_bits, 1 );

static	ANTLR_BITWORD FOLLOW_OVERRIDE_in_classDecl6764_bits[]	= { ANTLR_UINT64_LIT(0x1220002040041200), ANTLR_UINT64_LIT(0x0000000000000003) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_OVERRIDE_in_classDecl6764( FOLLOW_OVERRIDE_in_classDecl6764_bits, 2 );

static	ANTLR_BITWORD FOLLOW_function_in_classDecl6768_bits[]	= { ANTLR_UINT64_LIT(0x9A20A02040041210), ANTLR_UINT64_LIT(0x0000000000010003) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_function_in_classDecl6768( FOLLOW_function_in_classDecl6768_bits, 2 );

static	ANTLR_BITWORD FOLLOW_ACTION_in_classDecl6794_bits[]	= { ANTLR_UINT64_LIT(0x0000200000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_ACTION_in_classDecl6794( FOLLOW_ACTION_in_classDecl6794_bits, 1 );

static	ANTLR_BITWORD FOLLOW_OVERRIDE_in_classDecl6796_bits[]	= { ANTLR_UINT64_LIT(0x1220002040041200), ANTLR_UINT64_LIT(0x0000000000000003) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_OVERRIDE_in_classDecl6796( FOLLOW_OVERRIDE_in_classDecl6796_bits, 2 );

static	ANTLR_BITWORD FOLLOW_function_in_classDecl6800_bits[]	= { ANTLR_UINT64_LIT(0x9A20A02040041210), ANTLR_UINT64_LIT(0x0000000000010003) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_function_in_classDecl6800( FOLLOW_function_in_classDecl6800_bits, 2 );

static	ANTLR_BITWORD FOLLOW_RBRACE_in_classDecl6836_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACE_in_classDecl6836( FOLLOW_RBRACE_in_classDecl6836_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RESOURCE_in_topLevelRes6864_bits[]	= { ANTLR_UINT64_LIT(0x0000008000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RESOURCE_in_topLevelRes6864( FOLLOW_RESOURCE_in_topLevelRes6864_bits, 1 );

static	ANTLR_BITWORD FOLLOW_LBRACKET_in_topLevelRes6868_bits[]	= { ANTLR_UINT64_LIT(0x0100000000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_topLevelRes6868( FOLLOW_LBRACKET_in_topLevelRes6868_bits, 1 );

static	ANTLR_BITWORD FOLLOW_STRING_in_topLevelRes6872_bits[]	= { ANTLR_UINT64_LIT(0x0001000000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_STRING_in_topLevelRes6872( FOLLOW_STRING_in_topLevelRes6872_bits, 1 );

static	ANTLR_BITWORD FOLLOW_RBRACKET_in_topLevelRes6876_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_topLevelRes6876( FOLLOW_RBRACKET_in_topLevelRes6876_bits, 1 );

static	ANTLR_BITWORD FOLLOW_INCLUDE_in_inc6905_bits[]	= { ANTLR_UINT64_LIT(0x0100000000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_INCLUDE_in_inc6905( FOLLOW_INCLUDE_in_inc6905_bits, 1 );

static	ANTLR_BITWORD FOLLOW_STRING_in_inc6907_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_STRING_in_inc6907( FOLLOW_STRING_in_inc6907_bits, 1 );

static	ANTLR_BITWORD FOLLOW_inc_in_program6936_bits[]	= { ANTLR_UINT64_LIT(0x1622002840043222), ANTLR_UINT64_LIT(0x0000000000000003) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_inc_in_program6936( FOLLOW_inc_in_program6936_bits, 2 );

static	ANTLR_BITWORD FOLLOW_function_in_program6975_bits[]	= { ANTLR_UINT64_LIT(0x1622002040043222), ANTLR_UINT64_LIT(0x0000000000000003) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_function_in_program6975( FOLLOW_function_in_program6975_bits, 2 );

static	ANTLR_BITWORD FOLLOW_structDecl_in_program6997_bits[]	= { ANTLR_UINT64_LIT(0x1622002040043222), ANTLR_UINT64_LIT(0x0000000000000003) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_structDecl_in_program6997( FOLLOW_structDecl_in_program6997_bits, 2 );

static	ANTLR_BITWORD FOLLOW_classDecl_in_program7017_bits[]	= { ANTLR_UINT64_LIT(0x1622002040043222), ANTLR_UINT64_LIT(0x0000000000000003) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_classDecl_in_program7017( FOLLOW_classDecl_in_program7017_bits, 2 );

static	ANTLR_BITWORD FOLLOW_topLevelRes_in_program7038_bits[]	= { ANTLR_UINT64_LIT(0x1622002040043222), ANTLR_UINT64_LIT(0x0000000000000003) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_topLevelRes_in_program7038( FOLLOW_topLevelRes_in_program7038_bits, 2 );









scripting::type*
WNScriptASTParser::objectType()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::type* node;


    ImplTraits::CommonTokenType const* TYPE1 = NULL;






        node = nullptr;



    {
        {
            TYPE1 =  this->matchToken(TYPE, &FOLLOW_TYPE_in_objectType1376);
            if  (this->hasException())
            {
                goto ruleobjectTypeEx;
            }


            {
                 node = m_allocator->construct<scripting::type>(m_allocator, (TYPE1->getText()).c_str()); SET_LOCATION(node, TYPE1);
            }


        }

    }
    goto ruleobjectTypeEx;
    ruleobjectTypeEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::type*
WNScriptASTParser::scalarType()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::type* node;


    ImplTraits::CommonTokenType const* VOID_TYPE2 = NULL;
    ImplTraits::CommonTokenType const* INT_TYPE3 = NULL;
    ImplTraits::CommonTokenType const* FLOAT_TYPE4 = NULL;
    ImplTraits::CommonTokenType const* CHAR_TYPE5 = NULL;
    ImplTraits::CommonTokenType const* BOOL_TYPE6 = NULL;
    ImplTraits::CommonTokenType const* CPTR_TYPE7 = NULL;
    ImplTraits::CommonTokenType const* STRING_TYPE8 = NULL;






        node = nullptr;



    {
        {

            ANTLR_UINT32 alt1;

            alt1=7;

            switch ( this->LA(1) )
            {
            case VOID_TYPE:
            	{
            		alt1=1;
            	}
                break;
            case INT_TYPE:
            	{
            		alt1=2;
            	}
                break;
            case FLOAT_TYPE:
            	{
            		alt1=3;
            	}
                break;
            case CHAR_TYPE:
            	{
            		alt1=4;
            	}
                break;
            case BOOL_TYPE:
            	{
            		alt1=5;
            	}
                break;
            case CPTR_TYPE:
            	{
            		alt1=6;
            	}
                break;
            case STRING_TYPE:
            	{
            		alt1=7;
            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 1 );
                ex->set_state( 0 );


                goto rulescalarTypeEx;

            }

            switch (alt1)
            {
        	case 1:
        	    {
        	        VOID_TYPE2 =  this->matchToken(VOID_TYPE, &FOLLOW_VOID_TYPE_in_scalarType1408);
        	        if  (this->hasException())
        	        {
        	            goto rulescalarTypeEx;
        	        }


        	        {
        	             node = m_allocator->construct<scripting::type>(m_allocator, scripting::type_classification::void_type); SET_LOCATION(node, VOID_TYPE2);
        	        }


        	    }
        	    break;
        	case 2:
        	    {
        	        INT_TYPE3 =  this->matchToken(INT_TYPE, &FOLLOW_INT_TYPE_in_scalarType1420);
        	        if  (this->hasException())
        	        {
        	            goto rulescalarTypeEx;
        	        }


        	        {
        	             node = m_allocator->construct<scripting::type>(m_allocator, scripting::type_classification::int_type); SET_LOCATION(node, INT_TYPE3);
        	        }


        	    }
        	    break;
        	case 3:
        	    {
        	        FLOAT_TYPE4 =  this->matchToken(FLOAT_TYPE, &FOLLOW_FLOAT_TYPE_in_scalarType1432);
        	        if  (this->hasException())
        	        {
        	            goto rulescalarTypeEx;
        	        }


        	        {
        	             node = m_allocator->construct<scripting::type>(m_allocator, scripting::type_classification::float_type); SET_LOCATION(node, FLOAT_TYPE4);
        	        }


        	    }
        	    break;
        	case 4:
        	    {
        	        CHAR_TYPE5 =  this->matchToken(CHAR_TYPE, &FOLLOW_CHAR_TYPE_in_scalarType1444);
        	        if  (this->hasException())
        	        {
        	            goto rulescalarTypeEx;
        	        }


        	        {
        	             node = m_allocator->construct<scripting::type>(m_allocator, scripting::type_classification::char_type); SET_LOCATION(node, CHAR_TYPE5);
        	        }


        	    }
        	    break;
        	case 5:
        	    {
        	        BOOL_TYPE6 =  this->matchToken(BOOL_TYPE, &FOLLOW_BOOL_TYPE_in_scalarType1456);
        	        if  (this->hasException())
        	        {
        	            goto rulescalarTypeEx;
        	        }


        	        {
        	             node = m_allocator->construct<scripting::type>(m_allocator, scripting::type_classification::bool_type); SET_LOCATION(node, BOOL_TYPE6);
        	        }


        	    }
        	    break;
        	case 6:
        	    {
        	        CPTR_TYPE7 =  this->matchToken(CPTR_TYPE, &FOLLOW_CPTR_TYPE_in_scalarType1468);
        	        if  (this->hasException())
        	        {
        	            goto rulescalarTypeEx;
        	        }


        	        {
        	             node = m_allocator->construct<scripting::type>(m_allocator, scripting::type_classification::void_ptr_type); SET_LOCATION(node, CPTR_TYPE7);
        	        }


        	    }
        	    break;
        	case 7:
        	    {
        	        STRING_TYPE8 =  this->matchToken(STRING_TYPE, &FOLLOW_STRING_TYPE_in_scalarType1480);
        	        if  (this->hasException())
        	        {
        	            goto rulescalarTypeEx;
        	        }


        	        {
        	             node = m_allocator->construct<scripting::type>(m_allocator, scripting::type_classification::string_type); SET_LOCATION(node, STRING_TYPE8);
        	        }


        	    }
        	    break;

            }
        }
    }
    goto rulescalarTypeEx;
    rulescalarTypeEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::type*
WNScriptASTParser::arrayType()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::type* node;


    ImplTraits::CommonTokenType const* LSQBRACKET10 = NULL;
    ImplTraits::CommonTokenType const* RSQBRACKET12 = NULL;
    ImplTraits::CommonTokenType const* DLSQBRACKET13 = NULL;
    ImplTraits::CommonTokenType const* DRSQBRACKET14 = NULL;
    scripting::type* a;
    scripting::type* b;
    scripting::type* scalarType9;
    scripting::constant_expression* constant11;





        node = nullptr;
        scripting::reference_type rt = scripting::reference_type::raw;



    {
        {
            {
                int alt2=3;
                switch ( this->LA(1) )
                {
                case BOOL_TYPE:
                case CHAR_TYPE:
                case CPTR_TYPE:
                case FLOAT_TYPE:
                case INT_TYPE:
                case STRING_TYPE:
                case VOID_TYPE:
                	{
                		alt2=1;
                	}
                    break;
                case TYPE:
                	{
                		alt2=2;
                	}
                    break;
                case SHARED_REF:
                	{
                		alt2=3;
                	}
                    break;

                default:
                    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 2 );
                    ex->set_state( 0 );


                    goto rulearrayTypeEx;

                }

                switch (alt2)
                {
            	case 1:
            	    {
            	        this->followPush(FOLLOW_scalarType_in_arrayType1517);
            	        scalarType9=scalarType();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulearrayTypeEx;
            	        }


            	        {
            	             node = scalarType9
            	            ; SET_LOCATION_FROM_NODE(node, scalarType9
            	            );
            	        }


            	    }
            	    break;
            	case 2:
            	    {
            	        this->followPush(FOLLOW_objectType_in_arrayType1533);
            	        a=objectType();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulearrayTypeEx;
            	        }


            	        {
            	             node = a
            	            ; SET_LOCATION_FROM_NODE(node, a
            	            );
            	                        rt = scripting::reference_type::raw;
            	        }


            	    }
            	    break;
            	case 3:
            	    {
            	         this->matchToken(SHARED_REF, &FOLLOW_SHARED_REF_in_arrayType1547);
            	        if  (this->hasException())
            	        {
            	            goto rulearrayTypeEx;
            	        }


            	        this->followPush(FOLLOW_objectType_in_arrayType1551);
            	        b=objectType();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulearrayTypeEx;
            	        }


            	        {
            	             node = b
            	            ; SET_LOCATION_FROM_NODE(node, b
            	            );
            	                        rt = scripting::reference_type::shared;
            	        }


            	    }
            	    break;

                }
            }

            {
                int alt4=2;
                switch ( this->LA(1) )
                {
                case LSQBRACKET:
                	{
                		alt4=1;
                	}
                    break;
                case DLSQBRACKET:
                	{
                		alt4=2;
                	}
                    break;

                default:
                    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 4 );
                    ex->set_state( 0 );


                    goto rulearrayTypeEx;

                }

                switch (alt4)
                {
            	case 1:
            	    {
            	        {
            	            {
            	                LSQBRACKET10 =  this->matchToken(LSQBRACKET, &FOLLOW_LSQBRACKET_in_arrayType1585);
            	                if  (this->hasException())
            	                {
            	                    goto rulearrayTypeEx;
            	                }


            	                {
            	                     node->set_reference_type(rt); node = m_allocator->construct<scripting::array_type>(m_allocator, node); SET_LOCATION(node, LSQBRACKET10);
            	                }


            	            }


            	            {
            	                int alt3=2;
            	                switch ( this->LA(1) )
            	                {
            	                    case BOOL:
            	                    case BOOL_TYPE:
            	                    case CHAR:
            	                    case CHAR_TYPE:
            	                    case CPTR_TYPE:
            	                    case FLOAT:
            	                    case FLOAT_TYPE:
            	                    case INT:
            	                    case INT_TYPE:
            	                    case NULLTOK:
            	                    case STRING:
            	                    case STRING_TYPE:
            	                    case VOID_TYPE:
            	                    	{
            	                    		alt3=1;
            	                    	}
            	                        break;
            	                }

            	                switch (alt3)
            	                {
            	            	case 1:
            	            	    {
            	            	        this->followPush(FOLLOW_constant_in_arrayType1604);
            	            	        constant11=constant();

            	            	        this->followPop();
            	            	        if  (this->hasException())
            	            	        {
            	            	            goto rulearrayTypeEx;
            	            	        }


            	            	        {
            	            	             scripting::cast_to<scripting::array_type>(node)->set_constant(constant11
            	            	            );
            	            	        }


            	            	    }
            	            	    break;

            	                }
            	            }

            	            {
            	                RSQBRACKET12 =  this->matchToken(RSQBRACKET, &FOLLOW_RSQBRACKET_in_arrayType1626);
            	                if  (this->hasException())
            	                {
            	                    goto rulearrayTypeEx;
            	                }


            	                {
            	                     SET_END_LOCATION(node, RSQBRACKET12);
            	                }


            	            }


            	        }


            	    }
            	    break;
            	case 2:
            	    {
            	        {
            	            DLSQBRACKET13 =  this->matchToken(DLSQBRACKET, &FOLLOW_DLSQBRACKET_in_arrayType1655);
            	            if  (this->hasException())
            	            {
            	                goto rulearrayTypeEx;
            	            }


            	            DRSQBRACKET14 =  this->matchToken(DRSQBRACKET, &FOLLOW_DRSQBRACKET_in_arrayType1657);
            	            if  (this->hasException())
            	            {
            	                goto rulearrayTypeEx;
            	            }


            	            {
            	                 node->set_reference_type(rt); node = m_allocator->construct<scripting::runtime_array_type>(m_allocator, node); SET_LOCATION(node, DLSQBRACKET13); SET_END_LOCATION(node, DRSQBRACKET14);
            	            }


            	        }


            	    }
            	    break;

                }
            }

        }

    }
    goto rulearrayTypeEx;
    rulearrayTypeEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::type*
WNScriptASTParser::sliceType()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::type* node;


    ImplTraits::CommonTokenType const* b = NULL;
    ImplTraits::CommonTokenType const* c = NULL;
    ImplTraits::CommonTokenType const* d = NULL;
    ImplTraits::CommonTokenType const* INT15 = NULL;
    scripting::type* a;





        node = nullptr;



    {
        {
            {
                this->followPush(FOLLOW_scalarType_in_sliceType1707);
                a=scalarType();

                this->followPop();
                if  (this->hasException())
                {
                    goto rulesliceTypeEx;
                }


                {

                                node = a
                    ; SET_LOCATION_FROM_NODE(node, a
                    );
                                node = m_allocator->construct<scripting::slice_type>(m_allocator, node);
                                SET_LOCATION_FROM_NODE(node, a
                    );

                }


                {
                    int alt5=2;
                    switch ( this->LA(1) )
                    {
                    case SLICETOK:
                    	{
                    		alt5=1;
                    	}
                        break;
                    case SSOR:
                    	{
                    		alt5=2;
                    	}
                        break;

                    default:
                        ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                        ex->set_decisionNum( 5 );
                        ex->set_state( 0 );


                        goto rulesliceTypeEx;

                    }

                    switch (alt5)
                    {
                	case 1:
                	    {
                	        {
                	            b =  this->matchToken(SLICETOK, &FOLLOW_SLICETOK_in_sliceType1723);
                	            if  (this->hasException())
                	            {
                	                goto rulesliceTypeEx;
                	            }


                	            INT15 =  this->matchToken(INT, &FOLLOW_INT_in_sliceType1725);
                	            if  (this->hasException())
                	            {
                	                goto rulesliceTypeEx;
                	            }


                	            c =  this->matchToken(SLICETOK, &FOLLOW_SLICETOK_in_sliceType1729);
                	            if  (this->hasException())
                	            {
                	                goto rulesliceTypeEx;
                	            }


                	            {

                	                            scripting::cast_to<scripting::slice_type>(node)->set_dimensions((INT15->getText()).c_str());
                	                            SET_END_LOCATION(node, c);

                	            }


                	        }


                	    }
                	    break;
                	case 2:
                	    {
                	        {
                	            d =  this->matchToken(SSOR, &FOLLOW_SSOR_in_sliceType1748);
                	            if  (this->hasException())
                	            {
                	                goto rulesliceTypeEx;
                	            }


                	            {

                	                            SET_END_LOCATION(node, d);

                	            }


                	        }


                	    }
                	    break;

                    }
                }

            }


        }

    }
    goto rulesliceTypeEx;
    rulesliceTypeEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::type*
WNScriptASTParser::compoundType()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::type* node;


    scripting::type* objectType16;





        node = nullptr;



    {
        {
            this->followPush(FOLLOW_objectType_in_compoundType1783);
            objectType16=objectType();

            this->followPop();
            if  (this->hasException())
            {
                goto rulecompoundTypeEx;
            }


            {
                 node = objectType16
                ;
            }


        }

    }
    goto rulecompoundTypeEx;
    rulecompoundTypeEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::type*
WNScriptASTParser::nonArrayType()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::type* node;


    scripting::type* scalarType17;
    scripting::type* objectType18;





      node = nullptr;



    {
        {

            ANTLR_UINT32 alt6;

            alt6=2;

            switch ( this->LA(1) )
            {
            case BOOL_TYPE:
            case CHAR_TYPE:
            case CPTR_TYPE:
            case FLOAT_TYPE:
            case INT_TYPE:
            case STRING_TYPE:
            case VOID_TYPE:
            	{
            		alt6=1;
            	}
                break;
            case TYPE:
            	{
            		alt6=2;
            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 6 );
                ex->set_state( 0 );


                goto rulenonArrayTypeEx;

            }

            switch (alt6)
            {
        	case 1:
        	    {
        	        this->followPush(FOLLOW_scalarType_in_nonArrayType1810);
        	        scalarType17=scalarType();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulenonArrayTypeEx;
        	        }


        	        {
        	             node = scalarType17
        	            ;
        	        }


        	    }
        	    break;
        	case 2:
        	    {
        	        this->followPush(FOLLOW_objectType_in_nonArrayType1820);
        	        objectType18=objectType();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulenonArrayTypeEx;
        	        }


        	        {
        	             node = objectType18
        	            ;
        	        }


        	    }
        	    break;

            }
        }
    }
    goto rulenonArrayTypeEx;
    rulenonArrayTypeEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::type*
WNScriptASTParser::type()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::type* node;


    scripting::type* compoundType19;
    scripting::type* arrayType20;
    scripting::type* sliceType21;
    scripting::type* scalarType22;





        node = nullptr;



    {
        {

            ANTLR_UINT32 alt7;

            alt7=4;

            switch ( this->LA(1) )
            {
            case TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case EOF:
            			{
            				alt7=1;
            			}
            		    break;
            		case DLSQBRACKET:
            		case LSQBRACKET:
            			{
            				alt7=2;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 7 );
            		    ex->set_state( 1 );


            		    goto ruletypeEx;

            		}

            	}
                break;
            case VOID_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case DLSQBRACKET:
            		case LSQBRACKET:
            			{
            				alt7=2;
            			}
            		    break;
            		case SLICETOK:
            		case SSOR:
            			{
            				alt7=3;
            			}
            		    break;
            		case EOF:
            			{
            				alt7=4;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 7 );
            		    ex->set_state( 2 );


            		    goto ruletypeEx;

            		}

            	}
                break;
            case INT_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case DLSQBRACKET:
            		case LSQBRACKET:
            			{
            				alt7=2;
            			}
            		    break;
            		case SLICETOK:
            		case SSOR:
            			{
            				alt7=3;
            			}
            		    break;
            		case EOF:
            			{
            				alt7=4;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 7 );
            		    ex->set_state( 3 );


            		    goto ruletypeEx;

            		}

            	}
                break;
            case FLOAT_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case DLSQBRACKET:
            		case LSQBRACKET:
            			{
            				alt7=2;
            			}
            		    break;
            		case SLICETOK:
            		case SSOR:
            			{
            				alt7=3;
            			}
            		    break;
            		case EOF:
            			{
            				alt7=4;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 7 );
            		    ex->set_state( 4 );


            		    goto ruletypeEx;

            		}

            	}
                break;
            case CHAR_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case DLSQBRACKET:
            		case LSQBRACKET:
            			{
            				alt7=2;
            			}
            		    break;
            		case SLICETOK:
            		case SSOR:
            			{
            				alt7=3;
            			}
            		    break;
            		case EOF:
            			{
            				alt7=4;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 7 );
            		    ex->set_state( 5 );


            		    goto ruletypeEx;

            		}

            	}
                break;
            case BOOL_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case DLSQBRACKET:
            		case LSQBRACKET:
            			{
            				alt7=2;
            			}
            		    break;
            		case SLICETOK:
            		case SSOR:
            			{
            				alt7=3;
            			}
            		    break;
            		case EOF:
            			{
            				alt7=4;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 7 );
            		    ex->set_state( 6 );


            		    goto ruletypeEx;

            		}

            	}
                break;
            case CPTR_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case DLSQBRACKET:
            		case LSQBRACKET:
            			{
            				alt7=2;
            			}
            		    break;
            		case SLICETOK:
            		case SSOR:
            			{
            				alt7=3;
            			}
            		    break;
            		case EOF:
            			{
            				alt7=4;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 7 );
            		    ex->set_state( 7 );


            		    goto ruletypeEx;

            		}

            	}
                break;
            case STRING_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case DLSQBRACKET:
            		case LSQBRACKET:
            			{
            				alt7=2;
            			}
            		    break;
            		case SLICETOK:
            		case SSOR:
            			{
            				alt7=3;
            			}
            		    break;
            		case EOF:
            			{
            				alt7=4;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 7 );
            		    ex->set_state( 8 );


            		    goto ruletypeEx;

            		}

            	}
                break;
            case SHARED_REF:
            	{
            		alt7=2;
            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 7 );
                ex->set_state( 0 );


                goto ruletypeEx;

            }

            switch (alt7)
            {
        	case 1:
        	    {
        	        this->followPush(FOLLOW_compoundType_in_type1850);
        	        compoundType19=compoundType();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruletypeEx;
        	        }


        	        {
        	             node = compoundType19
        	            ;
        	        }


        	    }
        	    break;
        	case 2:
        	    {
        	        this->followPush(FOLLOW_arrayType_in_type1860);
        	        arrayType20=arrayType();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruletypeEx;
        	        }


        	        {
        	             node = arrayType20
        	            ;
        	        }


        	    }
        	    break;
        	case 3:
        	    {
        	        this->followPush(FOLLOW_sliceType_in_type1870);
        	        sliceType21=sliceType();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruletypeEx;
        	        }


        	        {
        	             node = sliceType21
        	            ;
        	        }


        	    }
        	    break;
        	case 4:
        	    {
        	        this->followPush(FOLLOW_scalarType_in_type1880);
        	        scalarType22=scalarType();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruletypeEx;
        	        }


        	        {
        	             node = scalarType22
        	            ;
        	        }


        	    }
        	    break;

            }
        }
    }
    goto ruletypeEx;
    ruletypeEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::parameter*
WNScriptASTParser::param()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::parameter* node;


    ImplTraits::CommonTokenType const* a = NULL;
    ImplTraits::CommonTokenType const* aa = NULL;
    ImplTraits::CommonTokenType const* dd = NULL;
    ImplTraits::CommonTokenType const* ff = NULL;
    ImplTraits::CommonTokenType const* c = NULL;
    ImplTraits::CommonTokenType const* e = NULL;
    ImplTraits::CommonTokenType const* g = NULL;
    ImplTraits::CommonTokenType const* SHARED_REF24 = NULL;
    ImplTraits::CommonTokenType const* WEAK_REF25 = NULL;
    scripting::type* bb;
    scripting::type* cc;
    scripting::type* ee;
    scripting::type* b;
    scripting::type* d;
    scripting::type* f;
    scripting::type* scalarType23;





        node = nullptr;



    {
        {

            ANTLR_UINT32 alt8;

            alt8=7;

            switch ( this->LA(1) )
            {
            case VOID_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case ID:
            			{
            				alt8=1;
            			}
            		    break;
            		case DLSQBRACKET:
            		case LSQBRACKET:
            			{
            				alt8=3;
            			}
            		    break;
            		case SLICETOK:
            		case SSOR:
            			{
            				alt8=4;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 8 );
            		    ex->set_state( 1 );


            		    goto ruleparamEx;

            		}

            	}
                break;
            case INT_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case ID:
            			{
            				alt8=1;
            			}
            		    break;
            		case DLSQBRACKET:
            		case LSQBRACKET:
            			{
            				alt8=3;
            			}
            		    break;
            		case SLICETOK:
            		case SSOR:
            			{
            				alt8=4;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 8 );
            		    ex->set_state( 2 );


            		    goto ruleparamEx;

            		}

            	}
                break;
            case FLOAT_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case ID:
            			{
            				alt8=1;
            			}
            		    break;
            		case DLSQBRACKET:
            		case LSQBRACKET:
            			{
            				alt8=3;
            			}
            		    break;
            		case SLICETOK:
            		case SSOR:
            			{
            				alt8=4;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 8 );
            		    ex->set_state( 3 );


            		    goto ruleparamEx;

            		}

            	}
                break;
            case CHAR_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case ID:
            			{
            				alt8=1;
            			}
            		    break;
            		case DLSQBRACKET:
            		case LSQBRACKET:
            			{
            				alt8=3;
            			}
            		    break;
            		case SLICETOK:
            		case SSOR:
            			{
            				alt8=4;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 8 );
            		    ex->set_state( 4 );


            		    goto ruleparamEx;

            		}

            	}
                break;
            case BOOL_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case ID:
            			{
            				alt8=1;
            			}
            		    break;
            		case DLSQBRACKET:
            		case LSQBRACKET:
            			{
            				alt8=3;
            			}
            		    break;
            		case SLICETOK:
            		case SSOR:
            			{
            				alt8=4;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 8 );
            		    ex->set_state( 5 );


            		    goto ruleparamEx;

            		}

            	}
                break;
            case CPTR_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case ID:
            			{
            				alt8=1;
            			}
            		    break;
            		case DLSQBRACKET:
            		case LSQBRACKET:
            			{
            				alt8=3;
            			}
            		    break;
            		case SLICETOK:
            		case SSOR:
            			{
            				alt8=4;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 8 );
            		    ex->set_state( 6 );


            		    goto ruleparamEx;

            		}

            	}
                break;
            case STRING_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case ID:
            			{
            				alt8=1;
            			}
            		    break;
            		case DLSQBRACKET:
            		case LSQBRACKET:
            			{
            				alt8=3;
            			}
            		    break;
            		case SLICETOK:
            		case SSOR:
            			{
            				alt8=4;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 8 );
            		    ex->set_state( 7 );


            		    goto ruleparamEx;

            		}

            	}
                break;
            case TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case ID:
            			{
            				alt8=2;
            			}
            		    break;
            		case DLSQBRACKET:
            		case LSQBRACKET:
            			{
            				alt8=3;
            			}
            		    break;
            		case QUESTION:
            			{
            				alt8=7;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 8 );
            		    ex->set_state( 8 );


            		    goto ruleparamEx;

            		}

            	}
                break;
            case SHARED_REF:
            	{
            		switch ( this->LA(2) )
            		{
            		case TYPE:
            			{
            				switch ( this->LA(3) )
            				{
            				case DLSQBRACKET:
            				case LSQBRACKET:
            					{
            						alt8=3;
            					}
            				    break;
            				case ID:
            					{
            						alt8=5;
            					}
            				    break;

            				default:
            				    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 8 );
            				    ex->set_state( 16 );


            				    goto ruleparamEx;

            				}

            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 8 );
            		    ex->set_state( 9 );


            		    goto ruleparamEx;

            		}

            	}
                break;
            case WEAK_REF:
            	{
            		alt8=6;
            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 8 );
                ex->set_state( 0 );


                goto ruleparamEx;

            }

            switch (alt8)
            {
        	case 1:
        	    {
        	        this->followPush(FOLLOW_scalarType_in_param1912);
        	        scalarType23=scalarType();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleparamEx;
        	        }


        	        a =  this->matchToken(ID, &FOLLOW_ID_in_param1916);
        	        if  (this->hasException())
        	        {
        	            goto ruleparamEx;
        	        }


        	        {

        	                        node = m_allocator->construct<scripting::parameter>(m_allocator, scalarType23
        	            , (a->getText()).c_str()); SET_LOCATION_FROM_NODE(node,
        	            scalarType23
        	            ); SET_END_LOCATION(node, a);
        	        }


        	    }
        	    break;
        	case 2:
        	    {
        	        this->followPush(FOLLOW_compoundType_in_param1931);
        	        bb=compoundType();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleparamEx;
        	        }


        	        aa =  this->matchToken(ID, &FOLLOW_ID_in_param1935);
        	        if  (this->hasException())
        	        {
        	            goto ruleparamEx;
        	        }


        	        {

        	                        bb
        	            ->set_reference_type(scripting::reference_type::unique);
        	                        node = m_allocator->construct<scripting::parameter>(m_allocator, bb
        	            , (aa->getText()).c_str()); SET_LOCATION_FROM_NODE(node,
        	            bb
        	            ); SET_END_LOCATION(node, aa);
        	        }


        	    }
        	    break;
        	case 3:
        	    {
        	        this->followPush(FOLLOW_arrayType_in_param1950);
        	        cc=arrayType();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleparamEx;
        	        }


        	        dd =  this->matchToken(ID, &FOLLOW_ID_in_param1954);
        	        if  (this->hasException())
        	        {
        	            goto ruleparamEx;
        	        }


        	        {

        	                        cc
        	            ->set_reference_type(scripting::reference_type::unique);
        	                        node = m_allocator->construct<scripting::parameter>(m_allocator, cc
        	            , (dd->getText()).c_str()); SET_LOCATION_FROM_NODE(node,
        	            cc
        	            ); SET_END_LOCATION(node, dd);
        	        }


        	    }
        	    break;
        	case 4:
        	    {
        	        this->followPush(FOLLOW_sliceType_in_param1969);
        	        ee=sliceType();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleparamEx;
        	        }


        	        ff =  this->matchToken(ID, &FOLLOW_ID_in_param1973);
        	        if  (this->hasException())
        	        {
        	            goto ruleparamEx;
        	        }


        	        {

        	                        ee
        	            ->set_reference_type(scripting::reference_type::raw);
        	                        node = m_allocator->construct<scripting::parameter>(m_allocator, ee
        	            , (ff->getText()).c_str()); SET_LOCATION_FROM_NODE(node,
        	            ee
        	            ); SET_END_LOCATION(node, ff);
        	        }


        	    }
        	    break;
        	case 5:
        	    {
        	        SHARED_REF24 =  this->matchToken(SHARED_REF, &FOLLOW_SHARED_REF_in_param1986);
        	        if  (this->hasException())
        	        {
        	            goto ruleparamEx;
        	        }


        	        this->followPush(FOLLOW_compoundType_in_param1990);
        	        b=compoundType();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleparamEx;
        	        }


        	        c =  this->matchToken(ID, &FOLLOW_ID_in_param1994);
        	        if  (this->hasException())
        	        {
        	            goto ruleparamEx;
        	        }


        	        {

        	                       b
        	            ->set_reference_type(scripting::reference_type::shared);
        	                       node = m_allocator->construct<scripting::parameter>(m_allocator, b
        	            , (c->getText()).c_str()); SET_LOCATION(node, SHARED_REF24); SET_END_LOCATION(node, c);

        	        }


        	    }
        	    break;
        	case 6:
        	    {
        	        WEAK_REF25 =  this->matchToken(WEAK_REF, &FOLLOW_WEAK_REF_in_param2007);
        	        if  (this->hasException())
        	        {
        	            goto ruleparamEx;
        	        }


        	        this->followPush(FOLLOW_compoundType_in_param2011);
        	        d=compoundType();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleparamEx;
        	        }


        	        e =  this->matchToken(ID, &FOLLOW_ID_in_param2016);
        	        if  (this->hasException())
        	        {
        	            goto ruleparamEx;
        	        }


        	        {

        	                       d
        	            ->set_reference_type(scripting::reference_type::weak);
        	                       node = m_allocator->construct<scripting::parameter>(m_allocator, d
        	            , (e->getText()).c_str()); SET_LOCATION(node, WEAK_REF25); SET_END_LOCATION(node, e);

        	        }


        	    }
        	    break;
        	case 7:
        	    {
        	        this->followPush(FOLLOW_compoundType_in_param2031);
        	        f=compoundType();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleparamEx;
        	        }


        	         this->matchToken(QUESTION, &FOLLOW_QUESTION_in_param2033);
        	        if  (this->hasException())
        	        {
        	            goto ruleparamEx;
        	        }


        	        g =  this->matchToken(ID, &FOLLOW_ID_in_param2038);
        	        if  (this->hasException())
        	        {
        	            goto ruleparamEx;
        	        }


        	        {

        	                       f
        	            ->set_reference_type(scripting::reference_type::nullable);
        	                       node = m_allocator->construct<scripting::parameter>(m_allocator, f
        	            , (g->getText()).c_str()); SET_LOCATION_FROM_NODE(node,
        	            f
        	            ); SET_END_LOCATION(node, g);

        	        }


        	    }
        	    break;

            }
        }
    }
    goto ruleparamEx;
    ruleparamEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::parameter_list*
WNScriptASTParser::paramList()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::parameter_list* node;


    scripting::parameter* a;
    scripting::parameter* b;





        node = nullptr;



    {
        {
            this->followPush(FOLLOW_param_in_paramList2070);
            a=param();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleparamListEx;
            }


            {
                 node = m_allocator->construct<scripting::parameter_list>(m_allocator, a
                ); SET_LOCATION_FROM_NODE(node, a
                );
            }



            for (;;)
            {
                int alt9=2;
                switch ( this->LA(1) )
                {
                case COMMA:
                	{
                		alt9=1;
                	}
                    break;

                }

                switch (alt9)
                {
            	case 1:
            	    {
            	         this->matchToken(COMMA, &FOLLOW_COMMA_in_paramList2083);
            	        if  (this->hasException())
            	        {
            	            goto ruleparamListEx;
            	        }


            	        this->followPush(FOLLOW_param_in_paramList2087);
            	        b=param();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleparamListEx;
            	        }


            	        {
            	             node
            	            ->add_parameter(b
            	            ); SET_END_LOCATION_FROM_NODE(node, b
            	            );
            	        }


            	    }
            	    break;

            	default:
            	    goto loop9;
            	    break;
                }
            }
            loop9: ;


        }

    }
    goto ruleparamListEx;
    ruleparamListEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::parameter_list*
WNScriptASTParser::parameterList()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::parameter_list* node;


    ImplTraits::CommonTokenType const* LBRACKET27 = NULL;
    ImplTraits::CommonTokenType const* RBRACKET28 = NULL;
    scripting::parameter_list* paramList26;





        node = nullptr;



    {
        {

            ANTLR_UINT32 alt10;

            alt10=2;

            switch ( this->LA(1) )
            {
            case LBRACKET:
            	{
            		switch ( this->LA(2) )
            		{
            		case RBRACKET:
            			{
            				alt10=2;
            			}
            		    break;
            		case BOOL_TYPE:
            		case CHAR_TYPE:
            		case CPTR_TYPE:
            		case FLOAT_TYPE:
            		case INT_TYPE:
            		case SHARED_REF:
            		case STRING_TYPE:
            		case TYPE:
            		case VOID_TYPE:
            		case WEAK_REF:
            			{
            				alt10=1;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 10 );
            		    ex->set_state( 1 );


            		    goto ruleparameterListEx;

            		}

            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 10 );
                ex->set_state( 0 );


                goto ruleparameterListEx;

            }

            switch (alt10)
            {
        	case 1:
        	    {
        	        LBRACKET27 =  this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_parameterList2119);
        	        if  (this->hasException())
        	        {
        	            goto ruleparameterListEx;
        	        }


        	        this->followPush(FOLLOW_paramList_in_parameterList2121);
        	        paramList26=paramList();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleparameterListEx;
        	        }


        	        RBRACKET28 =  this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_parameterList2123);
        	        if  (this->hasException())
        	        {
        	            goto ruleparameterListEx;
        	        }


        	        {
        	             node = paramList26
        	            ; SET_LOCATION(node, LBRACKET27); SET_END_LOCATION(node, RBRACKET28);
        	        }


        	    }
        	    break;
        	case 2:
        	    {
        	         this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_parameterList2140);
        	        if  (this->hasException())
        	        {
        	            goto ruleparameterListEx;
        	        }


        	         this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_parameterList2142);
        	        if  (this->hasException())
        	        {
        	            goto ruleparameterListEx;
        	        }


        	        {
        	             node = nullptr;
        	        }


        	    }
        	    break;

            }
        }
    }
    goto ruleparameterListEx;
    ruleparameterListEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::assign_type
WNScriptASTParser::assign_type()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::assign_type node;







        node = scripting::assign_type::equal;



    {
        {

            ANTLR_UINT32 alt11;

            alt11=6;

            switch ( this->LA(1) )
            {
            case 85:
            	{
            		alt11=1;
            	}
                break;
            case 77:
            	{
            		alt11=2;
            	}
                break;
            case 79:
            	{
            		alt11=3;
            	}
                break;
            case 75:
            	{
            		alt11=4;
            	}
                break;
            case 82:
            	{
            		alt11=5;
            	}
                break;
            case 71:
            	{
            		alt11=6;
            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 11 );
                ex->set_state( 0 );


                goto ruleassign_typeEx;

            }

            switch (alt11)
            {
        	case 1:
        	    {
        	         this->matchToken(85, &FOLLOW_85_in_assign_type2178);
        	        if  (this->hasException())
        	        {
        	            goto ruleassign_typeEx;
        	        }


        	        {
        	             node = scripting::assign_type::equal;
        	        }


        	    }
        	    break;
        	case 2:
        	    {
        	         this->matchToken(77, &FOLLOW_77_in_assign_type2192);
        	        if  (this->hasException())
        	        {
        	            goto ruleassign_typeEx;
        	        }


        	        {
        	             node = scripting::assign_type::add_equal;
        	        }


        	    }
        	    break;
        	case 3:
        	    {
        	         this->matchToken(79, &FOLLOW_79_in_assign_type2205);
        	        if  (this->hasException())
        	        {
        	            goto ruleassign_typeEx;
        	        }


        	        {
        	             node = scripting::assign_type::sub_equal;
        	        }


        	    }
        	    break;
        	case 4:
        	    {
        	         this->matchToken(75, &FOLLOW_75_in_assign_type2218);
        	        if  (this->hasException())
        	        {
        	            goto ruleassign_typeEx;
        	        }


        	        {
        	             node = scripting::assign_type::mult_equal;
        	        }


        	    }
        	    break;
        	case 5:
        	    {
        	         this->matchToken(82, &FOLLOW_82_in_assign_type2231);
        	        if  (this->hasException())
        	        {
        	            goto ruleassign_typeEx;
        	        }


        	        {
        	             node = scripting::assign_type::div_equal;
        	        }


        	    }
        	    break;
        	case 6:
        	    {
        	         this->matchToken(71, &FOLLOW_71_in_assign_type2244);
        	        if  (this->hasException())
        	        {
        	            goto ruleassign_typeEx;
        	        }


        	        {
        	             node = scripting::assign_type::mod_equal;
        	        }


        	    }
        	    break;

            }
        }
    }
    goto ruleassign_typeEx;
    ruleassign_typeEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::arg_list*
WNScriptASTParser::arglist()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::arg_list* node;


    scripting::expression* a;
    scripting::expression* d;





        node = m_allocator->construct<scripting::arg_list>(m_allocator);



    {
        {
            {
                {
                    this->followPush(FOLLOW_expr_in_arglist2302);
                    a=expr();

                    this->followPop();
                    if  (this->hasException())
                    {
                        goto rulearglistEx;
                    }


                    {
                         node->add_expression(a
                        ); SET_LOCATION_FROM_NODE(node, a
                        );
                    }


                }


            }



            for (;;)
            {
                int alt13=2;
                switch ( this->LA(1) )
                {
                case COMMA:
                	{
                		alt13=1;
                	}
                    break;

                }

                switch (alt13)
                {
            	case 1:
            	    {
            	         this->matchToken(COMMA, &FOLLOW_COMMA_in_arglist2335);
            	        if  (this->hasException())
            	        {
            	            goto rulearglistEx;
            	        }


            	        {
            	            int alt12=2;
            	            switch ( this->LA(1) )
            	            {
            	            case BOOL:
            	            case BOOL_TYPE:
            	            case CHAR:
            	            case CHAR_TYPE:
            	            case CPTR_TYPE:
            	            case DOUBDEC:
            	            case DOUBINC:
            	            case FLOAT:
            	            case FLOAT_TYPE:
            	            case ID:
            	            case INT:
            	            case INT_TYPE:
            	            case LBRACKET:
            	            case LENGTH:
            	            case NULLTOK:
            	            case RESOURCE:
            	            case SHARED_REF:
            	            case STRING:
            	            case STRING_TYPE:
            	            case TYPE:
            	            case VOID_TYPE:
            	            case 68:
            	            case 78:
            	            	{
            	            		alt12=1;
            	            	}
            	                break;
            	            case COMMA:
            	            case RBRACKET:
            	            	{
            	            		alt12=2;
            	            	}
            	                break;

            	            default:
            	                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            	                ex->set_decisionNum( 12 );
            	                ex->set_state( 0 );


            	                goto rulearglistEx;

            	            }

            	            switch (alt12)
            	            {
            	        	case 1:
            	        	    {
            	        	        {
            	        	            this->followPush(FOLLOW_expr_in_arglist2379);
            	        	            d=expr();

            	        	            this->followPop();
            	        	            if  (this->hasException())
            	        	            {
            	        	                goto rulearglistEx;
            	        	            }


            	        	            {
            	        	                 node->add_expression(d
            	        	                , true); SET_END_LOCATION_FROM_NODE(node, d
            	        	                );
            	        	            }


            	        	        }


            	        	    }
            	        	    break;
            	        	case 2:
            	        	    {
            	        	    }
            	        	    break;

            	            }
            	        }

            	    }
            	    break;

            	default:
            	    goto loop13;
            	    break;
                }
            }
            loop13: ;


        }

    }
    goto rulearglistEx;
    rulearglistEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::expression*
WNScriptASTParser::expr()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::expression* node;


    scripting::expression* cond_ex29;





        node = nullptr;



    {
        {
            this->followPush(FOLLOW_cond_ex_in_expr2454);
            cond_ex29=cond_ex();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleexprEx;
            }


            {
                 node = cond_ex29
                ;
            }


        }

    }
    goto ruleexprEx;
    ruleexprEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::expression*
WNScriptASTParser::cond_ex()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::expression* node;


    scripting::expression* b;
    scripting::expression* c;
    scripting::expression* or_ex30;





        node = nullptr;



    {
        {
            this->followPush(FOLLOW_or_ex_in_cond_ex2492);
            or_ex30=or_ex();

            this->followPop();
            if  (this->hasException())
            {
                goto rulecond_exEx;
            }


            {
                 node = or_ex30
                ;
            }


            {
                int alt14=2;
                switch ( this->LA(1) )
                {
                    case QUESTION:
                    	{
                    		alt14=1;
                    	}
                        break;
                }

                switch (alt14)
                {
            	case 1:
            	    {
            	         this->matchToken(QUESTION, &FOLLOW_QUESTION_in_cond_ex2515);
            	        if  (this->hasException())
            	        {
            	            goto rulecond_exEx;
            	        }


            	        this->followPush(FOLLOW_expr_in_cond_ex2519);
            	        b=expr();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulecond_exEx;
            	        }


            	         this->matchToken(COLON, &FOLLOW_COLON_in_cond_ex2521);
            	        if  (this->hasException())
            	        {
            	            goto rulecond_exEx;
            	        }


            	        this->followPush(FOLLOW_cond_ex_in_cond_ex2525);
            	        c=cond_ex();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulecond_exEx;
            	        }


            	        {
            	             node = m_allocator->construct<scripting::cond_expression>(m_allocator, node, b
            	            , c
            	            );  SET_LOCATION_FROM_NODE(node, or_ex30
            	            ); SET_END_LOCATION_FROM_NODE(node, c
            	            );
            	        }


            	    }
            	    break;

                }
            }

        }

    }
    goto rulecond_exEx;
    rulecond_exEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::expression*
WNScriptASTParser::or_ex()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::expression* node;


    scripting::expression* a;
    scripting::expression* b;





        node = nullptr;



    {
        {
            this->followPush(FOLLOW_and_ex_in_or_ex2572);
            a=and_ex();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleor_exEx;
            }


            {
                 node = a
                ;
            }



            for (;;)
            {
                int alt15=2;
                switch ( this->LA(1) )
                {
                case SSOR:
                	{
                		alt15=1;
                	}
                    break;

                }

                switch (alt15)
                {
            	case 1:
            	    {
            	         this->matchToken(SSOR, &FOLLOW_SSOR_in_or_ex2589);
            	        if  (this->hasException())
            	        {
            	            goto ruleor_exEx;
            	        }


            	        this->followPush(FOLLOW_and_ex_in_or_ex2593);
            	        b=and_ex();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleor_exEx;
            	        }


            	        {
            	             node = m_allocator->construct<scripting::short_circuit_expression>(m_allocator, scripting::short_circuit_type::or_operator, node, b
            	            ); SET_LOCATION_FROM_NODE(node, a
            	            ); SET_END_LOCATION_FROM_NODE(node, b
            	            );
            	        }


            	    }
            	    break;

            	default:
            	    goto loop15;
            	    break;
                }
            }
            loop15: ;


        }

    }
    goto ruleor_exEx;
    ruleor_exEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::expression*
WNScriptASTParser::and_ex()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::expression* node;


    scripting::expression* a;
    scripting::expression* b;





        node = nullptr;



    {
        {
            this->followPush(FOLLOW_bit_or_ex_in_and_ex2636);
            a=bit_or_ex();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleand_exEx;
            }


            {
                 node = a
                ;
            }



            for (;;)
            {
                int alt16=2;
                switch ( this->LA(1) )
                {
                case 72:
                	{
                		alt16=1;
                	}
                    break;

                }

                switch (alt16)
                {
            	case 1:
            	    {
            	         this->matchToken(72, &FOLLOW_72_in_and_ex2653);
            	        if  (this->hasException())
            	        {
            	            goto ruleand_exEx;
            	        }


            	        this->followPush(FOLLOW_bit_or_ex_in_and_ex2657);
            	        b=bit_or_ex();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleand_exEx;
            	        }


            	        {
            	            node = m_allocator->construct<scripting::short_circuit_expression>(m_allocator, scripting::short_circuit_type::and_operator, node, b
            	            ); SET_LOCATION_FROM_NODE(node, a
            	            ); SET_END_LOCATION_FROM_NODE(node, b
            	            );
            	        }


            	    }
            	    break;

            	default:
            	    goto loop16;
            	    break;
                }
            }
            loop16: ;


        }

    }
    goto ruleand_exEx;
    ruleand_exEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::expression*
WNScriptASTParser::bit_or_ex()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::expression* node;


    scripting::expression* a;
    scripting::expression* b;





        node = nullptr;



    {
        {
            this->followPush(FOLLOW_bit_xor_ex_in_bit_or_ex2691);
            a=bit_xor_ex();

            this->followPop();
            if  (this->hasException())
            {
                goto rulebit_or_exEx;
            }


            {
                 node = a
                ;
            }



            for (;;)
            {
                int alt17=2;
                switch ( this->LA(1) )
                {
                case SLICETOK:
                	{
                		alt17=1;
                	}
                    break;

                }

                switch (alt17)
                {
            	case 1:
            	    {
            	         this->matchToken(SLICETOK, &FOLLOW_SLICETOK_in_bit_or_ex2708);
            	        if  (this->hasException())
            	        {
            	            goto rulebit_or_exEx;
            	        }


            	        this->followPush(FOLLOW_bit_xor_ex_in_bit_or_ex2712);
            	        b=bit_xor_ex();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulebit_or_exEx;
            	        }


            	        {
            	            node = m_allocator->construct<scripting::binary_expression>(m_allocator, scripting::arithmetic_type::arithmetic_or, node, b
            	            );  SET_LOCATION_FROM_NODE(node, a
            	            ); SET_END_LOCATION_FROM_NODE(node, b
            	            );
            	        }


            	    }
            	    break;

            	default:
            	    goto loop17;
            	    break;
                }
            }
            loop17: ;


        }

    }
    goto rulebit_or_exEx;
    rulebit_or_exEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::expression*
WNScriptASTParser::bit_xor_ex()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::expression* node;


    scripting::expression* a;
    scripting::expression* b;





        node = nullptr;



    {
        {
            this->followPush(FOLLOW_bit_and_ex_in_bit_xor_ex2747);
            a=bit_and_ex();

            this->followPop();
            if  (this->hasException())
            {
                goto rulebit_xor_exEx;
            }


            {
                 node = a
                ;
            }



            for (;;)
            {
                int alt18=2;
                switch ( this->LA(1) )
                {
                case 89:
                	{
                		alt18=1;
                	}
                    break;

                }

                switch (alt18)
                {
            	case 1:
            	    {
            	         this->matchToken(89, &FOLLOW_89_in_bit_xor_ex2764);
            	        if  (this->hasException())
            	        {
            	            goto rulebit_xor_exEx;
            	        }


            	        this->followPush(FOLLOW_bit_and_ex_in_bit_xor_ex2768);
            	        b=bit_and_ex();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulebit_xor_exEx;
            	        }


            	        {
            	            node = m_allocator->construct<scripting::binary_expression>(m_allocator, scripting::arithmetic_type::arithmetic_xor, node, b
            	            );  SET_LOCATION_FROM_NODE(node, a
            	            ); SET_END_LOCATION_FROM_NODE(node, b
            	            );
            	        }


            	    }
            	    break;

            	default:
            	    goto loop18;
            	    break;
                }
            }
            loop18: ;


        }

    }
    goto rulebit_xor_exEx;
    rulebit_xor_exEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::expression*
WNScriptASTParser::bit_and_ex()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::expression* node;


    scripting::expression* a;
    scripting::expression* b;





        node = nullptr;



    {
        {
            this->followPush(FOLLOW_eq_ex_in_bit_and_ex2803);
            a=eq_ex();

            this->followPop();
            if  (this->hasException())
            {
                goto rulebit_and_exEx;
            }


            {
                 node = a
                ;
            }



            for (;;)
            {
                int alt19=2;
                switch ( this->LA(1) )
                {
                case 73:
                	{
                		alt19=1;
                	}
                    break;

                }

                switch (alt19)
                {
            	case 1:
            	    {
            	         this->matchToken(73, &FOLLOW_73_in_bit_and_ex2820);
            	        if  (this->hasException())
            	        {
            	            goto rulebit_and_exEx;
            	        }


            	        this->followPush(FOLLOW_eq_ex_in_bit_and_ex2824);
            	        b=eq_ex();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulebit_and_exEx;
            	        }


            	        {
            	            node = m_allocator->construct<scripting::binary_expression>(m_allocator, scripting::arithmetic_type::arithmetic_and, node, b
            	            );  SET_LOCATION_FROM_NODE(node, a
            	            ); SET_END_LOCATION_FROM_NODE(node, b
            	            );
            	        }


            	    }
            	    break;

            	default:
            	    goto loop19;
            	    break;
                }
            }
            loop19: ;


        }

    }
    goto rulebit_and_exEx;
    rulebit_and_exEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::expression*
WNScriptASTParser::eq_ex()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::expression* node;


    scripting::expression* a;
    scripting::expression* b;
    scripting::expression* c;





        node = nullptr;



    {
        {
            this->followPush(FOLLOW_rel_ex_in_eq_ex2862);
            a=rel_ex();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleeq_exEx;
            }


            {
                 node = a
                ;
            }



            for (;;)
            {
                int alt20=3;
                switch ( this->LA(1) )
                {
                case 86:
                	{
                		alt20=1;
                	}
                    break;
                case 69:
                	{
                		alt20=2;
                	}
                    break;

                }

                switch (alt20)
                {
            	case 1:
            	    {
            	        {
            	             this->matchToken(86, &FOLLOW_86_in_eq_ex2897);
            	            if  (this->hasException())
            	            {
            	                goto ruleeq_exEx;
            	            }


            	            this->followPush(FOLLOW_rel_ex_in_eq_ex2901);
            	            b=rel_ex();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleeq_exEx;
            	            }


            	            {
            	                node = m_allocator->construct<scripting::binary_expression>(m_allocator, scripting::arithmetic_type::arithmetic_equal, node, b
            	                );  SET_LOCATION_FROM_NODE(node, a
            	                ); SET_END_LOCATION_FROM_NODE(node, b
            	                );
            	            }


            	        }


            	    }
            	    break;
            	case 2:
            	    {
            	        {
            	             this->matchToken(69, &FOLLOW_69_in_eq_ex2924);
            	            if  (this->hasException())
            	            {
            	                goto ruleeq_exEx;
            	            }


            	            this->followPush(FOLLOW_rel_ex_in_eq_ex2928);
            	            c=rel_ex();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleeq_exEx;
            	            }


            	            {
            	                node = m_allocator->construct<scripting::binary_expression>(m_allocator, scripting::arithmetic_type::arithmetic_not_equal, node, c
            	                ); SET_LOCATION_FROM_NODE(node, a
            	                ); SET_END_LOCATION_FROM_NODE(node, c
            	                );
            	            }


            	        }


            	    }
            	    break;

            	default:
            	    goto loop20;
            	    break;
                }
            }
            loop20: ;


        }

    }
    goto ruleeq_exEx;
    ruleeq_exEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::expression*
WNScriptASTParser::rel_ex()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::expression* node;


    scripting::expression* a;
    scripting::expression* b;
    scripting::expression* c;
    scripting::expression* d;
    scripting::expression* e;





        node = nullptr;



    {
        {
            this->followPush(FOLLOW_add_ex_in_rel_ex2986);
            a=add_ex();

            this->followPop();
            if  (this->hasException())
            {
                goto rulerel_exEx;
            }


            {
                 node=a
                ;
            }



            for (;;)
            {
                int alt21=5;
                switch ( this->LA(1) )
                {
                case 83:
                	{
                		alt21=1;
                	}
                    break;
                case 87:
                	{
                		alt21=2;
                	}
                    break;
                case 84:
                	{
                		alt21=3;
                	}
                    break;
                case 88:
                	{
                		alt21=4;
                	}
                    break;

                }

                switch (alt21)
                {
            	case 1:
            	    {
            	        {
            	             this->matchToken(83, &FOLLOW_83_in_rel_ex3022);
            	            if  (this->hasException())
            	            {
            	                goto rulerel_exEx;
            	            }


            	            this->followPush(FOLLOW_add_ex_in_rel_ex3026);
            	            b=add_ex();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulerel_exEx;
            	            }


            	            {
            	                node = m_allocator->construct<scripting::binary_expression>(m_allocator, scripting::arithmetic_type::arithmetic_less_than, node, b
            	                );   SET_LOCATION_FROM_NODE(node, a
            	                ); SET_END_LOCATION_FROM_NODE(node, b
            	                );
            	            }


            	        }


            	    }
            	    break;
            	case 2:
            	    {
            	        {
            	             this->matchToken(87, &FOLLOW_87_in_rel_ex3050);
            	            if  (this->hasException())
            	            {
            	                goto rulerel_exEx;
            	            }


            	            this->followPush(FOLLOW_add_ex_in_rel_ex3054);
            	            c=add_ex();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulerel_exEx;
            	            }


            	            {
            	                node = m_allocator->construct<scripting::binary_expression>(m_allocator, scripting::arithmetic_type::arithmetic_greater_than, node, c
            	                );   SET_LOCATION_FROM_NODE(node, a
            	                ); SET_END_LOCATION_FROM_NODE(node, c
            	                );
            	            }


            	        }


            	    }
            	    break;
            	case 3:
            	    {
            	        {
            	             this->matchToken(84, &FOLLOW_84_in_rel_ex3078);
            	            if  (this->hasException())
            	            {
            	                goto rulerel_exEx;
            	            }


            	            this->followPush(FOLLOW_add_ex_in_rel_ex3082);
            	            d=add_ex();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulerel_exEx;
            	            }


            	            {
            	                node = m_allocator->construct<scripting::binary_expression>(m_allocator, scripting::arithmetic_type::arithmetic_less_than_or_equal, node, d
            	                );   SET_LOCATION_FROM_NODE(node, a
            	                ); SET_END_LOCATION_FROM_NODE(node, d
            	                );
            	            }


            	        }


            	    }
            	    break;
            	case 4:
            	    {
            	        {
            	             this->matchToken(88, &FOLLOW_88_in_rel_ex3106);
            	            if  (this->hasException())
            	            {
            	                goto rulerel_exEx;
            	            }


            	            this->followPush(FOLLOW_add_ex_in_rel_ex3110);
            	            e=add_ex();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulerel_exEx;
            	            }


            	            {
            	                node = m_allocator->construct<scripting::binary_expression>(m_allocator, scripting::arithmetic_type::arithmetic_greater_than_or_equal, node, e
            	                );   SET_LOCATION_FROM_NODE(node, a
            	                ); SET_END_LOCATION_FROM_NODE(node, e
            	                );
            	            }


            	        }


            	    }
            	    break;

            	default:
            	    goto loop21;
            	    break;
                }
            }
            loop21: ;


        }

    }
    goto rulerel_exEx;
    rulerel_exEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::expression*
WNScriptASTParser::add_ex()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::expression* node;


    scripting::expression* a;
    scripting::expression* b;
    scripting::expression* c;





        node = nullptr;



    {
        {
            this->followPush(FOLLOW_mult_ex_in_add_ex3171);
            a=mult_ex();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleadd_exEx;
            }


            {
                node = a
                ;
            }



            for (;;)
            {
                int alt22=3;
                switch ( this->LA(1) )
                {
                case 76:
                	{
                		alt22=1;
                	}
                    break;
                case 78:
                	{
                		alt22=2;
                	}
                    break;

                }

                switch (alt22)
                {
            	case 1:
            	    {
            	        {
            	             this->matchToken(76, &FOLLOW_76_in_add_ex3206);
            	            if  (this->hasException())
            	            {
            	                goto ruleadd_exEx;
            	            }


            	            this->followPush(FOLLOW_mult_ex_in_add_ex3210);
            	            b=mult_ex();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleadd_exEx;
            	            }


            	            {
            	                node = m_allocator->construct<scripting::binary_expression>(m_allocator, scripting::arithmetic_type::arithmetic_add, node, b
            	                );   SET_LOCATION_FROM_NODE(node, a
            	                ); SET_END_LOCATION_FROM_NODE(node, b
            	                );
            	            }


            	        }


            	    }
            	    break;
            	case 2:
            	    {
            	        {
            	             this->matchToken(78, &FOLLOW_78_in_add_ex3232);
            	            if  (this->hasException())
            	            {
            	                goto ruleadd_exEx;
            	            }


            	            this->followPush(FOLLOW_mult_ex_in_add_ex3236);
            	            c=mult_ex();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleadd_exEx;
            	            }


            	            {
            	                node = m_allocator->construct<scripting::binary_expression>(m_allocator, scripting::arithmetic_type::arithmetic_sub, node, c
            	                );   SET_LOCATION_FROM_NODE(node, a
            	                ); SET_END_LOCATION_FROM_NODE(node, c
            	                );
            	            }


            	        }


            	    }
            	    break;

            	default:
            	    goto loop22;
            	    break;
                }
            }
            loop22: ;


        }

    }
    goto ruleadd_exEx;
    ruleadd_exEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::expression*
WNScriptASTParser::mult_ex()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::expression* node;


    scripting::expression* a;
    scripting::expression* b;
    scripting::expression* c;
    scripting::expression* d;





        node = nullptr;



    {
        {
            this->followPush(FOLLOW_unary_ex_in_mult_ex3295);
            a=unary_ex();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemult_exEx;
            }


            {
                 node = a
                ;
            }



            for (;;)
            {
                int alt23=4;
                switch ( this->LA(1) )
                {
                case 74:
                	{
                		alt23=1;
                	}
                    break;
                case 81:
                	{
                		alt23=2;
                	}
                    break;
                case 70:
                	{
                		alt23=3;
                	}
                    break;

                }

                switch (alt23)
                {
            	case 1:
            	    {
            	        {
            	             this->matchToken(74, &FOLLOW_74_in_mult_ex3334);
            	            if  (this->hasException())
            	            {
            	                goto rulemult_exEx;
            	            }


            	            this->followPush(FOLLOW_unary_ex_in_mult_ex3338);
            	            b=unary_ex();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulemult_exEx;
            	            }


            	            {
            	                node = m_allocator->construct<scripting::binary_expression>(m_allocator, scripting::arithmetic_type::arithmetic_mult, node, b
            	                );   SET_LOCATION_FROM_NODE(node, a
            	                ); SET_END_LOCATION_FROM_NODE(node, b
            	                );
            	            }


            	        }


            	    }
            	    break;
            	case 2:
            	    {
            	        {
            	             this->matchToken(81, &FOLLOW_81_in_mult_ex3364);
            	            if  (this->hasException())
            	            {
            	                goto rulemult_exEx;
            	            }


            	            this->followPush(FOLLOW_unary_ex_in_mult_ex3368);
            	            c=unary_ex();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulemult_exEx;
            	            }


            	            {
            	                node = m_allocator->construct<scripting::binary_expression>(m_allocator, scripting::arithmetic_type::arithmetic_div, node, c
            	                );   SET_LOCATION_FROM_NODE(node, a
            	                ); SET_END_LOCATION_FROM_NODE(node, c
            	                );
            	            }


            	        }


            	    }
            	    break;
            	case 3:
            	    {
            	        {
            	             this->matchToken(70, &FOLLOW_70_in_mult_ex3394);
            	            if  (this->hasException())
            	            {
            	                goto rulemult_exEx;
            	            }


            	            this->followPush(FOLLOW_unary_ex_in_mult_ex3398);
            	            d=unary_ex();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulemult_exEx;
            	            }


            	            {
            	                node = m_allocator->construct<scripting::binary_expression>(m_allocator, scripting::arithmetic_type::arithmetic_mod, node, d
            	                );   SET_LOCATION_FROM_NODE(node, a
            	                ); SET_END_LOCATION_FROM_NODE(node, d
            	                );
            	            }


            	        }


            	    }
            	    break;

            	default:
            	    goto loop23;
            	    break;
                }
            }
            loop23: ;


        }

    }
    goto rulemult_exEx;
    rulemult_exEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::expression*
WNScriptASTParser::unary_ex()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::expression* node;


    scripting::expression* a;
    scripting::expression* b;
    scripting::expression* c;
    scripting::expression* d;





        node = nullptr;



    {
        {

            ANTLR_UINT32 alt24;

            alt24=5;

            switch ( this->LA(1) )
            {
            case BOOL:
            case BOOL_TYPE:
            case CHAR:
            case CHAR_TYPE:
            case CPTR_TYPE:
            case FLOAT:
            case FLOAT_TYPE:
            case ID:
            case INT:
            case INT_TYPE:
            case LBRACKET:
            case LENGTH:
            case NULLTOK:
            case RESOURCE:
            case SHARED_REF:
            case STRING:
            case STRING_TYPE:
            case TYPE:
            case VOID_TYPE:
            	{
            		alt24=1;
            	}
                break;
            case DOUBINC:
            	{
            		alt24=2;
            	}
                break;
            case DOUBDEC:
            	{
            		alt24=3;
            	}
                break;
            case 78:
            	{
            		alt24=4;
            	}
                break;
            case 68:
            	{
            		alt24=5;
            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 24 );
                ex->set_state( 0 );


                goto ruleunary_exEx;

            }

            switch (alt24)
            {
        	case 1:
        	    {
        	        this->followPush(FOLLOW_post_ex_in_unary_ex3450);
        	        a=post_ex();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleunary_exEx;
        	        }


        	        {
        	             node = a
        	            ;
        	        }


        	    }
        	    break;
        	case 2:
        	    {
        	         this->matchToken(DOUBINC, &FOLLOW_DOUBINC_in_unary_ex3463);
        	        if  (this->hasException())
        	        {
        	            goto ruleunary_exEx;
        	        }


        	        this->followPush(FOLLOW_unary_ex_in_unary_ex3467);
        	        b=unary_ex();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleunary_exEx;
        	        }


        	        {
        	             scripting::node* t = node; node = m_allocator->construct<scripting::unary_expression>(m_allocator, scripting::unary_type::pre_increment, b
        	            );   SET_LOCATION_FROM_NODE(node, t); SET_END_LOCATION_FROM_NODE(node, b
        	            );
        	        }


        	    }
        	    break;
        	case 3:
        	    {
        	         this->matchToken(DOUBDEC, &FOLLOW_DOUBDEC_in_unary_ex3480);
        	        if  (this->hasException())
        	        {
        	            goto ruleunary_exEx;
        	        }


        	        this->followPush(FOLLOW_unary_ex_in_unary_ex3484);
        	        c=unary_ex();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleunary_exEx;
        	        }


        	        {
        	             scripting::node* t = node; node = m_allocator->construct<scripting::unary_expression>(m_allocator, scripting::unary_type::pre_decrement, c
        	            );   SET_LOCATION_FROM_NODE(node, t); SET_END_LOCATION_FROM_NODE(node, c
        	            );
        	        }


        	    }
        	    break;
        	case 4:
        	    {
        	         this->matchToken(78, &FOLLOW_78_in_unary_ex3497);
        	        if  (this->hasException())
        	        {
        	            goto ruleunary_exEx;
        	        }


        	        this->followPush(FOLLOW_unary_ex_in_unary_ex3501);
        	        d=unary_ex();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleunary_exEx;
        	        }


        	        {
        	             scripting::node* t = node; node = m_allocator->construct<scripting::unary_expression>(m_allocator, scripting::unary_type::negation, d
        	            );   SET_LOCATION_FROM_NODE(node, t); SET_END_LOCATION_FROM_NODE(node, d
        	            );
        	        }


        	    }
        	    break;
        	case 5:
        	    {
        	         this->matchToken(68, &FOLLOW_68_in_unary_ex3515);
        	        if  (this->hasException())
        	        {
        	            goto ruleunary_exEx;
        	        }


        	        this->followPush(FOLLOW_unary_ex_in_unary_ex3519);
        	        d=unary_ex();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleunary_exEx;
        	        }


        	        {
        	             scripting::node* t = node; node = m_allocator->construct<scripting::unary_expression>(m_allocator, scripting::unary_type::inversion, d
        	            );   SET_LOCATION_FROM_NODE(node, t); SET_END_LOCATION_FROM_NODE(node, d
        	            );
        	        }


        	    }
        	    break;

            }
        }
    }
    goto ruleunary_exEx;
    ruleunary_exEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






uint32_t
WNScriptASTParser::defer()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    uint32_t val;







        val = ~static_cast<uint32_t>(-1);



    {
        {

            ANTLR_UINT32 alt25;

            alt25=4;

            switch ( this->LA(1) )
            {
            case AT:
            	{
            		alt25=1;
            	}
                break;
            case DEFER:
            	{
            		alt25=2;
            	}
                break;
            case LOW_PRIORITY:
            	{
            		alt25=3;
            	}
                break;
            case BACKGROUND:
            	{
            		alt25=4;
            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 25 );
                ex->set_state( 0 );


                goto ruledeferEx;

            }

            switch (alt25)
            {
        	case 1:
        	    {
        	         this->matchToken(AT, &FOLLOW_AT_in_defer3552);
        	        if  (this->hasException())
        	        {
        	            goto ruledeferEx;
        	        }


        	        {
        	             val = 0;
        	        }


        	    }
        	    break;
        	case 2:
        	    {
        	         this->matchToken(DEFER, &FOLLOW_DEFER_in_defer3562);
        	        if  (this->hasException())
        	        {
        	            goto ruledeferEx;
        	        }


        	        {
        	             val = 1;
        	        }


        	    }
        	    break;
        	case 3:
        	    {
        	         this->matchToken(LOW_PRIORITY, &FOLLOW_LOW_PRIORITY_in_defer3572);
        	        if  (this->hasException())
        	        {
        	            goto ruledeferEx;
        	        }


        	        {
        	             val = 2;
        	        }


        	    }
        	    break;
        	case 4:
        	    {
        	         this->matchToken(BACKGROUND, &FOLLOW_BACKGROUND_in_defer3582);
        	        if  (this->hasException())
        	        {
        	            goto ruledeferEx;
        	        }


        	        {
        	             val = 3;
        	        }


        	    }
        	    break;

            }
        }
    }
    goto ruledeferEx;
    ruledeferEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return val;
}






scripting::post_expression*
WNScriptASTParser::post_ex_proper()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::post_expression* node;


    ImplTraits::CommonTokenType const* d = NULL;
    ImplTraits::CommonTokenType const* e = NULL;
    ImplTraits::CommonTokenType const* f = NULL;
    ImplTraits::CommonTokenType const* g = NULL;
    ImplTraits::CommonTokenType const* ff = NULL;
    ImplTraits::CommonTokenType const* gg = NULL;
    ImplTraits::CommonTokenType const* h = NULL;
    ImplTraits::CommonTokenType const* i = NULL;
    ImplTraits::CommonTokenType const* hh = NULL;
    ImplTraits::CommonTokenType const* ii = NULL;
    ImplTraits::CommonTokenType const* c = NULL;
    ImplTraits::CommonTokenType const* aa = NULL;
    ImplTraits::CommonTokenType const* dd = NULL;
    ImplTraits::CommonTokenType const* DOUBINC31 = NULL;
    ImplTraits::CommonTokenType const* DOUBDEC32 = NULL;
    scripting::expression* a;
    uint32_t def;
    scripting::arg_list* b;
    uint32_t defa;
    scripting::arg_list* xx;
    scripting::expression* bb;
    scripting::expression* cc;





        node = nullptr;



    {
        {

            ANTLR_UINT32 alt26;

            alt26=9;

            switch ( this->LA(1) )
            {
            case LSQBRACKET:
            	{
            		alt26=1;
            	}
                break;
            case LBRACKET:
            	{
            		switch ( this->LA(2) )
            		{
            		case RBRACKET:
            			{
            				alt26=2;
            			}
            		    break;
            		case BOOL:
            		case BOOL_TYPE:
            		case CHAR:
            		case CHAR_TYPE:
            		case CPTR_TYPE:
            		case DOUBDEC:
            		case DOUBINC:
            		case FLOAT:
            		case FLOAT_TYPE:
            		case ID:
            		case INT:
            		case INT_TYPE:
            		case LBRACKET:
            		case LENGTH:
            		case NULLTOK:
            		case RESOURCE:
            		case SHARED_REF:
            		case STRING:
            		case STRING_TYPE:
            		case TYPE:
            		case VOID_TYPE:
            		case 68:
            		case 78:
            			{
            				alt26=4;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 26 );
            		    ex->set_state( 2 );


            		    goto rulepost_ex_properEx;

            		}

            	}
                break;
            case AT:
            	{
            		switch ( this->LA(2) )
            		{
            		case LBRACKET:
            			{
            				switch ( this->LA(3) )
            				{
            				case RBRACKET:
            					{
            						alt26=3;
            					}
            				    break;
            				case BOOL:
            				case BOOL_TYPE:
            				case CHAR:
            				case CHAR_TYPE:
            				case CPTR_TYPE:
            				case DOUBDEC:
            				case DOUBINC:
            				case FLOAT:
            				case FLOAT_TYPE:
            				case ID:
            				case INT:
            				case INT_TYPE:
            				case LBRACKET:
            				case LENGTH:
            				case NULLTOK:
            				case RESOURCE:
            				case SHARED_REF:
            				case STRING:
            				case STRING_TYPE:
            				case TYPE:
            				case VOID_TYPE:
            				case 68:
            				case 78:
            					{
            						alt26=5;
            					}
            				    break;

            				default:
            				    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 26 );
            				    ex->set_state( 13 );


            				    goto rulepost_ex_properEx;

            				}

            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 26 );
            		    ex->set_state( 3 );


            		    goto rulepost_ex_properEx;

            		}

            	}
                break;
            case DEFER:
            	{
            		switch ( this->LA(2) )
            		{
            		case LBRACKET:
            			{
            				switch ( this->LA(3) )
            				{
            				case RBRACKET:
            					{
            						alt26=3;
            					}
            				    break;
            				case BOOL:
            				case BOOL_TYPE:
            				case CHAR:
            				case CHAR_TYPE:
            				case CPTR_TYPE:
            				case DOUBDEC:
            				case DOUBINC:
            				case FLOAT:
            				case FLOAT_TYPE:
            				case ID:
            				case INT:
            				case INT_TYPE:
            				case LBRACKET:
            				case LENGTH:
            				case NULLTOK:
            				case RESOURCE:
            				case SHARED_REF:
            				case STRING:
            				case STRING_TYPE:
            				case TYPE:
            				case VOID_TYPE:
            				case 68:
            				case 78:
            					{
            						alt26=5;
            					}
            				    break;

            				default:
            				    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 26 );
            				    ex->set_state( 13 );


            				    goto rulepost_ex_properEx;

            				}

            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 26 );
            		    ex->set_state( 4 );


            		    goto rulepost_ex_properEx;

            		}

            	}
                break;
            case LOW_PRIORITY:
            	{
            		switch ( this->LA(2) )
            		{
            		case LBRACKET:
            			{
            				switch ( this->LA(3) )
            				{
            				case RBRACKET:
            					{
            						alt26=3;
            					}
            				    break;
            				case BOOL:
            				case BOOL_TYPE:
            				case CHAR:
            				case CHAR_TYPE:
            				case CPTR_TYPE:
            				case DOUBDEC:
            				case DOUBINC:
            				case FLOAT:
            				case FLOAT_TYPE:
            				case ID:
            				case INT:
            				case INT_TYPE:
            				case LBRACKET:
            				case LENGTH:
            				case NULLTOK:
            				case RESOURCE:
            				case SHARED_REF:
            				case STRING:
            				case STRING_TYPE:
            				case TYPE:
            				case VOID_TYPE:
            				case 68:
            				case 78:
            					{
            						alt26=5;
            					}
            				    break;

            				default:
            				    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 26 );
            				    ex->set_state( 13 );


            				    goto rulepost_ex_properEx;

            				}

            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 26 );
            		    ex->set_state( 5 );


            		    goto rulepost_ex_properEx;

            		}

            	}
                break;
            case BACKGROUND:
            	{
            		switch ( this->LA(2) )
            		{
            		case LBRACKET:
            			{
            				switch ( this->LA(3) )
            				{
            				case RBRACKET:
            					{
            						alt26=3;
            					}
            				    break;
            				case BOOL:
            				case BOOL_TYPE:
            				case CHAR:
            				case CHAR_TYPE:
            				case CPTR_TYPE:
            				case DOUBDEC:
            				case DOUBINC:
            				case FLOAT:
            				case FLOAT_TYPE:
            				case ID:
            				case INT:
            				case INT_TYPE:
            				case LBRACKET:
            				case LENGTH:
            				case NULLTOK:
            				case RESOURCE:
            				case SHARED_REF:
            				case STRING:
            				case STRING_TYPE:
            				case TYPE:
            				case VOID_TYPE:
            				case 68:
            				case 78:
            					{
            						alt26=5;
            					}
            				    break;

            				default:
            				    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 26 );
            				    ex->set_state( 13 );


            				    goto rulepost_ex_properEx;

            				}

            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 26 );
            		    ex->set_state( 6 );


            		    goto rulepost_ex_properEx;

            		}

            	}
                break;
            case 80:
            	{
            		alt26=6;
            	}
                break;
            case DOUBINC:
            	{
            		alt26=7;
            	}
                break;
            case DOUBDEC:
            	{
            		alt26=8;
            	}
                break;
            case LBRACE:
            	{
            		alt26=9;
            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 26 );
                ex->set_state( 0 );


                goto rulepost_ex_properEx;

            }

            switch (alt26)
            {
        	case 1:
        	    {
        	        d =  this->matchToken(LSQBRACKET, &FOLLOW_LSQBRACKET_in_post_ex_proper3614);
        	        if  (this->hasException())
        	        {
        	            goto rulepost_ex_properEx;
        	        }


        	        this->followPush(FOLLOW_expr_in_post_ex_proper3618);
        	        a=expr();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulepost_ex_properEx;
        	        }


        	        e =  this->matchToken(RSQBRACKET, &FOLLOW_RSQBRACKET_in_post_ex_proper3622);
        	        if  (this->hasException())
        	        {
        	            goto rulepost_ex_properEx;
        	        }


        	        {
        	             node = m_allocator->construct<scripting::array_access_expression>(m_allocator, a
        	            ); SET_LOCATION(node, d); SET_END_LOCATION(node, e);
        	        }


        	    }
        	    break;
        	case 2:
        	    {
        	        f =  this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_post_ex_proper3637);
        	        if  (this->hasException())
        	        {
        	            goto rulepost_ex_properEx;
        	        }


        	        g =  this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_post_ex_proper3641);
        	        if  (this->hasException())
        	        {
        	            goto rulepost_ex_properEx;
        	        }


        	        {
        	             node = m_allocator->construct<scripting::function_call_expression>(m_allocator); SET_LOCATION(node, f); SET_END_LOCATION(node, g);
        	        }


        	    }
        	    break;
        	case 3:
        	    {
        	        this->followPush(FOLLOW_defer_in_post_ex_proper3669);
        	        def=defer();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulepost_ex_properEx;
        	        }


        	        ff =  this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_post_ex_proper3673);
        	        if  (this->hasException())
        	        {
        	            goto rulepost_ex_properEx;
        	        }


        	        gg =  this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_post_ex_proper3677);
        	        if  (this->hasException())
        	        {
        	            goto rulepost_ex_properEx;
        	        }


        	        {
        	             node = m_allocator->construct<scripting::function_call_expression>(m_allocator, def
        	            ); SET_LOCATION(node, ff); SET_END_LOCATION(node, gg);
        	        }


        	    }
        	    break;
        	case 4:
        	    {
        	        h =  this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_post_ex_proper3705);
        	        if  (this->hasException())
        	        {
        	            goto rulepost_ex_properEx;
        	        }


        	        this->followPush(FOLLOW_arglist_in_post_ex_proper3711);
        	        b=arglist();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulepost_ex_properEx;
        	        }


        	        i =  this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_post_ex_proper3715);
        	        if  (this->hasException())
        	        {
        	            goto rulepost_ex_properEx;
        	        }


        	        {
        	             node = m_allocator->construct<scripting::function_call_expression>(m_allocator, b
        	            ); SET_LOCATION(node, h); SET_END_LOCATION(node, i);
        	        }


        	    }
        	    break;
        	case 5:
        	    {
        	        this->followPush(FOLLOW_defer_in_post_ex_proper3731);
        	        defa=defer();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulepost_ex_properEx;
        	        }


        	        hh =  this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_post_ex_proper3735);
        	        if  (this->hasException())
        	        {
        	            goto rulepost_ex_properEx;
        	        }


        	        this->followPush(FOLLOW_arglist_in_post_ex_proper3739);
        	        xx=arglist();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulepost_ex_properEx;
        	        }


        	        ii =  this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_post_ex_proper3743);
        	        if  (this->hasException())
        	        {
        	            goto rulepost_ex_properEx;
        	        }


        	        {
        	             node = m_allocator->construct<scripting::function_call_expression>(m_allocator, xx
        	            , defa
        	            ); SET_LOCATION(node, hh); SET_END_LOCATION(node, ii);
        	        }


        	    }
        	    break;
        	case 6:
        	    {
        	         this->matchToken(80, &FOLLOW_80_in_post_ex_proper3756);
        	        if  (this->hasException())
        	        {
        	            goto rulepost_ex_properEx;
        	        }


        	        c =  this->matchToken(ID, &FOLLOW_ID_in_post_ex_proper3760);
        	        if  (this->hasException())
        	        {
        	            goto rulepost_ex_properEx;
        	        }


        	        {
        	             node = m_allocator->construct<scripting::member_access_expression>(m_allocator, (c->getText()).c_str()); SET_LOCATION(node, c);
        	        }


        	    }
        	    break;
        	case 7:
        	    {
        	        DOUBINC31 =  this->matchToken(DOUBINC, &FOLLOW_DOUBINC_in_post_ex_proper3787);
        	        if  (this->hasException())
        	        {
        	            goto rulepost_ex_properEx;
        	        }


        	        {
        	             node = m_allocator->construct<scripting::post_unary_expression>(m_allocator, scripting::post_unary_type::post_increment); SET_LOCATION(node, DOUBINC31);
        	        }


        	    }
        	    break;
        	case 8:
        	    {
        	        DOUBDEC32 =  this->matchToken(DOUBDEC, &FOLLOW_DOUBDEC_in_post_ex_proper3816);
        	        if  (this->hasException())
        	        {
        	            goto rulepost_ex_properEx;
        	        }


        	        {
        	             node = m_allocator->construct<scripting::post_unary_expression>(m_allocator, scripting::post_unary_type::post_decrement); SET_LOCATION(node, DOUBDEC32);
        	        }


        	    }
        	    break;
        	case 9:
        	    {
        	        {
        	            {
        	                aa =  this->matchToken(LBRACE, &FOLLOW_LBRACE_in_post_ex_proper3862);
        	                if  (this->hasException())
        	                {
        	                    goto rulepost_ex_properEx;
        	                }


        	                {
        	                    node = m_allocator->construct<scripting::slice_expression>(m_allocator, nullptr, nullptr); SET_LOCATION(node, aa);
        	                }


        	            }


        	            {
        	                this->followPush(FOLLOW_expr_in_post_ex_proper3882);
        	                bb=expr();

        	                this->followPop();
        	                if  (this->hasException())
        	                {
        	                    goto rulepost_ex_properEx;
        	                }


        	                {
        	                     scripting::cast_to<scripting::slice_expression>(node)->set_index0(bb
        	                    );
        	                }


        	            }


        	             this->matchToken(COLON, &FOLLOW_COLON_in_post_ex_proper3899);
        	            if  (this->hasException())
        	            {
        	                goto rulepost_ex_properEx;
        	            }


        	            {
        	                this->followPush(FOLLOW_expr_in_post_ex_proper3916);
        	                cc=expr();

        	                this->followPop();
        	                if  (this->hasException())
        	                {
        	                    goto rulepost_ex_properEx;
        	                }


        	                {
        	                     scripting::cast_to<scripting::slice_expression>(node)->set_index1(cc
        	                    );
        	                }


        	            }


        	            {
        	                dd =  this->matchToken(RBRACE, &FOLLOW_RBRACE_in_post_ex_proper3936);
        	                if  (this->hasException())
        	                {
        	                    goto rulepost_ex_properEx;
        	                }


        	                {
        	                    SET_END_LOCATION(node, dd);
        	                }


        	            }


        	        }


        	    }
        	    break;

            }
        }
    }
    goto rulepost_ex_properEx;
    rulepost_ex_properEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::expression*
WNScriptASTParser::post_ex()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::expression* node;


    scripting::post_expression* a;
    scripting::expression * prim_ex33;





        node = nullptr;



    {
        {
            this->followPush(FOLLOW_prim_ex_in_post_ex3983);
            prim_ex33=prim_ex();

            this->followPop();
            if  (this->hasException())
            {
                goto rulepost_exEx;
            }


            {
                 node = prim_ex33
                ;
            }



            for (;;)
            {
                int alt27=2;
                switch ( this->LA(1) )
                {
                case AT:
                case BACKGROUND:
                case DEFER:
                case DOUBDEC:
                case DOUBINC:
                case LBRACE:
                case LBRACKET:
                case LOW_PRIORITY:
                case LSQBRACKET:
                case 80:
                	{
                		alt27=1;
                	}
                    break;

                }

                switch (alt27)
                {
            	case 1:
            	    {
            	        this->followPush(FOLLOW_post_ex_proper_in_post_ex4002);
            	        a=post_ex_proper();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulepost_exEx;
            	        }


            	        {
            	            a
            	            ->add_base_expression(node); SET_END_LOCATION_FROM_NODE(a
            	            , node); node = a
            	            ;
            	        }


            	    }
            	    break;

            	default:
            	    goto loop27;
            	    break;
                }
            }
            loop27: ;


        }

    }
    goto rulepost_exEx;
    rulepost_exEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::instruction*
WNScriptASTParser::assignment_or_expression()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::instruction* node;


    scripting::expression* a;
    scripting::assign_type b;
    scripting::expression* c;





        node = nullptr;



    {
        {
            this->followPush(FOLLOW_expr_in_assignment_or_expression4033);
            a=expr();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleassignment_or_expressionEx;
            }


            {
                int alt28=2;
                switch ( this->LA(1) )
                {
                case 71:
                case 75:
                case 77:
                case 79:
                case 82:
                case 85:
                	{
                		alt28=1;
                	}
                    break;
                case RBRACKET:
                case SEMICOLON:
                	{
                		alt28=2;
                	}
                    break;

                default:
                    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 28 );
                    ex->set_state( 0 );


                    goto ruleassignment_or_expressionEx;

                }

                switch (alt28)
                {
            	case 1:
            	    {
            	        {
            	            this->followPush(FOLLOW_assign_type_in_assignment_or_expression4065);
            	            b=assign_type();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleassignment_or_expressionEx;
            	            }


            	            this->followPush(FOLLOW_expr_in_assignment_or_expression4069);
            	            c=expr();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleassignment_or_expressionEx;
            	            }


            	            {

            	                                  scripting::lvalue* lval = m_allocator->construct<scripting::lvalue>(m_allocator, a
            	                );
            	                                  SET_LOCATION_FROM_NODE(lval, c
            	                );

            	                                  scripting::assignment_instruction* assign = m_allocator->construct<scripting::assignment_instruction>(m_allocator, lval);
            	                                  SET_LOCATION_FROM_NODE(assign , lval);

            	                                  assign->add_value(b
            	                , c
            	                );
            	                                  SET_END_LOCATION_FROM_NODE(assign, c
            	                );
            	                                  node = assign;

            	            }


            	        }


            	    }
            	    break;
            	case 2:
            	    {
            	        {
            	            {

            	                                  node = m_allocator->construct<scripting::expression_instruction>(m_allocator, a
            	                );
            	                                  SET_LOCATION_FROM_NODE(node, a
            	                );

            	            }


            	        }


            	    }
            	    break;

                }
            }

        }

    }
    goto ruleassignment_or_expressionEx;
    ruleassignment_or_expressionEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::constant_expression*
WNScriptASTParser::constant()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::constant_expression* node;


    ImplTraits::CommonTokenType const* a = NULL;
    ImplTraits::CommonTokenType const* b = NULL;
    ImplTraits::CommonTokenType const* c = NULL;
    ImplTraits::CommonTokenType const* d = NULL;
    ImplTraits::CommonTokenType const* e = NULL;
    ImplTraits::CommonTokenType const* g = NULL;
    ImplTraits::CommonTokenType const* h = NULL;
    ImplTraits::CommonTokenType const* i = NULL;
    scripting::type* f;





        node = nullptr;



    {
        {

            ANTLR_UINT32 alt29;

            alt29=7;

            switch ( this->LA(1) )
            {
            case INT:
            	{
            		alt29=1;
            	}
                break;
            case FLOAT:
            	{
            		alt29=2;
            	}
                break;
            case CHAR:
            	{
            		alt29=3;
            	}
                break;
            case STRING:
            	{
            		alt29=4;
            	}
                break;
            case BOOL:
            	{
            		alt29=5;
            	}
                break;
            case NULLTOK:
            	{
            		alt29=6;
            	}
                break;
            case BOOL_TYPE:
            case CHAR_TYPE:
            case CPTR_TYPE:
            case FLOAT_TYPE:
            case INT_TYPE:
            case STRING_TYPE:
            case VOID_TYPE:
            	{
            		alt29=7;
            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 29 );
                ex->set_state( 0 );


                goto ruleconstantEx;

            }

            switch (alt29)
            {
        	case 1:
        	    {
        	        a =  this->matchToken(INT, &FOLLOW_INT_in_constant4135);
        	        if  (this->hasException())
        	        {
        	            goto ruleconstantEx;
        	        }


        	        {
        	             scripting::type* type_node = m_allocator->construct<scripting::type>(m_allocator, scripting::type_classification::int_type); SET_LOCATION(type_node, a); node = m_allocator->construct<scripting::constant_expression>(m_allocator, type_node, (a->getText()).c_str()); SET_LOCATION(node, a);
        	        }


        	    }
        	    break;
        	case 2:
        	    {
        	        b =  this->matchToken(FLOAT, &FOLLOW_FLOAT_in_constant4153);
        	        if  (this->hasException())
        	        {
        	            goto ruleconstantEx;
        	        }


        	        {
        	             scripting::type* type_node = m_allocator->construct<scripting::type>(m_allocator, scripting::type_classification::float_type); SET_LOCATION(type_node, b); node = m_allocator->construct<scripting::constant_expression>(m_allocator, type_node, (b->getText()).c_str()); SET_LOCATION(node, b);
        	        }


        	    }
        	    break;
        	case 3:
        	    {
        	        c =  this->matchToken(CHAR, &FOLLOW_CHAR_in_constant4169);
        	        if  (this->hasException())
        	        {
        	            goto ruleconstantEx;
        	        }


        	        {
        	             scripting::type* type_node = m_allocator->construct<scripting::type>(m_allocator, scripting::type_classification::char_type); SET_LOCATION(type_node, c); node = m_allocator->construct<scripting::constant_expression>(m_allocator, type_node, (c->getText()).c_str()); SET_LOCATION(node, c);
        	        }


        	    }
        	    break;
        	case 4:
        	    {
        	        d =  this->matchToken(STRING, &FOLLOW_STRING_in_constant4186);
        	        if  (this->hasException())
        	        {
        	            goto ruleconstantEx;
        	        }


        	        {
        	             scripting::type* type_node = m_allocator->construct<scripting::type>(m_allocator, scripting::type_classification::string_type); SET_LOCATION(type_node, d); node = m_allocator->construct<scripting::constant_expression>(m_allocator, type_node, (d->getText()).c_str()); SET_LOCATION(node, d);
        	        }


        	    }
        	    break;
        	case 5:
        	    {
        	        e =  this->matchToken(BOOL, &FOLLOW_BOOL_in_constant4201);
        	        if  (this->hasException())
        	        {
        	            goto ruleconstantEx;
        	        }


        	        {
        	             scripting::type* type_node = m_allocator->construct<scripting::type>(m_allocator, scripting::type_classification::bool_type); SET_LOCATION(type_node, e); node = m_allocator->construct<scripting::constant_expression>(m_allocator, type_node, (e->getText()).c_str()); SET_LOCATION(node, e);
        	        }


        	    }
        	    break;
        	case 6:
        	    {
        	        g =  this->matchToken(NULLTOK, &FOLLOW_NULLTOK_in_constant4218);
        	        if  (this->hasException())
        	        {
        	            goto ruleconstantEx;
        	        }


        	        {
        	             scripting::type* type_node = m_allocator->construct<scripting::type>(m_allocator, scripting::type_classification::nullptr_type); SET_LOCATION(type_node, g); node = m_allocator->construct<scripting::constant_expression>(m_allocator, type_node, "null"); SET_LOCATION(node, g);
        	        }


        	    }
        	    break;
        	case 7:
        	    {
        	        this->followPush(FOLLOW_scalarType_in_constant4233);
        	        f=scalarType();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleconstantEx;
        	        }


        	        g =  this->matchToken(LBRACE, &FOLLOW_LBRACE_in_constant4237);
        	        if  (this->hasException())
        	        {
        	            goto ruleconstantEx;
        	        }


        	        h =  this->matchToken(STRING, &FOLLOW_STRING_in_constant4241);
        	        if  (this->hasException())
        	        {
        	            goto ruleconstantEx;
        	        }


        	        i =  this->matchToken(RBRACE, &FOLLOW_RBRACE_in_constant4245);
        	        if  (this->hasException())
        	        {
        	            goto ruleconstantEx;
        	        }


        	        {
        	             node = m_allocator->construct<scripting::constant_expression>(m_allocator, f
        	            , (h->getText()).c_str()); SET_LOCATION_FROM_NODE(node,
        	            f
        	            ); SET_END_LOCATION(node, i);
        	        }


        	    }
        	    break;

            }
        }
    }
    goto ruleconstantEx;
    ruleconstantEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::builtin_unary_expression*
WNScriptASTParser::builtin_unary()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::builtin_unary_expression* node;


    ImplTraits::CommonTokenType const* LENGTH35 = NULL;
    ImplTraits::CommonTokenType const* RBRACKET36 = NULL;
    scripting::expression* expr34;





        node = nullptr;



    {
        {
            LENGTH35 =  this->matchToken(LENGTH, &FOLLOW_LENGTH_in_builtin_unary4274);
            if  (this->hasException())
            {
                goto rulebuiltin_unaryEx;
            }


             this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_builtin_unary4276);
            if  (this->hasException())
            {
                goto rulebuiltin_unaryEx;
            }


            this->followPush(FOLLOW_expr_in_builtin_unary4278);
            expr34=expr();

            this->followPop();
            if  (this->hasException())
            {
                goto rulebuiltin_unaryEx;
            }


            RBRACKET36 =  this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_builtin_unary4280);
            if  (this->hasException())
            {
                goto rulebuiltin_unaryEx;
            }


            {
                 node = m_allocator->construct<scripting::builtin_unary_expression>(m_allocator, scripting::builtin_unary_type::length, expr34
                ); SET_LOCATION(node, LENGTH35); SET_END_LOCATION(node, RBRACKET36);
            }


        }

    }
    goto rulebuiltin_unaryEx;
    rulebuiltin_unaryEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::expression*
WNScriptASTParser::non_array_prim_ex()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::expression* node;


    ImplTraits::CommonTokenType const* ba = NULL;
    ImplTraits::CommonTokenType const* bb = NULL;
    ImplTraits::CommonTokenType const* rlb = NULL;
    ImplTraits::CommonTokenType const* rls = NULL;
    ImplTraits::CommonTokenType const* rrb = NULL;
    ImplTraits::CommonTokenType const* rlb2 = NULL;
    ImplTraits::CommonTokenType const* rls2 = NULL;
    ImplTraits::CommonTokenType const* rrb2 = NULL;
    ImplTraits::CommonTokenType const* ID37 = NULL;
    ImplTraits::CommonTokenType const* RESOURCE38 = NULL;
    ImplTraits::CommonTokenType const* RESOURCE39 = NULL;
    scripting::expression* a;
    scripting::arg_list* rla;
    scripting::constant_expression* b;
    scripting::type* c;
    scripting::cast_expression* f;
    scripting::type* e;
    scripting::struct_allocation_expression* h;
    scripting::type* i;
    scripting::struct_allocation_expression* j;
    scripting::builtin_unary_expression* u;





        node = nullptr;



    {
        {

            ANTLR_UINT32 alt30;

            alt30=9;

            switch ( this->LA(1) )
            {
            case ID:
            	{
            		alt30=1;
            	}
                break;
            case LBRACKET:
            	{
            		alt30=2;
            	}
                break;
            case RESOURCE:
            	{
            		switch ( this->LA(2) )
            		{
            		case LBRACKET:
            			{
            				switch ( this->LA(3) )
            				{
            				case STRING:
            					{
            						switch ( this->LA(4) )
            						{
            						case RBRACKET:
            							{
            								alt30=3;
            							}
            						    break;
            						case COMMA:
            							{
            								alt30=4;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 30 );
            						    ex->set_state( 17 );


            						    goto rulenon_array_prim_exEx;

            						}

            					}
            				    break;

            				default:
            				    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 30 );
            				    ex->set_state( 15 );


            				    goto rulenon_array_prim_exEx;

            				}

            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 30 );
            		    ex->set_state( 3 );


            		    goto rulenon_array_prim_exEx;

            		}

            	}
                break;
            case BOOL:
            case CHAR:
            case FLOAT:
            case INT:
            case NULLTOK:
            case STRING:
            	{
            		alt30=5;
            	}
                break;
            case VOID_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case LBRACE:
            			{
            				alt30=5;
            			}
            		    break;
            		case LBRACKET:
            			{
            				alt30=6;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 30 );
            		    ex->set_state( 5 );


            		    goto rulenon_array_prim_exEx;

            		}

            	}
                break;
            case INT_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case LBRACE:
            			{
            				alt30=5;
            			}
            		    break;
            		case LBRACKET:
            			{
            				alt30=6;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 30 );
            		    ex->set_state( 6 );


            		    goto rulenon_array_prim_exEx;

            		}

            	}
                break;
            case FLOAT_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case LBRACE:
            			{
            				alt30=5;
            			}
            		    break;
            		case LBRACKET:
            			{
            				alt30=6;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 30 );
            		    ex->set_state( 7 );


            		    goto rulenon_array_prim_exEx;

            		}

            	}
                break;
            case CHAR_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case LBRACE:
            			{
            				alt30=5;
            			}
            		    break;
            		case LBRACKET:
            			{
            				alt30=6;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 30 );
            		    ex->set_state( 8 );


            		    goto rulenon_array_prim_exEx;

            		}

            	}
                break;
            case BOOL_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case LBRACE:
            			{
            				alt30=5;
            			}
            		    break;
            		case LBRACKET:
            			{
            				alt30=6;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 30 );
            		    ex->set_state( 9 );


            		    goto rulenon_array_prim_exEx;

            		}

            	}
                break;
            case CPTR_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case LBRACE:
            			{
            				alt30=5;
            			}
            		    break;
            		case LBRACKET:
            			{
            				alt30=6;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 30 );
            		    ex->set_state( 10 );


            		    goto rulenon_array_prim_exEx;

            		}

            	}
                break;
            case STRING_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case LBRACE:
            			{
            				alt30=5;
            			}
            		    break;
            		case LBRACKET:
            			{
            				alt30=6;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 30 );
            		    ex->set_state( 11 );


            		    goto rulenon_array_prim_exEx;

            		}

            	}
                break;
            case TYPE:
            	{
            		alt30=7;
            	}
                break;
            case SHARED_REF:
            	{
            		alt30=8;
            	}
                break;
            case LENGTH:
            	{
            		alt30=9;
            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 30 );
                ex->set_state( 0 );


                goto rulenon_array_prim_exEx;

            }

            switch (alt30)
            {
        	case 1:
        	    {
        	        ID37 =  this->matchToken(ID, &FOLLOW_ID_in_non_array_prim_ex4309);
        	        if  (this->hasException())
        	        {
        	            goto rulenon_array_prim_exEx;
        	        }


        	        {
        	             node = m_allocator->construct<scripting::id_expression>(m_allocator, (ID37->getText()).c_str()); SET_LOCATION(node, ID37);
        	        }


        	    }
        	    break;
        	case 2:
        	    {
        	        ba =  this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_non_array_prim_ex4323);
        	        if  (this->hasException())
        	        {
        	            goto rulenon_array_prim_exEx;
        	        }


        	        this->followPush(FOLLOW_expr_in_non_array_prim_ex4327);
        	        a=expr();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulenon_array_prim_exEx;
        	        }


        	        bb =  this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_non_array_prim_ex4331);
        	        if  (this->hasException())
        	        {
        	            goto rulenon_array_prim_exEx;
        	        }


        	        {
        	            node = a
        	            ; SET_LOCATION(node, ba); SET_END_LOCATION(node, bb);
        	        }


        	    }
        	    break;
        	case 3:
        	    {
        	        RESOURCE38 =  this->matchToken(RESOURCE, &FOLLOW_RESOURCE_in_non_array_prim_ex4343);
        	        if  (this->hasException())
        	        {
        	            goto rulenon_array_prim_exEx;
        	        }


        	        rlb =  this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_non_array_prim_ex4347);
        	        if  (this->hasException())
        	        {
        	            goto rulenon_array_prim_exEx;
        	        }


        	        rls =  this->matchToken(STRING, &FOLLOW_STRING_in_non_array_prim_ex4351);
        	        if  (this->hasException())
        	        {
        	            goto rulenon_array_prim_exEx;
        	        }


        	        rrb =  this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_non_array_prim_ex4355);
        	        if  (this->hasException())
        	        {
        	            goto rulenon_array_prim_exEx;
        	        }


        	        {
        	             auto n = m_allocator->construct<scripting::resource_expression>(m_allocator, (RESOURCE38->getText()).c_str()+1, (rls->getText()).c_str()); m_file->add_resource((RESOURCE38->getText()).c_str()+1,(rls->getText()).c_str(), true); node = n; SET_LOCATION(node, RESOURCE38); SET_END_LOCATION(node, rrb);
        	        }


        	    }
        	    break;
        	case 4:
        	    {
        	        RESOURCE39 =  this->matchToken(RESOURCE, &FOLLOW_RESOURCE_in_non_array_prim_ex4367);
        	        if  (this->hasException())
        	        {
        	            goto rulenon_array_prim_exEx;
        	        }


        	        rlb2 =  this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_non_array_prim_ex4371);
        	        if  (this->hasException())
        	        {
        	            goto rulenon_array_prim_exEx;
        	        }


        	        rls2 =  this->matchToken(STRING, &FOLLOW_STRING_in_non_array_prim_ex4375);
        	        if  (this->hasException())
        	        {
        	            goto rulenon_array_prim_exEx;
        	        }


        	         this->matchToken(COMMA, &FOLLOW_COMMA_in_non_array_prim_ex4377);
        	        if  (this->hasException())
        	        {
        	            goto rulenon_array_prim_exEx;
        	        }


        	        this->followPush(FOLLOW_arglist_in_non_array_prim_ex4381);
        	        rla=arglist();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulenon_array_prim_exEx;
        	        }


        	        rrb2 =  this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_non_array_prim_ex4385);
        	        if  (this->hasException())
        	        {
        	            goto rulenon_array_prim_exEx;
        	        }


        	        {
        	             auto n = m_allocator->construct<scripting::resource_expression>(m_allocator, (RESOURCE39->getText()).c_str()+1, (rls->getText()).c_str(),
        	            rla
        	            ); m_file->add_resource((RESOURCE39->getText()).c_str()+1,(rls->getText()).c_str(), true); node = n; SET_LOCATION(node, RESOURCE39); SET_END_LOCATION(node, rrb);
        	        }


        	    }
        	    break;
        	case 5:
        	    {
        	        this->followPush(FOLLOW_constant_in_non_array_prim_ex4399);
        	        b=constant();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulenon_array_prim_exEx;
        	        }


        	        {
        	            node = b
        	            ;
        	        }


        	    }
        	    break;
        	case 6:
        	    {
        	        this->followPush(FOLLOW_scalarType_in_non_array_prim_ex4414);
        	        c=scalarType();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulenon_array_prim_exEx;
        	        }


        	        {
        	            this->followPush(FOLLOW_cast_in_non_array_prim_ex4420);
        	            f=cast();

        	            this->followPop();
        	            if  (this->hasException())
        	            {
        	                goto rulenon_array_prim_exEx;
        	            }


        	        }


        	        {
        	             f
        	            ->set_type(c
        	            ); node=f
        	            ; SET_START_LOCATION_FROM_NODE(node, c
        	            );
        	        }


        	    }
        	    break;
        	case 7:
        	    {
        	        this->followPush(FOLLOW_objectType_in_non_array_prim_ex4435);
        	        e=objectType();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulenon_array_prim_exEx;
        	        }


        	        this->followPush(FOLLOW_structInit_in_non_array_prim_ex4439);
        	        h=structInit();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulenon_array_prim_exEx;
        	        }


        	        {
        	             h
        	            ->set_type(e
        	            ); node=h
        	            ; SET_START_LOCATION_FROM_NODE(node, e
        	            );
        	        }


        	    }
        	    break;
        	case 8:
        	    {
        	         this->matchToken(SHARED_REF, &FOLLOW_SHARED_REF_in_non_array_prim_ex4451);
        	        if  (this->hasException())
        	        {
        	            goto rulenon_array_prim_exEx;
        	        }


        	        this->followPush(FOLLOW_objectType_in_non_array_prim_ex4455);
        	        i=objectType();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulenon_array_prim_exEx;
        	        }


        	        this->followPush(FOLLOW_structInit_in_non_array_prim_ex4459);
        	        j=structInit();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulenon_array_prim_exEx;
        	        }


        	        {
        	             i
        	            ->set_reference_type(scripting::reference_type::shared); j
        	            ->set_type(i
        	            ); node=j
        	            ; SET_START_LOCATION_FROM_NODE(node, i
        	            );
        	        }


        	    }
        	    break;
        	case 9:
        	    {
        	        this->followPush(FOLLOW_builtin_unary_in_non_array_prim_ex4473);
        	        u=builtin_unary();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulenon_array_prim_exEx;
        	        }


        	        {
        	            node = u
        	            ;
        	        }


        	    }
        	    break;

            }
        }
    }
    goto rulenon_array_prim_exEx;
    rulenon_array_prim_exEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::expression *
WNScriptASTParser::prim_ex()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::expression * node;


    scripting::type* k;
    scripting::array_allocation_expression* l;
    scripting::type* m;
    scripting::array_allocation_expression* n;
    scripting::expression* non_array_prim_ex40;





        node = nullptr;



    {
        {

            ANTLR_UINT32 alt31;

            alt31=3;

            switch ( this->LA(1) )
            {
            case BOOL:
            case CHAR:
            case FLOAT:
            case ID:
            case INT:
            case LBRACKET:
            case LENGTH:
            case NULLTOK:
            case RESOURCE:
            case STRING:
            	{
            		alt31=1;
            	}
                break;
            case VOID_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case LBRACE:
            		case LBRACKET:
            			{
            				alt31=1;
            			}
            		    break;
            		case DLSQBRACKET:
            		case LSQBRACKET:
            			{
            				alt31=2;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 31 );
            		    ex->set_state( 2 );


            		    goto ruleprim_exEx;

            		}

            	}
                break;
            case INT_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case LBRACE:
            		case LBRACKET:
            			{
            				alt31=1;
            			}
            		    break;
            		case DLSQBRACKET:
            		case LSQBRACKET:
            			{
            				alt31=2;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 31 );
            		    ex->set_state( 3 );


            		    goto ruleprim_exEx;

            		}

            	}
                break;
            case FLOAT_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case LBRACE:
            		case LBRACKET:
            			{
            				alt31=1;
            			}
            		    break;
            		case DLSQBRACKET:
            		case LSQBRACKET:
            			{
            				alt31=2;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 31 );
            		    ex->set_state( 4 );


            		    goto ruleprim_exEx;

            		}

            	}
                break;
            case CHAR_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case LBRACE:
            		case LBRACKET:
            			{
            				alt31=1;
            			}
            		    break;
            		case DLSQBRACKET:
            		case LSQBRACKET:
            			{
            				alt31=2;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 31 );
            		    ex->set_state( 5 );


            		    goto ruleprim_exEx;

            		}

            	}
                break;
            case BOOL_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case LBRACE:
            		case LBRACKET:
            			{
            				alt31=1;
            			}
            		    break;
            		case DLSQBRACKET:
            		case LSQBRACKET:
            			{
            				alt31=2;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 31 );
            		    ex->set_state( 6 );


            		    goto ruleprim_exEx;

            		}

            	}
                break;
            case CPTR_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case LBRACE:
            		case LBRACKET:
            			{
            				alt31=1;
            			}
            		    break;
            		case DLSQBRACKET:
            		case LSQBRACKET:
            			{
            				alt31=2;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 31 );
            		    ex->set_state( 7 );


            		    goto ruleprim_exEx;

            		}

            	}
                break;
            case STRING_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case LBRACE:
            		case LBRACKET:
            			{
            				alt31=1;
            			}
            		    break;
            		case DLSQBRACKET:
            		case LSQBRACKET:
            			{
            				alt31=2;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 31 );
            		    ex->set_state( 8 );


            		    goto ruleprim_exEx;

            		}

            	}
                break;
            case TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case LBRACKET:
            			{
            				alt31=1;
            			}
            		    break;
            		case DLSQBRACKET:
            		case LSQBRACKET:
            			{
            				alt31=2;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 31 );
            		    ex->set_state( 9 );


            		    goto ruleprim_exEx;

            		}

            	}
                break;
            case SHARED_REF:
            	{
            		switch ( this->LA(2) )
            		{
            		case TYPE:
            			{
            				switch ( this->LA(3) )
            				{
            				case LBRACKET:
            					{
            						alt31=1;
            					}
            				    break;
            				case DLSQBRACKET:
            				case LSQBRACKET:
            					{
            						alt31=3;
            					}
            				    break;

            				default:
            				    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 31 );
            				    ex->set_state( 12 );


            				    goto ruleprim_exEx;

            				}

            			}
            		    break;
            		case BOOL_TYPE:
            		case CHAR_TYPE:
            		case CPTR_TYPE:
            		case FLOAT_TYPE:
            		case INT_TYPE:
            		case STRING_TYPE:
            		case VOID_TYPE:
            			{
            				alt31=3;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 31 );
            		    ex->set_state( 10 );


            		    goto ruleprim_exEx;

            		}

            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 31 );
                ex->set_state( 0 );


                goto ruleprim_exEx;

            }

            switch (alt31)
            {
        	case 1:
        	    {
        	        this->followPush(FOLLOW_non_array_prim_ex_in_prim_ex4502);
        	        non_array_prim_ex40=non_array_prim_ex();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleprim_exEx;
        	        }


        	        {
        	             node = non_array_prim_ex40
        	            ;
        	        }


        	    }
        	    break;
        	case 2:
        	    {
        	        this->followPush(FOLLOW_nonArrayType_in_prim_ex4516);
        	        k=nonArrayType();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleprim_exEx;
        	        }


        	        this->followPush(FOLLOW_arrayInit_in_prim_ex4520);
        	        l=arrayInit();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleprim_exEx;
        	        }


        	        {
        	             l
        	            ->set_type(k
        	            ); node=l
        	            ; SET_START_LOCATION_FROM_NODE(node, k
        	            );
        	        }


        	    }
        	    break;
        	case 3:
        	    {
        	         this->matchToken(SHARED_REF, &FOLLOW_SHARED_REF_in_prim_ex4532);
        	        if  (this->hasException())
        	        {
        	            goto ruleprim_exEx;
        	        }


        	        this->followPush(FOLLOW_nonArrayType_in_prim_ex4536);
        	        m=nonArrayType();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleprim_exEx;
        	        }


        	        this->followPush(FOLLOW_arrayInit_in_prim_ex4540);
        	        n=arrayInit();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleprim_exEx;
        	        }


        	        {
        	             m
        	            ->set_reference_type(scripting::reference_type::shared); n
        	            ->set_type(m
        	            ); node=n
        	            ; SET_START_LOCATION_FROM_NODE(node, m
        	            );
        	        }


        	    }
        	    break;

            }
        }
    }
    goto ruleprim_exEx;
    ruleprim_exEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::cast_expression*
WNScriptASTParser::cast()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::cast_expression* node;


    ImplTraits::CommonTokenType const* a = NULL;
    ImplTraits::CommonTokenType const* c = NULL;
    scripting::expression* b;





      node = nullptr;



    {
        {
            a =  this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_cast4569);
            if  (this->hasException())
            {
                goto rulecastEx;
            }


            this->followPush(FOLLOW_expr_in_cast4573);
            b=expr();

            this->followPop();
            if  (this->hasException())
            {
                goto rulecastEx;
            }


            c =  this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_cast4577);
            if  (this->hasException())
            {
                goto rulecastEx;
            }


            {
                 node = m_allocator->construct<scripting::cast_expression>(m_allocator, b
                ); SET_LOCATION(node, a); SET_END_LOCATION(node, c);
            }


        }

    }
    goto rulecastEx;
    rulecastEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::struct_allocation_expression*
WNScriptASTParser::structInit()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::struct_allocation_expression* node;


    ImplTraits::CommonTokenType const* a = NULL;
    ImplTraits::CommonTokenType const* b = NULL;
    ImplTraits::CommonTokenType const* c = NULL;
    ImplTraits::CommonTokenType const* e = NULL;
    scripting::arg_list* d;





        node = nullptr;



    {
        {

            ANTLR_UINT32 alt32;

            alt32=2;

            switch ( this->LA(1) )
            {
            case LBRACKET:
            	{
            		switch ( this->LA(2) )
            		{
            		case RBRACKET:
            			{
            				alt32=1;
            			}
            		    break;
            		case BOOL:
            		case BOOL_TYPE:
            		case CHAR:
            		case CHAR_TYPE:
            		case CPTR_TYPE:
            		case DOUBDEC:
            		case DOUBINC:
            		case FLOAT:
            		case FLOAT_TYPE:
            		case ID:
            		case INT:
            		case INT_TYPE:
            		case LBRACKET:
            		case LENGTH:
            		case NULLTOK:
            		case RESOURCE:
            		case SHARED_REF:
            		case STRING:
            		case STRING_TYPE:
            		case TYPE:
            		case VOID_TYPE:
            		case 68:
            		case 78:
            			{
            				alt32=2;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 32 );
            		    ex->set_state( 1 );


            		    goto rulestructInitEx;

            		}

            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 32 );
                ex->set_state( 0 );


                goto rulestructInitEx;

            }

            switch (alt32)
            {
        	case 1:
        	    {
        	        {
        	            a =  this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_structInit4607);
        	            if  (this->hasException())
        	            {
        	                goto rulestructInitEx;
        	            }


        	            b =  this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_structInit4611);
        	            if  (this->hasException())
        	            {
        	                goto rulestructInitEx;
        	            }


        	            {
        	                 node = m_allocator->construct<scripting::struct_allocation_expression>(m_allocator); SET_LOCATION(node, a); SET_END_LOCATION(node, b);
        	            }


        	        }


        	    }
        	    break;
        	case 2:
        	    {
        	        {
        	            c =  this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_structInit4625);
        	            if  (this->hasException())
        	            {
        	                goto rulestructInitEx;
        	            }


        	            this->followPush(FOLLOW_arglist_in_structInit4629);
        	            d=arglist();

        	            this->followPop();
        	            if  (this->hasException())
        	            {
        	                goto rulestructInitEx;
        	            }


        	            e =  this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_structInit4633);
        	            if  (this->hasException())
        	            {
        	                goto rulestructInitEx;
        	            }


        	            {
        	                 node = m_allocator->construct<scripting::struct_allocation_expression>(m_allocator); node->set_args(d
        	                ); SET_LOCATION(node, c); SET_END_LOCATION(node, e);
        	            }


        	        }


        	    }
        	    break;

            }
        }
    }
    goto rulestructInitEx;
    rulestructInitEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::array_allocation_expression*
WNScriptASTParser::arrayInit()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::array_allocation_expression* node;


    ImplTraits::CommonTokenType const* c = NULL;
    ImplTraits::CommonTokenType const* h = NULL;
    scripting::expression* e;
    scripting::expression* f;
    scripting::expression* b;
    scripting::arg_list* g;





        node = m_allocator->construct<scripting::array_allocation_expression>(m_allocator);



    {
        {

            ANTLR_UINT32 alt35;

            alt35=2;

            switch ( this->LA(1) )
            {
            case LSQBRACKET:
            	{
            		switch ( this->LA(2) )
            		{
            		case RSQBRACKET:
            			{
            				alt35=2;
            			}
            		    break;
            		case BOOL:
            		case BOOL_TYPE:
            		case CHAR:
            		case CHAR_TYPE:
            		case CPTR_TYPE:
            		case DOUBDEC:
            		case DOUBINC:
            		case FLOAT:
            		case FLOAT_TYPE:
            		case ID:
            		case INT:
            		case INT_TYPE:
            		case LBRACKET:
            		case LENGTH:
            		case NULLTOK:
            		case RESOURCE:
            		case SHARED_REF:
            		case STRING:
            		case STRING_TYPE:
            		case TYPE:
            		case VOID_TYPE:
            		case 68:
            		case 78:
            			{
            				alt35=1;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 35 );
            		    ex->set_state( 1 );


            		    goto rulearrayInitEx;

            		}

            	}
                break;
            case DLSQBRACKET:
            	{
            		switch ( this->LA(2) )
            		{
            		case DRSQBRACKET:
            			{
            				alt35=2;
            			}
            		    break;
            		case BOOL:
            		case BOOL_TYPE:
            		case CHAR:
            		case CHAR_TYPE:
            		case CPTR_TYPE:
            		case DOUBDEC:
            		case DOUBINC:
            		case FLOAT:
            		case FLOAT_TYPE:
            		case ID:
            		case INT:
            		case INT_TYPE:
            		case LBRACKET:
            		case LENGTH:
            		case NULLTOK:
            		case RESOURCE:
            		case SHARED_REF:
            		case STRING:
            		case STRING_TYPE:
            		case TYPE:
            		case VOID_TYPE:
            		case 68:
            		case 78:
            			{
            				alt35=1;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 35 );
            		    ex->set_state( 2 );


            		    goto rulearrayInitEx;

            		}

            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 35 );
                ex->set_state( 0 );


                goto rulearrayInitEx;

            }

            switch (alt35)
            {
        	case 1:
        	    {
        	        {
        	            {
        	                int alt33=2;
        	                switch ( this->LA(1) )
        	                {
        	                case LSQBRACKET:
        	                	{
        	                		alt33=1;
        	                	}
        	                    break;
        	                case DLSQBRACKET:
        	                	{
        	                		alt33=2;
        	                	}
        	                    break;

        	                default:
        	                    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
        	                    ex->set_decisionNum( 33 );
        	                    ex->set_state( 0 );


        	                    goto rulearrayInitEx;

        	                }

        	                switch (alt33)
        	                {
        	            	case 1:
        	            	    {
        	            	        {
        	            	             this->matchToken(LSQBRACKET, &FOLLOW_LSQBRACKET_in_arrayInit4685);
        	            	            if  (this->hasException())
        	            	            {
        	            	                goto rulearrayInitEx;
        	            	            }


        	            	            this->followPush(FOLLOW_expr_in_arrayInit4689);
        	            	            e=expr();

        	            	            this->followPop();
        	            	            if  (this->hasException())
        	            	            {
        	            	                goto rulearrayInitEx;
        	            	            }


        	            	             this->matchToken(RSQBRACKET, &FOLLOW_RSQBRACKET_in_arrayInit4691);
        	            	            if  (this->hasException())
        	            	            {
        	            	                goto rulearrayInitEx;
        	            	            }


        	            	            {
        	            	                 node->add_expression(e
        	            	                );
        	            	            }


        	            	        }


        	            	    }
        	            	    break;
        	            	case 2:
        	            	    {
        	            	        {
        	            	             this->matchToken(DLSQBRACKET, &FOLLOW_DLSQBRACKET_in_arrayInit4718);
        	            	            if  (this->hasException())
        	            	            {
        	            	                goto rulearrayInitEx;
        	            	            }


        	            	            this->followPush(FOLLOW_expr_in_arrayInit4722);
        	            	            f=expr();

        	            	            this->followPop();
        	            	            if  (this->hasException())
        	            	            {
        	            	                goto rulearrayInitEx;
        	            	            }


        	            	             this->matchToken(DRSQBRACKET, &FOLLOW_DRSQBRACKET_in_arrayInit4724);
        	            	            if  (this->hasException())
        	            	            {
        	            	                goto rulearrayInitEx;
        	            	            }


        	            	            {
        	            	                 node->add_expression(f
        	            	                ); node->set_runtime(true);
        	            	            }


        	            	        }


        	            	    }
        	            	    break;

        	                }
        	            }

        	            {
        	                 this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_arrayInit4743);
        	                if  (this->hasException())
        	                {
        	                    goto rulearrayInitEx;
        	                }


        	                this->followPush(FOLLOW_expr_in_arrayInit4747);
        	                b=expr();

        	                this->followPop();
        	                if  (this->hasException())
        	                {
        	                    goto rulearrayInitEx;
        	                }


        	                c =  this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_arrayInit4751);
        	                if  (this->hasException())
        	                {
        	                    goto rulearrayInitEx;
        	                }


        	                {
        	                     node->set_copy_initializer(b); SET_LOCATION(node, c);
        	                }


        	            }


        	        }


        	    }
        	    break;
        	case 2:
        	    {
        	        {
        	            {
        	                int alt34=2;
        	                switch ( this->LA(1) )
        	                {
        	                case LSQBRACKET:
        	                	{
        	                		alt34=1;
        	                	}
        	                    break;
        	                case DLSQBRACKET:
        	                	{
        	                		alt34=2;
        	                	}
        	                    break;

        	                default:
        	                    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
        	                    ex->set_decisionNum( 34 );
        	                    ex->set_state( 0 );


        	                    goto rulearrayInitEx;

        	                }

        	                switch (alt34)
        	                {
        	            	case 1:
        	            	    {
        	            	        {
        	            	             this->matchToken(LSQBRACKET, &FOLLOW_LSQBRACKET_in_arrayInit4793);
        	            	            if  (this->hasException())
        	            	            {
        	            	                goto rulearrayInitEx;
        	            	            }


        	            	             this->matchToken(RSQBRACKET, &FOLLOW_RSQBRACKET_in_arrayInit4795);
        	            	            if  (this->hasException())
        	            	            {
        	            	                goto rulearrayInitEx;
        	            	            }


        	            	        }


        	            	    }
        	            	    break;
        	            	case 2:
        	            	    {
        	            	        {
        	            	             this->matchToken(DLSQBRACKET, &FOLLOW_DLSQBRACKET_in_arrayInit4801);
        	            	            if  (this->hasException())
        	            	            {
        	            	                goto rulearrayInitEx;
        	            	            }


        	            	             this->matchToken(DRSQBRACKET, &FOLLOW_DRSQBRACKET_in_arrayInit4803);
        	            	            if  (this->hasException())
        	            	            {
        	            	                goto rulearrayInitEx;
        	            	            }


        	            	            {
        	            	                 node->set_runtime(true);
        	            	            }


        	            	        }


        	            	    }
        	            	    break;

        	                }
        	            }

        	            {
        	                 this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_arrayInit4822);
        	                if  (this->hasException())
        	                {
        	                    goto rulearrayInitEx;
        	                }


        	                this->followPush(FOLLOW_arglist_in_arrayInit4826);
        	                g=arglist();

        	                this->followPop();
        	                if  (this->hasException())
        	                {
        	                    goto rulearrayInitEx;
        	                }


        	                h =  this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_arrayInit4830);
        	                if  (this->hasException())
        	                {
        	                    goto rulearrayInitEx;
        	                }


        	            }


        	            {
        	                 node->set_inline_initializers(g); SET_LOCATION(node, h);
        	            }


        	        }


        	    }
        	    break;

            }
        }
    }
    goto rulearrayInitEx;
    rulearrayInitEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::declaration*
WNScriptASTParser::declaration()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::declaration* node;


    scripting::parameter* a;
    scripting::expression* c;





        node =  m_allocator->construct<scripting::declaration>(m_allocator);



    {
        {
            this->followPush(FOLLOW_param_in_declaration4873);
            a=param();

            this->followPop();
            if  (this->hasException())
            {
                goto ruledeclarationEx;
            }


            {
                 node->set_parameter(a
                ); SET_LOCATION_FROM_NODE(node, a
                );
            }


            {
                {
                     this->matchToken(85, &FOLLOW_85_in_declaration4908);
                    if  (this->hasException())
                    {
                        goto ruledeclarationEx;
                    }


                    {
                        {
                            this->followPush(FOLLOW_expr_in_declaration4915);
                            c=expr();

                            this->followPop();
                            if  (this->hasException())
                            {
                                goto ruledeclarationEx;
                            }


                        }


                        {
                             node->add_expression_initializer(c
                            ); SET_END_LOCATION_FROM_NODE(node, c
                            );
                        }


                    }


                }


            }


        }

    }
    goto ruledeclarationEx;
    ruledeclarationEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::declaration*
WNScriptASTParser::inherited_declaration()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::declaration* node;


    ImplTraits::CommonTokenType const* a = NULL;
    ImplTraits::CommonTokenType const* d = NULL;
    scripting::expression* c;





        node =  m_allocator->construct<scripting::declaration>(m_allocator);



    {
        {
             this->matchToken(80, &FOLLOW_80_in_inherited_declaration4965);
            if  (this->hasException())
            {
                goto ruleinherited_declarationEx;
            }


            a =  this->matchToken(ID, &FOLLOW_ID_in_inherited_declaration4969);
            if  (this->hasException())
            {
                goto ruleinherited_declarationEx;
            }


            {
                 node->set_inherited_parameter((a->getText()).c_str());  SET_LOCATION(node, a);
            }


            {
                 this->matchToken(85, &FOLLOW_85_in_inherited_declaration4982);
                if  (this->hasException())
                {
                    goto ruleinherited_declarationEx;
                }


                {
                    int alt36=2;
                    switch ( this->LA(1) )
                    {
                    case BOOL:
                    case BOOL_TYPE:
                    case CHAR:
                    case CHAR_TYPE:
                    case CPTR_TYPE:
                    case DOUBDEC:
                    case DOUBINC:
                    case FLOAT:
                    case FLOAT_TYPE:
                    case ID:
                    case INT:
                    case INT_TYPE:
                    case LBRACKET:
                    case LENGTH:
                    case NULLTOK:
                    case RESOURCE:
                    case SHARED_REF:
                    case STRING:
                    case STRING_TYPE:
                    case TYPE:
                    case VOID_TYPE:
                    case 68:
                    case 78:
                    	{
                    		alt36=1;
                    	}
                        break;
                    case DEFAULT:
                    	{
                    		alt36=2;
                    	}
                        break;

                    default:
                        ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                        ex->set_decisionNum( 36 );
                        ex->set_state( 0 );


                        goto ruleinherited_declarationEx;

                    }

                    switch (alt36)
                    {
                	case 1:
                	    {
                	        {
                	            this->followPush(FOLLOW_expr_in_inherited_declaration5018);
                	            c=expr();

                	            this->followPop();
                	            if  (this->hasException())
                	            {
                	                goto ruleinherited_declarationEx;
                	            }


                	            {
                	                 node->add_expression_initializer(c
                	                ); SET_END_LOCATION_FROM_NODE(node, c
                	                );
                	            }


                	        }


                	    }
                	    break;
                	case 2:
                	    {
                	        {
                	            d =  this->matchToken(DEFAULT, &FOLLOW_DEFAULT_in_inherited_declaration5044);
                	            if  (this->hasException())
                	            {
                	                goto ruleinherited_declarationEx;
                	            }


                	            {
                	                 node->set_default_initialization(); SET_END_LOCATION(node, d);
                	            }


                	        }


                	    }
                	    break;

                    }
                }

            }


        }

    }
    goto ruleinherited_declarationEx;
    ruleinherited_declarationEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::instruction*
WNScriptASTParser::instructionScalar()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::instruction* node;


    scripting::declaration* declaration41;
    scripting::instruction* assignment_or_expression42;





        node = nullptr;



    {
        {

            ANTLR_UINT32 alt37;

            alt37=2;

            switch ( this->LA(1) )
            {
            case VOID_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case ID:
            		case SLICETOK:
            		case SSOR:
            			{
            				alt37=1;
            			}
            		    break;
            		case LSQBRACKET:
            			{
            				switch ( this->LA(3) )
            				{
            				case RSQBRACKET:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACKET:
            							{
            								alt37=2;
            							}
            						    break;
            						case ID:
            							{
            								alt37=1;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 37 );
            						    ex->set_state( 15 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case INT:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt37=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt37=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 37 );
            								    ex->set_state( 32 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case AT:
            						case BACKGROUND:
            						case DEFER:
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACE:
            						case LBRACKET:
            						case LOW_PRIORITY:
            						case LSQBRACKET:
            						case QUESTION:
            						case SLICETOK:
            						case SSOR:
            						case 69:
            						case 70:
            						case 72:
            						case 73:
            						case 74:
            						case 76:
            						case 78:
            						case 80:
            						case 81:
            						case 83:
            						case 84:
            						case 86:
            						case 87:
            						case 88:
            						case 89:
            							{
            								alt37=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 37 );
            						    ex->set_state( 16 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case FLOAT:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt37=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt37=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 37 );
            								    ex->set_state( 32 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case AT:
            						case BACKGROUND:
            						case DEFER:
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACE:
            						case LBRACKET:
            						case LOW_PRIORITY:
            						case LSQBRACKET:
            						case QUESTION:
            						case SLICETOK:
            						case SSOR:
            						case 69:
            						case 70:
            						case 72:
            						case 73:
            						case 74:
            						case 76:
            						case 78:
            						case 80:
            						case 81:
            						case 83:
            						case 84:
            						case 86:
            						case 87:
            						case 88:
            						case 89:
            							{
            								alt37=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 37 );
            						    ex->set_state( 17 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case CHAR:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt37=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt37=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 37 );
            								    ex->set_state( 32 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case AT:
            						case BACKGROUND:
            						case DEFER:
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACE:
            						case LBRACKET:
            						case LOW_PRIORITY:
            						case LSQBRACKET:
            						case QUESTION:
            						case SLICETOK:
            						case SSOR:
            						case 69:
            						case 70:
            						case 72:
            						case 73:
            						case 74:
            						case 76:
            						case 78:
            						case 80:
            						case 81:
            						case 83:
            						case 84:
            						case 86:
            						case 87:
            						case 88:
            						case 89:
            							{
            								alt37=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 37 );
            						    ex->set_state( 18 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case STRING:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt37=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt37=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 37 );
            								    ex->set_state( 32 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case AT:
            						case BACKGROUND:
            						case DEFER:
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACE:
            						case LBRACKET:
            						case LOW_PRIORITY:
            						case LSQBRACKET:
            						case QUESTION:
            						case SLICETOK:
            						case SSOR:
            						case 69:
            						case 70:
            						case 72:
            						case 73:
            						case 74:
            						case 76:
            						case 78:
            						case 80:
            						case 81:
            						case 83:
            						case 84:
            						case 86:
            						case 87:
            						case 88:
            						case 89:
            							{
            								alt37=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 37 );
            						    ex->set_state( 19 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case BOOL:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt37=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt37=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 37 );
            								    ex->set_state( 32 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case AT:
            						case BACKGROUND:
            						case DEFER:
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACE:
            						case LBRACKET:
            						case LOW_PRIORITY:
            						case LSQBRACKET:
            						case QUESTION:
            						case SLICETOK:
            						case SSOR:
            						case 69:
            						case 70:
            						case 72:
            						case 73:
            						case 74:
            						case 76:
            						case 78:
            						case 80:
            						case 81:
            						case 83:
            						case 84:
            						case 86:
            						case 87:
            						case 88:
            						case 89:
            							{
            								alt37=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 37 );
            						    ex->set_state( 20 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case NULLTOK:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt37=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt37=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 37 );
            								    ex->set_state( 32 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case AT:
            						case BACKGROUND:
            						case DEFER:
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACE:
            						case LBRACKET:
            						case LOW_PRIORITY:
            						case LSQBRACKET:
            						case QUESTION:
            						case SLICETOK:
            						case SSOR:
            						case 69:
            						case 70:
            						case 72:
            						case 73:
            						case 74:
            						case 76:
            						case 78:
            						case 80:
            						case 81:
            						case 83:
            						case 84:
            						case 86:
            						case 87:
            						case 88:
            						case 89:
            							{
            								alt37=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 37 );
            						    ex->set_state( 21 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case VOID_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt37=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt37=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 37 );
            														    ex->set_state( 32 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case AT:
            												case BACKGROUND:
            												case DEFER:
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACE:
            												case LBRACKET:
            												case LOW_PRIORITY:
            												case LSQBRACKET:
            												case QUESTION:
            												case SLICETOK:
            												case SSOR:
            												case 69:
            												case 70:
            												case 72:
            												case 73:
            												case 74:
            												case 76:
            												case 78:
            												case 80:
            												case 81:
            												case 83:
            												case 84:
            												case 86:
            												case 87:
            												case 88:
            												case 89:
            													{
            														alt37=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 37 );
            												    ex->set_state( 52 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 37 );
            										    ex->set_state( 49 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 37 );
            								    ex->set_state( 33 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt37=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 37 );
            						    ex->set_state( 22 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case INT_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt37=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt37=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 37 );
            														    ex->set_state( 32 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case AT:
            												case BACKGROUND:
            												case DEFER:
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACE:
            												case LBRACKET:
            												case LOW_PRIORITY:
            												case LSQBRACKET:
            												case QUESTION:
            												case SLICETOK:
            												case SSOR:
            												case 69:
            												case 70:
            												case 72:
            												case 73:
            												case 74:
            												case 76:
            												case 78:
            												case 80:
            												case 81:
            												case 83:
            												case 84:
            												case 86:
            												case 87:
            												case 88:
            												case 89:
            													{
            														alt37=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 37 );
            												    ex->set_state( 52 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 37 );
            										    ex->set_state( 49 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 37 );
            								    ex->set_state( 33 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt37=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 37 );
            						    ex->set_state( 23 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case FLOAT_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt37=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt37=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 37 );
            														    ex->set_state( 32 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case AT:
            												case BACKGROUND:
            												case DEFER:
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACE:
            												case LBRACKET:
            												case LOW_PRIORITY:
            												case LSQBRACKET:
            												case QUESTION:
            												case SLICETOK:
            												case SSOR:
            												case 69:
            												case 70:
            												case 72:
            												case 73:
            												case 74:
            												case 76:
            												case 78:
            												case 80:
            												case 81:
            												case 83:
            												case 84:
            												case 86:
            												case 87:
            												case 88:
            												case 89:
            													{
            														alt37=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 37 );
            												    ex->set_state( 52 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 37 );
            										    ex->set_state( 49 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 37 );
            								    ex->set_state( 33 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt37=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 37 );
            						    ex->set_state( 24 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case CHAR_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt37=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt37=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 37 );
            														    ex->set_state( 32 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case AT:
            												case BACKGROUND:
            												case DEFER:
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACE:
            												case LBRACKET:
            												case LOW_PRIORITY:
            												case LSQBRACKET:
            												case QUESTION:
            												case SLICETOK:
            												case SSOR:
            												case 69:
            												case 70:
            												case 72:
            												case 73:
            												case 74:
            												case 76:
            												case 78:
            												case 80:
            												case 81:
            												case 83:
            												case 84:
            												case 86:
            												case 87:
            												case 88:
            												case 89:
            													{
            														alt37=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 37 );
            												    ex->set_state( 52 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 37 );
            										    ex->set_state( 49 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 37 );
            								    ex->set_state( 33 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt37=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 37 );
            						    ex->set_state( 25 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case BOOL_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt37=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt37=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 37 );
            														    ex->set_state( 32 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case AT:
            												case BACKGROUND:
            												case DEFER:
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACE:
            												case LBRACKET:
            												case LOW_PRIORITY:
            												case LSQBRACKET:
            												case QUESTION:
            												case SLICETOK:
            												case SSOR:
            												case 69:
            												case 70:
            												case 72:
            												case 73:
            												case 74:
            												case 76:
            												case 78:
            												case 80:
            												case 81:
            												case 83:
            												case 84:
            												case 86:
            												case 87:
            												case 88:
            												case 89:
            													{
            														alt37=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 37 );
            												    ex->set_state( 52 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 37 );
            										    ex->set_state( 49 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 37 );
            								    ex->set_state( 33 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt37=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 37 );
            						    ex->set_state( 26 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case CPTR_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt37=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt37=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 37 );
            														    ex->set_state( 32 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case AT:
            												case BACKGROUND:
            												case DEFER:
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACE:
            												case LBRACKET:
            												case LOW_PRIORITY:
            												case LSQBRACKET:
            												case QUESTION:
            												case SLICETOK:
            												case SSOR:
            												case 69:
            												case 70:
            												case 72:
            												case 73:
            												case 74:
            												case 76:
            												case 78:
            												case 80:
            												case 81:
            												case 83:
            												case 84:
            												case 86:
            												case 87:
            												case 88:
            												case 89:
            													{
            														alt37=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 37 );
            												    ex->set_state( 52 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 37 );
            										    ex->set_state( 49 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 37 );
            								    ex->set_state( 33 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt37=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 37 );
            						    ex->set_state( 27 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case STRING_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt37=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt37=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 37 );
            														    ex->set_state( 32 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case AT:
            												case BACKGROUND:
            												case DEFER:
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACE:
            												case LBRACKET:
            												case LOW_PRIORITY:
            												case LSQBRACKET:
            												case QUESTION:
            												case SLICETOK:
            												case SSOR:
            												case 69:
            												case 70:
            												case 72:
            												case 73:
            												case 74:
            												case 76:
            												case 78:
            												case 80:
            												case 81:
            												case 83:
            												case 84:
            												case 86:
            												case 87:
            												case 88:
            												case 89:
            													{
            														alt37=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 37 );
            												    ex->set_state( 52 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 37 );
            										    ex->set_state( 49 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 37 );
            								    ex->set_state( 33 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt37=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 37 );
            						    ex->set_state( 28 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case DOUBDEC:
            				case DOUBINC:
            				case ID:
            				case LBRACKET:
            				case LENGTH:
            				case RESOURCE:
            				case SHARED_REF:
            				case TYPE:
            				case 68:
            				case 78:
            					{
            						alt37=2;
            					}
            				    break;

            				default:
            				    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 37 );
            				    ex->set_state( 12 );


            				    goto ruleinstructionScalarEx;

            				}

            			}
            		    break;
            		case DLSQBRACKET:
            			{
            				switch ( this->LA(3) )
            				{
            				case DRSQBRACKET:
            					{
            						switch ( this->LA(4) )
            						{
            						case ID:
            							{
            								alt37=1;
            							}
            						    break;
            						case LBRACKET:
            							{
            								alt37=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 37 );
            						    ex->set_state( 29 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case BOOL:
            				case BOOL_TYPE:
            				case CHAR:
            				case CHAR_TYPE:
            				case CPTR_TYPE:
            				case DOUBDEC:
            				case DOUBINC:
            				case FLOAT:
            				case FLOAT_TYPE:
            				case ID:
            				case INT:
            				case INT_TYPE:
            				case LBRACKET:
            				case LENGTH:
            				case NULLTOK:
            				case RESOURCE:
            				case SHARED_REF:
            				case STRING:
            				case STRING_TYPE:
            				case TYPE:
            				case VOID_TYPE:
            				case 68:
            				case 78:
            					{
            						alt37=2;
            					}
            				    break;

            				default:
            				    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 37 );
            				    ex->set_state( 13 );


            				    goto ruleinstructionScalarEx;

            				}

            			}
            		    break;
            		case LBRACE:
            		case LBRACKET:
            			{
            				alt37=2;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 37 );
            		    ex->set_state( 1 );


            		    goto ruleinstructionScalarEx;

            		}

            	}
                break;
            case INT_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case ID:
            		case SLICETOK:
            		case SSOR:
            			{
            				alt37=1;
            			}
            		    break;
            		case LSQBRACKET:
            			{
            				switch ( this->LA(3) )
            				{
            				case RSQBRACKET:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACKET:
            							{
            								alt37=2;
            							}
            						    break;
            						case ID:
            							{
            								alt37=1;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 37 );
            						    ex->set_state( 15 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case INT:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt37=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt37=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 37 );
            								    ex->set_state( 32 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case AT:
            						case BACKGROUND:
            						case DEFER:
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACE:
            						case LBRACKET:
            						case LOW_PRIORITY:
            						case LSQBRACKET:
            						case QUESTION:
            						case SLICETOK:
            						case SSOR:
            						case 69:
            						case 70:
            						case 72:
            						case 73:
            						case 74:
            						case 76:
            						case 78:
            						case 80:
            						case 81:
            						case 83:
            						case 84:
            						case 86:
            						case 87:
            						case 88:
            						case 89:
            							{
            								alt37=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 37 );
            						    ex->set_state( 16 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case FLOAT:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt37=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt37=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 37 );
            								    ex->set_state( 32 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case AT:
            						case BACKGROUND:
            						case DEFER:
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACE:
            						case LBRACKET:
            						case LOW_PRIORITY:
            						case LSQBRACKET:
            						case QUESTION:
            						case SLICETOK:
            						case SSOR:
            						case 69:
            						case 70:
            						case 72:
            						case 73:
            						case 74:
            						case 76:
            						case 78:
            						case 80:
            						case 81:
            						case 83:
            						case 84:
            						case 86:
            						case 87:
            						case 88:
            						case 89:
            							{
            								alt37=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 37 );
            						    ex->set_state( 17 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case CHAR:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt37=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt37=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 37 );
            								    ex->set_state( 32 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case AT:
            						case BACKGROUND:
            						case DEFER:
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACE:
            						case LBRACKET:
            						case LOW_PRIORITY:
            						case LSQBRACKET:
            						case QUESTION:
            						case SLICETOK:
            						case SSOR:
            						case 69:
            						case 70:
            						case 72:
            						case 73:
            						case 74:
            						case 76:
            						case 78:
            						case 80:
            						case 81:
            						case 83:
            						case 84:
            						case 86:
            						case 87:
            						case 88:
            						case 89:
            							{
            								alt37=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 37 );
            						    ex->set_state( 18 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case STRING:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt37=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt37=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 37 );
            								    ex->set_state( 32 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case AT:
            						case BACKGROUND:
            						case DEFER:
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACE:
            						case LBRACKET:
            						case LOW_PRIORITY:
            						case LSQBRACKET:
            						case QUESTION:
            						case SLICETOK:
            						case SSOR:
            						case 69:
            						case 70:
            						case 72:
            						case 73:
            						case 74:
            						case 76:
            						case 78:
            						case 80:
            						case 81:
            						case 83:
            						case 84:
            						case 86:
            						case 87:
            						case 88:
            						case 89:
            							{
            								alt37=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 37 );
            						    ex->set_state( 19 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case BOOL:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt37=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt37=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 37 );
            								    ex->set_state( 32 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case AT:
            						case BACKGROUND:
            						case DEFER:
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACE:
            						case LBRACKET:
            						case LOW_PRIORITY:
            						case LSQBRACKET:
            						case QUESTION:
            						case SLICETOK:
            						case SSOR:
            						case 69:
            						case 70:
            						case 72:
            						case 73:
            						case 74:
            						case 76:
            						case 78:
            						case 80:
            						case 81:
            						case 83:
            						case 84:
            						case 86:
            						case 87:
            						case 88:
            						case 89:
            							{
            								alt37=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 37 );
            						    ex->set_state( 20 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case NULLTOK:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt37=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt37=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 37 );
            								    ex->set_state( 32 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case AT:
            						case BACKGROUND:
            						case DEFER:
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACE:
            						case LBRACKET:
            						case LOW_PRIORITY:
            						case LSQBRACKET:
            						case QUESTION:
            						case SLICETOK:
            						case SSOR:
            						case 69:
            						case 70:
            						case 72:
            						case 73:
            						case 74:
            						case 76:
            						case 78:
            						case 80:
            						case 81:
            						case 83:
            						case 84:
            						case 86:
            						case 87:
            						case 88:
            						case 89:
            							{
            								alt37=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 37 );
            						    ex->set_state( 21 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case VOID_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt37=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt37=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 37 );
            														    ex->set_state( 32 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case AT:
            												case BACKGROUND:
            												case DEFER:
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACE:
            												case LBRACKET:
            												case LOW_PRIORITY:
            												case LSQBRACKET:
            												case QUESTION:
            												case SLICETOK:
            												case SSOR:
            												case 69:
            												case 70:
            												case 72:
            												case 73:
            												case 74:
            												case 76:
            												case 78:
            												case 80:
            												case 81:
            												case 83:
            												case 84:
            												case 86:
            												case 87:
            												case 88:
            												case 89:
            													{
            														alt37=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 37 );
            												    ex->set_state( 52 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 37 );
            										    ex->set_state( 49 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 37 );
            								    ex->set_state( 33 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt37=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 37 );
            						    ex->set_state( 22 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case INT_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt37=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt37=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 37 );
            														    ex->set_state( 32 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case AT:
            												case BACKGROUND:
            												case DEFER:
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACE:
            												case LBRACKET:
            												case LOW_PRIORITY:
            												case LSQBRACKET:
            												case QUESTION:
            												case SLICETOK:
            												case SSOR:
            												case 69:
            												case 70:
            												case 72:
            												case 73:
            												case 74:
            												case 76:
            												case 78:
            												case 80:
            												case 81:
            												case 83:
            												case 84:
            												case 86:
            												case 87:
            												case 88:
            												case 89:
            													{
            														alt37=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 37 );
            												    ex->set_state( 52 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 37 );
            										    ex->set_state( 49 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 37 );
            								    ex->set_state( 33 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt37=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 37 );
            						    ex->set_state( 23 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case FLOAT_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt37=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt37=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 37 );
            														    ex->set_state( 32 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case AT:
            												case BACKGROUND:
            												case DEFER:
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACE:
            												case LBRACKET:
            												case LOW_PRIORITY:
            												case LSQBRACKET:
            												case QUESTION:
            												case SLICETOK:
            												case SSOR:
            												case 69:
            												case 70:
            												case 72:
            												case 73:
            												case 74:
            												case 76:
            												case 78:
            												case 80:
            												case 81:
            												case 83:
            												case 84:
            												case 86:
            												case 87:
            												case 88:
            												case 89:
            													{
            														alt37=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 37 );
            												    ex->set_state( 52 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 37 );
            										    ex->set_state( 49 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 37 );
            								    ex->set_state( 33 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt37=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 37 );
            						    ex->set_state( 24 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case CHAR_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt37=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt37=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 37 );
            														    ex->set_state( 32 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case AT:
            												case BACKGROUND:
            												case DEFER:
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACE:
            												case LBRACKET:
            												case LOW_PRIORITY:
            												case LSQBRACKET:
            												case QUESTION:
            												case SLICETOK:
            												case SSOR:
            												case 69:
            												case 70:
            												case 72:
            												case 73:
            												case 74:
            												case 76:
            												case 78:
            												case 80:
            												case 81:
            												case 83:
            												case 84:
            												case 86:
            												case 87:
            												case 88:
            												case 89:
            													{
            														alt37=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 37 );
            												    ex->set_state( 52 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 37 );
            										    ex->set_state( 49 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 37 );
            								    ex->set_state( 33 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt37=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 37 );
            						    ex->set_state( 25 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case BOOL_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt37=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt37=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 37 );
            														    ex->set_state( 32 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case AT:
            												case BACKGROUND:
            												case DEFER:
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACE:
            												case LBRACKET:
            												case LOW_PRIORITY:
            												case LSQBRACKET:
            												case QUESTION:
            												case SLICETOK:
            												case SSOR:
            												case 69:
            												case 70:
            												case 72:
            												case 73:
            												case 74:
            												case 76:
            												case 78:
            												case 80:
            												case 81:
            												case 83:
            												case 84:
            												case 86:
            												case 87:
            												case 88:
            												case 89:
            													{
            														alt37=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 37 );
            												    ex->set_state( 52 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 37 );
            										    ex->set_state( 49 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 37 );
            								    ex->set_state( 33 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt37=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 37 );
            						    ex->set_state( 26 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case CPTR_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt37=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt37=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 37 );
            														    ex->set_state( 32 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case AT:
            												case BACKGROUND:
            												case DEFER:
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACE:
            												case LBRACKET:
            												case LOW_PRIORITY:
            												case LSQBRACKET:
            												case QUESTION:
            												case SLICETOK:
            												case SSOR:
            												case 69:
            												case 70:
            												case 72:
            												case 73:
            												case 74:
            												case 76:
            												case 78:
            												case 80:
            												case 81:
            												case 83:
            												case 84:
            												case 86:
            												case 87:
            												case 88:
            												case 89:
            													{
            														alt37=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 37 );
            												    ex->set_state( 52 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 37 );
            										    ex->set_state( 49 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 37 );
            								    ex->set_state( 33 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt37=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 37 );
            						    ex->set_state( 27 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case STRING_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt37=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt37=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 37 );
            														    ex->set_state( 32 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case AT:
            												case BACKGROUND:
            												case DEFER:
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACE:
            												case LBRACKET:
            												case LOW_PRIORITY:
            												case LSQBRACKET:
            												case QUESTION:
            												case SLICETOK:
            												case SSOR:
            												case 69:
            												case 70:
            												case 72:
            												case 73:
            												case 74:
            												case 76:
            												case 78:
            												case 80:
            												case 81:
            												case 83:
            												case 84:
            												case 86:
            												case 87:
            												case 88:
            												case 89:
            													{
            														alt37=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 37 );
            												    ex->set_state( 52 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 37 );
            										    ex->set_state( 49 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 37 );
            								    ex->set_state( 33 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt37=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 37 );
            						    ex->set_state( 28 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case DOUBDEC:
            				case DOUBINC:
            				case ID:
            				case LBRACKET:
            				case LENGTH:
            				case RESOURCE:
            				case SHARED_REF:
            				case TYPE:
            				case 68:
            				case 78:
            					{
            						alt37=2;
            					}
            				    break;

            				default:
            				    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 37 );
            				    ex->set_state( 12 );


            				    goto ruleinstructionScalarEx;

            				}

            			}
            		    break;
            		case DLSQBRACKET:
            			{
            				switch ( this->LA(3) )
            				{
            				case DRSQBRACKET:
            					{
            						switch ( this->LA(4) )
            						{
            						case ID:
            							{
            								alt37=1;
            							}
            						    break;
            						case LBRACKET:
            							{
            								alt37=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 37 );
            						    ex->set_state( 29 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case BOOL:
            				case BOOL_TYPE:
            				case CHAR:
            				case CHAR_TYPE:
            				case CPTR_TYPE:
            				case DOUBDEC:
            				case DOUBINC:
            				case FLOAT:
            				case FLOAT_TYPE:
            				case ID:
            				case INT:
            				case INT_TYPE:
            				case LBRACKET:
            				case LENGTH:
            				case NULLTOK:
            				case RESOURCE:
            				case SHARED_REF:
            				case STRING:
            				case STRING_TYPE:
            				case TYPE:
            				case VOID_TYPE:
            				case 68:
            				case 78:
            					{
            						alt37=2;
            					}
            				    break;

            				default:
            				    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 37 );
            				    ex->set_state( 13 );


            				    goto ruleinstructionScalarEx;

            				}

            			}
            		    break;
            		case LBRACE:
            		case LBRACKET:
            			{
            				alt37=2;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 37 );
            		    ex->set_state( 2 );


            		    goto ruleinstructionScalarEx;

            		}

            	}
                break;
            case FLOAT_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case ID:
            		case SLICETOK:
            		case SSOR:
            			{
            				alt37=1;
            			}
            		    break;
            		case LSQBRACKET:
            			{
            				switch ( this->LA(3) )
            				{
            				case RSQBRACKET:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACKET:
            							{
            								alt37=2;
            							}
            						    break;
            						case ID:
            							{
            								alt37=1;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 37 );
            						    ex->set_state( 15 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case INT:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt37=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt37=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 37 );
            								    ex->set_state( 32 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case AT:
            						case BACKGROUND:
            						case DEFER:
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACE:
            						case LBRACKET:
            						case LOW_PRIORITY:
            						case LSQBRACKET:
            						case QUESTION:
            						case SLICETOK:
            						case SSOR:
            						case 69:
            						case 70:
            						case 72:
            						case 73:
            						case 74:
            						case 76:
            						case 78:
            						case 80:
            						case 81:
            						case 83:
            						case 84:
            						case 86:
            						case 87:
            						case 88:
            						case 89:
            							{
            								alt37=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 37 );
            						    ex->set_state( 16 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case FLOAT:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt37=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt37=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 37 );
            								    ex->set_state( 32 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case AT:
            						case BACKGROUND:
            						case DEFER:
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACE:
            						case LBRACKET:
            						case LOW_PRIORITY:
            						case LSQBRACKET:
            						case QUESTION:
            						case SLICETOK:
            						case SSOR:
            						case 69:
            						case 70:
            						case 72:
            						case 73:
            						case 74:
            						case 76:
            						case 78:
            						case 80:
            						case 81:
            						case 83:
            						case 84:
            						case 86:
            						case 87:
            						case 88:
            						case 89:
            							{
            								alt37=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 37 );
            						    ex->set_state( 17 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case CHAR:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt37=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt37=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 37 );
            								    ex->set_state( 32 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case AT:
            						case BACKGROUND:
            						case DEFER:
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACE:
            						case LBRACKET:
            						case LOW_PRIORITY:
            						case LSQBRACKET:
            						case QUESTION:
            						case SLICETOK:
            						case SSOR:
            						case 69:
            						case 70:
            						case 72:
            						case 73:
            						case 74:
            						case 76:
            						case 78:
            						case 80:
            						case 81:
            						case 83:
            						case 84:
            						case 86:
            						case 87:
            						case 88:
            						case 89:
            							{
            								alt37=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 37 );
            						    ex->set_state( 18 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case STRING:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt37=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt37=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 37 );
            								    ex->set_state( 32 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case AT:
            						case BACKGROUND:
            						case DEFER:
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACE:
            						case LBRACKET:
            						case LOW_PRIORITY:
            						case LSQBRACKET:
            						case QUESTION:
            						case SLICETOK:
            						case SSOR:
            						case 69:
            						case 70:
            						case 72:
            						case 73:
            						case 74:
            						case 76:
            						case 78:
            						case 80:
            						case 81:
            						case 83:
            						case 84:
            						case 86:
            						case 87:
            						case 88:
            						case 89:
            							{
            								alt37=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 37 );
            						    ex->set_state( 19 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case BOOL:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt37=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt37=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 37 );
            								    ex->set_state( 32 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case AT:
            						case BACKGROUND:
            						case DEFER:
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACE:
            						case LBRACKET:
            						case LOW_PRIORITY:
            						case LSQBRACKET:
            						case QUESTION:
            						case SLICETOK:
            						case SSOR:
            						case 69:
            						case 70:
            						case 72:
            						case 73:
            						case 74:
            						case 76:
            						case 78:
            						case 80:
            						case 81:
            						case 83:
            						case 84:
            						case 86:
            						case 87:
            						case 88:
            						case 89:
            							{
            								alt37=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 37 );
            						    ex->set_state( 20 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case NULLTOK:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt37=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt37=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 37 );
            								    ex->set_state( 32 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case AT:
            						case BACKGROUND:
            						case DEFER:
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACE:
            						case LBRACKET:
            						case LOW_PRIORITY:
            						case LSQBRACKET:
            						case QUESTION:
            						case SLICETOK:
            						case SSOR:
            						case 69:
            						case 70:
            						case 72:
            						case 73:
            						case 74:
            						case 76:
            						case 78:
            						case 80:
            						case 81:
            						case 83:
            						case 84:
            						case 86:
            						case 87:
            						case 88:
            						case 89:
            							{
            								alt37=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 37 );
            						    ex->set_state( 21 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case VOID_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt37=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt37=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 37 );
            														    ex->set_state( 32 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case AT:
            												case BACKGROUND:
            												case DEFER:
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACE:
            												case LBRACKET:
            												case LOW_PRIORITY:
            												case LSQBRACKET:
            												case QUESTION:
            												case SLICETOK:
            												case SSOR:
            												case 69:
            												case 70:
            												case 72:
            												case 73:
            												case 74:
            												case 76:
            												case 78:
            												case 80:
            												case 81:
            												case 83:
            												case 84:
            												case 86:
            												case 87:
            												case 88:
            												case 89:
            													{
            														alt37=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 37 );
            												    ex->set_state( 52 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 37 );
            										    ex->set_state( 49 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 37 );
            								    ex->set_state( 33 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt37=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 37 );
            						    ex->set_state( 22 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case INT_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt37=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt37=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 37 );
            														    ex->set_state( 32 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case AT:
            												case BACKGROUND:
            												case DEFER:
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACE:
            												case LBRACKET:
            												case LOW_PRIORITY:
            												case LSQBRACKET:
            												case QUESTION:
            												case SLICETOK:
            												case SSOR:
            												case 69:
            												case 70:
            												case 72:
            												case 73:
            												case 74:
            												case 76:
            												case 78:
            												case 80:
            												case 81:
            												case 83:
            												case 84:
            												case 86:
            												case 87:
            												case 88:
            												case 89:
            													{
            														alt37=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 37 );
            												    ex->set_state( 52 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 37 );
            										    ex->set_state( 49 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 37 );
            								    ex->set_state( 33 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt37=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 37 );
            						    ex->set_state( 23 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case FLOAT_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt37=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt37=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 37 );
            														    ex->set_state( 32 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case AT:
            												case BACKGROUND:
            												case DEFER:
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACE:
            												case LBRACKET:
            												case LOW_PRIORITY:
            												case LSQBRACKET:
            												case QUESTION:
            												case SLICETOK:
            												case SSOR:
            												case 69:
            												case 70:
            												case 72:
            												case 73:
            												case 74:
            												case 76:
            												case 78:
            												case 80:
            												case 81:
            												case 83:
            												case 84:
            												case 86:
            												case 87:
            												case 88:
            												case 89:
            													{
            														alt37=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 37 );
            												    ex->set_state( 52 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 37 );
            										    ex->set_state( 49 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 37 );
            								    ex->set_state( 33 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt37=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 37 );
            						    ex->set_state( 24 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case CHAR_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt37=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt37=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 37 );
            														    ex->set_state( 32 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case AT:
            												case BACKGROUND:
            												case DEFER:
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACE:
            												case LBRACKET:
            												case LOW_PRIORITY:
            												case LSQBRACKET:
            												case QUESTION:
            												case SLICETOK:
            												case SSOR:
            												case 69:
            												case 70:
            												case 72:
            												case 73:
            												case 74:
            												case 76:
            												case 78:
            												case 80:
            												case 81:
            												case 83:
            												case 84:
            												case 86:
            												case 87:
            												case 88:
            												case 89:
            													{
            														alt37=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 37 );
            												    ex->set_state( 52 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 37 );
            										    ex->set_state( 49 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 37 );
            								    ex->set_state( 33 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt37=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 37 );
            						    ex->set_state( 25 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case BOOL_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt37=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt37=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 37 );
            														    ex->set_state( 32 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case AT:
            												case BACKGROUND:
            												case DEFER:
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACE:
            												case LBRACKET:
            												case LOW_PRIORITY:
            												case LSQBRACKET:
            												case QUESTION:
            												case SLICETOK:
            												case SSOR:
            												case 69:
            												case 70:
            												case 72:
            												case 73:
            												case 74:
            												case 76:
            												case 78:
            												case 80:
            												case 81:
            												case 83:
            												case 84:
            												case 86:
            												case 87:
            												case 88:
            												case 89:
            													{
            														alt37=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 37 );
            												    ex->set_state( 52 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 37 );
            										    ex->set_state( 49 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 37 );
            								    ex->set_state( 33 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt37=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 37 );
            						    ex->set_state( 26 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case CPTR_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt37=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt37=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 37 );
            														    ex->set_state( 32 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case AT:
            												case BACKGROUND:
            												case DEFER:
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACE:
            												case LBRACKET:
            												case LOW_PRIORITY:
            												case LSQBRACKET:
            												case QUESTION:
            												case SLICETOK:
            												case SSOR:
            												case 69:
            												case 70:
            												case 72:
            												case 73:
            												case 74:
            												case 76:
            												case 78:
            												case 80:
            												case 81:
            												case 83:
            												case 84:
            												case 86:
            												case 87:
            												case 88:
            												case 89:
            													{
            														alt37=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 37 );
            												    ex->set_state( 52 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 37 );
            										    ex->set_state( 49 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 37 );
            								    ex->set_state( 33 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt37=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 37 );
            						    ex->set_state( 27 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case STRING_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt37=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt37=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 37 );
            														    ex->set_state( 32 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case AT:
            												case BACKGROUND:
            												case DEFER:
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACE:
            												case LBRACKET:
            												case LOW_PRIORITY:
            												case LSQBRACKET:
            												case QUESTION:
            												case SLICETOK:
            												case SSOR:
            												case 69:
            												case 70:
            												case 72:
            												case 73:
            												case 74:
            												case 76:
            												case 78:
            												case 80:
            												case 81:
            												case 83:
            												case 84:
            												case 86:
            												case 87:
            												case 88:
            												case 89:
            													{
            														alt37=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 37 );
            												    ex->set_state( 52 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 37 );
            										    ex->set_state( 49 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 37 );
            								    ex->set_state( 33 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt37=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 37 );
            						    ex->set_state( 28 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case DOUBDEC:
            				case DOUBINC:
            				case ID:
            				case LBRACKET:
            				case LENGTH:
            				case RESOURCE:
            				case SHARED_REF:
            				case TYPE:
            				case 68:
            				case 78:
            					{
            						alt37=2;
            					}
            				    break;

            				default:
            				    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 37 );
            				    ex->set_state( 12 );


            				    goto ruleinstructionScalarEx;

            				}

            			}
            		    break;
            		case DLSQBRACKET:
            			{
            				switch ( this->LA(3) )
            				{
            				case DRSQBRACKET:
            					{
            						switch ( this->LA(4) )
            						{
            						case ID:
            							{
            								alt37=1;
            							}
            						    break;
            						case LBRACKET:
            							{
            								alt37=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 37 );
            						    ex->set_state( 29 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case BOOL:
            				case BOOL_TYPE:
            				case CHAR:
            				case CHAR_TYPE:
            				case CPTR_TYPE:
            				case DOUBDEC:
            				case DOUBINC:
            				case FLOAT:
            				case FLOAT_TYPE:
            				case ID:
            				case INT:
            				case INT_TYPE:
            				case LBRACKET:
            				case LENGTH:
            				case NULLTOK:
            				case RESOURCE:
            				case SHARED_REF:
            				case STRING:
            				case STRING_TYPE:
            				case TYPE:
            				case VOID_TYPE:
            				case 68:
            				case 78:
            					{
            						alt37=2;
            					}
            				    break;

            				default:
            				    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 37 );
            				    ex->set_state( 13 );


            				    goto ruleinstructionScalarEx;

            				}

            			}
            		    break;
            		case LBRACE:
            		case LBRACKET:
            			{
            				alt37=2;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 37 );
            		    ex->set_state( 3 );


            		    goto ruleinstructionScalarEx;

            		}

            	}
                break;
            case CHAR_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case ID:
            		case SLICETOK:
            		case SSOR:
            			{
            				alt37=1;
            			}
            		    break;
            		case LSQBRACKET:
            			{
            				switch ( this->LA(3) )
            				{
            				case RSQBRACKET:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACKET:
            							{
            								alt37=2;
            							}
            						    break;
            						case ID:
            							{
            								alt37=1;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 37 );
            						    ex->set_state( 15 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case INT:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt37=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt37=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 37 );
            								    ex->set_state( 32 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case AT:
            						case BACKGROUND:
            						case DEFER:
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACE:
            						case LBRACKET:
            						case LOW_PRIORITY:
            						case LSQBRACKET:
            						case QUESTION:
            						case SLICETOK:
            						case SSOR:
            						case 69:
            						case 70:
            						case 72:
            						case 73:
            						case 74:
            						case 76:
            						case 78:
            						case 80:
            						case 81:
            						case 83:
            						case 84:
            						case 86:
            						case 87:
            						case 88:
            						case 89:
            							{
            								alt37=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 37 );
            						    ex->set_state( 16 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case FLOAT:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt37=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt37=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 37 );
            								    ex->set_state( 32 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case AT:
            						case BACKGROUND:
            						case DEFER:
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACE:
            						case LBRACKET:
            						case LOW_PRIORITY:
            						case LSQBRACKET:
            						case QUESTION:
            						case SLICETOK:
            						case SSOR:
            						case 69:
            						case 70:
            						case 72:
            						case 73:
            						case 74:
            						case 76:
            						case 78:
            						case 80:
            						case 81:
            						case 83:
            						case 84:
            						case 86:
            						case 87:
            						case 88:
            						case 89:
            							{
            								alt37=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 37 );
            						    ex->set_state( 17 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case CHAR:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt37=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt37=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 37 );
            								    ex->set_state( 32 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case AT:
            						case BACKGROUND:
            						case DEFER:
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACE:
            						case LBRACKET:
            						case LOW_PRIORITY:
            						case LSQBRACKET:
            						case QUESTION:
            						case SLICETOK:
            						case SSOR:
            						case 69:
            						case 70:
            						case 72:
            						case 73:
            						case 74:
            						case 76:
            						case 78:
            						case 80:
            						case 81:
            						case 83:
            						case 84:
            						case 86:
            						case 87:
            						case 88:
            						case 89:
            							{
            								alt37=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 37 );
            						    ex->set_state( 18 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case STRING:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt37=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt37=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 37 );
            								    ex->set_state( 32 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case AT:
            						case BACKGROUND:
            						case DEFER:
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACE:
            						case LBRACKET:
            						case LOW_PRIORITY:
            						case LSQBRACKET:
            						case QUESTION:
            						case SLICETOK:
            						case SSOR:
            						case 69:
            						case 70:
            						case 72:
            						case 73:
            						case 74:
            						case 76:
            						case 78:
            						case 80:
            						case 81:
            						case 83:
            						case 84:
            						case 86:
            						case 87:
            						case 88:
            						case 89:
            							{
            								alt37=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 37 );
            						    ex->set_state( 19 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case BOOL:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt37=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt37=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 37 );
            								    ex->set_state( 32 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case AT:
            						case BACKGROUND:
            						case DEFER:
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACE:
            						case LBRACKET:
            						case LOW_PRIORITY:
            						case LSQBRACKET:
            						case QUESTION:
            						case SLICETOK:
            						case SSOR:
            						case 69:
            						case 70:
            						case 72:
            						case 73:
            						case 74:
            						case 76:
            						case 78:
            						case 80:
            						case 81:
            						case 83:
            						case 84:
            						case 86:
            						case 87:
            						case 88:
            						case 89:
            							{
            								alt37=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 37 );
            						    ex->set_state( 20 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case NULLTOK:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt37=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt37=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 37 );
            								    ex->set_state( 32 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case AT:
            						case BACKGROUND:
            						case DEFER:
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACE:
            						case LBRACKET:
            						case LOW_PRIORITY:
            						case LSQBRACKET:
            						case QUESTION:
            						case SLICETOK:
            						case SSOR:
            						case 69:
            						case 70:
            						case 72:
            						case 73:
            						case 74:
            						case 76:
            						case 78:
            						case 80:
            						case 81:
            						case 83:
            						case 84:
            						case 86:
            						case 87:
            						case 88:
            						case 89:
            							{
            								alt37=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 37 );
            						    ex->set_state( 21 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case VOID_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt37=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt37=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 37 );
            														    ex->set_state( 32 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case AT:
            												case BACKGROUND:
            												case DEFER:
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACE:
            												case LBRACKET:
            												case LOW_PRIORITY:
            												case LSQBRACKET:
            												case QUESTION:
            												case SLICETOK:
            												case SSOR:
            												case 69:
            												case 70:
            												case 72:
            												case 73:
            												case 74:
            												case 76:
            												case 78:
            												case 80:
            												case 81:
            												case 83:
            												case 84:
            												case 86:
            												case 87:
            												case 88:
            												case 89:
            													{
            														alt37=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 37 );
            												    ex->set_state( 52 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 37 );
            										    ex->set_state( 49 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 37 );
            								    ex->set_state( 33 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt37=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 37 );
            						    ex->set_state( 22 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case INT_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt37=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt37=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 37 );
            														    ex->set_state( 32 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case AT:
            												case BACKGROUND:
            												case DEFER:
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACE:
            												case LBRACKET:
            												case LOW_PRIORITY:
            												case LSQBRACKET:
            												case QUESTION:
            												case SLICETOK:
            												case SSOR:
            												case 69:
            												case 70:
            												case 72:
            												case 73:
            												case 74:
            												case 76:
            												case 78:
            												case 80:
            												case 81:
            												case 83:
            												case 84:
            												case 86:
            												case 87:
            												case 88:
            												case 89:
            													{
            														alt37=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 37 );
            												    ex->set_state( 52 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 37 );
            										    ex->set_state( 49 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 37 );
            								    ex->set_state( 33 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt37=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 37 );
            						    ex->set_state( 23 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case FLOAT_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt37=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt37=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 37 );
            														    ex->set_state( 32 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case AT:
            												case BACKGROUND:
            												case DEFER:
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACE:
            												case LBRACKET:
            												case LOW_PRIORITY:
            												case LSQBRACKET:
            												case QUESTION:
            												case SLICETOK:
            												case SSOR:
            												case 69:
            												case 70:
            												case 72:
            												case 73:
            												case 74:
            												case 76:
            												case 78:
            												case 80:
            												case 81:
            												case 83:
            												case 84:
            												case 86:
            												case 87:
            												case 88:
            												case 89:
            													{
            														alt37=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 37 );
            												    ex->set_state( 52 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 37 );
            										    ex->set_state( 49 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 37 );
            								    ex->set_state( 33 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt37=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 37 );
            						    ex->set_state( 24 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case CHAR_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt37=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt37=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 37 );
            														    ex->set_state( 32 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case AT:
            												case BACKGROUND:
            												case DEFER:
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACE:
            												case LBRACKET:
            												case LOW_PRIORITY:
            												case LSQBRACKET:
            												case QUESTION:
            												case SLICETOK:
            												case SSOR:
            												case 69:
            												case 70:
            												case 72:
            												case 73:
            												case 74:
            												case 76:
            												case 78:
            												case 80:
            												case 81:
            												case 83:
            												case 84:
            												case 86:
            												case 87:
            												case 88:
            												case 89:
            													{
            														alt37=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 37 );
            												    ex->set_state( 52 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 37 );
            										    ex->set_state( 49 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 37 );
            								    ex->set_state( 33 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt37=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 37 );
            						    ex->set_state( 25 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case BOOL_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt37=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt37=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 37 );
            														    ex->set_state( 32 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case AT:
            												case BACKGROUND:
            												case DEFER:
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACE:
            												case LBRACKET:
            												case LOW_PRIORITY:
            												case LSQBRACKET:
            												case QUESTION:
            												case SLICETOK:
            												case SSOR:
            												case 69:
            												case 70:
            												case 72:
            												case 73:
            												case 74:
            												case 76:
            												case 78:
            												case 80:
            												case 81:
            												case 83:
            												case 84:
            												case 86:
            												case 87:
            												case 88:
            												case 89:
            													{
            														alt37=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 37 );
            												    ex->set_state( 52 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 37 );
            										    ex->set_state( 49 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 37 );
            								    ex->set_state( 33 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt37=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 37 );
            						    ex->set_state( 26 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case CPTR_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt37=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt37=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 37 );
            														    ex->set_state( 32 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case AT:
            												case BACKGROUND:
            												case DEFER:
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACE:
            												case LBRACKET:
            												case LOW_PRIORITY:
            												case LSQBRACKET:
            												case QUESTION:
            												case SLICETOK:
            												case SSOR:
            												case 69:
            												case 70:
            												case 72:
            												case 73:
            												case 74:
            												case 76:
            												case 78:
            												case 80:
            												case 81:
            												case 83:
            												case 84:
            												case 86:
            												case 87:
            												case 88:
            												case 89:
            													{
            														alt37=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 37 );
            												    ex->set_state( 52 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 37 );
            										    ex->set_state( 49 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 37 );
            								    ex->set_state( 33 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt37=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 37 );
            						    ex->set_state( 27 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case STRING_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt37=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt37=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 37 );
            														    ex->set_state( 32 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case AT:
            												case BACKGROUND:
            												case DEFER:
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACE:
            												case LBRACKET:
            												case LOW_PRIORITY:
            												case LSQBRACKET:
            												case QUESTION:
            												case SLICETOK:
            												case SSOR:
            												case 69:
            												case 70:
            												case 72:
            												case 73:
            												case 74:
            												case 76:
            												case 78:
            												case 80:
            												case 81:
            												case 83:
            												case 84:
            												case 86:
            												case 87:
            												case 88:
            												case 89:
            													{
            														alt37=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 37 );
            												    ex->set_state( 52 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 37 );
            										    ex->set_state( 49 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 37 );
            								    ex->set_state( 33 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt37=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 37 );
            						    ex->set_state( 28 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case DOUBDEC:
            				case DOUBINC:
            				case ID:
            				case LBRACKET:
            				case LENGTH:
            				case RESOURCE:
            				case SHARED_REF:
            				case TYPE:
            				case 68:
            				case 78:
            					{
            						alt37=2;
            					}
            				    break;

            				default:
            				    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 37 );
            				    ex->set_state( 12 );


            				    goto ruleinstructionScalarEx;

            				}

            			}
            		    break;
            		case DLSQBRACKET:
            			{
            				switch ( this->LA(3) )
            				{
            				case DRSQBRACKET:
            					{
            						switch ( this->LA(4) )
            						{
            						case ID:
            							{
            								alt37=1;
            							}
            						    break;
            						case LBRACKET:
            							{
            								alt37=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 37 );
            						    ex->set_state( 29 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case BOOL:
            				case BOOL_TYPE:
            				case CHAR:
            				case CHAR_TYPE:
            				case CPTR_TYPE:
            				case DOUBDEC:
            				case DOUBINC:
            				case FLOAT:
            				case FLOAT_TYPE:
            				case ID:
            				case INT:
            				case INT_TYPE:
            				case LBRACKET:
            				case LENGTH:
            				case NULLTOK:
            				case RESOURCE:
            				case SHARED_REF:
            				case STRING:
            				case STRING_TYPE:
            				case TYPE:
            				case VOID_TYPE:
            				case 68:
            				case 78:
            					{
            						alt37=2;
            					}
            				    break;

            				default:
            				    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 37 );
            				    ex->set_state( 13 );


            				    goto ruleinstructionScalarEx;

            				}

            			}
            		    break;
            		case LBRACE:
            		case LBRACKET:
            			{
            				alt37=2;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 37 );
            		    ex->set_state( 4 );


            		    goto ruleinstructionScalarEx;

            		}

            	}
                break;
            case BOOL_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case ID:
            		case SLICETOK:
            		case SSOR:
            			{
            				alt37=1;
            			}
            		    break;
            		case LSQBRACKET:
            			{
            				switch ( this->LA(3) )
            				{
            				case RSQBRACKET:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACKET:
            							{
            								alt37=2;
            							}
            						    break;
            						case ID:
            							{
            								alt37=1;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 37 );
            						    ex->set_state( 15 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case INT:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt37=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt37=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 37 );
            								    ex->set_state( 32 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case AT:
            						case BACKGROUND:
            						case DEFER:
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACE:
            						case LBRACKET:
            						case LOW_PRIORITY:
            						case LSQBRACKET:
            						case QUESTION:
            						case SLICETOK:
            						case SSOR:
            						case 69:
            						case 70:
            						case 72:
            						case 73:
            						case 74:
            						case 76:
            						case 78:
            						case 80:
            						case 81:
            						case 83:
            						case 84:
            						case 86:
            						case 87:
            						case 88:
            						case 89:
            							{
            								alt37=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 37 );
            						    ex->set_state( 16 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case FLOAT:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt37=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt37=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 37 );
            								    ex->set_state( 32 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case AT:
            						case BACKGROUND:
            						case DEFER:
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACE:
            						case LBRACKET:
            						case LOW_PRIORITY:
            						case LSQBRACKET:
            						case QUESTION:
            						case SLICETOK:
            						case SSOR:
            						case 69:
            						case 70:
            						case 72:
            						case 73:
            						case 74:
            						case 76:
            						case 78:
            						case 80:
            						case 81:
            						case 83:
            						case 84:
            						case 86:
            						case 87:
            						case 88:
            						case 89:
            							{
            								alt37=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 37 );
            						    ex->set_state( 17 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case CHAR:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt37=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt37=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 37 );
            								    ex->set_state( 32 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case AT:
            						case BACKGROUND:
            						case DEFER:
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACE:
            						case LBRACKET:
            						case LOW_PRIORITY:
            						case LSQBRACKET:
            						case QUESTION:
            						case SLICETOK:
            						case SSOR:
            						case 69:
            						case 70:
            						case 72:
            						case 73:
            						case 74:
            						case 76:
            						case 78:
            						case 80:
            						case 81:
            						case 83:
            						case 84:
            						case 86:
            						case 87:
            						case 88:
            						case 89:
            							{
            								alt37=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 37 );
            						    ex->set_state( 18 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case STRING:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt37=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt37=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 37 );
            								    ex->set_state( 32 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case AT:
            						case BACKGROUND:
            						case DEFER:
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACE:
            						case LBRACKET:
            						case LOW_PRIORITY:
            						case LSQBRACKET:
            						case QUESTION:
            						case SLICETOK:
            						case SSOR:
            						case 69:
            						case 70:
            						case 72:
            						case 73:
            						case 74:
            						case 76:
            						case 78:
            						case 80:
            						case 81:
            						case 83:
            						case 84:
            						case 86:
            						case 87:
            						case 88:
            						case 89:
            							{
            								alt37=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 37 );
            						    ex->set_state( 19 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case BOOL:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt37=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt37=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 37 );
            								    ex->set_state( 32 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case AT:
            						case BACKGROUND:
            						case DEFER:
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACE:
            						case LBRACKET:
            						case LOW_PRIORITY:
            						case LSQBRACKET:
            						case QUESTION:
            						case SLICETOK:
            						case SSOR:
            						case 69:
            						case 70:
            						case 72:
            						case 73:
            						case 74:
            						case 76:
            						case 78:
            						case 80:
            						case 81:
            						case 83:
            						case 84:
            						case 86:
            						case 87:
            						case 88:
            						case 89:
            							{
            								alt37=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 37 );
            						    ex->set_state( 20 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case NULLTOK:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt37=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt37=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 37 );
            								    ex->set_state( 32 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case AT:
            						case BACKGROUND:
            						case DEFER:
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACE:
            						case LBRACKET:
            						case LOW_PRIORITY:
            						case LSQBRACKET:
            						case QUESTION:
            						case SLICETOK:
            						case SSOR:
            						case 69:
            						case 70:
            						case 72:
            						case 73:
            						case 74:
            						case 76:
            						case 78:
            						case 80:
            						case 81:
            						case 83:
            						case 84:
            						case 86:
            						case 87:
            						case 88:
            						case 89:
            							{
            								alt37=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 37 );
            						    ex->set_state( 21 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case VOID_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt37=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt37=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 37 );
            														    ex->set_state( 32 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case AT:
            												case BACKGROUND:
            												case DEFER:
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACE:
            												case LBRACKET:
            												case LOW_PRIORITY:
            												case LSQBRACKET:
            												case QUESTION:
            												case SLICETOK:
            												case SSOR:
            												case 69:
            												case 70:
            												case 72:
            												case 73:
            												case 74:
            												case 76:
            												case 78:
            												case 80:
            												case 81:
            												case 83:
            												case 84:
            												case 86:
            												case 87:
            												case 88:
            												case 89:
            													{
            														alt37=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 37 );
            												    ex->set_state( 52 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 37 );
            										    ex->set_state( 49 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 37 );
            								    ex->set_state( 33 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt37=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 37 );
            						    ex->set_state( 22 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case INT_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt37=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt37=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 37 );
            														    ex->set_state( 32 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case AT:
            												case BACKGROUND:
            												case DEFER:
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACE:
            												case LBRACKET:
            												case LOW_PRIORITY:
            												case LSQBRACKET:
            												case QUESTION:
            												case SLICETOK:
            												case SSOR:
            												case 69:
            												case 70:
            												case 72:
            												case 73:
            												case 74:
            												case 76:
            												case 78:
            												case 80:
            												case 81:
            												case 83:
            												case 84:
            												case 86:
            												case 87:
            												case 88:
            												case 89:
            													{
            														alt37=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 37 );
            												    ex->set_state( 52 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 37 );
            										    ex->set_state( 49 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 37 );
            								    ex->set_state( 33 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt37=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 37 );
            						    ex->set_state( 23 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case FLOAT_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt37=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt37=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 37 );
            														    ex->set_state( 32 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case AT:
            												case BACKGROUND:
            												case DEFER:
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACE:
            												case LBRACKET:
            												case LOW_PRIORITY:
            												case LSQBRACKET:
            												case QUESTION:
            												case SLICETOK:
            												case SSOR:
            												case 69:
            												case 70:
            												case 72:
            												case 73:
            												case 74:
            												case 76:
            												case 78:
            												case 80:
            												case 81:
            												case 83:
            												case 84:
            												case 86:
            												case 87:
            												case 88:
            												case 89:
            													{
            														alt37=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 37 );
            												    ex->set_state( 52 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 37 );
            										    ex->set_state( 49 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 37 );
            								    ex->set_state( 33 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt37=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 37 );
            						    ex->set_state( 24 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case CHAR_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt37=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt37=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 37 );
            														    ex->set_state( 32 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case AT:
            												case BACKGROUND:
            												case DEFER:
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACE:
            												case LBRACKET:
            												case LOW_PRIORITY:
            												case LSQBRACKET:
            												case QUESTION:
            												case SLICETOK:
            												case SSOR:
            												case 69:
            												case 70:
            												case 72:
            												case 73:
            												case 74:
            												case 76:
            												case 78:
            												case 80:
            												case 81:
            												case 83:
            												case 84:
            												case 86:
            												case 87:
            												case 88:
            												case 89:
            													{
            														alt37=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 37 );
            												    ex->set_state( 52 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 37 );
            										    ex->set_state( 49 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 37 );
            								    ex->set_state( 33 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt37=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 37 );
            						    ex->set_state( 25 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case BOOL_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt37=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt37=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 37 );
            														    ex->set_state( 32 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case AT:
            												case BACKGROUND:
            												case DEFER:
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACE:
            												case LBRACKET:
            												case LOW_PRIORITY:
            												case LSQBRACKET:
            												case QUESTION:
            												case SLICETOK:
            												case SSOR:
            												case 69:
            												case 70:
            												case 72:
            												case 73:
            												case 74:
            												case 76:
            												case 78:
            												case 80:
            												case 81:
            												case 83:
            												case 84:
            												case 86:
            												case 87:
            												case 88:
            												case 89:
            													{
            														alt37=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 37 );
            												    ex->set_state( 52 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 37 );
            										    ex->set_state( 49 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 37 );
            								    ex->set_state( 33 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt37=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 37 );
            						    ex->set_state( 26 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case CPTR_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt37=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt37=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 37 );
            														    ex->set_state( 32 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case AT:
            												case BACKGROUND:
            												case DEFER:
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACE:
            												case LBRACKET:
            												case LOW_PRIORITY:
            												case LSQBRACKET:
            												case QUESTION:
            												case SLICETOK:
            												case SSOR:
            												case 69:
            												case 70:
            												case 72:
            												case 73:
            												case 74:
            												case 76:
            												case 78:
            												case 80:
            												case 81:
            												case 83:
            												case 84:
            												case 86:
            												case 87:
            												case 88:
            												case 89:
            													{
            														alt37=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 37 );
            												    ex->set_state( 52 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 37 );
            										    ex->set_state( 49 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 37 );
            								    ex->set_state( 33 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt37=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 37 );
            						    ex->set_state( 27 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case STRING_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt37=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt37=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 37 );
            														    ex->set_state( 32 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case AT:
            												case BACKGROUND:
            												case DEFER:
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACE:
            												case LBRACKET:
            												case LOW_PRIORITY:
            												case LSQBRACKET:
            												case QUESTION:
            												case SLICETOK:
            												case SSOR:
            												case 69:
            												case 70:
            												case 72:
            												case 73:
            												case 74:
            												case 76:
            												case 78:
            												case 80:
            												case 81:
            												case 83:
            												case 84:
            												case 86:
            												case 87:
            												case 88:
            												case 89:
            													{
            														alt37=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 37 );
            												    ex->set_state( 52 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 37 );
            										    ex->set_state( 49 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 37 );
            								    ex->set_state( 33 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt37=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 37 );
            						    ex->set_state( 28 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case DOUBDEC:
            				case DOUBINC:
            				case ID:
            				case LBRACKET:
            				case LENGTH:
            				case RESOURCE:
            				case SHARED_REF:
            				case TYPE:
            				case 68:
            				case 78:
            					{
            						alt37=2;
            					}
            				    break;

            				default:
            				    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 37 );
            				    ex->set_state( 12 );


            				    goto ruleinstructionScalarEx;

            				}

            			}
            		    break;
            		case DLSQBRACKET:
            			{
            				switch ( this->LA(3) )
            				{
            				case DRSQBRACKET:
            					{
            						switch ( this->LA(4) )
            						{
            						case ID:
            							{
            								alt37=1;
            							}
            						    break;
            						case LBRACKET:
            							{
            								alt37=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 37 );
            						    ex->set_state( 29 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case BOOL:
            				case BOOL_TYPE:
            				case CHAR:
            				case CHAR_TYPE:
            				case CPTR_TYPE:
            				case DOUBDEC:
            				case DOUBINC:
            				case FLOAT:
            				case FLOAT_TYPE:
            				case ID:
            				case INT:
            				case INT_TYPE:
            				case LBRACKET:
            				case LENGTH:
            				case NULLTOK:
            				case RESOURCE:
            				case SHARED_REF:
            				case STRING:
            				case STRING_TYPE:
            				case TYPE:
            				case VOID_TYPE:
            				case 68:
            				case 78:
            					{
            						alt37=2;
            					}
            				    break;

            				default:
            				    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 37 );
            				    ex->set_state( 13 );


            				    goto ruleinstructionScalarEx;

            				}

            			}
            		    break;
            		case LBRACE:
            		case LBRACKET:
            			{
            				alt37=2;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 37 );
            		    ex->set_state( 5 );


            		    goto ruleinstructionScalarEx;

            		}

            	}
                break;
            case CPTR_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case ID:
            		case SLICETOK:
            		case SSOR:
            			{
            				alt37=1;
            			}
            		    break;
            		case LSQBRACKET:
            			{
            				switch ( this->LA(3) )
            				{
            				case RSQBRACKET:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACKET:
            							{
            								alt37=2;
            							}
            						    break;
            						case ID:
            							{
            								alt37=1;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 37 );
            						    ex->set_state( 15 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case INT:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt37=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt37=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 37 );
            								    ex->set_state( 32 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case AT:
            						case BACKGROUND:
            						case DEFER:
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACE:
            						case LBRACKET:
            						case LOW_PRIORITY:
            						case LSQBRACKET:
            						case QUESTION:
            						case SLICETOK:
            						case SSOR:
            						case 69:
            						case 70:
            						case 72:
            						case 73:
            						case 74:
            						case 76:
            						case 78:
            						case 80:
            						case 81:
            						case 83:
            						case 84:
            						case 86:
            						case 87:
            						case 88:
            						case 89:
            							{
            								alt37=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 37 );
            						    ex->set_state( 16 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case FLOAT:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt37=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt37=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 37 );
            								    ex->set_state( 32 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case AT:
            						case BACKGROUND:
            						case DEFER:
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACE:
            						case LBRACKET:
            						case LOW_PRIORITY:
            						case LSQBRACKET:
            						case QUESTION:
            						case SLICETOK:
            						case SSOR:
            						case 69:
            						case 70:
            						case 72:
            						case 73:
            						case 74:
            						case 76:
            						case 78:
            						case 80:
            						case 81:
            						case 83:
            						case 84:
            						case 86:
            						case 87:
            						case 88:
            						case 89:
            							{
            								alt37=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 37 );
            						    ex->set_state( 17 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case CHAR:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt37=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt37=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 37 );
            								    ex->set_state( 32 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case AT:
            						case BACKGROUND:
            						case DEFER:
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACE:
            						case LBRACKET:
            						case LOW_PRIORITY:
            						case LSQBRACKET:
            						case QUESTION:
            						case SLICETOK:
            						case SSOR:
            						case 69:
            						case 70:
            						case 72:
            						case 73:
            						case 74:
            						case 76:
            						case 78:
            						case 80:
            						case 81:
            						case 83:
            						case 84:
            						case 86:
            						case 87:
            						case 88:
            						case 89:
            							{
            								alt37=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 37 );
            						    ex->set_state( 18 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case STRING:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt37=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt37=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 37 );
            								    ex->set_state( 32 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case AT:
            						case BACKGROUND:
            						case DEFER:
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACE:
            						case LBRACKET:
            						case LOW_PRIORITY:
            						case LSQBRACKET:
            						case QUESTION:
            						case SLICETOK:
            						case SSOR:
            						case 69:
            						case 70:
            						case 72:
            						case 73:
            						case 74:
            						case 76:
            						case 78:
            						case 80:
            						case 81:
            						case 83:
            						case 84:
            						case 86:
            						case 87:
            						case 88:
            						case 89:
            							{
            								alt37=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 37 );
            						    ex->set_state( 19 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case BOOL:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt37=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt37=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 37 );
            								    ex->set_state( 32 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case AT:
            						case BACKGROUND:
            						case DEFER:
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACE:
            						case LBRACKET:
            						case LOW_PRIORITY:
            						case LSQBRACKET:
            						case QUESTION:
            						case SLICETOK:
            						case SSOR:
            						case 69:
            						case 70:
            						case 72:
            						case 73:
            						case 74:
            						case 76:
            						case 78:
            						case 80:
            						case 81:
            						case 83:
            						case 84:
            						case 86:
            						case 87:
            						case 88:
            						case 89:
            							{
            								alt37=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 37 );
            						    ex->set_state( 20 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case NULLTOK:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt37=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt37=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 37 );
            								    ex->set_state( 32 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case AT:
            						case BACKGROUND:
            						case DEFER:
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACE:
            						case LBRACKET:
            						case LOW_PRIORITY:
            						case LSQBRACKET:
            						case QUESTION:
            						case SLICETOK:
            						case SSOR:
            						case 69:
            						case 70:
            						case 72:
            						case 73:
            						case 74:
            						case 76:
            						case 78:
            						case 80:
            						case 81:
            						case 83:
            						case 84:
            						case 86:
            						case 87:
            						case 88:
            						case 89:
            							{
            								alt37=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 37 );
            						    ex->set_state( 21 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case VOID_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt37=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt37=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 37 );
            														    ex->set_state( 32 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case AT:
            												case BACKGROUND:
            												case DEFER:
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACE:
            												case LBRACKET:
            												case LOW_PRIORITY:
            												case LSQBRACKET:
            												case QUESTION:
            												case SLICETOK:
            												case SSOR:
            												case 69:
            												case 70:
            												case 72:
            												case 73:
            												case 74:
            												case 76:
            												case 78:
            												case 80:
            												case 81:
            												case 83:
            												case 84:
            												case 86:
            												case 87:
            												case 88:
            												case 89:
            													{
            														alt37=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 37 );
            												    ex->set_state( 52 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 37 );
            										    ex->set_state( 49 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 37 );
            								    ex->set_state( 33 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt37=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 37 );
            						    ex->set_state( 22 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case INT_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt37=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt37=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 37 );
            														    ex->set_state( 32 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case AT:
            												case BACKGROUND:
            												case DEFER:
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACE:
            												case LBRACKET:
            												case LOW_PRIORITY:
            												case LSQBRACKET:
            												case QUESTION:
            												case SLICETOK:
            												case SSOR:
            												case 69:
            												case 70:
            												case 72:
            												case 73:
            												case 74:
            												case 76:
            												case 78:
            												case 80:
            												case 81:
            												case 83:
            												case 84:
            												case 86:
            												case 87:
            												case 88:
            												case 89:
            													{
            														alt37=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 37 );
            												    ex->set_state( 52 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 37 );
            										    ex->set_state( 49 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 37 );
            								    ex->set_state( 33 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt37=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 37 );
            						    ex->set_state( 23 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case FLOAT_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt37=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt37=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 37 );
            														    ex->set_state( 32 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case AT:
            												case BACKGROUND:
            												case DEFER:
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACE:
            												case LBRACKET:
            												case LOW_PRIORITY:
            												case LSQBRACKET:
            												case QUESTION:
            												case SLICETOK:
            												case SSOR:
            												case 69:
            												case 70:
            												case 72:
            												case 73:
            												case 74:
            												case 76:
            												case 78:
            												case 80:
            												case 81:
            												case 83:
            												case 84:
            												case 86:
            												case 87:
            												case 88:
            												case 89:
            													{
            														alt37=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 37 );
            												    ex->set_state( 52 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 37 );
            										    ex->set_state( 49 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 37 );
            								    ex->set_state( 33 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt37=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 37 );
            						    ex->set_state( 24 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case CHAR_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt37=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt37=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 37 );
            														    ex->set_state( 32 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case AT:
            												case BACKGROUND:
            												case DEFER:
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACE:
            												case LBRACKET:
            												case LOW_PRIORITY:
            												case LSQBRACKET:
            												case QUESTION:
            												case SLICETOK:
            												case SSOR:
            												case 69:
            												case 70:
            												case 72:
            												case 73:
            												case 74:
            												case 76:
            												case 78:
            												case 80:
            												case 81:
            												case 83:
            												case 84:
            												case 86:
            												case 87:
            												case 88:
            												case 89:
            													{
            														alt37=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 37 );
            												    ex->set_state( 52 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 37 );
            										    ex->set_state( 49 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 37 );
            								    ex->set_state( 33 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt37=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 37 );
            						    ex->set_state( 25 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case BOOL_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt37=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt37=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 37 );
            														    ex->set_state( 32 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case AT:
            												case BACKGROUND:
            												case DEFER:
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACE:
            												case LBRACKET:
            												case LOW_PRIORITY:
            												case LSQBRACKET:
            												case QUESTION:
            												case SLICETOK:
            												case SSOR:
            												case 69:
            												case 70:
            												case 72:
            												case 73:
            												case 74:
            												case 76:
            												case 78:
            												case 80:
            												case 81:
            												case 83:
            												case 84:
            												case 86:
            												case 87:
            												case 88:
            												case 89:
            													{
            														alt37=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 37 );
            												    ex->set_state( 52 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 37 );
            										    ex->set_state( 49 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 37 );
            								    ex->set_state( 33 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt37=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 37 );
            						    ex->set_state( 26 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case CPTR_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt37=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt37=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 37 );
            														    ex->set_state( 32 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case AT:
            												case BACKGROUND:
            												case DEFER:
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACE:
            												case LBRACKET:
            												case LOW_PRIORITY:
            												case LSQBRACKET:
            												case QUESTION:
            												case SLICETOK:
            												case SSOR:
            												case 69:
            												case 70:
            												case 72:
            												case 73:
            												case 74:
            												case 76:
            												case 78:
            												case 80:
            												case 81:
            												case 83:
            												case 84:
            												case 86:
            												case 87:
            												case 88:
            												case 89:
            													{
            														alt37=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 37 );
            												    ex->set_state( 52 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 37 );
            										    ex->set_state( 49 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 37 );
            								    ex->set_state( 33 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt37=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 37 );
            						    ex->set_state( 27 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case STRING_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt37=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt37=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 37 );
            														    ex->set_state( 32 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case AT:
            												case BACKGROUND:
            												case DEFER:
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACE:
            												case LBRACKET:
            												case LOW_PRIORITY:
            												case LSQBRACKET:
            												case QUESTION:
            												case SLICETOK:
            												case SSOR:
            												case 69:
            												case 70:
            												case 72:
            												case 73:
            												case 74:
            												case 76:
            												case 78:
            												case 80:
            												case 81:
            												case 83:
            												case 84:
            												case 86:
            												case 87:
            												case 88:
            												case 89:
            													{
            														alt37=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 37 );
            												    ex->set_state( 52 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 37 );
            										    ex->set_state( 49 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 37 );
            								    ex->set_state( 33 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt37=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 37 );
            						    ex->set_state( 28 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case DOUBDEC:
            				case DOUBINC:
            				case ID:
            				case LBRACKET:
            				case LENGTH:
            				case RESOURCE:
            				case SHARED_REF:
            				case TYPE:
            				case 68:
            				case 78:
            					{
            						alt37=2;
            					}
            				    break;

            				default:
            				    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 37 );
            				    ex->set_state( 12 );


            				    goto ruleinstructionScalarEx;

            				}

            			}
            		    break;
            		case DLSQBRACKET:
            			{
            				switch ( this->LA(3) )
            				{
            				case DRSQBRACKET:
            					{
            						switch ( this->LA(4) )
            						{
            						case ID:
            							{
            								alt37=1;
            							}
            						    break;
            						case LBRACKET:
            							{
            								alt37=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 37 );
            						    ex->set_state( 29 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case BOOL:
            				case BOOL_TYPE:
            				case CHAR:
            				case CHAR_TYPE:
            				case CPTR_TYPE:
            				case DOUBDEC:
            				case DOUBINC:
            				case FLOAT:
            				case FLOAT_TYPE:
            				case ID:
            				case INT:
            				case INT_TYPE:
            				case LBRACKET:
            				case LENGTH:
            				case NULLTOK:
            				case RESOURCE:
            				case SHARED_REF:
            				case STRING:
            				case STRING_TYPE:
            				case TYPE:
            				case VOID_TYPE:
            				case 68:
            				case 78:
            					{
            						alt37=2;
            					}
            				    break;

            				default:
            				    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 37 );
            				    ex->set_state( 13 );


            				    goto ruleinstructionScalarEx;

            				}

            			}
            		    break;
            		case LBRACE:
            		case LBRACKET:
            			{
            				alt37=2;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 37 );
            		    ex->set_state( 6 );


            		    goto ruleinstructionScalarEx;

            		}

            	}
                break;
            case STRING_TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case ID:
            		case SLICETOK:
            		case SSOR:
            			{
            				alt37=1;
            			}
            		    break;
            		case LSQBRACKET:
            			{
            				switch ( this->LA(3) )
            				{
            				case RSQBRACKET:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACKET:
            							{
            								alt37=2;
            							}
            						    break;
            						case ID:
            							{
            								alt37=1;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 37 );
            						    ex->set_state( 15 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case INT:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt37=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt37=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 37 );
            								    ex->set_state( 32 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case AT:
            						case BACKGROUND:
            						case DEFER:
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACE:
            						case LBRACKET:
            						case LOW_PRIORITY:
            						case LSQBRACKET:
            						case QUESTION:
            						case SLICETOK:
            						case SSOR:
            						case 69:
            						case 70:
            						case 72:
            						case 73:
            						case 74:
            						case 76:
            						case 78:
            						case 80:
            						case 81:
            						case 83:
            						case 84:
            						case 86:
            						case 87:
            						case 88:
            						case 89:
            							{
            								alt37=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 37 );
            						    ex->set_state( 16 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case FLOAT:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt37=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt37=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 37 );
            								    ex->set_state( 32 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case AT:
            						case BACKGROUND:
            						case DEFER:
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACE:
            						case LBRACKET:
            						case LOW_PRIORITY:
            						case LSQBRACKET:
            						case QUESTION:
            						case SLICETOK:
            						case SSOR:
            						case 69:
            						case 70:
            						case 72:
            						case 73:
            						case 74:
            						case 76:
            						case 78:
            						case 80:
            						case 81:
            						case 83:
            						case 84:
            						case 86:
            						case 87:
            						case 88:
            						case 89:
            							{
            								alt37=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 37 );
            						    ex->set_state( 17 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case CHAR:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt37=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt37=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 37 );
            								    ex->set_state( 32 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case AT:
            						case BACKGROUND:
            						case DEFER:
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACE:
            						case LBRACKET:
            						case LOW_PRIORITY:
            						case LSQBRACKET:
            						case QUESTION:
            						case SLICETOK:
            						case SSOR:
            						case 69:
            						case 70:
            						case 72:
            						case 73:
            						case 74:
            						case 76:
            						case 78:
            						case 80:
            						case 81:
            						case 83:
            						case 84:
            						case 86:
            						case 87:
            						case 88:
            						case 89:
            							{
            								alt37=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 37 );
            						    ex->set_state( 18 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case STRING:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt37=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt37=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 37 );
            								    ex->set_state( 32 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case AT:
            						case BACKGROUND:
            						case DEFER:
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACE:
            						case LBRACKET:
            						case LOW_PRIORITY:
            						case LSQBRACKET:
            						case QUESTION:
            						case SLICETOK:
            						case SSOR:
            						case 69:
            						case 70:
            						case 72:
            						case 73:
            						case 74:
            						case 76:
            						case 78:
            						case 80:
            						case 81:
            						case 83:
            						case 84:
            						case 86:
            						case 87:
            						case 88:
            						case 89:
            							{
            								alt37=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 37 );
            						    ex->set_state( 19 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case BOOL:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt37=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt37=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 37 );
            								    ex->set_state( 32 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case AT:
            						case BACKGROUND:
            						case DEFER:
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACE:
            						case LBRACKET:
            						case LOW_PRIORITY:
            						case LSQBRACKET:
            						case QUESTION:
            						case SLICETOK:
            						case SSOR:
            						case 69:
            						case 70:
            						case 72:
            						case 73:
            						case 74:
            						case 76:
            						case 78:
            						case 80:
            						case 81:
            						case 83:
            						case 84:
            						case 86:
            						case 87:
            						case 88:
            						case 89:
            							{
            								alt37=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 37 );
            						    ex->set_state( 20 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case NULLTOK:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt37=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt37=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 37 );
            								    ex->set_state( 32 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case AT:
            						case BACKGROUND:
            						case DEFER:
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACE:
            						case LBRACKET:
            						case LOW_PRIORITY:
            						case LSQBRACKET:
            						case QUESTION:
            						case SLICETOK:
            						case SSOR:
            						case 69:
            						case 70:
            						case 72:
            						case 73:
            						case 74:
            						case 76:
            						case 78:
            						case 80:
            						case 81:
            						case 83:
            						case 84:
            						case 86:
            						case 87:
            						case 88:
            						case 89:
            							{
            								alt37=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 37 );
            						    ex->set_state( 21 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case VOID_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt37=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt37=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 37 );
            														    ex->set_state( 32 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case AT:
            												case BACKGROUND:
            												case DEFER:
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACE:
            												case LBRACKET:
            												case LOW_PRIORITY:
            												case LSQBRACKET:
            												case QUESTION:
            												case SLICETOK:
            												case SSOR:
            												case 69:
            												case 70:
            												case 72:
            												case 73:
            												case 74:
            												case 76:
            												case 78:
            												case 80:
            												case 81:
            												case 83:
            												case 84:
            												case 86:
            												case 87:
            												case 88:
            												case 89:
            													{
            														alt37=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 37 );
            												    ex->set_state( 52 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 37 );
            										    ex->set_state( 49 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 37 );
            								    ex->set_state( 33 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt37=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 37 );
            						    ex->set_state( 22 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case INT_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt37=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt37=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 37 );
            														    ex->set_state( 32 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case AT:
            												case BACKGROUND:
            												case DEFER:
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACE:
            												case LBRACKET:
            												case LOW_PRIORITY:
            												case LSQBRACKET:
            												case QUESTION:
            												case SLICETOK:
            												case SSOR:
            												case 69:
            												case 70:
            												case 72:
            												case 73:
            												case 74:
            												case 76:
            												case 78:
            												case 80:
            												case 81:
            												case 83:
            												case 84:
            												case 86:
            												case 87:
            												case 88:
            												case 89:
            													{
            														alt37=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 37 );
            												    ex->set_state( 52 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 37 );
            										    ex->set_state( 49 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 37 );
            								    ex->set_state( 33 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt37=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 37 );
            						    ex->set_state( 23 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case FLOAT_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt37=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt37=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 37 );
            														    ex->set_state( 32 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case AT:
            												case BACKGROUND:
            												case DEFER:
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACE:
            												case LBRACKET:
            												case LOW_PRIORITY:
            												case LSQBRACKET:
            												case QUESTION:
            												case SLICETOK:
            												case SSOR:
            												case 69:
            												case 70:
            												case 72:
            												case 73:
            												case 74:
            												case 76:
            												case 78:
            												case 80:
            												case 81:
            												case 83:
            												case 84:
            												case 86:
            												case 87:
            												case 88:
            												case 89:
            													{
            														alt37=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 37 );
            												    ex->set_state( 52 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 37 );
            										    ex->set_state( 49 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 37 );
            								    ex->set_state( 33 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt37=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 37 );
            						    ex->set_state( 24 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case CHAR_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt37=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt37=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 37 );
            														    ex->set_state( 32 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case AT:
            												case BACKGROUND:
            												case DEFER:
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACE:
            												case LBRACKET:
            												case LOW_PRIORITY:
            												case LSQBRACKET:
            												case QUESTION:
            												case SLICETOK:
            												case SSOR:
            												case 69:
            												case 70:
            												case 72:
            												case 73:
            												case 74:
            												case 76:
            												case 78:
            												case 80:
            												case 81:
            												case 83:
            												case 84:
            												case 86:
            												case 87:
            												case 88:
            												case 89:
            													{
            														alt37=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 37 );
            												    ex->set_state( 52 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 37 );
            										    ex->set_state( 49 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 37 );
            								    ex->set_state( 33 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt37=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 37 );
            						    ex->set_state( 25 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case BOOL_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt37=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt37=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 37 );
            														    ex->set_state( 32 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case AT:
            												case BACKGROUND:
            												case DEFER:
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACE:
            												case LBRACKET:
            												case LOW_PRIORITY:
            												case LSQBRACKET:
            												case QUESTION:
            												case SLICETOK:
            												case SSOR:
            												case 69:
            												case 70:
            												case 72:
            												case 73:
            												case 74:
            												case 76:
            												case 78:
            												case 80:
            												case 81:
            												case 83:
            												case 84:
            												case 86:
            												case 87:
            												case 88:
            												case 89:
            													{
            														alt37=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 37 );
            												    ex->set_state( 52 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 37 );
            										    ex->set_state( 49 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 37 );
            								    ex->set_state( 33 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt37=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 37 );
            						    ex->set_state( 26 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case CPTR_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt37=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt37=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 37 );
            														    ex->set_state( 32 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case AT:
            												case BACKGROUND:
            												case DEFER:
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACE:
            												case LBRACKET:
            												case LOW_PRIORITY:
            												case LSQBRACKET:
            												case QUESTION:
            												case SLICETOK:
            												case SSOR:
            												case 69:
            												case 70:
            												case 72:
            												case 73:
            												case 74:
            												case 76:
            												case 78:
            												case 80:
            												case 81:
            												case 83:
            												case 84:
            												case 86:
            												case 87:
            												case 88:
            												case 89:
            													{
            														alt37=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 37 );
            												    ex->set_state( 52 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 37 );
            										    ex->set_state( 49 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 37 );
            								    ex->set_state( 33 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt37=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 37 );
            						    ex->set_state( 27 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case STRING_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt37=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt37=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 37 );
            														    ex->set_state( 32 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case AT:
            												case BACKGROUND:
            												case DEFER:
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACE:
            												case LBRACKET:
            												case LOW_PRIORITY:
            												case LSQBRACKET:
            												case QUESTION:
            												case SLICETOK:
            												case SSOR:
            												case 69:
            												case 70:
            												case 72:
            												case 73:
            												case 74:
            												case 76:
            												case 78:
            												case 80:
            												case 81:
            												case 83:
            												case 84:
            												case 86:
            												case 87:
            												case 88:
            												case 89:
            													{
            														alt37=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 37 );
            												    ex->set_state( 52 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 37 );
            										    ex->set_state( 49 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 37 );
            								    ex->set_state( 33 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt37=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 37 );
            						    ex->set_state( 28 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case DOUBDEC:
            				case DOUBINC:
            				case ID:
            				case LBRACKET:
            				case LENGTH:
            				case RESOURCE:
            				case SHARED_REF:
            				case TYPE:
            				case 68:
            				case 78:
            					{
            						alt37=2;
            					}
            				    break;

            				default:
            				    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 37 );
            				    ex->set_state( 12 );


            				    goto ruleinstructionScalarEx;

            				}

            			}
            		    break;
            		case DLSQBRACKET:
            			{
            				switch ( this->LA(3) )
            				{
            				case DRSQBRACKET:
            					{
            						switch ( this->LA(4) )
            						{
            						case ID:
            							{
            								alt37=1;
            							}
            						    break;
            						case LBRACKET:
            							{
            								alt37=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 37 );
            						    ex->set_state( 29 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case BOOL:
            				case BOOL_TYPE:
            				case CHAR:
            				case CHAR_TYPE:
            				case CPTR_TYPE:
            				case DOUBDEC:
            				case DOUBINC:
            				case FLOAT:
            				case FLOAT_TYPE:
            				case ID:
            				case INT:
            				case INT_TYPE:
            				case LBRACKET:
            				case LENGTH:
            				case NULLTOK:
            				case RESOURCE:
            				case SHARED_REF:
            				case STRING:
            				case STRING_TYPE:
            				case TYPE:
            				case VOID_TYPE:
            				case 68:
            				case 78:
            					{
            						alt37=2;
            					}
            				    break;

            				default:
            				    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 37 );
            				    ex->set_state( 13 );


            				    goto ruleinstructionScalarEx;

            				}

            			}
            		    break;
            		case LBRACE:
            		case LBRACKET:
            			{
            				alt37=2;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 37 );
            		    ex->set_state( 7 );


            		    goto ruleinstructionScalarEx;

            		}

            	}
                break;
            case TYPE:
            	{
            		switch ( this->LA(2) )
            		{
            		case ID:
            		case QUESTION:
            			{
            				alt37=1;
            			}
            		    break;
            		case LSQBRACKET:
            			{
            				switch ( this->LA(3) )
            				{
            				case RSQBRACKET:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACKET:
            							{
            								alt37=2;
            							}
            						    break;
            						case ID:
            							{
            								alt37=1;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 37 );
            						    ex->set_state( 15 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case INT:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt37=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt37=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 37 );
            								    ex->set_state( 32 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case AT:
            						case BACKGROUND:
            						case DEFER:
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACE:
            						case LBRACKET:
            						case LOW_PRIORITY:
            						case LSQBRACKET:
            						case QUESTION:
            						case SLICETOK:
            						case SSOR:
            						case 69:
            						case 70:
            						case 72:
            						case 73:
            						case 74:
            						case 76:
            						case 78:
            						case 80:
            						case 81:
            						case 83:
            						case 84:
            						case 86:
            						case 87:
            						case 88:
            						case 89:
            							{
            								alt37=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 37 );
            						    ex->set_state( 16 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case FLOAT:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt37=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt37=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 37 );
            								    ex->set_state( 32 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case AT:
            						case BACKGROUND:
            						case DEFER:
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACE:
            						case LBRACKET:
            						case LOW_PRIORITY:
            						case LSQBRACKET:
            						case QUESTION:
            						case SLICETOK:
            						case SSOR:
            						case 69:
            						case 70:
            						case 72:
            						case 73:
            						case 74:
            						case 76:
            						case 78:
            						case 80:
            						case 81:
            						case 83:
            						case 84:
            						case 86:
            						case 87:
            						case 88:
            						case 89:
            							{
            								alt37=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 37 );
            						    ex->set_state( 17 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case CHAR:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt37=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt37=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 37 );
            								    ex->set_state( 32 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case AT:
            						case BACKGROUND:
            						case DEFER:
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACE:
            						case LBRACKET:
            						case LOW_PRIORITY:
            						case LSQBRACKET:
            						case QUESTION:
            						case SLICETOK:
            						case SSOR:
            						case 69:
            						case 70:
            						case 72:
            						case 73:
            						case 74:
            						case 76:
            						case 78:
            						case 80:
            						case 81:
            						case 83:
            						case 84:
            						case 86:
            						case 87:
            						case 88:
            						case 89:
            							{
            								alt37=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 37 );
            						    ex->set_state( 18 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case STRING:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt37=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt37=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 37 );
            								    ex->set_state( 32 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case AT:
            						case BACKGROUND:
            						case DEFER:
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACE:
            						case LBRACKET:
            						case LOW_PRIORITY:
            						case LSQBRACKET:
            						case QUESTION:
            						case SLICETOK:
            						case SSOR:
            						case 69:
            						case 70:
            						case 72:
            						case 73:
            						case 74:
            						case 76:
            						case 78:
            						case 80:
            						case 81:
            						case 83:
            						case 84:
            						case 86:
            						case 87:
            						case 88:
            						case 89:
            							{
            								alt37=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 37 );
            						    ex->set_state( 19 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case BOOL:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt37=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt37=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 37 );
            								    ex->set_state( 32 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case AT:
            						case BACKGROUND:
            						case DEFER:
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACE:
            						case LBRACKET:
            						case LOW_PRIORITY:
            						case LSQBRACKET:
            						case QUESTION:
            						case SLICETOK:
            						case SSOR:
            						case 69:
            						case 70:
            						case 72:
            						case 73:
            						case 74:
            						case 76:
            						case 78:
            						case 80:
            						case 81:
            						case 83:
            						case 84:
            						case 86:
            						case 87:
            						case 88:
            						case 89:
            							{
            								alt37=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 37 );
            						    ex->set_state( 20 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case NULLTOK:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt37=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt37=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 37 );
            								    ex->set_state( 32 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case AT:
            						case BACKGROUND:
            						case DEFER:
            						case DOUBDEC:
            						case DOUBINC:
            						case LBRACE:
            						case LBRACKET:
            						case LOW_PRIORITY:
            						case LSQBRACKET:
            						case QUESTION:
            						case SLICETOK:
            						case SSOR:
            						case 69:
            						case 70:
            						case 72:
            						case 73:
            						case 74:
            						case 76:
            						case 78:
            						case 80:
            						case 81:
            						case 83:
            						case 84:
            						case 86:
            						case 87:
            						case 88:
            						case 89:
            							{
            								alt37=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 37 );
            						    ex->set_state( 21 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case VOID_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt37=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt37=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 37 );
            														    ex->set_state( 32 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case AT:
            												case BACKGROUND:
            												case DEFER:
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACE:
            												case LBRACKET:
            												case LOW_PRIORITY:
            												case LSQBRACKET:
            												case QUESTION:
            												case SLICETOK:
            												case SSOR:
            												case 69:
            												case 70:
            												case 72:
            												case 73:
            												case 74:
            												case 76:
            												case 78:
            												case 80:
            												case 81:
            												case 83:
            												case 84:
            												case 86:
            												case 87:
            												case 88:
            												case 89:
            													{
            														alt37=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 37 );
            												    ex->set_state( 52 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 37 );
            										    ex->set_state( 49 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 37 );
            								    ex->set_state( 33 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt37=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 37 );
            						    ex->set_state( 22 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case INT_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt37=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt37=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 37 );
            														    ex->set_state( 32 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case AT:
            												case BACKGROUND:
            												case DEFER:
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACE:
            												case LBRACKET:
            												case LOW_PRIORITY:
            												case LSQBRACKET:
            												case QUESTION:
            												case SLICETOK:
            												case SSOR:
            												case 69:
            												case 70:
            												case 72:
            												case 73:
            												case 74:
            												case 76:
            												case 78:
            												case 80:
            												case 81:
            												case 83:
            												case 84:
            												case 86:
            												case 87:
            												case 88:
            												case 89:
            													{
            														alt37=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 37 );
            												    ex->set_state( 52 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 37 );
            										    ex->set_state( 49 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 37 );
            								    ex->set_state( 33 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt37=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 37 );
            						    ex->set_state( 23 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case FLOAT_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt37=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt37=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 37 );
            														    ex->set_state( 32 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case AT:
            												case BACKGROUND:
            												case DEFER:
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACE:
            												case LBRACKET:
            												case LOW_PRIORITY:
            												case LSQBRACKET:
            												case QUESTION:
            												case SLICETOK:
            												case SSOR:
            												case 69:
            												case 70:
            												case 72:
            												case 73:
            												case 74:
            												case 76:
            												case 78:
            												case 80:
            												case 81:
            												case 83:
            												case 84:
            												case 86:
            												case 87:
            												case 88:
            												case 89:
            													{
            														alt37=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 37 );
            												    ex->set_state( 52 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 37 );
            										    ex->set_state( 49 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 37 );
            								    ex->set_state( 33 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt37=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 37 );
            						    ex->set_state( 24 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case CHAR_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt37=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt37=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 37 );
            														    ex->set_state( 32 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case AT:
            												case BACKGROUND:
            												case DEFER:
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACE:
            												case LBRACKET:
            												case LOW_PRIORITY:
            												case LSQBRACKET:
            												case QUESTION:
            												case SLICETOK:
            												case SSOR:
            												case 69:
            												case 70:
            												case 72:
            												case 73:
            												case 74:
            												case 76:
            												case 78:
            												case 80:
            												case 81:
            												case 83:
            												case 84:
            												case 86:
            												case 87:
            												case 88:
            												case 89:
            													{
            														alt37=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 37 );
            												    ex->set_state( 52 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 37 );
            										    ex->set_state( 49 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 37 );
            								    ex->set_state( 33 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt37=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 37 );
            						    ex->set_state( 25 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case BOOL_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt37=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt37=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 37 );
            														    ex->set_state( 32 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case AT:
            												case BACKGROUND:
            												case DEFER:
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACE:
            												case LBRACKET:
            												case LOW_PRIORITY:
            												case LSQBRACKET:
            												case QUESTION:
            												case SLICETOK:
            												case SSOR:
            												case 69:
            												case 70:
            												case 72:
            												case 73:
            												case 74:
            												case 76:
            												case 78:
            												case 80:
            												case 81:
            												case 83:
            												case 84:
            												case 86:
            												case 87:
            												case 88:
            												case 89:
            													{
            														alt37=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 37 );
            												    ex->set_state( 52 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 37 );
            										    ex->set_state( 49 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 37 );
            								    ex->set_state( 33 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt37=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 37 );
            						    ex->set_state( 26 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case CPTR_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt37=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt37=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 37 );
            														    ex->set_state( 32 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case AT:
            												case BACKGROUND:
            												case DEFER:
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACE:
            												case LBRACKET:
            												case LOW_PRIORITY:
            												case LSQBRACKET:
            												case QUESTION:
            												case SLICETOK:
            												case SSOR:
            												case 69:
            												case 70:
            												case 72:
            												case 73:
            												case 74:
            												case 76:
            												case 78:
            												case 80:
            												case 81:
            												case 83:
            												case 84:
            												case 86:
            												case 87:
            												case 88:
            												case 89:
            													{
            														alt37=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 37 );
            												    ex->set_state( 52 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 37 );
            										    ex->set_state( 49 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 37 );
            								    ex->set_state( 33 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt37=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 37 );
            						    ex->set_state( 27 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case STRING_TYPE:
            					{
            						switch ( this->LA(4) )
            						{
            						case LBRACE:
            							{
            								switch ( this->LA(5) )
            								{
            								case STRING:
            									{
            										switch ( this->LA(6) )
            										{
            										case RBRACE:
            											{
            												switch ( this->LA(7) )
            												{
            												case RSQBRACKET:
            													{
            														switch ( this->LA(8) )
            														{
            														case ID:
            															{
            																alt37=1;
            															}
            														    break;
            														case LBRACKET:
            															{
            																alt37=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 37 );
            														    ex->set_state( 32 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;
            												case AT:
            												case BACKGROUND:
            												case DEFER:
            												case DOUBDEC:
            												case DOUBINC:
            												case LBRACE:
            												case LBRACKET:
            												case LOW_PRIORITY:
            												case LSQBRACKET:
            												case QUESTION:
            												case SLICETOK:
            												case SSOR:
            												case 69:
            												case 70:
            												case 72:
            												case 73:
            												case 74:
            												case 76:
            												case 78:
            												case 80:
            												case 81:
            												case 83:
            												case 84:
            												case 86:
            												case 87:
            												case 88:
            												case 89:
            													{
            														alt37=2;
            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 37 );
            												    ex->set_state( 52 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 37 );
            										    ex->set_state( 49 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 37 );
            								    ex->set_state( 33 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DLSQBRACKET:
            						case LBRACKET:
            						case LSQBRACKET:
            							{
            								alt37=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 37 );
            						    ex->set_state( 28 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case DOUBDEC:
            				case DOUBINC:
            				case ID:
            				case LBRACKET:
            				case LENGTH:
            				case RESOURCE:
            				case SHARED_REF:
            				case TYPE:
            				case 68:
            				case 78:
            					{
            						alt37=2;
            					}
            				    break;

            				default:
            				    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 37 );
            				    ex->set_state( 12 );


            				    goto ruleinstructionScalarEx;

            				}

            			}
            		    break;
            		case DLSQBRACKET:
            			{
            				switch ( this->LA(3) )
            				{
            				case DRSQBRACKET:
            					{
            						switch ( this->LA(4) )
            						{
            						case ID:
            							{
            								alt37=1;
            							}
            						    break;
            						case LBRACKET:
            							{
            								alt37=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 37 );
            						    ex->set_state( 29 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case BOOL:
            				case BOOL_TYPE:
            				case CHAR:
            				case CHAR_TYPE:
            				case CPTR_TYPE:
            				case DOUBDEC:
            				case DOUBINC:
            				case FLOAT:
            				case FLOAT_TYPE:
            				case ID:
            				case INT:
            				case INT_TYPE:
            				case LBRACKET:
            				case LENGTH:
            				case NULLTOK:
            				case RESOURCE:
            				case SHARED_REF:
            				case STRING:
            				case STRING_TYPE:
            				case TYPE:
            				case VOID_TYPE:
            				case 68:
            				case 78:
            					{
            						alt37=2;
            					}
            				    break;

            				default:
            				    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 37 );
            				    ex->set_state( 13 );


            				    goto ruleinstructionScalarEx;

            				}

            			}
            		    break;
            		case LBRACKET:
            			{
            				alt37=2;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 37 );
            		    ex->set_state( 8 );


            		    goto ruleinstructionScalarEx;

            		}

            	}
                break;
            case SHARED_REF:
            	{
            		switch ( this->LA(2) )
            		{
            		case TYPE:
            			{
            				switch ( this->LA(3) )
            				{
            				case LSQBRACKET:
            					{
            						switch ( this->LA(4) )
            						{
            						case RSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case LBRACKET:
            									{
            										alt37=2;
            									}
            								    break;
            								case ID:
            									{
            										alt37=1;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 37 );
            								    ex->set_state( 34 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case INT:
            							{
            								switch ( this->LA(5) )
            								{
            								case RSQBRACKET:
            									{
            										switch ( this->LA(6) )
            										{
            										case ID:
            											{
            												alt37=1;
            											}
            										    break;
            										case LBRACKET:
            											{
            												alt37=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 37 );
            										    ex->set_state( 50 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;
            								case AT:
            								case BACKGROUND:
            								case DEFER:
            								case DOUBDEC:
            								case DOUBINC:
            								case LBRACE:
            								case LBRACKET:
            								case LOW_PRIORITY:
            								case LSQBRACKET:
            								case QUESTION:
            								case SLICETOK:
            								case SSOR:
            								case 69:
            								case 70:
            								case 72:
            								case 73:
            								case 74:
            								case 76:
            								case 78:
            								case 80:
            								case 81:
            								case 83:
            								case 84:
            								case 86:
            								case 87:
            								case 88:
            								case 89:
            									{
            										alt37=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 37 );
            								    ex->set_state( 35 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case FLOAT:
            							{
            								switch ( this->LA(5) )
            								{
            								case RSQBRACKET:
            									{
            										switch ( this->LA(6) )
            										{
            										case ID:
            											{
            												alt37=1;
            											}
            										    break;
            										case LBRACKET:
            											{
            												alt37=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 37 );
            										    ex->set_state( 50 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;
            								case AT:
            								case BACKGROUND:
            								case DEFER:
            								case DOUBDEC:
            								case DOUBINC:
            								case LBRACE:
            								case LBRACKET:
            								case LOW_PRIORITY:
            								case LSQBRACKET:
            								case QUESTION:
            								case SLICETOK:
            								case SSOR:
            								case 69:
            								case 70:
            								case 72:
            								case 73:
            								case 74:
            								case 76:
            								case 78:
            								case 80:
            								case 81:
            								case 83:
            								case 84:
            								case 86:
            								case 87:
            								case 88:
            								case 89:
            									{
            										alt37=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 37 );
            								    ex->set_state( 36 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case CHAR:
            							{
            								switch ( this->LA(5) )
            								{
            								case RSQBRACKET:
            									{
            										switch ( this->LA(6) )
            										{
            										case ID:
            											{
            												alt37=1;
            											}
            										    break;
            										case LBRACKET:
            											{
            												alt37=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 37 );
            										    ex->set_state( 50 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;
            								case AT:
            								case BACKGROUND:
            								case DEFER:
            								case DOUBDEC:
            								case DOUBINC:
            								case LBRACE:
            								case LBRACKET:
            								case LOW_PRIORITY:
            								case LSQBRACKET:
            								case QUESTION:
            								case SLICETOK:
            								case SSOR:
            								case 69:
            								case 70:
            								case 72:
            								case 73:
            								case 74:
            								case 76:
            								case 78:
            								case 80:
            								case 81:
            								case 83:
            								case 84:
            								case 86:
            								case 87:
            								case 88:
            								case 89:
            									{
            										alt37=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 37 );
            								    ex->set_state( 37 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case STRING:
            							{
            								switch ( this->LA(5) )
            								{
            								case RSQBRACKET:
            									{
            										switch ( this->LA(6) )
            										{
            										case ID:
            											{
            												alt37=1;
            											}
            										    break;
            										case LBRACKET:
            											{
            												alt37=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 37 );
            										    ex->set_state( 50 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;
            								case AT:
            								case BACKGROUND:
            								case DEFER:
            								case DOUBDEC:
            								case DOUBINC:
            								case LBRACE:
            								case LBRACKET:
            								case LOW_PRIORITY:
            								case LSQBRACKET:
            								case QUESTION:
            								case SLICETOK:
            								case SSOR:
            								case 69:
            								case 70:
            								case 72:
            								case 73:
            								case 74:
            								case 76:
            								case 78:
            								case 80:
            								case 81:
            								case 83:
            								case 84:
            								case 86:
            								case 87:
            								case 88:
            								case 89:
            									{
            										alt37=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 37 );
            								    ex->set_state( 38 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case BOOL:
            							{
            								switch ( this->LA(5) )
            								{
            								case RSQBRACKET:
            									{
            										switch ( this->LA(6) )
            										{
            										case ID:
            											{
            												alt37=1;
            											}
            										    break;
            										case LBRACKET:
            											{
            												alt37=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 37 );
            										    ex->set_state( 50 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;
            								case AT:
            								case BACKGROUND:
            								case DEFER:
            								case DOUBDEC:
            								case DOUBINC:
            								case LBRACE:
            								case LBRACKET:
            								case LOW_PRIORITY:
            								case LSQBRACKET:
            								case QUESTION:
            								case SLICETOK:
            								case SSOR:
            								case 69:
            								case 70:
            								case 72:
            								case 73:
            								case 74:
            								case 76:
            								case 78:
            								case 80:
            								case 81:
            								case 83:
            								case 84:
            								case 86:
            								case 87:
            								case 88:
            								case 89:
            									{
            										alt37=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 37 );
            								    ex->set_state( 39 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case NULLTOK:
            							{
            								switch ( this->LA(5) )
            								{
            								case RSQBRACKET:
            									{
            										switch ( this->LA(6) )
            										{
            										case ID:
            											{
            												alt37=1;
            											}
            										    break;
            										case LBRACKET:
            											{
            												alt37=2;
            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 37 );
            										    ex->set_state( 50 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;
            								case AT:
            								case BACKGROUND:
            								case DEFER:
            								case DOUBDEC:
            								case DOUBINC:
            								case LBRACE:
            								case LBRACKET:
            								case LOW_PRIORITY:
            								case LSQBRACKET:
            								case QUESTION:
            								case SLICETOK:
            								case SSOR:
            								case 69:
            								case 70:
            								case 72:
            								case 73:
            								case 74:
            								case 76:
            								case 78:
            								case 80:
            								case 81:
            								case 83:
            								case 84:
            								case 86:
            								case 87:
            								case 88:
            								case 89:
            									{
            										alt37=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 37 );
            								    ex->set_state( 40 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case VOID_TYPE:
            							{
            								switch ( this->LA(5) )
            								{
            								case LBRACE:
            									{
            										switch ( this->LA(6) )
            										{
            										case STRING:
            											{
            												switch ( this->LA(7) )
            												{
            												case RBRACE:
            													{
            														switch ( this->LA(8) )
            														{
            														case RSQBRACKET:
            															{
            																switch ( this->LA(9) )
            																{
            																case ID:
            																	{
            																		alt37=1;
            																	}
            																    break;
            																case LBRACKET:
            																	{
            																		alt37=2;
            																	}
            																    break;

            																default:
            																    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            																    ex->set_decisionNum( 37 );
            																    ex->set_state( 50 );


            																    goto ruleinstructionScalarEx;

            																}

            															}
            														    break;
            														case AT:
            														case BACKGROUND:
            														case DEFER:
            														case DOUBDEC:
            														case DOUBINC:
            														case LBRACE:
            														case LBRACKET:
            														case LOW_PRIORITY:
            														case LSQBRACKET:
            														case QUESTION:
            														case SLICETOK:
            														case SSOR:
            														case 69:
            														case 70:
            														case 72:
            														case 73:
            														case 74:
            														case 76:
            														case 78:
            														case 80:
            														case 81:
            														case 83:
            														case 84:
            														case 86:
            														case 87:
            														case 88:
            														case 89:
            															{
            																alt37=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 37 );
            														    ex->set_state( 54 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 37 );
            												    ex->set_state( 53 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 37 );
            										    ex->set_state( 51 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;
            								case DLSQBRACKET:
            								case LBRACKET:
            								case LSQBRACKET:
            									{
            										alt37=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 37 );
            								    ex->set_state( 41 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case INT_TYPE:
            							{
            								switch ( this->LA(5) )
            								{
            								case LBRACE:
            									{
            										switch ( this->LA(6) )
            										{
            										case STRING:
            											{
            												switch ( this->LA(7) )
            												{
            												case RBRACE:
            													{
            														switch ( this->LA(8) )
            														{
            														case RSQBRACKET:
            															{
            																switch ( this->LA(9) )
            																{
            																case ID:
            																	{
            																		alt37=1;
            																	}
            																    break;
            																case LBRACKET:
            																	{
            																		alt37=2;
            																	}
            																    break;

            																default:
            																    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            																    ex->set_decisionNum( 37 );
            																    ex->set_state( 50 );


            																    goto ruleinstructionScalarEx;

            																}

            															}
            														    break;
            														case AT:
            														case BACKGROUND:
            														case DEFER:
            														case DOUBDEC:
            														case DOUBINC:
            														case LBRACE:
            														case LBRACKET:
            														case LOW_PRIORITY:
            														case LSQBRACKET:
            														case QUESTION:
            														case SLICETOK:
            														case SSOR:
            														case 69:
            														case 70:
            														case 72:
            														case 73:
            														case 74:
            														case 76:
            														case 78:
            														case 80:
            														case 81:
            														case 83:
            														case 84:
            														case 86:
            														case 87:
            														case 88:
            														case 89:
            															{
            																alt37=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 37 );
            														    ex->set_state( 54 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 37 );
            												    ex->set_state( 53 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 37 );
            										    ex->set_state( 51 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;
            								case DLSQBRACKET:
            								case LBRACKET:
            								case LSQBRACKET:
            									{
            										alt37=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 37 );
            								    ex->set_state( 42 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case FLOAT_TYPE:
            							{
            								switch ( this->LA(5) )
            								{
            								case LBRACE:
            									{
            										switch ( this->LA(6) )
            										{
            										case STRING:
            											{
            												switch ( this->LA(7) )
            												{
            												case RBRACE:
            													{
            														switch ( this->LA(8) )
            														{
            														case RSQBRACKET:
            															{
            																switch ( this->LA(9) )
            																{
            																case ID:
            																	{
            																		alt37=1;
            																	}
            																    break;
            																case LBRACKET:
            																	{
            																		alt37=2;
            																	}
            																    break;

            																default:
            																    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            																    ex->set_decisionNum( 37 );
            																    ex->set_state( 50 );


            																    goto ruleinstructionScalarEx;

            																}

            															}
            														    break;
            														case AT:
            														case BACKGROUND:
            														case DEFER:
            														case DOUBDEC:
            														case DOUBINC:
            														case LBRACE:
            														case LBRACKET:
            														case LOW_PRIORITY:
            														case LSQBRACKET:
            														case QUESTION:
            														case SLICETOK:
            														case SSOR:
            														case 69:
            														case 70:
            														case 72:
            														case 73:
            														case 74:
            														case 76:
            														case 78:
            														case 80:
            														case 81:
            														case 83:
            														case 84:
            														case 86:
            														case 87:
            														case 88:
            														case 89:
            															{
            																alt37=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 37 );
            														    ex->set_state( 54 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 37 );
            												    ex->set_state( 53 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 37 );
            										    ex->set_state( 51 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;
            								case DLSQBRACKET:
            								case LBRACKET:
            								case LSQBRACKET:
            									{
            										alt37=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 37 );
            								    ex->set_state( 43 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case CHAR_TYPE:
            							{
            								switch ( this->LA(5) )
            								{
            								case LBRACE:
            									{
            										switch ( this->LA(6) )
            										{
            										case STRING:
            											{
            												switch ( this->LA(7) )
            												{
            												case RBRACE:
            													{
            														switch ( this->LA(8) )
            														{
            														case RSQBRACKET:
            															{
            																switch ( this->LA(9) )
            																{
            																case ID:
            																	{
            																		alt37=1;
            																	}
            																    break;
            																case LBRACKET:
            																	{
            																		alt37=2;
            																	}
            																    break;

            																default:
            																    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            																    ex->set_decisionNum( 37 );
            																    ex->set_state( 50 );


            																    goto ruleinstructionScalarEx;

            																}

            															}
            														    break;
            														case AT:
            														case BACKGROUND:
            														case DEFER:
            														case DOUBDEC:
            														case DOUBINC:
            														case LBRACE:
            														case LBRACKET:
            														case LOW_PRIORITY:
            														case LSQBRACKET:
            														case QUESTION:
            														case SLICETOK:
            														case SSOR:
            														case 69:
            														case 70:
            														case 72:
            														case 73:
            														case 74:
            														case 76:
            														case 78:
            														case 80:
            														case 81:
            														case 83:
            														case 84:
            														case 86:
            														case 87:
            														case 88:
            														case 89:
            															{
            																alt37=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 37 );
            														    ex->set_state( 54 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 37 );
            												    ex->set_state( 53 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 37 );
            										    ex->set_state( 51 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;
            								case DLSQBRACKET:
            								case LBRACKET:
            								case LSQBRACKET:
            									{
            										alt37=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 37 );
            								    ex->set_state( 44 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case BOOL_TYPE:
            							{
            								switch ( this->LA(5) )
            								{
            								case LBRACE:
            									{
            										switch ( this->LA(6) )
            										{
            										case STRING:
            											{
            												switch ( this->LA(7) )
            												{
            												case RBRACE:
            													{
            														switch ( this->LA(8) )
            														{
            														case RSQBRACKET:
            															{
            																switch ( this->LA(9) )
            																{
            																case ID:
            																	{
            																		alt37=1;
            																	}
            																    break;
            																case LBRACKET:
            																	{
            																		alt37=2;
            																	}
            																    break;

            																default:
            																    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            																    ex->set_decisionNum( 37 );
            																    ex->set_state( 50 );


            																    goto ruleinstructionScalarEx;

            																}

            															}
            														    break;
            														case AT:
            														case BACKGROUND:
            														case DEFER:
            														case DOUBDEC:
            														case DOUBINC:
            														case LBRACE:
            														case LBRACKET:
            														case LOW_PRIORITY:
            														case LSQBRACKET:
            														case QUESTION:
            														case SLICETOK:
            														case SSOR:
            														case 69:
            														case 70:
            														case 72:
            														case 73:
            														case 74:
            														case 76:
            														case 78:
            														case 80:
            														case 81:
            														case 83:
            														case 84:
            														case 86:
            														case 87:
            														case 88:
            														case 89:
            															{
            																alt37=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 37 );
            														    ex->set_state( 54 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 37 );
            												    ex->set_state( 53 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 37 );
            										    ex->set_state( 51 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;
            								case DLSQBRACKET:
            								case LBRACKET:
            								case LSQBRACKET:
            									{
            										alt37=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 37 );
            								    ex->set_state( 45 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case CPTR_TYPE:
            							{
            								switch ( this->LA(5) )
            								{
            								case LBRACE:
            									{
            										switch ( this->LA(6) )
            										{
            										case STRING:
            											{
            												switch ( this->LA(7) )
            												{
            												case RBRACE:
            													{
            														switch ( this->LA(8) )
            														{
            														case RSQBRACKET:
            															{
            																switch ( this->LA(9) )
            																{
            																case ID:
            																	{
            																		alt37=1;
            																	}
            																    break;
            																case LBRACKET:
            																	{
            																		alt37=2;
            																	}
            																    break;

            																default:
            																    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            																    ex->set_decisionNum( 37 );
            																    ex->set_state( 50 );


            																    goto ruleinstructionScalarEx;

            																}

            															}
            														    break;
            														case AT:
            														case BACKGROUND:
            														case DEFER:
            														case DOUBDEC:
            														case DOUBINC:
            														case LBRACE:
            														case LBRACKET:
            														case LOW_PRIORITY:
            														case LSQBRACKET:
            														case QUESTION:
            														case SLICETOK:
            														case SSOR:
            														case 69:
            														case 70:
            														case 72:
            														case 73:
            														case 74:
            														case 76:
            														case 78:
            														case 80:
            														case 81:
            														case 83:
            														case 84:
            														case 86:
            														case 87:
            														case 88:
            														case 89:
            															{
            																alt37=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 37 );
            														    ex->set_state( 54 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 37 );
            												    ex->set_state( 53 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 37 );
            										    ex->set_state( 51 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;
            								case DLSQBRACKET:
            								case LBRACKET:
            								case LSQBRACKET:
            									{
            										alt37=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 37 );
            								    ex->set_state( 46 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case STRING_TYPE:
            							{
            								switch ( this->LA(5) )
            								{
            								case LBRACE:
            									{
            										switch ( this->LA(6) )
            										{
            										case STRING:
            											{
            												switch ( this->LA(7) )
            												{
            												case RBRACE:
            													{
            														switch ( this->LA(8) )
            														{
            														case RSQBRACKET:
            															{
            																switch ( this->LA(9) )
            																{
            																case ID:
            																	{
            																		alt37=1;
            																	}
            																    break;
            																case LBRACKET:
            																	{
            																		alt37=2;
            																	}
            																    break;

            																default:
            																    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            																    ex->set_decisionNum( 37 );
            																    ex->set_state( 50 );


            																    goto ruleinstructionScalarEx;

            																}

            															}
            														    break;
            														case AT:
            														case BACKGROUND:
            														case DEFER:
            														case DOUBDEC:
            														case DOUBINC:
            														case LBRACE:
            														case LBRACKET:
            														case LOW_PRIORITY:
            														case LSQBRACKET:
            														case QUESTION:
            														case SLICETOK:
            														case SSOR:
            														case 69:
            														case 70:
            														case 72:
            														case 73:
            														case 74:
            														case 76:
            														case 78:
            														case 80:
            														case 81:
            														case 83:
            														case 84:
            														case 86:
            														case 87:
            														case 88:
            														case 89:
            															{
            																alt37=2;
            															}
            														    break;

            														default:
            														    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            														    ex->set_decisionNum( 37 );
            														    ex->set_state( 54 );


            														    goto ruleinstructionScalarEx;

            														}

            													}
            												    break;

            												default:
            												    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            												    ex->set_decisionNum( 37 );
            												    ex->set_state( 53 );


            												    goto ruleinstructionScalarEx;

            												}

            											}
            										    break;

            										default:
            										    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            										    ex->set_decisionNum( 37 );
            										    ex->set_state( 51 );


            										    goto ruleinstructionScalarEx;

            										}

            									}
            								    break;
            								case DLSQBRACKET:
            								case LBRACKET:
            								case LSQBRACKET:
            									{
            										alt37=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 37 );
            								    ex->set_state( 47 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case DOUBDEC:
            						case DOUBINC:
            						case ID:
            						case LBRACKET:
            						case LENGTH:
            						case RESOURCE:
            						case SHARED_REF:
            						case TYPE:
            						case 68:
            						case 78:
            							{
            								alt37=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 37 );
            						    ex->set_state( 30 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case DLSQBRACKET:
            					{
            						switch ( this->LA(4) )
            						{
            						case DRSQBRACKET:
            							{
            								switch ( this->LA(5) )
            								{
            								case ID:
            									{
            										alt37=1;
            									}
            								    break;
            								case LBRACKET:
            									{
            										alt37=2;
            									}
            								    break;

            								default:
            								    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            								    ex->set_decisionNum( 37 );
            								    ex->set_state( 48 );


            								    goto ruleinstructionScalarEx;

            								}

            							}
            						    break;
            						case BOOL:
            						case BOOL_TYPE:
            						case CHAR:
            						case CHAR_TYPE:
            						case CPTR_TYPE:
            						case DOUBDEC:
            						case DOUBINC:
            						case FLOAT:
            						case FLOAT_TYPE:
            						case ID:
            						case INT:
            						case INT_TYPE:
            						case LBRACKET:
            						case LENGTH:
            						case NULLTOK:
            						case RESOURCE:
            						case SHARED_REF:
            						case STRING:
            						case STRING_TYPE:
            						case TYPE:
            						case VOID_TYPE:
            						case 68:
            						case 78:
            							{
            								alt37=2;
            							}
            						    break;

            						default:
            						    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            						    ex->set_decisionNum( 37 );
            						    ex->set_state( 31 );


            						    goto ruleinstructionScalarEx;

            						}

            					}
            				    break;
            				case ID:
            					{
            						alt37=1;
            					}
            				    break;
            				case LBRACKET:
            					{
            						alt37=2;
            					}
            				    break;

            				default:
            				    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            				    ex->set_decisionNum( 37 );
            				    ex->set_state( 14 );


            				    goto ruleinstructionScalarEx;

            				}

            			}
            		    break;
            		case BOOL_TYPE:
            		case CHAR_TYPE:
            		case CPTR_TYPE:
            		case FLOAT_TYPE:
            		case INT_TYPE:
            		case STRING_TYPE:
            		case VOID_TYPE:
            			{
            				alt37=2;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 37 );
            		    ex->set_state( 9 );


            		    goto ruleinstructionScalarEx;

            		}

            	}
                break;
            case WEAK_REF:
            	{
            		alt37=1;
            	}
                break;
            case BOOL:
            case CHAR:
            case DOUBDEC:
            case DOUBINC:
            case FLOAT:
            case ID:
            case INT:
            case LBRACKET:
            case LENGTH:
            case NULLTOK:
            case RESOURCE:
            case STRING:
            case 68:
            case 78:
            	{
            		alt37=2;
            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 37 );
                ex->set_state( 0 );


                goto ruleinstructionScalarEx;

            }

            switch (alt37)
            {
        	case 1:
        	    {
        	        this->followPush(FOLLOW_declaration_in_instructionScalar5100);
        	        declaration41=declaration();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleinstructionScalarEx;
        	        }


        	        {
        	            node = declaration41
        	            ;
        	        }


        	    }
        	    break;
        	case 2:
        	    {
        	        this->followPush(FOLLOW_assignment_or_expression_in_instructionScalar5113);
        	        assignment_or_expression42=assignment_or_expression();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleinstructionScalarEx;
        	        }


        	        {
        	            node = assignment_or_expression42
        	            ;
        	        }


        	    }
        	    break;

            }
        }
    }
    goto ruleinstructionScalarEx;
    ruleinstructionScalarEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::continue_instruction*
WNScriptASTParser::continueInst()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::continue_instruction* node;


    ImplTraits::CommonTokenType const* a = NULL;
    ImplTraits::CommonTokenType const* b = NULL;






      node = nullptr;



    {
        {
            a =  this->matchToken(CONTINUE, &FOLLOW_CONTINUE_in_continueInst5143);
            if  (this->hasException())
            {
                goto rulecontinueInstEx;
            }


            b =  this->matchToken(SEMICOLON, &FOLLOW_SEMICOLON_in_continueInst5147);
            if  (this->hasException())
            {
                goto rulecontinueInstEx;
            }


            {
                 node = m_allocator->construct<scripting::continue_instruction>(m_allocator); SET_LOCATION(node, a); SET_END_LOCATION(node, b);
            }


        }

    }
    goto rulecontinueInstEx;
    rulecontinueInstEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::break_instruction*
WNScriptASTParser::breakInst()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::break_instruction* node;


    ImplTraits::CommonTokenType const* a = NULL;
    ImplTraits::CommonTokenType const* b = NULL;






        node = nullptr;



    {
        {
            a =  this->matchToken(BREAK, &FOLLOW_BREAK_in_breakInst5173);
            if  (this->hasException())
            {
                goto rulebreakInstEx;
            }


            b =  this->matchToken(SEMICOLON, &FOLLOW_SEMICOLON_in_breakInst5177);
            if  (this->hasException())
            {
                goto rulebreakInstEx;
            }


            {
                 node = m_allocator->construct<scripting::break_instruction>(m_allocator); SET_LOCATION(node, a); SET_END_LOCATION(node, b);
            }


        }

    }
    goto rulebreakInstEx;
    rulebreakInstEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::return_instruction*
WNScriptASTParser::returnInst()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::return_instruction* node;


    ImplTraits::CommonTokenType const* a = NULL;
    ImplTraits::CommonTokenType const* b = NULL;
    ImplTraits::CommonTokenType const* c = NULL;
    ImplTraits::CommonTokenType const* d = NULL;
    scripting::expression* expr43;





        node = nullptr;



    {
        {

            ANTLR_UINT32 alt38;

            alt38=2;

            switch ( this->LA(1) )
            {
            case RETURN:
            	{
            		switch ( this->LA(2) )
            		{
            		case SEMICOLON:
            			{
            				alt38=2;
            			}
            		    break;
            		case BOOL:
            		case BOOL_TYPE:
            		case CHAR:
            		case CHAR_TYPE:
            		case CPTR_TYPE:
            		case DOUBDEC:
            		case DOUBINC:
            		case FLOAT:
            		case FLOAT_TYPE:
            		case ID:
            		case INT:
            		case INT_TYPE:
            		case LBRACKET:
            		case LENGTH:
            		case NULLTOK:
            		case RESOURCE:
            		case SHARED_REF:
            		case STRING:
            		case STRING_TYPE:
            		case TYPE:
            		case VOID_TYPE:
            		case 68:
            		case 78:
            			{
            				alt38=1;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 38 );
            		    ex->set_state( 1 );


            		    goto rulereturnInstEx;

            		}

            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 38 );
                ex->set_state( 0 );


                goto rulereturnInstEx;

            }

            switch (alt38)
            {
        	case 1:
        	    {
        	        a =  this->matchToken(RETURN, &FOLLOW_RETURN_in_returnInst5204);
        	        if  (this->hasException())
        	        {
        	            goto rulereturnInstEx;
        	        }


        	        this->followPush(FOLLOW_expr_in_returnInst5206);
        	        expr43=expr();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulereturnInstEx;
        	        }


        	        b =  this->matchToken(SEMICOLON, &FOLLOW_SEMICOLON_in_returnInst5210);
        	        if  (this->hasException())
        	        {
        	            goto rulereturnInstEx;
        	        }


        	        {
        	             node = m_allocator->construct<scripting::return_instruction>(m_allocator, expr43
        	            ); SET_LOCATION(node, a); SET_END_LOCATION(node, b);
        	        }


        	    }
        	    break;
        	case 2:
        	    {
        	        c =  this->matchToken(RETURN, &FOLLOW_RETURN_in_returnInst5224);
        	        if  (this->hasException())
        	        {
        	            goto rulereturnInstEx;
        	        }


        	        d =  this->matchToken(SEMICOLON, &FOLLOW_SEMICOLON_in_returnInst5228);
        	        if  (this->hasException())
        	        {
        	            goto rulereturnInstEx;
        	        }


        	        {
        	             node = m_allocator->construct<scripting::return_instruction>(m_allocator); SET_LOCATION(node, c); SET_END_LOCATION(node, d);
        	        }


        	    }
        	    break;

            }
        }
    }
    goto rulereturnInstEx;
    rulereturnInstEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::instruction*
WNScriptASTParser::whileInst()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::instruction* node;


    ImplTraits::CommonTokenType const* WHILE46 = NULL;
    scripting::expression* expr44;
    scripting::instruction_list* instruction_list45;





        node = nullptr;



    {
        {
            WHILE46 =  this->matchToken(WHILE, &FOLLOW_WHILE_in_whileInst5261);
            if  (this->hasException())
            {
                goto rulewhileInstEx;
            }


             this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_whileInst5263);
            if  (this->hasException())
            {
                goto rulewhileInstEx;
            }


            this->followPush(FOLLOW_expr_in_whileInst5265);
            expr44=expr();

            this->followPop();
            if  (this->hasException())
            {
                goto rulewhileInstEx;
            }


             this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_whileInst5267);
            if  (this->hasException())
            {
                goto rulewhileInstEx;
            }


            this->followPush(FOLLOW_instruction_list_in_whileInst5269);
            instruction_list45=instruction_list();

            this->followPop();
            if  (this->hasException())
            {
                goto rulewhileInstEx;
            }


            {
                 node = m_allocator->construct<scripting::while_instruction>(m_allocator, expr44
                , instruction_list45
                ); SET_LOCATION(node, WHILE46); SET_END_LOCATION_FROM_NODE(node,
                instruction_list45
                );
            }


        }

    }
    goto rulewhileInstEx;
    rulewhileInstEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::instruction*
WNScriptASTParser::doInst()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::instruction* node;


    ImplTraits::CommonTokenType const* DO49 = NULL;
    ImplTraits::CommonTokenType const* SEMICOLON50 = NULL;
    scripting::expression* expr47;
    scripting::instruction_list* instruction_list48;





        node = nullptr;



    {
        {
            DO49 =  this->matchToken(DO, &FOLLOW_DO_in_doInst5305);
            if  (this->hasException())
            {
                goto ruledoInstEx;
            }


            this->followPush(FOLLOW_instruction_list_in_doInst5307);
            instruction_list48=instruction_list();

            this->followPop();
            if  (this->hasException())
            {
                goto ruledoInstEx;
            }


             this->matchToken(WHILE, &FOLLOW_WHILE_in_doInst5309);
            if  (this->hasException())
            {
                goto ruledoInstEx;
            }


             this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_doInst5311);
            if  (this->hasException())
            {
                goto ruledoInstEx;
            }


            this->followPush(FOLLOW_expr_in_doInst5313);
            expr47=expr();

            this->followPop();
            if  (this->hasException())
            {
                goto ruledoInstEx;
            }


             this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_doInst5315);
            if  (this->hasException())
            {
                goto ruledoInstEx;
            }


            SEMICOLON50 =  this->matchToken(SEMICOLON, &FOLLOW_SEMICOLON_in_doInst5317);
            if  (this->hasException())
            {
                goto ruledoInstEx;
            }


            {
                node = m_allocator->construct<scripting::do_instruction>(m_allocator, expr47
                , instruction_list48
                ); SET_LOCATION(node, DO49); SET_END_LOCATION(node, SEMICOLON50);
            }


        }

    }
    goto ruledoInstEx;
    ruledoInstEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::for_instruction*
WNScriptASTParser::forInst()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::for_instruction* node;


    ImplTraits::CommonTokenType const* FOR51 = NULL;
    scripting::instruction* a;
    scripting::expression* b;
    scripting::instruction* c;
    scripting::instruction_list* d;





        node =  m_allocator->construct<scripting::for_instruction>(m_allocator);



    {
        {
            FOR51 =  this->matchToken(FOR, &FOLLOW_FOR_in_forInst5349);
            if  (this->hasException())
            {
                goto ruleforInstEx;
            }


             this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_forInst5351);
            if  (this->hasException())
            {
                goto ruleforInstEx;
            }


            {
                 SET_LOCATION(node, FOR51);
            }


            {
                int alt39=2;
                switch ( this->LA(1) )
                {
                    case BOOL:
                    case BOOL_TYPE:
                    case CHAR:
                    case CHAR_TYPE:
                    case CPTR_TYPE:
                    case DOUBDEC:
                    case DOUBINC:
                    case FLOAT:
                    case FLOAT_TYPE:
                    case ID:
                    case INT:
                    case INT_TYPE:
                    case LBRACKET:
                    case LENGTH:
                    case NULLTOK:
                    case RESOURCE:
                    case SHARED_REF:
                    case STRING:
                    case STRING_TYPE:
                    case TYPE:
                    case VOID_TYPE:
                    case WEAK_REF:
                    case 68:
                    case 78:
                    	{
                    		alt39=1;
                    	}
                        break;
                }

                switch (alt39)
                {
            	case 1:
            	    {
            	        this->followPush(FOLLOW_instructionScalar_in_forInst5379);
            	        a=instructionScalar();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleforInstEx;
            	        }


            	        {
            	            node->add_initializer(a
            	            );
            	        }


            	    }
            	    break;

                }
            }

             this->matchToken(SEMICOLON, &FOLLOW_SEMICOLON_in_forInst5385);
            if  (this->hasException())
            {
                goto ruleforInstEx;
            }


            {
                int alt40=2;
                switch ( this->LA(1) )
                {
                    case BOOL:
                    case BOOL_TYPE:
                    case CHAR:
                    case CHAR_TYPE:
                    case CPTR_TYPE:
                    case DOUBDEC:
                    case DOUBINC:
                    case FLOAT:
                    case FLOAT_TYPE:
                    case ID:
                    case INT:
                    case INT_TYPE:
                    case LBRACKET:
                    case LENGTH:
                    case NULLTOK:
                    case RESOURCE:
                    case SHARED_REF:
                    case STRING:
                    case STRING_TYPE:
                    case TYPE:
                    case VOID_TYPE:
                    case 68:
                    case 78:
                    	{
                    		alt40=1;
                    	}
                        break;
                }

                switch (alt40)
                {
            	case 1:
            	    {
            	        this->followPush(FOLLOW_expr_in_forInst5410);
            	        b=expr();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleforInstEx;
            	        }


            	        {
            	            node->add_condition(b
            	            );
            	        }


            	    }
            	    break;

                }
            }

             this->matchToken(SEMICOLON, &FOLLOW_SEMICOLON_in_forInst5424);
            if  (this->hasException())
            {
                goto ruleforInstEx;
            }


            {
                int alt41=2;
                switch ( this->LA(1) )
                {
                    case BOOL:
                    case BOOL_TYPE:
                    case CHAR:
                    case CHAR_TYPE:
                    case CPTR_TYPE:
                    case DOUBDEC:
                    case DOUBINC:
                    case FLOAT:
                    case FLOAT_TYPE:
                    case ID:
                    case INT:
                    case INT_TYPE:
                    case LBRACKET:
                    case LENGTH:
                    case NULLTOK:
                    case RESOURCE:
                    case SHARED_REF:
                    case STRING:
                    case STRING_TYPE:
                    case TYPE:
                    case VOID_TYPE:
                    case WEAK_REF:
                    case 68:
                    case 78:
                    	{
                    		alt41=1;
                    	}
                        break;
                }

                switch (alt41)
                {
            	case 1:
            	    {
            	        this->followPush(FOLLOW_instructionScalar_in_forInst5449);
            	        c=instructionScalar();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleforInstEx;
            	        }


            	        {
            	            node->add_post_op(c
            	            );
            	        }


            	    }
            	    break;

                }
            }

             this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_forInst5455);
            if  (this->hasException())
            {
                goto ruleforInstEx;
            }


            {
                this->followPush(FOLLOW_instruction_list_in_forInst5480);
                d=instruction_list();

                this->followPop();
                if  (this->hasException())
                {
                    goto ruleforInstEx;
                }


                {
                    node->add_body(d
                    ); SET_END_LOCATION_FROM_NODE(node, d
                    );
                }


            }


        }

    }
    goto ruleforInstEx;
    ruleforInstEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::else_if_instruction*
WNScriptASTParser::elsemiddle()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::else_if_instruction* node;


    ImplTraits::CommonTokenType const* ELSE54 = NULL;
    scripting::expression* expr52;
    scripting::instruction_list* instruction_list53;





        node = nullptr;



    {
        {
            ELSE54 =  this->matchToken(ELSE, &FOLLOW_ELSE_in_elsemiddle5528);
            if  (this->hasException())
            {
                goto ruleelsemiddleEx;
            }


             this->matchToken(IF, &FOLLOW_IF_in_elsemiddle5530);
            if  (this->hasException())
            {
                goto ruleelsemiddleEx;
            }


             this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_elsemiddle5532);
            if  (this->hasException())
            {
                goto ruleelsemiddleEx;
            }


            this->followPush(FOLLOW_expr_in_elsemiddle5534);
            expr52=expr();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleelsemiddleEx;
            }


             this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_elsemiddle5536);
            if  (this->hasException())
            {
                goto ruleelsemiddleEx;
            }


            this->followPush(FOLLOW_instruction_list_in_elsemiddle5538);
            instruction_list53=instruction_list();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleelsemiddleEx;
            }


            {
                 node = m_allocator->construct<scripting::else_if_instruction>(m_allocator, expr52
                , instruction_list53
                ); SET_LOCATION(node, ELSE54); SET_END_LOCATION_FROM_NODE(node,
                instruction_list53
                );
            }


        }

    }
    goto ruleelsemiddleEx;
    ruleelsemiddleEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::instruction_list*
WNScriptASTParser::endif()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::instruction_list* node;


    scripting::instruction_list* instruction_list55;





        node = nullptr;



    {
        {
             this->matchToken(ELSE, &FOLLOW_ELSE_in_endif5571);
            if  (this->hasException())
            {
                goto ruleendifEx;
            }


            this->followPush(FOLLOW_instruction_list_in_endif5573);
            instruction_list55=instruction_list();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleendifEx;
            }


            {
                node = instruction_list55
                ;
            }


        }

    }
    goto ruleendifEx;
    ruleendifEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::if_instruction*
WNScriptASTParser::ifInst()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::if_instruction* node;


    ImplTraits::CommonTokenType const* IF58 = NULL;
    scripting::expression* expr56;
    scripting::instruction_list* instruction_list57;
    scripting::else_if_instruction* elsemiddle59;
    scripting::instruction_list* endif60;





        node = nullptr;



    {
        {
            IF58 =  this->matchToken(IF, &FOLLOW_IF_in_ifInst5603);
            if  (this->hasException())
            {
                goto ruleifInstEx;
            }


             this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_ifInst5605);
            if  (this->hasException())
            {
                goto ruleifInstEx;
            }


            this->followPush(FOLLOW_expr_in_ifInst5607);
            expr56=expr();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleifInstEx;
            }


             this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_ifInst5609);
            if  (this->hasException())
            {
                goto ruleifInstEx;
            }


            this->followPush(FOLLOW_instruction_list_in_ifInst5611);
            instruction_list57=instruction_list();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleifInstEx;
            }


            {
                node = m_allocator->construct<scripting::if_instruction>(m_allocator, expr56
                , instruction_list57
                ); SET_LOCATION(node, IF58); SET_END_LOCATION_FROM_NODE(node,
                instruction_list57
                );
            }



            for (;;)
            {
                int alt42=2;
                switch ( this->LA(1) )
                {
                case ELSE:
                	{
                		switch ( this->LA(2) )
                		{
                		case IF:
                			{
                				alt42=1;
                			}
                		    break;

                		}

                	}
                    break;

                }

                switch (alt42)
                {
            	case 1:
            	    {
            	        this->followPush(FOLLOW_elsemiddle_in_ifInst5628);
            	        elsemiddle59=elsemiddle();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleifInstEx;
            	        }


            	        {
            	            node->add_else_if(elsemiddle59
            	            ); SET_END_LOCATION_FROM_NODE(node, elsemiddle59
            	            );
            	        }


            	    }
            	    break;

            	default:
            	    goto loop42;
            	    break;
                }
            }
            loop42: ;


            {
                int alt43=2;
                switch ( this->LA(1) )
                {
                    case ELSE:
                    	{
                    		alt43=1;
                    	}
                        break;
                }

                switch (alt43)
                {
            	case 1:
            	    {
            	        this->followPush(FOLLOW_endif_in_ifInst5648);
            	        endif60=endif();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleifInstEx;
            	        }


            	        {
            	            node->add_else(endif60
            	            ); SET_LOCATION(node, IF58); SET_END_LOCATION_FROM_NODE(node,
            	            endif60
            	            );
            	        }


            	    }
            	    break;

                }
            }

        }

    }
    goto ruleifInstEx;
    ruleifInstEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::instruction*
WNScriptASTParser::instruction()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::instruction* node;


    scripting::if_instruction* ifInst61;
    scripting::instruction* whileInst62;
    scripting::instruction* doInst63;
    scripting::for_instruction* forInst64;
    scripting::instruction* instructionScalar65;
    scripting::break_instruction* breakInst66;
    scripting::continue_instruction* continueInst67;
    scripting::return_instruction* returnInst68;
    scripting::instruction_list* instruction_list69;





        node = nullptr;



    {
        {

            ANTLR_UINT32 alt44;

            alt44=9;

            switch ( this->LA(1) )
            {
            case IF:
            	{
            		alt44=1;
            	}
                break;
            case WHILE:
            	{
            		alt44=2;
            	}
                break;
            case DO:
            	{
            		alt44=3;
            	}
                break;
            case FOR:
            	{
            		alt44=4;
            	}
                break;
            case BOOL:
            case BOOL_TYPE:
            case CHAR:
            case CHAR_TYPE:
            case CPTR_TYPE:
            case DOUBDEC:
            case DOUBINC:
            case FLOAT:
            case FLOAT_TYPE:
            case ID:
            case INT:
            case INT_TYPE:
            case LBRACKET:
            case LENGTH:
            case NULLTOK:
            case RESOURCE:
            case SHARED_REF:
            case STRING:
            case STRING_TYPE:
            case TYPE:
            case VOID_TYPE:
            case WEAK_REF:
            case 68:
            case 78:
            	{
            		alt44=5;
            	}
                break;
            case BREAK:
            	{
            		alt44=6;
            	}
                break;
            case CONTINUE:
            	{
            		alt44=7;
            	}
                break;
            case RETURN:
            	{
            		alt44=8;
            	}
                break;
            case LBRACE:
            	{
            		alt44=9;
            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 44 );
                ex->set_state( 0 );


                goto ruleinstructionEx;

            }

            switch (alt44)
            {
        	case 1:
        	    {
        	        this->followPush(FOLLOW_ifInst_in_instruction5682);
        	        ifInst61=ifInst();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleinstructionEx;
        	        }


        	        {
        	             node = ifInst61
        	            ;
        	        }


        	    }
        	    break;
        	case 2:
        	    {
        	        this->followPush(FOLLOW_whileInst_in_instruction5703);
        	        whileInst62=whileInst();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleinstructionEx;
        	        }


        	        {
        	            node = whileInst62
        	            ;
        	        }


        	    }
        	    break;
        	case 3:
        	    {
        	        this->followPush(FOLLOW_doInst_in_instruction5720);
        	        doInst63=doInst();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleinstructionEx;
        	        }


        	        {
        	            node = doInst63
        	            ;
        	        }


        	    }
        	    break;
        	case 4:
        	    {
        	        this->followPush(FOLLOW_forInst_in_instruction5740);
        	        forInst64=forInst();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleinstructionEx;
        	        }


        	        {
        	            node = forInst64
        	            ;
        	        }


        	    }
        	    break;
        	case 5:
        	    {
        	        this->followPush(FOLLOW_instructionScalar_in_instruction5760);
        	        instructionScalar65=instructionScalar();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleinstructionEx;
        	        }


        	         this->matchToken(SEMICOLON, &FOLLOW_SEMICOLON_in_instruction5762);
        	        if  (this->hasException())
        	        {
        	            goto ruleinstructionEx;
        	        }


        	        {
        	            node = instructionScalar65
        	            ;
        	        }


        	    }
        	    break;
        	case 6:
        	    {
        	        this->followPush(FOLLOW_breakInst_in_instruction5775);
        	        breakInst66=breakInst();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleinstructionEx;
        	        }


        	        {
        	            node = breakInst66
        	            ;
        	        }


        	    }
        	    break;
        	case 7:
        	    {
        	        this->followPush(FOLLOW_continueInst_in_instruction5788);
        	        continueInst67=continueInst();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleinstructionEx;
        	        }


        	        {
        	            node = continueInst67
        	            ;
        	        }


        	    }
        	    break;
        	case 8:
        	    {
        	        this->followPush(FOLLOW_returnInst_in_instruction5801);
        	        returnInst68=returnInst();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleinstructionEx;
        	        }


        	        {
        	            node = returnInst68
        	            ;
        	        }


        	    }
        	    break;
        	case 9:
        	    {
        	        this->followPush(FOLLOW_instruction_list_in_instruction5814);
        	        instruction_list69=instruction_list();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleinstructionEx;
        	        }


        	        {
        	             node = instruction_list69
        	            ;
        	        }


        	    }
        	    break;

            }
        }
    }
    goto ruleinstructionEx;
    ruleinstructionEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::instruction_list*
WNScriptASTParser::instruction_list()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::instruction_list* node;


    ImplTraits::CommonTokenType const* lb = NULL;
    ImplTraits::CommonTokenType const* rb = NULL;
    scripting::instruction* b;





        node = m_allocator->construct<scripting::instruction_list>(m_allocator);



    {
        {
            lb =  this->matchToken(LBRACE, &FOLLOW_LBRACE_in_instruction_list5846);
            if  (this->hasException())
            {
                goto ruleinstruction_listEx;
            }



            for (;;)
            {
                int alt45=2;
                switch ( this->LA(1) )
                {
                case BOOL:
                case BOOL_TYPE:
                case BREAK:
                case CHAR:
                case CHAR_TYPE:
                case CONTINUE:
                case CPTR_TYPE:
                case DO:
                case DOUBDEC:
                case DOUBINC:
                case FLOAT:
                case FLOAT_TYPE:
                case FOR:
                case ID:
                case IF:
                case INT:
                case INT_TYPE:
                case LBRACE:
                case LBRACKET:
                case LENGTH:
                case NULLTOK:
                case RESOURCE:
                case RETURN:
                case SHARED_REF:
                case STRING:
                case STRING_TYPE:
                case TYPE:
                case VOID_TYPE:
                case WEAK_REF:
                case WHILE:
                case 68:
                case 78:
                	{
                		alt45=1;
                	}
                    break;

                }

                switch (alt45)
                {
            	case 1:
            	    {
            	        this->followPush(FOLLOW_instruction_in_instruction_list5863);
            	        b=instruction();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleinstruction_listEx;
            	        }


            	        {
            	            node->add_instruction(b
            	            );
            	        }


            	    }
            	    break;

            	default:
            	    goto loop45;
            	    break;
                }
            }
            loop45: ;


            rb =  this->matchToken(RBRACE, &FOLLOW_RBRACE_in_instruction_list5880);
            if  (this->hasException())
            {
                goto ruleinstruction_listEx;
            }


            {

                          SET_LOCATION(node, lb); SET_END_LOCATION(node, rb);

            }


        }

    }
    goto ruleinstruction_listEx;
    ruleinstruction_listEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::function*
WNScriptASTParser::function()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::function* node;


    scripting::parameter* param70;
    scripting::parameter_list* parameterList71;
    scripting::instruction_list* instruction_list72;





        node = nullptr;



    {
        {
            this->followPush(FOLLOW_param_in_function5910);
            param70=param();

            this->followPop();
            if  (this->hasException())
            {
                goto rulefunctionEx;
            }


            this->followPush(FOLLOW_parameterList_in_function5912);
            parameterList71=parameterList();

            this->followPop();
            if  (this->hasException())
            {
                goto rulefunctionEx;
            }


            this->followPush(FOLLOW_instruction_list_in_function5914);
            instruction_list72=instruction_list();

            this->followPop();
            if  (this->hasException())
            {
                goto rulefunctionEx;
            }


            {
                 node = m_allocator->construct<scripting::function>(m_allocator, param70
                , parameterList71
                , instruction_list72
                ); SET_LOCATION_FROM_NODE(node, param70
                ); SET_END_LOCATION_FROM_NODE(node, instruction_list72
                );
            }


        }

    }
    goto rulefunctionEx;
    rulefunctionEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::struct_definition*
WNScriptASTParser::structDecl()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::struct_definition* node;


    ImplTraits::CommonTokenType const* f = NULL;
    ImplTraits::CommonTokenType const* c = NULL;
    ImplTraits::CommonTokenType const* g = NULL;
    ImplTraits::CommonTokenType const* d = NULL;
    ImplTraits::CommonTokenType const* e = NULL;
    ImplTraits::CommonTokenType const* RBRACE74 = NULL;
    scripting::declaration* a;
    scripting::declaration* j;
    scripting::function* b;
    scripting::parameter_list* parameterList73;





        node = nullptr;



    {
        {
            {
                int alt46=2;
                switch ( this->LA(1) )
                {
                case STRUCT:
                	{
                		switch ( this->LA(2) )
                		{
                		case TYPE:
                			{
                				switch ( this->LA(3) )
                				{
                				case COLON:
                					{
                						alt46=2;
                					}
                				    break;
                				case LBRACE:
                				case LBRACKET:
                					{
                						alt46=1;
                					}
                				    break;

                				default:
                				    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                				    ex->set_decisionNum( 46 );
                				    ex->set_state( 2 );


                				    goto rulestructDeclEx;

                				}

                			}
                		    break;

                		default:
                		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		    ex->set_decisionNum( 46 );
                		    ex->set_state( 1 );


                		    goto rulestructDeclEx;

                		}

                	}
                    break;

                default:
                    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 46 );
                    ex->set_state( 0 );


                    goto rulestructDeclEx;

                }

                switch (alt46)
                {
            	case 1:
            	    {
            	        {
            	            f =  this->matchToken(STRUCT, &FOLLOW_STRUCT_in_structDecl5966);
            	            if  (this->hasException())
            	            {
            	                goto rulestructDeclEx;
            	            }


            	            c =  this->matchToken(TYPE, &FOLLOW_TYPE_in_structDecl5970);
            	            if  (this->hasException())
            	            {
            	                goto rulestructDeclEx;
            	            }


            	            {
            	                node= m_allocator->construct<scripting::struct_definition>(m_allocator, (c->getText()).c_str(), false); SET_LOCATION(node, f);
            	            }


            	        }


            	    }
            	    break;
            	case 2:
            	    {
            	        {
            	            g =  this->matchToken(STRUCT, &FOLLOW_STRUCT_in_structDecl5990);
            	            if  (this->hasException())
            	            {
            	                goto rulestructDeclEx;
            	            }


            	            d =  this->matchToken(TYPE, &FOLLOW_TYPE_in_structDecl5994);
            	            if  (this->hasException())
            	            {
            	                goto rulestructDeclEx;
            	            }


            	             this->matchToken(COLON, &FOLLOW_COLON_in_structDecl5996);
            	            if  (this->hasException())
            	            {
            	                goto rulestructDeclEx;
            	            }


            	            e =  this->matchToken(TYPE, &FOLLOW_TYPE_in_structDecl6000);
            	            if  (this->hasException())
            	            {
            	                goto rulestructDeclEx;
            	            }


            	            {
            	                node= m_allocator->construct<scripting::struct_definition>(m_allocator, (d->getText()).c_str(), false, (e->getText()).c_str()); SET_LOCATION(node, g);
            	            }


            	        }


            	    }
            	    break;

                }
            }

            {
                int alt47=2;
                switch ( this->LA(1) )
                {
                    case LBRACKET:
                    	{
                    		alt47=1;
                    	}
                        break;
                }

                switch (alt47)
                {
            	case 1:
            	    {
            	        this->followPush(FOLLOW_parameterList_in_structDecl6028);
            	        parameterList73=parameterList();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulestructDeclEx;
            	        }


            	        {
            	             node->set_constructor_parameters(parameterList73
            	            );
            	        }


            	    }
            	    break;

                }
            }

             this->matchToken(LBRACE, &FOLLOW_LBRACE_in_structDecl6046);
            if  (this->hasException())
            {
                goto rulestructDeclEx;
            }



            for (;;)
            {
                int alt48=4;
                switch ( this->LA(1) )
                {
                case VOID_TYPE:
                	{
                		switch ( this->LA(2) )
                		{
                		case ID:
                			{
                				switch ( this->LA(3) )
                				{
                				case 85:
                					{
                						alt48=1;
                					}
                				    break;
                				case LBRACKET:
                					{
                						alt48=3;
                					}
                				    break;

                				}

                			}
                		    break;
                		case LSQBRACKET:
                			{
                				switch ( this->LA(3) )
                				{
                				case INT:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 85:
                											{
                												alt48=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt48=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case FLOAT:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 85:
                											{
                												alt48=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt48=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case CHAR:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 85:
                											{
                												alt48=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt48=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case STRING:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 85:
                											{
                												alt48=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt48=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case BOOL:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 85:
                											{
                												alt48=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt48=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case NULLTOK:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 85:
                											{
                												alt48=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt48=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case VOID_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 85:
                																	{
                																		alt48=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt48=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case INT_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 85:
                																	{
                																		alt48=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt48=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case FLOAT_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 85:
                																	{
                																		alt48=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt48=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case CHAR_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 85:
                																	{
                																		alt48=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt48=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case BOOL_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 85:
                																	{
                																		alt48=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt48=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case CPTR_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 85:
                																	{
                																		alt48=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt48=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case STRING_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 85:
                																	{
                																		alt48=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt48=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case RSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case ID:
                							{
                								switch ( this->LA(5) )
                								{
                								case 85:
                									{
                										alt48=1;
                									}
                								    break;
                								case LBRACKET:
                									{
                										alt48=3;
                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case DLSQBRACKET:
                			{
                				switch ( this->LA(3) )
                				{
                				case DRSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case ID:
                							{
                								switch ( this->LA(5) )
                								{
                								case 85:
                									{
                										alt48=1;
                									}
                								    break;
                								case LBRACKET:
                									{
                										alt48=3;
                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case SLICETOK:
                			{
                				switch ( this->LA(3) )
                				{
                				case INT:
                					{
                						switch ( this->LA(4) )
                						{
                						case SLICETOK:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 85:
                											{
                												alt48=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt48=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case SSOR:
                			{
                				switch ( this->LA(3) )
                				{
                				case ID:
                					{
                						switch ( this->LA(4) )
                						{
                						case 85:
                							{
                								alt48=1;
                							}
                						    break;
                						case LBRACKET:
                							{
                								alt48=3;
                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;

                		}

                	}
                    break;
                case INT_TYPE:
                	{
                		switch ( this->LA(2) )
                		{
                		case ID:
                			{
                				switch ( this->LA(3) )
                				{
                				case 85:
                					{
                						alt48=1;
                					}
                				    break;
                				case LBRACKET:
                					{
                						alt48=3;
                					}
                				    break;

                				}

                			}
                		    break;
                		case LSQBRACKET:
                			{
                				switch ( this->LA(3) )
                				{
                				case INT:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 85:
                											{
                												alt48=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt48=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case FLOAT:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 85:
                											{
                												alt48=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt48=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case CHAR:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 85:
                											{
                												alt48=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt48=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case STRING:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 85:
                											{
                												alt48=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt48=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case BOOL:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 85:
                											{
                												alt48=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt48=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case NULLTOK:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 85:
                											{
                												alt48=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt48=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case VOID_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 85:
                																	{
                																		alt48=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt48=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case INT_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 85:
                																	{
                																		alt48=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt48=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case FLOAT_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 85:
                																	{
                																		alt48=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt48=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case CHAR_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 85:
                																	{
                																		alt48=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt48=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case BOOL_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 85:
                																	{
                																		alt48=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt48=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case CPTR_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 85:
                																	{
                																		alt48=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt48=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case STRING_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 85:
                																	{
                																		alt48=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt48=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case RSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case ID:
                							{
                								switch ( this->LA(5) )
                								{
                								case 85:
                									{
                										alt48=1;
                									}
                								    break;
                								case LBRACKET:
                									{
                										alt48=3;
                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case DLSQBRACKET:
                			{
                				switch ( this->LA(3) )
                				{
                				case DRSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case ID:
                							{
                								switch ( this->LA(5) )
                								{
                								case 85:
                									{
                										alt48=1;
                									}
                								    break;
                								case LBRACKET:
                									{
                										alt48=3;
                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case SLICETOK:
                			{
                				switch ( this->LA(3) )
                				{
                				case INT:
                					{
                						switch ( this->LA(4) )
                						{
                						case SLICETOK:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 85:
                											{
                												alt48=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt48=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case SSOR:
                			{
                				switch ( this->LA(3) )
                				{
                				case ID:
                					{
                						switch ( this->LA(4) )
                						{
                						case 85:
                							{
                								alt48=1;
                							}
                						    break;
                						case LBRACKET:
                							{
                								alt48=3;
                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;

                		}

                	}
                    break;
                case FLOAT_TYPE:
                	{
                		switch ( this->LA(2) )
                		{
                		case ID:
                			{
                				switch ( this->LA(3) )
                				{
                				case 85:
                					{
                						alt48=1;
                					}
                				    break;
                				case LBRACKET:
                					{
                						alt48=3;
                					}
                				    break;

                				}

                			}
                		    break;
                		case LSQBRACKET:
                			{
                				switch ( this->LA(3) )
                				{
                				case INT:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 85:
                											{
                												alt48=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt48=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case FLOAT:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 85:
                											{
                												alt48=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt48=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case CHAR:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 85:
                											{
                												alt48=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt48=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case STRING:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 85:
                											{
                												alt48=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt48=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case BOOL:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 85:
                											{
                												alt48=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt48=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case NULLTOK:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 85:
                											{
                												alt48=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt48=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case VOID_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 85:
                																	{
                																		alt48=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt48=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case INT_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 85:
                																	{
                																		alt48=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt48=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case FLOAT_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 85:
                																	{
                																		alt48=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt48=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case CHAR_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 85:
                																	{
                																		alt48=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt48=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case BOOL_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 85:
                																	{
                																		alt48=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt48=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case CPTR_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 85:
                																	{
                																		alt48=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt48=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case STRING_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 85:
                																	{
                																		alt48=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt48=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case RSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case ID:
                							{
                								switch ( this->LA(5) )
                								{
                								case 85:
                									{
                										alt48=1;
                									}
                								    break;
                								case LBRACKET:
                									{
                										alt48=3;
                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case DLSQBRACKET:
                			{
                				switch ( this->LA(3) )
                				{
                				case DRSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case ID:
                							{
                								switch ( this->LA(5) )
                								{
                								case 85:
                									{
                										alt48=1;
                									}
                								    break;
                								case LBRACKET:
                									{
                										alt48=3;
                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case SLICETOK:
                			{
                				switch ( this->LA(3) )
                				{
                				case INT:
                					{
                						switch ( this->LA(4) )
                						{
                						case SLICETOK:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 85:
                											{
                												alt48=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt48=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case SSOR:
                			{
                				switch ( this->LA(3) )
                				{
                				case ID:
                					{
                						switch ( this->LA(4) )
                						{
                						case 85:
                							{
                								alt48=1;
                							}
                						    break;
                						case LBRACKET:
                							{
                								alt48=3;
                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;

                		}

                	}
                    break;
                case CHAR_TYPE:
                	{
                		switch ( this->LA(2) )
                		{
                		case ID:
                			{
                				switch ( this->LA(3) )
                				{
                				case 85:
                					{
                						alt48=1;
                					}
                				    break;
                				case LBRACKET:
                					{
                						alt48=3;
                					}
                				    break;

                				}

                			}
                		    break;
                		case LSQBRACKET:
                			{
                				switch ( this->LA(3) )
                				{
                				case INT:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 85:
                											{
                												alt48=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt48=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case FLOAT:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 85:
                											{
                												alt48=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt48=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case CHAR:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 85:
                											{
                												alt48=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt48=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case STRING:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 85:
                											{
                												alt48=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt48=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case BOOL:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 85:
                											{
                												alt48=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt48=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case NULLTOK:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 85:
                											{
                												alt48=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt48=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case VOID_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 85:
                																	{
                																		alt48=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt48=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case INT_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 85:
                																	{
                																		alt48=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt48=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case FLOAT_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 85:
                																	{
                																		alt48=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt48=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case CHAR_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 85:
                																	{
                																		alt48=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt48=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case BOOL_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 85:
                																	{
                																		alt48=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt48=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case CPTR_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 85:
                																	{
                																		alt48=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt48=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case STRING_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 85:
                																	{
                																		alt48=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt48=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case RSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case ID:
                							{
                								switch ( this->LA(5) )
                								{
                								case 85:
                									{
                										alt48=1;
                									}
                								    break;
                								case LBRACKET:
                									{
                										alt48=3;
                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case DLSQBRACKET:
                			{
                				switch ( this->LA(3) )
                				{
                				case DRSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case ID:
                							{
                								switch ( this->LA(5) )
                								{
                								case 85:
                									{
                										alt48=1;
                									}
                								    break;
                								case LBRACKET:
                									{
                										alt48=3;
                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case SLICETOK:
                			{
                				switch ( this->LA(3) )
                				{
                				case INT:
                					{
                						switch ( this->LA(4) )
                						{
                						case SLICETOK:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 85:
                											{
                												alt48=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt48=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case SSOR:
                			{
                				switch ( this->LA(3) )
                				{
                				case ID:
                					{
                						switch ( this->LA(4) )
                						{
                						case 85:
                							{
                								alt48=1;
                							}
                						    break;
                						case LBRACKET:
                							{
                								alt48=3;
                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;

                		}

                	}
                    break;
                case BOOL_TYPE:
                	{
                		switch ( this->LA(2) )
                		{
                		case ID:
                			{
                				switch ( this->LA(3) )
                				{
                				case 85:
                					{
                						alt48=1;
                					}
                				    break;
                				case LBRACKET:
                					{
                						alt48=3;
                					}
                				    break;

                				}

                			}
                		    break;
                		case LSQBRACKET:
                			{
                				switch ( this->LA(3) )
                				{
                				case INT:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 85:
                											{
                												alt48=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt48=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case FLOAT:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 85:
                											{
                												alt48=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt48=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case CHAR:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 85:
                											{
                												alt48=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt48=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case STRING:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 85:
                											{
                												alt48=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt48=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case BOOL:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 85:
                											{
                												alt48=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt48=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case NULLTOK:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 85:
                											{
                												alt48=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt48=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case VOID_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 85:
                																	{
                																		alt48=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt48=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case INT_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 85:
                																	{
                																		alt48=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt48=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case FLOAT_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 85:
                																	{
                																		alt48=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt48=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case CHAR_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 85:
                																	{
                																		alt48=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt48=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case BOOL_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 85:
                																	{
                																		alt48=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt48=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case CPTR_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 85:
                																	{
                																		alt48=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt48=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case STRING_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 85:
                																	{
                																		alt48=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt48=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case RSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case ID:
                							{
                								switch ( this->LA(5) )
                								{
                								case 85:
                									{
                										alt48=1;
                									}
                								    break;
                								case LBRACKET:
                									{
                										alt48=3;
                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case DLSQBRACKET:
                			{
                				switch ( this->LA(3) )
                				{
                				case DRSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case ID:
                							{
                								switch ( this->LA(5) )
                								{
                								case 85:
                									{
                										alt48=1;
                									}
                								    break;
                								case LBRACKET:
                									{
                										alt48=3;
                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case SLICETOK:
                			{
                				switch ( this->LA(3) )
                				{
                				case INT:
                					{
                						switch ( this->LA(4) )
                						{
                						case SLICETOK:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 85:
                											{
                												alt48=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt48=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case SSOR:
                			{
                				switch ( this->LA(3) )
                				{
                				case ID:
                					{
                						switch ( this->LA(4) )
                						{
                						case 85:
                							{
                								alt48=1;
                							}
                						    break;
                						case LBRACKET:
                							{
                								alt48=3;
                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;

                		}

                	}
                    break;
                case CPTR_TYPE:
                	{
                		switch ( this->LA(2) )
                		{
                		case ID:
                			{
                				switch ( this->LA(3) )
                				{
                				case 85:
                					{
                						alt48=1;
                					}
                				    break;
                				case LBRACKET:
                					{
                						alt48=3;
                					}
                				    break;

                				}

                			}
                		    break;
                		case LSQBRACKET:
                			{
                				switch ( this->LA(3) )
                				{
                				case INT:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 85:
                											{
                												alt48=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt48=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case FLOAT:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 85:
                											{
                												alt48=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt48=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case CHAR:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 85:
                											{
                												alt48=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt48=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case STRING:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 85:
                											{
                												alt48=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt48=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case BOOL:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 85:
                											{
                												alt48=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt48=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case NULLTOK:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 85:
                											{
                												alt48=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt48=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case VOID_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 85:
                																	{
                																		alt48=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt48=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case INT_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 85:
                																	{
                																		alt48=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt48=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case FLOAT_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 85:
                																	{
                																		alt48=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt48=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case CHAR_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 85:
                																	{
                																		alt48=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt48=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case BOOL_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 85:
                																	{
                																		alt48=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt48=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case CPTR_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 85:
                																	{
                																		alt48=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt48=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case STRING_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 85:
                																	{
                																		alt48=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt48=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case RSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case ID:
                							{
                								switch ( this->LA(5) )
                								{
                								case 85:
                									{
                										alt48=1;
                									}
                								    break;
                								case LBRACKET:
                									{
                										alt48=3;
                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case DLSQBRACKET:
                			{
                				switch ( this->LA(3) )
                				{
                				case DRSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case ID:
                							{
                								switch ( this->LA(5) )
                								{
                								case 85:
                									{
                										alt48=1;
                									}
                								    break;
                								case LBRACKET:
                									{
                										alt48=3;
                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case SLICETOK:
                			{
                				switch ( this->LA(3) )
                				{
                				case INT:
                					{
                						switch ( this->LA(4) )
                						{
                						case SLICETOK:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 85:
                											{
                												alt48=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt48=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case SSOR:
                			{
                				switch ( this->LA(3) )
                				{
                				case ID:
                					{
                						switch ( this->LA(4) )
                						{
                						case 85:
                							{
                								alt48=1;
                							}
                						    break;
                						case LBRACKET:
                							{
                								alt48=3;
                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;

                		}

                	}
                    break;
                case STRING_TYPE:
                	{
                		switch ( this->LA(2) )
                		{
                		case ID:
                			{
                				switch ( this->LA(3) )
                				{
                				case 85:
                					{
                						alt48=1;
                					}
                				    break;
                				case LBRACKET:
                					{
                						alt48=3;
                					}
                				    break;

                				}

                			}
                		    break;
                		case LSQBRACKET:
                			{
                				switch ( this->LA(3) )
                				{
                				case INT:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 85:
                											{
                												alt48=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt48=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case FLOAT:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 85:
                											{
                												alt48=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt48=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case CHAR:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 85:
                											{
                												alt48=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt48=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case STRING:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 85:
                											{
                												alt48=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt48=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case BOOL:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 85:
                											{
                												alt48=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt48=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case NULLTOK:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 85:
                											{
                												alt48=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt48=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case VOID_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 85:
                																	{
                																		alt48=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt48=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case INT_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 85:
                																	{
                																		alt48=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt48=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case FLOAT_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 85:
                																	{
                																		alt48=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt48=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case CHAR_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 85:
                																	{
                																		alt48=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt48=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case BOOL_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 85:
                																	{
                																		alt48=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt48=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case CPTR_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 85:
                																	{
                																		alt48=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt48=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case STRING_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 85:
                																	{
                																		alt48=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt48=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case RSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case ID:
                							{
                								switch ( this->LA(5) )
                								{
                								case 85:
                									{
                										alt48=1;
                									}
                								    break;
                								case LBRACKET:
                									{
                										alt48=3;
                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case DLSQBRACKET:
                			{
                				switch ( this->LA(3) )
                				{
                				case DRSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case ID:
                							{
                								switch ( this->LA(5) )
                								{
                								case 85:
                									{
                										alt48=1;
                									}
                								    break;
                								case LBRACKET:
                									{
                										alt48=3;
                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case SLICETOK:
                			{
                				switch ( this->LA(3) )
                				{
                				case INT:
                					{
                						switch ( this->LA(4) )
                						{
                						case SLICETOK:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 85:
                											{
                												alt48=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt48=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case SSOR:
                			{
                				switch ( this->LA(3) )
                				{
                				case ID:
                					{
                						switch ( this->LA(4) )
                						{
                						case 85:
                							{
                								alt48=1;
                							}
                						    break;
                						case LBRACKET:
                							{
                								alt48=3;
                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;

                		}

                	}
                    break;
                case TYPE:
                	{
                		switch ( this->LA(2) )
                		{
                		case ID:
                			{
                				switch ( this->LA(3) )
                				{
                				case 85:
                					{
                						alt48=1;
                					}
                				    break;
                				case LBRACKET:
                					{
                						alt48=3;
                					}
                				    break;

                				}

                			}
                		    break;
                		case LSQBRACKET:
                			{
                				switch ( this->LA(3) )
                				{
                				case INT:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 85:
                											{
                												alt48=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt48=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case FLOAT:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 85:
                											{
                												alt48=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt48=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case CHAR:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 85:
                											{
                												alt48=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt48=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case STRING:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 85:
                											{
                												alt48=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt48=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case BOOL:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 85:
                											{
                												alt48=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt48=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case NULLTOK:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 85:
                											{
                												alt48=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt48=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case VOID_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 85:
                																	{
                																		alt48=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt48=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case INT_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 85:
                																	{
                																		alt48=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt48=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case FLOAT_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 85:
                																	{
                																		alt48=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt48=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case CHAR_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 85:
                																	{
                																		alt48=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt48=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case BOOL_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 85:
                																	{
                																		alt48=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt48=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case CPTR_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 85:
                																	{
                																		alt48=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt48=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case STRING_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 85:
                																	{
                																		alt48=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt48=3;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case RSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case ID:
                							{
                								switch ( this->LA(5) )
                								{
                								case 85:
                									{
                										alt48=1;
                									}
                								    break;
                								case LBRACKET:
                									{
                										alt48=3;
                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case DLSQBRACKET:
                			{
                				switch ( this->LA(3) )
                				{
                				case DRSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case ID:
                							{
                								switch ( this->LA(5) )
                								{
                								case 85:
                									{
                										alt48=1;
                									}
                								    break;
                								case LBRACKET:
                									{
                										alt48=3;
                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case QUESTION:
                			{
                				switch ( this->LA(3) )
                				{
                				case ID:
                					{
                						switch ( this->LA(4) )
                						{
                						case 85:
                							{
                								alt48=1;
                							}
                						    break;
                						case LBRACKET:
                							{
                								alt48=3;
                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;

                		}

                	}
                    break;
                case SHARED_REF:
                	{
                		switch ( this->LA(2) )
                		{
                		case TYPE:
                			{
                				switch ( this->LA(3) )
                				{
                				case LSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case INT:
                							{
                								switch ( this->LA(5) )
                								{
                								case RSQBRACKET:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 85:
                													{
                														alt48=1;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt48=3;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case FLOAT:
                							{
                								switch ( this->LA(5) )
                								{
                								case RSQBRACKET:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 85:
                													{
                														alt48=1;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt48=3;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case CHAR:
                							{
                								switch ( this->LA(5) )
                								{
                								case RSQBRACKET:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 85:
                													{
                														alt48=1;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt48=3;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case STRING:
                							{
                								switch ( this->LA(5) )
                								{
                								case RSQBRACKET:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 85:
                													{
                														alt48=1;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt48=3;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case BOOL:
                							{
                								switch ( this->LA(5) )
                								{
                								case RSQBRACKET:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 85:
                													{
                														alt48=1;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt48=3;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case NULLTOK:
                							{
                								switch ( this->LA(5) )
                								{
                								case RSQBRACKET:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 85:
                													{
                														alt48=1;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt48=3;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case VOID_TYPE:
                							{
                								switch ( this->LA(5) )
                								{
                								case LBRACE:
                									{
                										switch ( this->LA(6) )
                										{
                										case STRING:
                											{
                												switch ( this->LA(7) )
                												{
                												case RBRACE:
                													{
                														switch ( this->LA(8) )
                														{
                														case RSQBRACKET:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 85:
                																			{
                																				alt48=1;
                																			}
                																		    break;
                																		case LBRACKET:
                																			{
                																				alt48=3;
                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case INT_TYPE:
                							{
                								switch ( this->LA(5) )
                								{
                								case LBRACE:
                									{
                										switch ( this->LA(6) )
                										{
                										case STRING:
                											{
                												switch ( this->LA(7) )
                												{
                												case RBRACE:
                													{
                														switch ( this->LA(8) )
                														{
                														case RSQBRACKET:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 85:
                																			{
                																				alt48=1;
                																			}
                																		    break;
                																		case LBRACKET:
                																			{
                																				alt48=3;
                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case FLOAT_TYPE:
                							{
                								switch ( this->LA(5) )
                								{
                								case LBRACE:
                									{
                										switch ( this->LA(6) )
                										{
                										case STRING:
                											{
                												switch ( this->LA(7) )
                												{
                												case RBRACE:
                													{
                														switch ( this->LA(8) )
                														{
                														case RSQBRACKET:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 85:
                																			{
                																				alt48=1;
                																			}
                																		    break;
                																		case LBRACKET:
                																			{
                																				alt48=3;
                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case CHAR_TYPE:
                							{
                								switch ( this->LA(5) )
                								{
                								case LBRACE:
                									{
                										switch ( this->LA(6) )
                										{
                										case STRING:
                											{
                												switch ( this->LA(7) )
                												{
                												case RBRACE:
                													{
                														switch ( this->LA(8) )
                														{
                														case RSQBRACKET:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 85:
                																			{
                																				alt48=1;
                																			}
                																		    break;
                																		case LBRACKET:
                																			{
                																				alt48=3;
                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case BOOL_TYPE:
                							{
                								switch ( this->LA(5) )
                								{
                								case LBRACE:
                									{
                										switch ( this->LA(6) )
                										{
                										case STRING:
                											{
                												switch ( this->LA(7) )
                												{
                												case RBRACE:
                													{
                														switch ( this->LA(8) )
                														{
                														case RSQBRACKET:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 85:
                																			{
                																				alt48=1;
                																			}
                																		    break;
                																		case LBRACKET:
                																			{
                																				alt48=3;
                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case CPTR_TYPE:
                							{
                								switch ( this->LA(5) )
                								{
                								case LBRACE:
                									{
                										switch ( this->LA(6) )
                										{
                										case STRING:
                											{
                												switch ( this->LA(7) )
                												{
                												case RBRACE:
                													{
                														switch ( this->LA(8) )
                														{
                														case RSQBRACKET:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 85:
                																			{
                																				alt48=1;
                																			}
                																		    break;
                																		case LBRACKET:
                																			{
                																				alt48=3;
                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case STRING_TYPE:
                							{
                								switch ( this->LA(5) )
                								{
                								case LBRACE:
                									{
                										switch ( this->LA(6) )
                										{
                										case STRING:
                											{
                												switch ( this->LA(7) )
                												{
                												case RBRACE:
                													{
                														switch ( this->LA(8) )
                														{
                														case RSQBRACKET:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 85:
                																			{
                																				alt48=1;
                																			}
                																		    break;
                																		case LBRACKET:
                																			{
                																				alt48=3;
                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 85:
                											{
                												alt48=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt48=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case DLSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case DRSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 85:
                											{
                												alt48=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt48=3;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case ID:
                					{
                						switch ( this->LA(4) )
                						{
                						case 85:
                							{
                								alt48=1;
                							}
                						    break;
                						case LBRACKET:
                							{
                								alt48=3;
                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;

                		}

                	}
                    break;
                case WEAK_REF:
                	{
                		switch ( this->LA(2) )
                		{
                		case TYPE:
                			{
                				switch ( this->LA(3) )
                				{
                				case ID:
                					{
                						switch ( this->LA(4) )
                						{
                						case 85:
                							{
                								alt48=1;
                							}
                						    break;
                						case LBRACKET:
                							{
                								alt48=3;
                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;

                		}

                	}
                    break;
                case 80:
                	{
                		alt48=2;
                	}
                    break;

                }

                switch (alt48)
                {
            	case 1:
            	    {
            	        {
            	            this->followPush(FOLLOW_declaration_in_structDecl6089);
            	            a=declaration();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulestructDeclEx;
            	            }


            	            {
            	                 node->add_struct_elem(a
            	                );
            	            }


            	             this->matchToken(SEMICOLON, &FOLLOW_SEMICOLON_in_structDecl6093);
            	            if  (this->hasException())
            	            {
            	                goto rulestructDeclEx;
            	            }


            	        }


            	    }
            	    break;
            	case 2:
            	    {
            	        {
            	            this->followPush(FOLLOW_inherited_declaration_in_structDecl6119);
            	            j=inherited_declaration();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulestructDeclEx;
            	            }


            	            {
            	                 node->add_struct_elem(j
            	                );
            	            }


            	             this->matchToken(SEMICOLON, &FOLLOW_SEMICOLON_in_structDecl6123);
            	            if  (this->hasException())
            	            {
            	                goto rulestructDeclEx;
            	            }


            	        }


            	    }
            	    break;
            	case 3:
            	    {
            	        {
            	            this->followPush(FOLLOW_function_in_structDecl6149);
            	            b=function();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulestructDeclEx;
            	            }


            	            {
            	                 node->add_function(b
            	                );
            	            }


            	        }


            	    }
            	    break;

            	default:
            	    goto loop48;
            	    break;
                }
            }
            loop48: ;


            RBRACE74 =  this->matchToken(RBRACE, &FOLLOW_RBRACE_in_structDecl6188);
            if  (this->hasException())
            {
                goto rulestructDeclEx;
            }


            {
                 SET_END_LOCATION(node, RBRACE74);
            }


        }

    }
    goto rulestructDeclEx;
    rulestructDeclEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::struct_definition*
WNScriptASTParser::classDecl()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::struct_definition* node;


    ImplTraits::CommonTokenType const* ff = NULL;
    ImplTraits::CommonTokenType const* cc = NULL;
    ImplTraits::CommonTokenType const* gg = NULL;
    ImplTraits::CommonTokenType const* dd = NULL;
    ImplTraits::CommonTokenType const* ee = NULL;
    ImplTraits::CommonTokenType const* f = NULL;
    ImplTraits::CommonTokenType const* c = NULL;
    ImplTraits::CommonTokenType const* g = NULL;
    ImplTraits::CommonTokenType const* d = NULL;
    ImplTraits::CommonTokenType const* e = NULL;
    ImplTraits::CommonTokenType const* RBRACE76 = NULL;
    scripting::declaration* a;
    scripting::declaration* aa;
    scripting::declaration* j;
    scripting::declaration* jj;
    scripting::function* b;
    scripting::function* bb;
    scripting::function* bbb;
    scripting::function* h;
    scripting::function* hh;
    scripting::function* hhh;
    scripting::function* i;
    scripting::function* ii;
    scripting::function* iii;
    scripting::parameter_list* parameterList75;





        node = nullptr;



    {
        {
            {
                int alt49=4;
                switch ( this->LA(1) )
                {
                case ACTOR:
                	{
                		switch ( this->LA(2) )
                		{
                		case TYPE:
                			{
                				switch ( this->LA(3) )
                				{
                				case COLON:
                					{
                						alt49=2;
                					}
                				    break;
                				case LBRACE:
                				case LBRACKET:
                					{
                						alt49=1;
                					}
                				    break;

                				default:
                				    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                				    ex->set_decisionNum( 49 );
                				    ex->set_state( 3 );


                				    goto ruleclassDeclEx;

                				}

                			}
                		    break;

                		default:
                		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		    ex->set_decisionNum( 49 );
                		    ex->set_state( 1 );


                		    goto ruleclassDeclEx;

                		}

                	}
                    break;
                case CLASS:
                	{
                		switch ( this->LA(2) )
                		{
                		case TYPE:
                			{
                				switch ( this->LA(3) )
                				{
                				case COLON:
                					{
                						alt49=4;
                					}
                				    break;
                				case LBRACE:
                				case LBRACKET:
                					{
                						alt49=3;
                					}
                				    break;

                				default:
                				    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                				    ex->set_decisionNum( 49 );
                				    ex->set_state( 4 );


                				    goto ruleclassDeclEx;

                				}

                			}
                		    break;

                		default:
                		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		    ex->set_decisionNum( 49 );
                		    ex->set_state( 2 );


                		    goto ruleclassDeclEx;

                		}

                	}
                    break;

                default:
                    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 49 );
                    ex->set_state( 0 );


                    goto ruleclassDeclEx;

                }

                switch (alt49)
                {
            	case 1:
            	    {
            	        {
            	            ff =  this->matchToken(ACTOR, &FOLLOW_ACTOR_in_classDecl6241);
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            cc =  this->matchToken(TYPE, &FOLLOW_TYPE_in_classDecl6245);
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            {
            	                node=m_allocator->construct<scripting::struct_definition>(m_allocator, (cc->getText()).c_str(), true); node->set_synchronized(true); SET_LOCATION(node, ff);
            	            }


            	        }


            	    }
            	    break;
            	case 2:
            	    {
            	        {
            	            gg =  this->matchToken(ACTOR, &FOLLOW_ACTOR_in_classDecl6265);
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            dd =  this->matchToken(TYPE, &FOLLOW_TYPE_in_classDecl6269);
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	             this->matchToken(COLON, &FOLLOW_COLON_in_classDecl6271);
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            ee =  this->matchToken(TYPE, &FOLLOW_TYPE_in_classDecl6275);
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            {
            	                node=m_allocator->construct<scripting::struct_definition>(m_allocator, (dd->getText()).c_str(), true, (ee->getText()).c_str());  node->set_synchronized(true); SET_LOCATION(node, gg);
            	            }


            	        }


            	    }
            	    break;
            	case 3:
            	    {
            	        {
            	            f =  this->matchToken(CLASS, &FOLLOW_CLASS_in_classDecl6295);
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            c =  this->matchToken(TYPE, &FOLLOW_TYPE_in_classDecl6299);
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            {
            	                node=m_allocator->construct<scripting::struct_definition>(m_allocator, (c->getText()).c_str(), true); SET_LOCATION(node, f);
            	            }


            	        }


            	    }
            	    break;
            	case 4:
            	    {
            	        {
            	            g =  this->matchToken(CLASS, &FOLLOW_CLASS_in_classDecl6319);
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            d =  this->matchToken(TYPE, &FOLLOW_TYPE_in_classDecl6323);
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	             this->matchToken(COLON, &FOLLOW_COLON_in_classDecl6325);
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            e =  this->matchToken(TYPE, &FOLLOW_TYPE_in_classDecl6329);
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            {
            	                node=m_allocator->construct<scripting::struct_definition>(m_allocator, (d->getText()).c_str(), true, (e->getText()).c_str()); SET_LOCATION(node, g);
            	            }


            	        }


            	    }
            	    break;

                }
            }

            {
                int alt50=2;
                switch ( this->LA(1) )
                {
                    case LBRACKET:
                    	{
                    		alt50=1;
                    	}
                        break;
                }

                switch (alt50)
                {
            	case 1:
            	    {
            	        this->followPush(FOLLOW_parameterList_in_classDecl6357);
            	        parameterList75=parameterList();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleclassDeclEx;
            	        }


            	        {
            	             node->set_constructor_parameters(parameterList75
            	            );
            	        }


            	    }
            	    break;

                }
            }

             this->matchToken(LBRACE, &FOLLOW_LBRACE_in_classDecl6375);
            if  (this->hasException())
            {
                goto ruleclassDeclEx;
            }



            for (;;)
            {
                int alt51=14;
                switch ( this->LA(1) )
                {
                case VOID_TYPE:
                	{
                		switch ( this->LA(2) )
                		{
                		case ID:
                			{
                				switch ( this->LA(3) )
                				{
                				case 85:
                					{
                						alt51=1;
                					}
                				    break;
                				case LBRACKET:
                					{
                						alt51=5;
                					}
                				    break;

                				}

                			}
                		    break;
                		case LSQBRACKET:
                			{
                				switch ( this->LA(3) )
                				{
                				case INT:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 85:
                											{
                												alt51=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt51=5;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case FLOAT:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 85:
                											{
                												alt51=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt51=5;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case CHAR:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 85:
                											{
                												alt51=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt51=5;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case STRING:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 85:
                											{
                												alt51=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt51=5;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case BOOL:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 85:
                											{
                												alt51=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt51=5;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case NULLTOK:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 85:
                											{
                												alt51=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt51=5;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case VOID_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 85:
                																	{
                																		alt51=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt51=5;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case INT_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 85:
                																	{
                																		alt51=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt51=5;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case FLOAT_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 85:
                																	{
                																		alt51=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt51=5;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case CHAR_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 85:
                																	{
                																		alt51=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt51=5;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case BOOL_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 85:
                																	{
                																		alt51=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt51=5;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case CPTR_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 85:
                																	{
                																		alt51=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt51=5;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case STRING_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 85:
                																	{
                																		alt51=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt51=5;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case RSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case ID:
                							{
                								switch ( this->LA(5) )
                								{
                								case 85:
                									{
                										alt51=1;
                									}
                								    break;
                								case LBRACKET:
                									{
                										alt51=5;
                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case DLSQBRACKET:
                			{
                				switch ( this->LA(3) )
                				{
                				case DRSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case ID:
                							{
                								switch ( this->LA(5) )
                								{
                								case 85:
                									{
                										alt51=1;
                									}
                								    break;
                								case LBRACKET:
                									{
                										alt51=5;
                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case SLICETOK:
                			{
                				switch ( this->LA(3) )
                				{
                				case INT:
                					{
                						switch ( this->LA(4) )
                						{
                						case SLICETOK:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 85:
                											{
                												alt51=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt51=5;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case SSOR:
                			{
                				switch ( this->LA(3) )
                				{
                				case ID:
                					{
                						switch ( this->LA(4) )
                						{
                						case 85:
                							{
                								alt51=1;
                							}
                						    break;
                						case LBRACKET:
                							{
                								alt51=5;
                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;

                		}

                	}
                    break;
                case INT_TYPE:
                	{
                		switch ( this->LA(2) )
                		{
                		case ID:
                			{
                				switch ( this->LA(3) )
                				{
                				case 85:
                					{
                						alt51=1;
                					}
                				    break;
                				case LBRACKET:
                					{
                						alt51=5;
                					}
                				    break;

                				}

                			}
                		    break;
                		case LSQBRACKET:
                			{
                				switch ( this->LA(3) )
                				{
                				case INT:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 85:
                											{
                												alt51=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt51=5;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case FLOAT:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 85:
                											{
                												alt51=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt51=5;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case CHAR:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 85:
                											{
                												alt51=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt51=5;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case STRING:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 85:
                											{
                												alt51=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt51=5;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case BOOL:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 85:
                											{
                												alt51=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt51=5;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case NULLTOK:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 85:
                											{
                												alt51=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt51=5;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case VOID_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 85:
                																	{
                																		alt51=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt51=5;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case INT_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 85:
                																	{
                																		alt51=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt51=5;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case FLOAT_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 85:
                																	{
                																		alt51=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt51=5;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case CHAR_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 85:
                																	{
                																		alt51=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt51=5;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case BOOL_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 85:
                																	{
                																		alt51=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt51=5;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case CPTR_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 85:
                																	{
                																		alt51=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt51=5;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case STRING_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 85:
                																	{
                																		alt51=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt51=5;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case RSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case ID:
                							{
                								switch ( this->LA(5) )
                								{
                								case 85:
                									{
                										alt51=1;
                									}
                								    break;
                								case LBRACKET:
                									{
                										alt51=5;
                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case DLSQBRACKET:
                			{
                				switch ( this->LA(3) )
                				{
                				case DRSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case ID:
                							{
                								switch ( this->LA(5) )
                								{
                								case 85:
                									{
                										alt51=1;
                									}
                								    break;
                								case LBRACKET:
                									{
                										alt51=5;
                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case SLICETOK:
                			{
                				switch ( this->LA(3) )
                				{
                				case INT:
                					{
                						switch ( this->LA(4) )
                						{
                						case SLICETOK:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 85:
                											{
                												alt51=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt51=5;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case SSOR:
                			{
                				switch ( this->LA(3) )
                				{
                				case ID:
                					{
                						switch ( this->LA(4) )
                						{
                						case 85:
                							{
                								alt51=1;
                							}
                						    break;
                						case LBRACKET:
                							{
                								alt51=5;
                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;

                		}

                	}
                    break;
                case FLOAT_TYPE:
                	{
                		switch ( this->LA(2) )
                		{
                		case ID:
                			{
                				switch ( this->LA(3) )
                				{
                				case 85:
                					{
                						alt51=1;
                					}
                				    break;
                				case LBRACKET:
                					{
                						alt51=5;
                					}
                				    break;

                				}

                			}
                		    break;
                		case LSQBRACKET:
                			{
                				switch ( this->LA(3) )
                				{
                				case INT:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 85:
                											{
                												alt51=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt51=5;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case FLOAT:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 85:
                											{
                												alt51=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt51=5;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case CHAR:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 85:
                											{
                												alt51=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt51=5;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case STRING:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 85:
                											{
                												alt51=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt51=5;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case BOOL:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 85:
                											{
                												alt51=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt51=5;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case NULLTOK:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 85:
                											{
                												alt51=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt51=5;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case VOID_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 85:
                																	{
                																		alt51=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt51=5;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case INT_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 85:
                																	{
                																		alt51=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt51=5;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case FLOAT_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 85:
                																	{
                																		alt51=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt51=5;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case CHAR_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 85:
                																	{
                																		alt51=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt51=5;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case BOOL_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 85:
                																	{
                																		alt51=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt51=5;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case CPTR_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 85:
                																	{
                																		alt51=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt51=5;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case STRING_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 85:
                																	{
                																		alt51=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt51=5;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case RSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case ID:
                							{
                								switch ( this->LA(5) )
                								{
                								case 85:
                									{
                										alt51=1;
                									}
                								    break;
                								case LBRACKET:
                									{
                										alt51=5;
                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case DLSQBRACKET:
                			{
                				switch ( this->LA(3) )
                				{
                				case DRSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case ID:
                							{
                								switch ( this->LA(5) )
                								{
                								case 85:
                									{
                										alt51=1;
                									}
                								    break;
                								case LBRACKET:
                									{
                										alt51=5;
                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case SLICETOK:
                			{
                				switch ( this->LA(3) )
                				{
                				case INT:
                					{
                						switch ( this->LA(4) )
                						{
                						case SLICETOK:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 85:
                											{
                												alt51=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt51=5;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case SSOR:
                			{
                				switch ( this->LA(3) )
                				{
                				case ID:
                					{
                						switch ( this->LA(4) )
                						{
                						case 85:
                							{
                								alt51=1;
                							}
                						    break;
                						case LBRACKET:
                							{
                								alt51=5;
                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;

                		}

                	}
                    break;
                case CHAR_TYPE:
                	{
                		switch ( this->LA(2) )
                		{
                		case ID:
                			{
                				switch ( this->LA(3) )
                				{
                				case 85:
                					{
                						alt51=1;
                					}
                				    break;
                				case LBRACKET:
                					{
                						alt51=5;
                					}
                				    break;

                				}

                			}
                		    break;
                		case LSQBRACKET:
                			{
                				switch ( this->LA(3) )
                				{
                				case INT:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 85:
                											{
                												alt51=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt51=5;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case FLOAT:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 85:
                											{
                												alt51=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt51=5;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case CHAR:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 85:
                											{
                												alt51=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt51=5;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case STRING:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 85:
                											{
                												alt51=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt51=5;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case BOOL:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 85:
                											{
                												alt51=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt51=5;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case NULLTOK:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 85:
                											{
                												alt51=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt51=5;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case VOID_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 85:
                																	{
                																		alt51=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt51=5;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case INT_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 85:
                																	{
                																		alt51=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt51=5;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case FLOAT_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 85:
                																	{
                																		alt51=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt51=5;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case CHAR_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 85:
                																	{
                																		alt51=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt51=5;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case BOOL_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 85:
                																	{
                																		alt51=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt51=5;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case CPTR_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 85:
                																	{
                																		alt51=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt51=5;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case STRING_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 85:
                																	{
                																		alt51=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt51=5;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case RSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case ID:
                							{
                								switch ( this->LA(5) )
                								{
                								case 85:
                									{
                										alt51=1;
                									}
                								    break;
                								case LBRACKET:
                									{
                										alt51=5;
                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case DLSQBRACKET:
                			{
                				switch ( this->LA(3) )
                				{
                				case DRSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case ID:
                							{
                								switch ( this->LA(5) )
                								{
                								case 85:
                									{
                										alt51=1;
                									}
                								    break;
                								case LBRACKET:
                									{
                										alt51=5;
                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case SLICETOK:
                			{
                				switch ( this->LA(3) )
                				{
                				case INT:
                					{
                						switch ( this->LA(4) )
                						{
                						case SLICETOK:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 85:
                											{
                												alt51=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt51=5;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case SSOR:
                			{
                				switch ( this->LA(3) )
                				{
                				case ID:
                					{
                						switch ( this->LA(4) )
                						{
                						case 85:
                							{
                								alt51=1;
                							}
                						    break;
                						case LBRACKET:
                							{
                								alt51=5;
                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;

                		}

                	}
                    break;
                case BOOL_TYPE:
                	{
                		switch ( this->LA(2) )
                		{
                		case ID:
                			{
                				switch ( this->LA(3) )
                				{
                				case 85:
                					{
                						alt51=1;
                					}
                				    break;
                				case LBRACKET:
                					{
                						alt51=5;
                					}
                				    break;

                				}

                			}
                		    break;
                		case LSQBRACKET:
                			{
                				switch ( this->LA(3) )
                				{
                				case INT:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 85:
                											{
                												alt51=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt51=5;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case FLOAT:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 85:
                											{
                												alt51=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt51=5;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case CHAR:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 85:
                											{
                												alt51=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt51=5;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case STRING:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 85:
                											{
                												alt51=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt51=5;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case BOOL:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 85:
                											{
                												alt51=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt51=5;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case NULLTOK:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 85:
                											{
                												alt51=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt51=5;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case VOID_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 85:
                																	{
                																		alt51=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt51=5;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case INT_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 85:
                																	{
                																		alt51=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt51=5;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case FLOAT_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 85:
                																	{
                																		alt51=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt51=5;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case CHAR_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 85:
                																	{
                																		alt51=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt51=5;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case BOOL_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 85:
                																	{
                																		alt51=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt51=5;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case CPTR_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 85:
                																	{
                																		alt51=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt51=5;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case STRING_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 85:
                																	{
                																		alt51=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt51=5;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case RSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case ID:
                							{
                								switch ( this->LA(5) )
                								{
                								case 85:
                									{
                										alt51=1;
                									}
                								    break;
                								case LBRACKET:
                									{
                										alt51=5;
                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case DLSQBRACKET:
                			{
                				switch ( this->LA(3) )
                				{
                				case DRSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case ID:
                							{
                								switch ( this->LA(5) )
                								{
                								case 85:
                									{
                										alt51=1;
                									}
                								    break;
                								case LBRACKET:
                									{
                										alt51=5;
                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case SLICETOK:
                			{
                				switch ( this->LA(3) )
                				{
                				case INT:
                					{
                						switch ( this->LA(4) )
                						{
                						case SLICETOK:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 85:
                											{
                												alt51=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt51=5;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case SSOR:
                			{
                				switch ( this->LA(3) )
                				{
                				case ID:
                					{
                						switch ( this->LA(4) )
                						{
                						case 85:
                							{
                								alt51=1;
                							}
                						    break;
                						case LBRACKET:
                							{
                								alt51=5;
                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;

                		}

                	}
                    break;
                case CPTR_TYPE:
                	{
                		switch ( this->LA(2) )
                		{
                		case ID:
                			{
                				switch ( this->LA(3) )
                				{
                				case 85:
                					{
                						alt51=1;
                					}
                				    break;
                				case LBRACKET:
                					{
                						alt51=5;
                					}
                				    break;

                				}

                			}
                		    break;
                		case LSQBRACKET:
                			{
                				switch ( this->LA(3) )
                				{
                				case INT:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 85:
                											{
                												alt51=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt51=5;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case FLOAT:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 85:
                											{
                												alt51=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt51=5;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case CHAR:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 85:
                											{
                												alt51=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt51=5;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case STRING:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 85:
                											{
                												alt51=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt51=5;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case BOOL:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 85:
                											{
                												alt51=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt51=5;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case NULLTOK:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 85:
                											{
                												alt51=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt51=5;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case VOID_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 85:
                																	{
                																		alt51=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt51=5;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case INT_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 85:
                																	{
                																		alt51=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt51=5;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case FLOAT_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 85:
                																	{
                																		alt51=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt51=5;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case CHAR_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 85:
                																	{
                																		alt51=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt51=5;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case BOOL_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 85:
                																	{
                																		alt51=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt51=5;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case CPTR_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 85:
                																	{
                																		alt51=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt51=5;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case STRING_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 85:
                																	{
                																		alt51=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt51=5;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case RSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case ID:
                							{
                								switch ( this->LA(5) )
                								{
                								case 85:
                									{
                										alt51=1;
                									}
                								    break;
                								case LBRACKET:
                									{
                										alt51=5;
                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case DLSQBRACKET:
                			{
                				switch ( this->LA(3) )
                				{
                				case DRSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case ID:
                							{
                								switch ( this->LA(5) )
                								{
                								case 85:
                									{
                										alt51=1;
                									}
                								    break;
                								case LBRACKET:
                									{
                										alt51=5;
                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case SLICETOK:
                			{
                				switch ( this->LA(3) )
                				{
                				case INT:
                					{
                						switch ( this->LA(4) )
                						{
                						case SLICETOK:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 85:
                											{
                												alt51=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt51=5;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case SSOR:
                			{
                				switch ( this->LA(3) )
                				{
                				case ID:
                					{
                						switch ( this->LA(4) )
                						{
                						case 85:
                							{
                								alt51=1;
                							}
                						    break;
                						case LBRACKET:
                							{
                								alt51=5;
                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;

                		}

                	}
                    break;
                case STRING_TYPE:
                	{
                		switch ( this->LA(2) )
                		{
                		case ID:
                			{
                				switch ( this->LA(3) )
                				{
                				case 85:
                					{
                						alt51=1;
                					}
                				    break;
                				case LBRACKET:
                					{
                						alt51=5;
                					}
                				    break;

                				}

                			}
                		    break;
                		case LSQBRACKET:
                			{
                				switch ( this->LA(3) )
                				{
                				case INT:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 85:
                											{
                												alt51=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt51=5;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case FLOAT:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 85:
                											{
                												alt51=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt51=5;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case CHAR:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 85:
                											{
                												alt51=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt51=5;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case STRING:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 85:
                											{
                												alt51=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt51=5;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case BOOL:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 85:
                											{
                												alt51=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt51=5;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case NULLTOK:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 85:
                											{
                												alt51=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt51=5;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case VOID_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 85:
                																	{
                																		alt51=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt51=5;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case INT_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 85:
                																	{
                																		alt51=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt51=5;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case FLOAT_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 85:
                																	{
                																		alt51=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt51=5;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case CHAR_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 85:
                																	{
                																		alt51=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt51=5;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case BOOL_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 85:
                																	{
                																		alt51=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt51=5;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case CPTR_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 85:
                																	{
                																		alt51=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt51=5;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case STRING_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 85:
                																	{
                																		alt51=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt51=5;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case RSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case ID:
                							{
                								switch ( this->LA(5) )
                								{
                								case 85:
                									{
                										alt51=1;
                									}
                								    break;
                								case LBRACKET:
                									{
                										alt51=5;
                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case DLSQBRACKET:
                			{
                				switch ( this->LA(3) )
                				{
                				case DRSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case ID:
                							{
                								switch ( this->LA(5) )
                								{
                								case 85:
                									{
                										alt51=1;
                									}
                								    break;
                								case LBRACKET:
                									{
                										alt51=5;
                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case SLICETOK:
                			{
                				switch ( this->LA(3) )
                				{
                				case INT:
                					{
                						switch ( this->LA(4) )
                						{
                						case SLICETOK:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 85:
                											{
                												alt51=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt51=5;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case SSOR:
                			{
                				switch ( this->LA(3) )
                				{
                				case ID:
                					{
                						switch ( this->LA(4) )
                						{
                						case 85:
                							{
                								alt51=1;
                							}
                						    break;
                						case LBRACKET:
                							{
                								alt51=5;
                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;

                		}

                	}
                    break;
                case TYPE:
                	{
                		switch ( this->LA(2) )
                		{
                		case ID:
                			{
                				switch ( this->LA(3) )
                				{
                				case 85:
                					{
                						alt51=1;
                					}
                				    break;
                				case LBRACKET:
                					{
                						alt51=5;
                					}
                				    break;

                				}

                			}
                		    break;
                		case LSQBRACKET:
                			{
                				switch ( this->LA(3) )
                				{
                				case INT:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 85:
                											{
                												alt51=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt51=5;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case FLOAT:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 85:
                											{
                												alt51=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt51=5;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case CHAR:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 85:
                											{
                												alt51=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt51=5;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case STRING:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 85:
                											{
                												alt51=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt51=5;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case BOOL:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 85:
                											{
                												alt51=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt51=5;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case NULLTOK:
                					{
                						switch ( this->LA(4) )
                						{
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 85:
                											{
                												alt51=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt51=5;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case VOID_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 85:
                																	{
                																		alt51=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt51=5;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case INT_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 85:
                																	{
                																		alt51=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt51=5;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case FLOAT_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 85:
                																	{
                																		alt51=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt51=5;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case CHAR_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 85:
                																	{
                																		alt51=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt51=5;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case BOOL_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 85:
                																	{
                																		alt51=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt51=5;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case CPTR_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 85:
                																	{
                																		alt51=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt51=5;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case STRING_TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LBRACE:
                							{
                								switch ( this->LA(5) )
                								{
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case RSQBRACKET:
                													{
                														switch ( this->LA(8) )
                														{
                														case ID:
                															{
                																switch ( this->LA(9) )
                																{
                																case 85:
                																	{
                																		alt51=1;
                																	}
                																    break;
                																case LBRACKET:
                																	{
                																		alt51=5;
                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case RSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case ID:
                							{
                								switch ( this->LA(5) )
                								{
                								case 85:
                									{
                										alt51=1;
                									}
                								    break;
                								case LBRACKET:
                									{
                										alt51=5;
                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case DLSQBRACKET:
                			{
                				switch ( this->LA(3) )
                				{
                				case DRSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case ID:
                							{
                								switch ( this->LA(5) )
                								{
                								case 85:
                									{
                										alt51=1;
                									}
                								    break;
                								case LBRACKET:
                									{
                										alt51=5;
                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case QUESTION:
                			{
                				switch ( this->LA(3) )
                				{
                				case ID:
                					{
                						switch ( this->LA(4) )
                						{
                						case 85:
                							{
                								alt51=1;
                							}
                						    break;
                						case LBRACKET:
                							{
                								alt51=5;
                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;

                		}

                	}
                    break;
                case SHARED_REF:
                	{
                		switch ( this->LA(2) )
                		{
                		case TYPE:
                			{
                				switch ( this->LA(3) )
                				{
                				case LSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case INT:
                							{
                								switch ( this->LA(5) )
                								{
                								case RSQBRACKET:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 85:
                													{
                														alt51=1;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt51=5;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case FLOAT:
                							{
                								switch ( this->LA(5) )
                								{
                								case RSQBRACKET:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 85:
                													{
                														alt51=1;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt51=5;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case CHAR:
                							{
                								switch ( this->LA(5) )
                								{
                								case RSQBRACKET:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 85:
                													{
                														alt51=1;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt51=5;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case STRING:
                							{
                								switch ( this->LA(5) )
                								{
                								case RSQBRACKET:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 85:
                													{
                														alt51=1;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt51=5;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case BOOL:
                							{
                								switch ( this->LA(5) )
                								{
                								case RSQBRACKET:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 85:
                													{
                														alt51=1;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt51=5;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case NULLTOK:
                							{
                								switch ( this->LA(5) )
                								{
                								case RSQBRACKET:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 85:
                													{
                														alt51=1;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt51=5;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case VOID_TYPE:
                							{
                								switch ( this->LA(5) )
                								{
                								case LBRACE:
                									{
                										switch ( this->LA(6) )
                										{
                										case STRING:
                											{
                												switch ( this->LA(7) )
                												{
                												case RBRACE:
                													{
                														switch ( this->LA(8) )
                														{
                														case RSQBRACKET:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 85:
                																			{
                																				alt51=1;
                																			}
                																		    break;
                																		case LBRACKET:
                																			{
                																				alt51=5;
                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case INT_TYPE:
                							{
                								switch ( this->LA(5) )
                								{
                								case LBRACE:
                									{
                										switch ( this->LA(6) )
                										{
                										case STRING:
                											{
                												switch ( this->LA(7) )
                												{
                												case RBRACE:
                													{
                														switch ( this->LA(8) )
                														{
                														case RSQBRACKET:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 85:
                																			{
                																				alt51=1;
                																			}
                																		    break;
                																		case LBRACKET:
                																			{
                																				alt51=5;
                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case FLOAT_TYPE:
                							{
                								switch ( this->LA(5) )
                								{
                								case LBRACE:
                									{
                										switch ( this->LA(6) )
                										{
                										case STRING:
                											{
                												switch ( this->LA(7) )
                												{
                												case RBRACE:
                													{
                														switch ( this->LA(8) )
                														{
                														case RSQBRACKET:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 85:
                																			{
                																				alt51=1;
                																			}
                																		    break;
                																		case LBRACKET:
                																			{
                																				alt51=5;
                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case CHAR_TYPE:
                							{
                								switch ( this->LA(5) )
                								{
                								case LBRACE:
                									{
                										switch ( this->LA(6) )
                										{
                										case STRING:
                											{
                												switch ( this->LA(7) )
                												{
                												case RBRACE:
                													{
                														switch ( this->LA(8) )
                														{
                														case RSQBRACKET:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 85:
                																			{
                																				alt51=1;
                																			}
                																		    break;
                																		case LBRACKET:
                																			{
                																				alt51=5;
                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case BOOL_TYPE:
                							{
                								switch ( this->LA(5) )
                								{
                								case LBRACE:
                									{
                										switch ( this->LA(6) )
                										{
                										case STRING:
                											{
                												switch ( this->LA(7) )
                												{
                												case RBRACE:
                													{
                														switch ( this->LA(8) )
                														{
                														case RSQBRACKET:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 85:
                																			{
                																				alt51=1;
                																			}
                																		    break;
                																		case LBRACKET:
                																			{
                																				alt51=5;
                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case CPTR_TYPE:
                							{
                								switch ( this->LA(5) )
                								{
                								case LBRACE:
                									{
                										switch ( this->LA(6) )
                										{
                										case STRING:
                											{
                												switch ( this->LA(7) )
                												{
                												case RBRACE:
                													{
                														switch ( this->LA(8) )
                														{
                														case RSQBRACKET:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 85:
                																			{
                																				alt51=1;
                																			}
                																		    break;
                																		case LBRACKET:
                																			{
                																				alt51=5;
                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case STRING_TYPE:
                							{
                								switch ( this->LA(5) )
                								{
                								case LBRACE:
                									{
                										switch ( this->LA(6) )
                										{
                										case STRING:
                											{
                												switch ( this->LA(7) )
                												{
                												case RBRACE:
                													{
                														switch ( this->LA(8) )
                														{
                														case RSQBRACKET:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 85:
                																			{
                																				alt51=1;
                																			}
                																		    break;
                																		case LBRACKET:
                																			{
                																				alt51=5;
                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 85:
                											{
                												alt51=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt51=5;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case DLSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case DRSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 85:
                											{
                												alt51=1;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt51=5;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case ID:
                					{
                						switch ( this->LA(4) )
                						{
                						case 85:
                							{
                								alt51=1;
                							}
                						    break;
                						case LBRACKET:
                							{
                								alt51=5;
                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;

                		}

                	}
                    break;
                case WEAK_REF:
                	{
                		switch ( this->LA(2) )
                		{
                		case TYPE:
                			{
                				switch ( this->LA(3) )
                				{
                				case ID:
                					{
                						switch ( this->LA(4) )
                						{
                						case 85:
                							{
                								alt51=1;
                							}
                						    break;
                						case LBRACKET:
                							{
                								alt51=5;
                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;

                		}

                	}
                    break;
                case SYNCHRONIZED:
                	{
                		switch ( this->LA(2) )
                		{
                		case VIRTUAL:
                			{
                				alt51=9;
                			}
                		    break;
                		case OVERRIDE:
                			{
                				alt51=12;
                			}
                		    break;
                		case VOID_TYPE:
                			{
                				switch ( this->LA(3) )
                				{
                				case ID:
                					{
                						switch ( this->LA(4) )
                						{
                						case 85:
                							{
                								alt51=2;
                							}
                						    break;
                						case LBRACKET:
                							{
                								alt51=6;
                							}
                						    break;

                						}

                					}
                				    break;
                				case LSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case INT:
                							{
                								switch ( this->LA(5) )
                								{
                								case RSQBRACKET:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 85:
                													{
                														alt51=2;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt51=6;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case FLOAT:
                							{
                								switch ( this->LA(5) )
                								{
                								case RSQBRACKET:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 85:
                													{
                														alt51=2;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt51=6;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case CHAR:
                							{
                								switch ( this->LA(5) )
                								{
                								case RSQBRACKET:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 85:
                													{
                														alt51=2;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt51=6;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case STRING:
                							{
                								switch ( this->LA(5) )
                								{
                								case RSQBRACKET:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 85:
                													{
                														alt51=2;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt51=6;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case BOOL:
                							{
                								switch ( this->LA(5) )
                								{
                								case RSQBRACKET:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 85:
                													{
                														alt51=2;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt51=6;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case NULLTOK:
                							{
                								switch ( this->LA(5) )
                								{
                								case RSQBRACKET:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 85:
                													{
                														alt51=2;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt51=6;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case VOID_TYPE:
                							{
                								switch ( this->LA(5) )
                								{
                								case LBRACE:
                									{
                										switch ( this->LA(6) )
                										{
                										case STRING:
                											{
                												switch ( this->LA(7) )
                												{
                												case RBRACE:
                													{
                														switch ( this->LA(8) )
                														{
                														case RSQBRACKET:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 85:
                																			{
                																				alt51=2;
                																			}
                																		    break;
                																		case LBRACKET:
                																			{
                																				alt51=6;
                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case INT_TYPE:
                							{
                								switch ( this->LA(5) )
                								{
                								case LBRACE:
                									{
                										switch ( this->LA(6) )
                										{
                										case STRING:
                											{
                												switch ( this->LA(7) )
                												{
                												case RBRACE:
                													{
                														switch ( this->LA(8) )
                														{
                														case RSQBRACKET:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 85:
                																			{
                																				alt51=2;
                																			}
                																		    break;
                																		case LBRACKET:
                																			{
                																				alt51=6;
                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case FLOAT_TYPE:
                							{
                								switch ( this->LA(5) )
                								{
                								case LBRACE:
                									{
                										switch ( this->LA(6) )
                										{
                										case STRING:
                											{
                												switch ( this->LA(7) )
                												{
                												case RBRACE:
                													{
                														switch ( this->LA(8) )
                														{
                														case RSQBRACKET:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 85:
                																			{
                																				alt51=2;
                																			}
                																		    break;
                																		case LBRACKET:
                																			{
                																				alt51=6;
                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case CHAR_TYPE:
                							{
                								switch ( this->LA(5) )
                								{
                								case LBRACE:
                									{
                										switch ( this->LA(6) )
                										{
                										case STRING:
                											{
                												switch ( this->LA(7) )
                												{
                												case RBRACE:
                													{
                														switch ( this->LA(8) )
                														{
                														case RSQBRACKET:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 85:
                																			{
                																				alt51=2;
                																			}
                																		    break;
                																		case LBRACKET:
                																			{
                																				alt51=6;
                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case BOOL_TYPE:
                							{
                								switch ( this->LA(5) )
                								{
                								case LBRACE:
                									{
                										switch ( this->LA(6) )
                										{
                										case STRING:
                											{
                												switch ( this->LA(7) )
                												{
                												case RBRACE:
                													{
                														switch ( this->LA(8) )
                														{
                														case RSQBRACKET:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 85:
                																			{
                																				alt51=2;
                																			}
                																		    break;
                																		case LBRACKET:
                																			{
                																				alt51=6;
                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case CPTR_TYPE:
                							{
                								switch ( this->LA(5) )
                								{
                								case LBRACE:
                									{
                										switch ( this->LA(6) )
                										{
                										case STRING:
                											{
                												switch ( this->LA(7) )
                												{
                												case RBRACE:
                													{
                														switch ( this->LA(8) )
                														{
                														case RSQBRACKET:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 85:
                																			{
                																				alt51=2;
                																			}
                																		    break;
                																		case LBRACKET:
                																			{
                																				alt51=6;
                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case STRING_TYPE:
                							{
                								switch ( this->LA(5) )
                								{
                								case LBRACE:
                									{
                										switch ( this->LA(6) )
                										{
                										case STRING:
                											{
                												switch ( this->LA(7) )
                												{
                												case RBRACE:
                													{
                														switch ( this->LA(8) )
                														{
                														case RSQBRACKET:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 85:
                																			{
                																				alt51=2;
                																			}
                																		    break;
                																		case LBRACKET:
                																			{
                																				alt51=6;
                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 85:
                											{
                												alt51=2;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt51=6;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case DLSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case DRSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 85:
                											{
                												alt51=2;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt51=6;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case SLICETOK:
                					{
                						switch ( this->LA(4) )
                						{
                						case INT:
                							{
                								switch ( this->LA(5) )
                								{
                								case SLICETOK:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 85:
                													{
                														alt51=2;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt51=6;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case SSOR:
                					{
                						switch ( this->LA(4) )
                						{
                						case ID:
                							{
                								switch ( this->LA(5) )
                								{
                								case 85:
                									{
                										alt51=2;
                									}
                								    break;
                								case LBRACKET:
                									{
                										alt51=6;
                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case INT_TYPE:
                			{
                				switch ( this->LA(3) )
                				{
                				case ID:
                					{
                						switch ( this->LA(4) )
                						{
                						case 85:
                							{
                								alt51=2;
                							}
                						    break;
                						case LBRACKET:
                							{
                								alt51=6;
                							}
                						    break;

                						}

                					}
                				    break;
                				case LSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case INT:
                							{
                								switch ( this->LA(5) )
                								{
                								case RSQBRACKET:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 85:
                													{
                														alt51=2;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt51=6;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case FLOAT:
                							{
                								switch ( this->LA(5) )
                								{
                								case RSQBRACKET:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 85:
                													{
                														alt51=2;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt51=6;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case CHAR:
                							{
                								switch ( this->LA(5) )
                								{
                								case RSQBRACKET:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 85:
                													{
                														alt51=2;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt51=6;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case STRING:
                							{
                								switch ( this->LA(5) )
                								{
                								case RSQBRACKET:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 85:
                													{
                														alt51=2;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt51=6;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case BOOL:
                							{
                								switch ( this->LA(5) )
                								{
                								case RSQBRACKET:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 85:
                													{
                														alt51=2;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt51=6;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case NULLTOK:
                							{
                								switch ( this->LA(5) )
                								{
                								case RSQBRACKET:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 85:
                													{
                														alt51=2;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt51=6;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case VOID_TYPE:
                							{
                								switch ( this->LA(5) )
                								{
                								case LBRACE:
                									{
                										switch ( this->LA(6) )
                										{
                										case STRING:
                											{
                												switch ( this->LA(7) )
                												{
                												case RBRACE:
                													{
                														switch ( this->LA(8) )
                														{
                														case RSQBRACKET:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 85:
                																			{
                																				alt51=2;
                																			}
                																		    break;
                																		case LBRACKET:
                																			{
                																				alt51=6;
                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case INT_TYPE:
                							{
                								switch ( this->LA(5) )
                								{
                								case LBRACE:
                									{
                										switch ( this->LA(6) )
                										{
                										case STRING:
                											{
                												switch ( this->LA(7) )
                												{
                												case RBRACE:
                													{
                														switch ( this->LA(8) )
                														{
                														case RSQBRACKET:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 85:
                																			{
                																				alt51=2;
                																			}
                																		    break;
                																		case LBRACKET:
                																			{
                																				alt51=6;
                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case FLOAT_TYPE:
                							{
                								switch ( this->LA(5) )
                								{
                								case LBRACE:
                									{
                										switch ( this->LA(6) )
                										{
                										case STRING:
                											{
                												switch ( this->LA(7) )
                												{
                												case RBRACE:
                													{
                														switch ( this->LA(8) )
                														{
                														case RSQBRACKET:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 85:
                																			{
                																				alt51=2;
                																			}
                																		    break;
                																		case LBRACKET:
                																			{
                																				alt51=6;
                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case CHAR_TYPE:
                							{
                								switch ( this->LA(5) )
                								{
                								case LBRACE:
                									{
                										switch ( this->LA(6) )
                										{
                										case STRING:
                											{
                												switch ( this->LA(7) )
                												{
                												case RBRACE:
                													{
                														switch ( this->LA(8) )
                														{
                														case RSQBRACKET:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 85:
                																			{
                																				alt51=2;
                																			}
                																		    break;
                																		case LBRACKET:
                																			{
                																				alt51=6;
                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case BOOL_TYPE:
                							{
                								switch ( this->LA(5) )
                								{
                								case LBRACE:
                									{
                										switch ( this->LA(6) )
                										{
                										case STRING:
                											{
                												switch ( this->LA(7) )
                												{
                												case RBRACE:
                													{
                														switch ( this->LA(8) )
                														{
                														case RSQBRACKET:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 85:
                																			{
                																				alt51=2;
                																			}
                																		    break;
                																		case LBRACKET:
                																			{
                																				alt51=6;
                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case CPTR_TYPE:
                							{
                								switch ( this->LA(5) )
                								{
                								case LBRACE:
                									{
                										switch ( this->LA(6) )
                										{
                										case STRING:
                											{
                												switch ( this->LA(7) )
                												{
                												case RBRACE:
                													{
                														switch ( this->LA(8) )
                														{
                														case RSQBRACKET:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 85:
                																			{
                																				alt51=2;
                																			}
                																		    break;
                																		case LBRACKET:
                																			{
                																				alt51=6;
                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case STRING_TYPE:
                							{
                								switch ( this->LA(5) )
                								{
                								case LBRACE:
                									{
                										switch ( this->LA(6) )
                										{
                										case STRING:
                											{
                												switch ( this->LA(7) )
                												{
                												case RBRACE:
                													{
                														switch ( this->LA(8) )
                														{
                														case RSQBRACKET:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 85:
                																			{
                																				alt51=2;
                																			}
                																		    break;
                																		case LBRACKET:
                																			{
                																				alt51=6;
                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 85:
                											{
                												alt51=2;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt51=6;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case DLSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case DRSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 85:
                											{
                												alt51=2;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt51=6;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case SLICETOK:
                					{
                						switch ( this->LA(4) )
                						{
                						case INT:
                							{
                								switch ( this->LA(5) )
                								{
                								case SLICETOK:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 85:
                													{
                														alt51=2;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt51=6;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case SSOR:
                					{
                						switch ( this->LA(4) )
                						{
                						case ID:
                							{
                								switch ( this->LA(5) )
                								{
                								case 85:
                									{
                										alt51=2;
                									}
                								    break;
                								case LBRACKET:
                									{
                										alt51=6;
                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case FLOAT_TYPE:
                			{
                				switch ( this->LA(3) )
                				{
                				case ID:
                					{
                						switch ( this->LA(4) )
                						{
                						case 85:
                							{
                								alt51=2;
                							}
                						    break;
                						case LBRACKET:
                							{
                								alt51=6;
                							}
                						    break;

                						}

                					}
                				    break;
                				case LSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case INT:
                							{
                								switch ( this->LA(5) )
                								{
                								case RSQBRACKET:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 85:
                													{
                														alt51=2;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt51=6;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case FLOAT:
                							{
                								switch ( this->LA(5) )
                								{
                								case RSQBRACKET:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 85:
                													{
                														alt51=2;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt51=6;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case CHAR:
                							{
                								switch ( this->LA(5) )
                								{
                								case RSQBRACKET:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 85:
                													{
                														alt51=2;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt51=6;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case STRING:
                							{
                								switch ( this->LA(5) )
                								{
                								case RSQBRACKET:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 85:
                													{
                														alt51=2;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt51=6;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case BOOL:
                							{
                								switch ( this->LA(5) )
                								{
                								case RSQBRACKET:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 85:
                													{
                														alt51=2;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt51=6;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case NULLTOK:
                							{
                								switch ( this->LA(5) )
                								{
                								case RSQBRACKET:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 85:
                													{
                														alt51=2;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt51=6;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case VOID_TYPE:
                							{
                								switch ( this->LA(5) )
                								{
                								case LBRACE:
                									{
                										switch ( this->LA(6) )
                										{
                										case STRING:
                											{
                												switch ( this->LA(7) )
                												{
                												case RBRACE:
                													{
                														switch ( this->LA(8) )
                														{
                														case RSQBRACKET:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 85:
                																			{
                																				alt51=2;
                																			}
                																		    break;
                																		case LBRACKET:
                																			{
                																				alt51=6;
                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case INT_TYPE:
                							{
                								switch ( this->LA(5) )
                								{
                								case LBRACE:
                									{
                										switch ( this->LA(6) )
                										{
                										case STRING:
                											{
                												switch ( this->LA(7) )
                												{
                												case RBRACE:
                													{
                														switch ( this->LA(8) )
                														{
                														case RSQBRACKET:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 85:
                																			{
                																				alt51=2;
                																			}
                																		    break;
                																		case LBRACKET:
                																			{
                																				alt51=6;
                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case FLOAT_TYPE:
                							{
                								switch ( this->LA(5) )
                								{
                								case LBRACE:
                									{
                										switch ( this->LA(6) )
                										{
                										case STRING:
                											{
                												switch ( this->LA(7) )
                												{
                												case RBRACE:
                													{
                														switch ( this->LA(8) )
                														{
                														case RSQBRACKET:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 85:
                																			{
                																				alt51=2;
                																			}
                																		    break;
                																		case LBRACKET:
                																			{
                																				alt51=6;
                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case CHAR_TYPE:
                							{
                								switch ( this->LA(5) )
                								{
                								case LBRACE:
                									{
                										switch ( this->LA(6) )
                										{
                										case STRING:
                											{
                												switch ( this->LA(7) )
                												{
                												case RBRACE:
                													{
                														switch ( this->LA(8) )
                														{
                														case RSQBRACKET:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 85:
                																			{
                																				alt51=2;
                																			}
                																		    break;
                																		case LBRACKET:
                																			{
                																				alt51=6;
                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case BOOL_TYPE:
                							{
                								switch ( this->LA(5) )
                								{
                								case LBRACE:
                									{
                										switch ( this->LA(6) )
                										{
                										case STRING:
                											{
                												switch ( this->LA(7) )
                												{
                												case RBRACE:
                													{
                														switch ( this->LA(8) )
                														{
                														case RSQBRACKET:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 85:
                																			{
                																				alt51=2;
                																			}
                																		    break;
                																		case LBRACKET:
                																			{
                																				alt51=6;
                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case CPTR_TYPE:
                							{
                								switch ( this->LA(5) )
                								{
                								case LBRACE:
                									{
                										switch ( this->LA(6) )
                										{
                										case STRING:
                											{
                												switch ( this->LA(7) )
                												{
                												case RBRACE:
                													{
                														switch ( this->LA(8) )
                														{
                														case RSQBRACKET:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 85:
                																			{
                																				alt51=2;
                																			}
                																		    break;
                																		case LBRACKET:
                																			{
                																				alt51=6;
                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case STRING_TYPE:
                							{
                								switch ( this->LA(5) )
                								{
                								case LBRACE:
                									{
                										switch ( this->LA(6) )
                										{
                										case STRING:
                											{
                												switch ( this->LA(7) )
                												{
                												case RBRACE:
                													{
                														switch ( this->LA(8) )
                														{
                														case RSQBRACKET:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 85:
                																			{
                																				alt51=2;
                																			}
                																		    break;
                																		case LBRACKET:
                																			{
                																				alt51=6;
                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 85:
                											{
                												alt51=2;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt51=6;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case DLSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case DRSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 85:
                											{
                												alt51=2;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt51=6;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case SLICETOK:
                					{
                						switch ( this->LA(4) )
                						{
                						case INT:
                							{
                								switch ( this->LA(5) )
                								{
                								case SLICETOK:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 85:
                													{
                														alt51=2;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt51=6;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case SSOR:
                					{
                						switch ( this->LA(4) )
                						{
                						case ID:
                							{
                								switch ( this->LA(5) )
                								{
                								case 85:
                									{
                										alt51=2;
                									}
                								    break;
                								case LBRACKET:
                									{
                										alt51=6;
                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case CHAR_TYPE:
                			{
                				switch ( this->LA(3) )
                				{
                				case ID:
                					{
                						switch ( this->LA(4) )
                						{
                						case 85:
                							{
                								alt51=2;
                							}
                						    break;
                						case LBRACKET:
                							{
                								alt51=6;
                							}
                						    break;

                						}

                					}
                				    break;
                				case LSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case INT:
                							{
                								switch ( this->LA(5) )
                								{
                								case RSQBRACKET:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 85:
                													{
                														alt51=2;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt51=6;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case FLOAT:
                							{
                								switch ( this->LA(5) )
                								{
                								case RSQBRACKET:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 85:
                													{
                														alt51=2;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt51=6;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case CHAR:
                							{
                								switch ( this->LA(5) )
                								{
                								case RSQBRACKET:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 85:
                													{
                														alt51=2;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt51=6;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case STRING:
                							{
                								switch ( this->LA(5) )
                								{
                								case RSQBRACKET:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 85:
                													{
                														alt51=2;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt51=6;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case BOOL:
                							{
                								switch ( this->LA(5) )
                								{
                								case RSQBRACKET:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 85:
                													{
                														alt51=2;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt51=6;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case NULLTOK:
                							{
                								switch ( this->LA(5) )
                								{
                								case RSQBRACKET:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 85:
                													{
                														alt51=2;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt51=6;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case VOID_TYPE:
                							{
                								switch ( this->LA(5) )
                								{
                								case LBRACE:
                									{
                										switch ( this->LA(6) )
                										{
                										case STRING:
                											{
                												switch ( this->LA(7) )
                												{
                												case RBRACE:
                													{
                														switch ( this->LA(8) )
                														{
                														case RSQBRACKET:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 85:
                																			{
                																				alt51=2;
                																			}
                																		    break;
                																		case LBRACKET:
                																			{
                																				alt51=6;
                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case INT_TYPE:
                							{
                								switch ( this->LA(5) )
                								{
                								case LBRACE:
                									{
                										switch ( this->LA(6) )
                										{
                										case STRING:
                											{
                												switch ( this->LA(7) )
                												{
                												case RBRACE:
                													{
                														switch ( this->LA(8) )
                														{
                														case RSQBRACKET:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 85:
                																			{
                																				alt51=2;
                																			}
                																		    break;
                																		case LBRACKET:
                																			{
                																				alt51=6;
                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case FLOAT_TYPE:
                							{
                								switch ( this->LA(5) )
                								{
                								case LBRACE:
                									{
                										switch ( this->LA(6) )
                										{
                										case STRING:
                											{
                												switch ( this->LA(7) )
                												{
                												case RBRACE:
                													{
                														switch ( this->LA(8) )
                														{
                														case RSQBRACKET:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 85:
                																			{
                																				alt51=2;
                																			}
                																		    break;
                																		case LBRACKET:
                																			{
                																				alt51=6;
                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case CHAR_TYPE:
                							{
                								switch ( this->LA(5) )
                								{
                								case LBRACE:
                									{
                										switch ( this->LA(6) )
                										{
                										case STRING:
                											{
                												switch ( this->LA(7) )
                												{
                												case RBRACE:
                													{
                														switch ( this->LA(8) )
                														{
                														case RSQBRACKET:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 85:
                																			{
                																				alt51=2;
                																			}
                																		    break;
                																		case LBRACKET:
                																			{
                																				alt51=6;
                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case BOOL_TYPE:
                							{
                								switch ( this->LA(5) )
                								{
                								case LBRACE:
                									{
                										switch ( this->LA(6) )
                										{
                										case STRING:
                											{
                												switch ( this->LA(7) )
                												{
                												case RBRACE:
                													{
                														switch ( this->LA(8) )
                														{
                														case RSQBRACKET:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 85:
                																			{
                																				alt51=2;
                																			}
                																		    break;
                																		case LBRACKET:
                																			{
                																				alt51=6;
                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case CPTR_TYPE:
                							{
                								switch ( this->LA(5) )
                								{
                								case LBRACE:
                									{
                										switch ( this->LA(6) )
                										{
                										case STRING:
                											{
                												switch ( this->LA(7) )
                												{
                												case RBRACE:
                													{
                														switch ( this->LA(8) )
                														{
                														case RSQBRACKET:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 85:
                																			{
                																				alt51=2;
                																			}
                																		    break;
                																		case LBRACKET:
                																			{
                																				alt51=6;
                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case STRING_TYPE:
                							{
                								switch ( this->LA(5) )
                								{
                								case LBRACE:
                									{
                										switch ( this->LA(6) )
                										{
                										case STRING:
                											{
                												switch ( this->LA(7) )
                												{
                												case RBRACE:
                													{
                														switch ( this->LA(8) )
                														{
                														case RSQBRACKET:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 85:
                																			{
                																				alt51=2;
                																			}
                																		    break;
                																		case LBRACKET:
                																			{
                																				alt51=6;
                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 85:
                											{
                												alt51=2;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt51=6;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case DLSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case DRSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 85:
                											{
                												alt51=2;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt51=6;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case SLICETOK:
                					{
                						switch ( this->LA(4) )
                						{
                						case INT:
                							{
                								switch ( this->LA(5) )
                								{
                								case SLICETOK:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 85:
                													{
                														alt51=2;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt51=6;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case SSOR:
                					{
                						switch ( this->LA(4) )
                						{
                						case ID:
                							{
                								switch ( this->LA(5) )
                								{
                								case 85:
                									{
                										alt51=2;
                									}
                								    break;
                								case LBRACKET:
                									{
                										alt51=6;
                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case BOOL_TYPE:
                			{
                				switch ( this->LA(3) )
                				{
                				case ID:
                					{
                						switch ( this->LA(4) )
                						{
                						case 85:
                							{
                								alt51=2;
                							}
                						    break;
                						case LBRACKET:
                							{
                								alt51=6;
                							}
                						    break;

                						}

                					}
                				    break;
                				case LSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case INT:
                							{
                								switch ( this->LA(5) )
                								{
                								case RSQBRACKET:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 85:
                													{
                														alt51=2;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt51=6;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case FLOAT:
                							{
                								switch ( this->LA(5) )
                								{
                								case RSQBRACKET:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 85:
                													{
                														alt51=2;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt51=6;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case CHAR:
                							{
                								switch ( this->LA(5) )
                								{
                								case RSQBRACKET:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 85:
                													{
                														alt51=2;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt51=6;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case STRING:
                							{
                								switch ( this->LA(5) )
                								{
                								case RSQBRACKET:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 85:
                													{
                														alt51=2;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt51=6;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case BOOL:
                							{
                								switch ( this->LA(5) )
                								{
                								case RSQBRACKET:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 85:
                													{
                														alt51=2;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt51=6;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case NULLTOK:
                							{
                								switch ( this->LA(5) )
                								{
                								case RSQBRACKET:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 85:
                													{
                														alt51=2;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt51=6;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case VOID_TYPE:
                							{
                								switch ( this->LA(5) )
                								{
                								case LBRACE:
                									{
                										switch ( this->LA(6) )
                										{
                										case STRING:
                											{
                												switch ( this->LA(7) )
                												{
                												case RBRACE:
                													{
                														switch ( this->LA(8) )
                														{
                														case RSQBRACKET:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 85:
                																			{
                																				alt51=2;
                																			}
                																		    break;
                																		case LBRACKET:
                																			{
                																				alt51=6;
                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case INT_TYPE:
                							{
                								switch ( this->LA(5) )
                								{
                								case LBRACE:
                									{
                										switch ( this->LA(6) )
                										{
                										case STRING:
                											{
                												switch ( this->LA(7) )
                												{
                												case RBRACE:
                													{
                														switch ( this->LA(8) )
                														{
                														case RSQBRACKET:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 85:
                																			{
                																				alt51=2;
                																			}
                																		    break;
                																		case LBRACKET:
                																			{
                																				alt51=6;
                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case FLOAT_TYPE:
                							{
                								switch ( this->LA(5) )
                								{
                								case LBRACE:
                									{
                										switch ( this->LA(6) )
                										{
                										case STRING:
                											{
                												switch ( this->LA(7) )
                												{
                												case RBRACE:
                													{
                														switch ( this->LA(8) )
                														{
                														case RSQBRACKET:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 85:
                																			{
                																				alt51=2;
                																			}
                																		    break;
                																		case LBRACKET:
                																			{
                																				alt51=6;
                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case CHAR_TYPE:
                							{
                								switch ( this->LA(5) )
                								{
                								case LBRACE:
                									{
                										switch ( this->LA(6) )
                										{
                										case STRING:
                											{
                												switch ( this->LA(7) )
                												{
                												case RBRACE:
                													{
                														switch ( this->LA(8) )
                														{
                														case RSQBRACKET:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 85:
                																			{
                																				alt51=2;
                																			}
                																		    break;
                																		case LBRACKET:
                																			{
                																				alt51=6;
                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case BOOL_TYPE:
                							{
                								switch ( this->LA(5) )
                								{
                								case LBRACE:
                									{
                										switch ( this->LA(6) )
                										{
                										case STRING:
                											{
                												switch ( this->LA(7) )
                												{
                												case RBRACE:
                													{
                														switch ( this->LA(8) )
                														{
                														case RSQBRACKET:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 85:
                																			{
                																				alt51=2;
                																			}
                																		    break;
                																		case LBRACKET:
                																			{
                																				alt51=6;
                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case CPTR_TYPE:
                							{
                								switch ( this->LA(5) )
                								{
                								case LBRACE:
                									{
                										switch ( this->LA(6) )
                										{
                										case STRING:
                											{
                												switch ( this->LA(7) )
                												{
                												case RBRACE:
                													{
                														switch ( this->LA(8) )
                														{
                														case RSQBRACKET:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 85:
                																			{
                																				alt51=2;
                																			}
                																		    break;
                																		case LBRACKET:
                																			{
                																				alt51=6;
                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case STRING_TYPE:
                							{
                								switch ( this->LA(5) )
                								{
                								case LBRACE:
                									{
                										switch ( this->LA(6) )
                										{
                										case STRING:
                											{
                												switch ( this->LA(7) )
                												{
                												case RBRACE:
                													{
                														switch ( this->LA(8) )
                														{
                														case RSQBRACKET:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 85:
                																			{
                																				alt51=2;
                																			}
                																		    break;
                																		case LBRACKET:
                																			{
                																				alt51=6;
                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 85:
                											{
                												alt51=2;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt51=6;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case DLSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case DRSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 85:
                											{
                												alt51=2;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt51=6;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case SLICETOK:
                					{
                						switch ( this->LA(4) )
                						{
                						case INT:
                							{
                								switch ( this->LA(5) )
                								{
                								case SLICETOK:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 85:
                													{
                														alt51=2;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt51=6;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case SSOR:
                					{
                						switch ( this->LA(4) )
                						{
                						case ID:
                							{
                								switch ( this->LA(5) )
                								{
                								case 85:
                									{
                										alt51=2;
                									}
                								    break;
                								case LBRACKET:
                									{
                										alt51=6;
                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case CPTR_TYPE:
                			{
                				switch ( this->LA(3) )
                				{
                				case ID:
                					{
                						switch ( this->LA(4) )
                						{
                						case 85:
                							{
                								alt51=2;
                							}
                						    break;
                						case LBRACKET:
                							{
                								alt51=6;
                							}
                						    break;

                						}

                					}
                				    break;
                				case LSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case INT:
                							{
                								switch ( this->LA(5) )
                								{
                								case RSQBRACKET:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 85:
                													{
                														alt51=2;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt51=6;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case FLOAT:
                							{
                								switch ( this->LA(5) )
                								{
                								case RSQBRACKET:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 85:
                													{
                														alt51=2;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt51=6;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case CHAR:
                							{
                								switch ( this->LA(5) )
                								{
                								case RSQBRACKET:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 85:
                													{
                														alt51=2;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt51=6;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case STRING:
                							{
                								switch ( this->LA(5) )
                								{
                								case RSQBRACKET:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 85:
                													{
                														alt51=2;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt51=6;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case BOOL:
                							{
                								switch ( this->LA(5) )
                								{
                								case RSQBRACKET:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 85:
                													{
                														alt51=2;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt51=6;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case NULLTOK:
                							{
                								switch ( this->LA(5) )
                								{
                								case RSQBRACKET:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 85:
                													{
                														alt51=2;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt51=6;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case VOID_TYPE:
                							{
                								switch ( this->LA(5) )
                								{
                								case LBRACE:
                									{
                										switch ( this->LA(6) )
                										{
                										case STRING:
                											{
                												switch ( this->LA(7) )
                												{
                												case RBRACE:
                													{
                														switch ( this->LA(8) )
                														{
                														case RSQBRACKET:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 85:
                																			{
                																				alt51=2;
                																			}
                																		    break;
                																		case LBRACKET:
                																			{
                																				alt51=6;
                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case INT_TYPE:
                							{
                								switch ( this->LA(5) )
                								{
                								case LBRACE:
                									{
                										switch ( this->LA(6) )
                										{
                										case STRING:
                											{
                												switch ( this->LA(7) )
                												{
                												case RBRACE:
                													{
                														switch ( this->LA(8) )
                														{
                														case RSQBRACKET:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 85:
                																			{
                																				alt51=2;
                																			}
                																		    break;
                																		case LBRACKET:
                																			{
                																				alt51=6;
                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case FLOAT_TYPE:
                							{
                								switch ( this->LA(5) )
                								{
                								case LBRACE:
                									{
                										switch ( this->LA(6) )
                										{
                										case STRING:
                											{
                												switch ( this->LA(7) )
                												{
                												case RBRACE:
                													{
                														switch ( this->LA(8) )
                														{
                														case RSQBRACKET:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 85:
                																			{
                																				alt51=2;
                																			}
                																		    break;
                																		case LBRACKET:
                																			{
                																				alt51=6;
                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case CHAR_TYPE:
                							{
                								switch ( this->LA(5) )
                								{
                								case LBRACE:
                									{
                										switch ( this->LA(6) )
                										{
                										case STRING:
                											{
                												switch ( this->LA(7) )
                												{
                												case RBRACE:
                													{
                														switch ( this->LA(8) )
                														{
                														case RSQBRACKET:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 85:
                																			{
                																				alt51=2;
                																			}
                																		    break;
                																		case LBRACKET:
                																			{
                																				alt51=6;
                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case BOOL_TYPE:
                							{
                								switch ( this->LA(5) )
                								{
                								case LBRACE:
                									{
                										switch ( this->LA(6) )
                										{
                										case STRING:
                											{
                												switch ( this->LA(7) )
                												{
                												case RBRACE:
                													{
                														switch ( this->LA(8) )
                														{
                														case RSQBRACKET:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 85:
                																			{
                																				alt51=2;
                																			}
                																		    break;
                																		case LBRACKET:
                																			{
                																				alt51=6;
                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case CPTR_TYPE:
                							{
                								switch ( this->LA(5) )
                								{
                								case LBRACE:
                									{
                										switch ( this->LA(6) )
                										{
                										case STRING:
                											{
                												switch ( this->LA(7) )
                												{
                												case RBRACE:
                													{
                														switch ( this->LA(8) )
                														{
                														case RSQBRACKET:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 85:
                																			{
                																				alt51=2;
                																			}
                																		    break;
                																		case LBRACKET:
                																			{
                																				alt51=6;
                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case STRING_TYPE:
                							{
                								switch ( this->LA(5) )
                								{
                								case LBRACE:
                									{
                										switch ( this->LA(6) )
                										{
                										case STRING:
                											{
                												switch ( this->LA(7) )
                												{
                												case RBRACE:
                													{
                														switch ( this->LA(8) )
                														{
                														case RSQBRACKET:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 85:
                																			{
                																				alt51=2;
                																			}
                																		    break;
                																		case LBRACKET:
                																			{
                																				alt51=6;
                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 85:
                											{
                												alt51=2;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt51=6;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case DLSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case DRSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 85:
                											{
                												alt51=2;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt51=6;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case SLICETOK:
                					{
                						switch ( this->LA(4) )
                						{
                						case INT:
                							{
                								switch ( this->LA(5) )
                								{
                								case SLICETOK:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 85:
                													{
                														alt51=2;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt51=6;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case SSOR:
                					{
                						switch ( this->LA(4) )
                						{
                						case ID:
                							{
                								switch ( this->LA(5) )
                								{
                								case 85:
                									{
                										alt51=2;
                									}
                								    break;
                								case LBRACKET:
                									{
                										alt51=6;
                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case STRING_TYPE:
                			{
                				switch ( this->LA(3) )
                				{
                				case ID:
                					{
                						switch ( this->LA(4) )
                						{
                						case 85:
                							{
                								alt51=2;
                							}
                						    break;
                						case LBRACKET:
                							{
                								alt51=6;
                							}
                						    break;

                						}

                					}
                				    break;
                				case LSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case INT:
                							{
                								switch ( this->LA(5) )
                								{
                								case RSQBRACKET:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 85:
                													{
                														alt51=2;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt51=6;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case FLOAT:
                							{
                								switch ( this->LA(5) )
                								{
                								case RSQBRACKET:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 85:
                													{
                														alt51=2;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt51=6;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case CHAR:
                							{
                								switch ( this->LA(5) )
                								{
                								case RSQBRACKET:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 85:
                													{
                														alt51=2;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt51=6;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case STRING:
                							{
                								switch ( this->LA(5) )
                								{
                								case RSQBRACKET:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 85:
                													{
                														alt51=2;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt51=6;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case BOOL:
                							{
                								switch ( this->LA(5) )
                								{
                								case RSQBRACKET:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 85:
                													{
                														alt51=2;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt51=6;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case NULLTOK:
                							{
                								switch ( this->LA(5) )
                								{
                								case RSQBRACKET:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 85:
                													{
                														alt51=2;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt51=6;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case VOID_TYPE:
                							{
                								switch ( this->LA(5) )
                								{
                								case LBRACE:
                									{
                										switch ( this->LA(6) )
                										{
                										case STRING:
                											{
                												switch ( this->LA(7) )
                												{
                												case RBRACE:
                													{
                														switch ( this->LA(8) )
                														{
                														case RSQBRACKET:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 85:
                																			{
                																				alt51=2;
                																			}
                																		    break;
                																		case LBRACKET:
                																			{
                																				alt51=6;
                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case INT_TYPE:
                							{
                								switch ( this->LA(5) )
                								{
                								case LBRACE:
                									{
                										switch ( this->LA(6) )
                										{
                										case STRING:
                											{
                												switch ( this->LA(7) )
                												{
                												case RBRACE:
                													{
                														switch ( this->LA(8) )
                														{
                														case RSQBRACKET:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 85:
                																			{
                																				alt51=2;
                																			}
                																		    break;
                																		case LBRACKET:
                																			{
                																				alt51=6;
                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case FLOAT_TYPE:
                							{
                								switch ( this->LA(5) )
                								{
                								case LBRACE:
                									{
                										switch ( this->LA(6) )
                										{
                										case STRING:
                											{
                												switch ( this->LA(7) )
                												{
                												case RBRACE:
                													{
                														switch ( this->LA(8) )
                														{
                														case RSQBRACKET:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 85:
                																			{
                																				alt51=2;
                																			}
                																		    break;
                																		case LBRACKET:
                																			{
                																				alt51=6;
                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case CHAR_TYPE:
                							{
                								switch ( this->LA(5) )
                								{
                								case LBRACE:
                									{
                										switch ( this->LA(6) )
                										{
                										case STRING:
                											{
                												switch ( this->LA(7) )
                												{
                												case RBRACE:
                													{
                														switch ( this->LA(8) )
                														{
                														case RSQBRACKET:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 85:
                																			{
                																				alt51=2;
                																			}
                																		    break;
                																		case LBRACKET:
                																			{
                																				alt51=6;
                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case BOOL_TYPE:
                							{
                								switch ( this->LA(5) )
                								{
                								case LBRACE:
                									{
                										switch ( this->LA(6) )
                										{
                										case STRING:
                											{
                												switch ( this->LA(7) )
                												{
                												case RBRACE:
                													{
                														switch ( this->LA(8) )
                														{
                														case RSQBRACKET:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 85:
                																			{
                																				alt51=2;
                																			}
                																		    break;
                																		case LBRACKET:
                																			{
                																				alt51=6;
                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case CPTR_TYPE:
                							{
                								switch ( this->LA(5) )
                								{
                								case LBRACE:
                									{
                										switch ( this->LA(6) )
                										{
                										case STRING:
                											{
                												switch ( this->LA(7) )
                												{
                												case RBRACE:
                													{
                														switch ( this->LA(8) )
                														{
                														case RSQBRACKET:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 85:
                																			{
                																				alt51=2;
                																			}
                																		    break;
                																		case LBRACKET:
                																			{
                																				alt51=6;
                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case STRING_TYPE:
                							{
                								switch ( this->LA(5) )
                								{
                								case LBRACE:
                									{
                										switch ( this->LA(6) )
                										{
                										case STRING:
                											{
                												switch ( this->LA(7) )
                												{
                												case RBRACE:
                													{
                														switch ( this->LA(8) )
                														{
                														case RSQBRACKET:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 85:
                																			{
                																				alt51=2;
                																			}
                																		    break;
                																		case LBRACKET:
                																			{
                																				alt51=6;
                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 85:
                											{
                												alt51=2;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt51=6;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case DLSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case DRSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 85:
                											{
                												alt51=2;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt51=6;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case SLICETOK:
                					{
                						switch ( this->LA(4) )
                						{
                						case INT:
                							{
                								switch ( this->LA(5) )
                								{
                								case SLICETOK:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 85:
                													{
                														alt51=2;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt51=6;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case SSOR:
                					{
                						switch ( this->LA(4) )
                						{
                						case ID:
                							{
                								switch ( this->LA(5) )
                								{
                								case 85:
                									{
                										alt51=2;
                									}
                								    break;
                								case LBRACKET:
                									{
                										alt51=6;
                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case TYPE:
                			{
                				switch ( this->LA(3) )
                				{
                				case ID:
                					{
                						switch ( this->LA(4) )
                						{
                						case 85:
                							{
                								alt51=2;
                							}
                						    break;
                						case LBRACKET:
                							{
                								alt51=6;
                							}
                						    break;

                						}

                					}
                				    break;
                				case LSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case INT:
                							{
                								switch ( this->LA(5) )
                								{
                								case RSQBRACKET:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 85:
                													{
                														alt51=2;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt51=6;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case FLOAT:
                							{
                								switch ( this->LA(5) )
                								{
                								case RSQBRACKET:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 85:
                													{
                														alt51=2;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt51=6;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case CHAR:
                							{
                								switch ( this->LA(5) )
                								{
                								case RSQBRACKET:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 85:
                													{
                														alt51=2;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt51=6;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case STRING:
                							{
                								switch ( this->LA(5) )
                								{
                								case RSQBRACKET:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 85:
                													{
                														alt51=2;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt51=6;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case BOOL:
                							{
                								switch ( this->LA(5) )
                								{
                								case RSQBRACKET:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 85:
                													{
                														alt51=2;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt51=6;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case NULLTOK:
                							{
                								switch ( this->LA(5) )
                								{
                								case RSQBRACKET:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 85:
                													{
                														alt51=2;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt51=6;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case VOID_TYPE:
                							{
                								switch ( this->LA(5) )
                								{
                								case LBRACE:
                									{
                										switch ( this->LA(6) )
                										{
                										case STRING:
                											{
                												switch ( this->LA(7) )
                												{
                												case RBRACE:
                													{
                														switch ( this->LA(8) )
                														{
                														case RSQBRACKET:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 85:
                																			{
                																				alt51=2;
                																			}
                																		    break;
                																		case LBRACKET:
                																			{
                																				alt51=6;
                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case INT_TYPE:
                							{
                								switch ( this->LA(5) )
                								{
                								case LBRACE:
                									{
                										switch ( this->LA(6) )
                										{
                										case STRING:
                											{
                												switch ( this->LA(7) )
                												{
                												case RBRACE:
                													{
                														switch ( this->LA(8) )
                														{
                														case RSQBRACKET:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 85:
                																			{
                																				alt51=2;
                																			}
                																		    break;
                																		case LBRACKET:
                																			{
                																				alt51=6;
                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case FLOAT_TYPE:
                							{
                								switch ( this->LA(5) )
                								{
                								case LBRACE:
                									{
                										switch ( this->LA(6) )
                										{
                										case STRING:
                											{
                												switch ( this->LA(7) )
                												{
                												case RBRACE:
                													{
                														switch ( this->LA(8) )
                														{
                														case RSQBRACKET:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 85:
                																			{
                																				alt51=2;
                																			}
                																		    break;
                																		case LBRACKET:
                																			{
                																				alt51=6;
                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case CHAR_TYPE:
                							{
                								switch ( this->LA(5) )
                								{
                								case LBRACE:
                									{
                										switch ( this->LA(6) )
                										{
                										case STRING:
                											{
                												switch ( this->LA(7) )
                												{
                												case RBRACE:
                													{
                														switch ( this->LA(8) )
                														{
                														case RSQBRACKET:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 85:
                																			{
                																				alt51=2;
                																			}
                																		    break;
                																		case LBRACKET:
                																			{
                																				alt51=6;
                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case BOOL_TYPE:
                							{
                								switch ( this->LA(5) )
                								{
                								case LBRACE:
                									{
                										switch ( this->LA(6) )
                										{
                										case STRING:
                											{
                												switch ( this->LA(7) )
                												{
                												case RBRACE:
                													{
                														switch ( this->LA(8) )
                														{
                														case RSQBRACKET:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 85:
                																			{
                																				alt51=2;
                																			}
                																		    break;
                																		case LBRACKET:
                																			{
                																				alt51=6;
                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case CPTR_TYPE:
                							{
                								switch ( this->LA(5) )
                								{
                								case LBRACE:
                									{
                										switch ( this->LA(6) )
                										{
                										case STRING:
                											{
                												switch ( this->LA(7) )
                												{
                												case RBRACE:
                													{
                														switch ( this->LA(8) )
                														{
                														case RSQBRACKET:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 85:
                																			{
                																				alt51=2;
                																			}
                																		    break;
                																		case LBRACKET:
                																			{
                																				alt51=6;
                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case STRING_TYPE:
                							{
                								switch ( this->LA(5) )
                								{
                								case LBRACE:
                									{
                										switch ( this->LA(6) )
                										{
                										case STRING:
                											{
                												switch ( this->LA(7) )
                												{
                												case RBRACE:
                													{
                														switch ( this->LA(8) )
                														{
                														case RSQBRACKET:
                															{
                																switch ( this->LA(9) )
                																{
                																case ID:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case 85:
                																			{
                																				alt51=2;
                																			}
                																		    break;
                																		case LBRACKET:
                																			{
                																				alt51=6;
                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case RSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 85:
                											{
                												alt51=2;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt51=6;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case DLSQBRACKET:
                					{
                						switch ( this->LA(4) )
                						{
                						case DRSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case ID:
                									{
                										switch ( this->LA(6) )
                										{
                										case 85:
                											{
                												alt51=2;
                											}
                										    break;
                										case LBRACKET:
                											{
                												alt51=6;
                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;
                				case QUESTION:
                					{
                						switch ( this->LA(4) )
                						{
                						case ID:
                							{
                								switch ( this->LA(5) )
                								{
                								case 85:
                									{
                										alt51=2;
                									}
                								    break;
                								case LBRACKET:
                									{
                										alt51=6;
                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case SHARED_REF:
                			{
                				switch ( this->LA(3) )
                				{
                				case TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case LSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case INT:
                									{
                										switch ( this->LA(6) )
                										{
                										case RSQBRACKET:
                											{
                												switch ( this->LA(7) )
                												{
                												case ID:
                													{
                														switch ( this->LA(8) )
                														{
                														case 85:
                															{
                																alt51=2;
                															}
                														    break;
                														case LBRACKET:
                															{
                																alt51=6;
                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;
                								case FLOAT:
                									{
                										switch ( this->LA(6) )
                										{
                										case RSQBRACKET:
                											{
                												switch ( this->LA(7) )
                												{
                												case ID:
                													{
                														switch ( this->LA(8) )
                														{
                														case 85:
                															{
                																alt51=2;
                															}
                														    break;
                														case LBRACKET:
                															{
                																alt51=6;
                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;
                								case CHAR:
                									{
                										switch ( this->LA(6) )
                										{
                										case RSQBRACKET:
                											{
                												switch ( this->LA(7) )
                												{
                												case ID:
                													{
                														switch ( this->LA(8) )
                														{
                														case 85:
                															{
                																alt51=2;
                															}
                														    break;
                														case LBRACKET:
                															{
                																alt51=6;
                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;
                								case STRING:
                									{
                										switch ( this->LA(6) )
                										{
                										case RSQBRACKET:
                											{
                												switch ( this->LA(7) )
                												{
                												case ID:
                													{
                														switch ( this->LA(8) )
                														{
                														case 85:
                															{
                																alt51=2;
                															}
                														    break;
                														case LBRACKET:
                															{
                																alt51=6;
                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;
                								case BOOL:
                									{
                										switch ( this->LA(6) )
                										{
                										case RSQBRACKET:
                											{
                												switch ( this->LA(7) )
                												{
                												case ID:
                													{
                														switch ( this->LA(8) )
                														{
                														case 85:
                															{
                																alt51=2;
                															}
                														    break;
                														case LBRACKET:
                															{
                																alt51=6;
                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;
                								case NULLTOK:
                									{
                										switch ( this->LA(6) )
                										{
                										case RSQBRACKET:
                											{
                												switch ( this->LA(7) )
                												{
                												case ID:
                													{
                														switch ( this->LA(8) )
                														{
                														case 85:
                															{
                																alt51=2;
                															}
                														    break;
                														case LBRACKET:
                															{
                																alt51=6;
                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;
                								case VOID_TYPE:
                									{
                										switch ( this->LA(6) )
                										{
                										case LBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case STRING:
                													{
                														switch ( this->LA(8) )
                														{
                														case RBRACE:
                															{
                																switch ( this->LA(9) )
                																{
                																case RSQBRACKET:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case ID:
                																			{
                																				switch ( this->LA(11) )
                																				{
                																				case 85:
                																					{
                																						alt51=2;
                																					}
                																				    break;
                																				case LBRACKET:
                																					{
                																						alt51=6;
                																					}
                																				    break;

                																				}

                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;
                								case INT_TYPE:
                									{
                										switch ( this->LA(6) )
                										{
                										case LBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case STRING:
                													{
                														switch ( this->LA(8) )
                														{
                														case RBRACE:
                															{
                																switch ( this->LA(9) )
                																{
                																case RSQBRACKET:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case ID:
                																			{
                																				switch ( this->LA(11) )
                																				{
                																				case 85:
                																					{
                																						alt51=2;
                																					}
                																				    break;
                																				case LBRACKET:
                																					{
                																						alt51=6;
                																					}
                																				    break;

                																				}

                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;
                								case FLOAT_TYPE:
                									{
                										switch ( this->LA(6) )
                										{
                										case LBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case STRING:
                													{
                														switch ( this->LA(8) )
                														{
                														case RBRACE:
                															{
                																switch ( this->LA(9) )
                																{
                																case RSQBRACKET:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case ID:
                																			{
                																				switch ( this->LA(11) )
                																				{
                																				case 85:
                																					{
                																						alt51=2;
                																					}
                																				    break;
                																				case LBRACKET:
                																					{
                																						alt51=6;
                																					}
                																				    break;

                																				}

                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;
                								case CHAR_TYPE:
                									{
                										switch ( this->LA(6) )
                										{
                										case LBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case STRING:
                													{
                														switch ( this->LA(8) )
                														{
                														case RBRACE:
                															{
                																switch ( this->LA(9) )
                																{
                																case RSQBRACKET:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case ID:
                																			{
                																				switch ( this->LA(11) )
                																				{
                																				case 85:
                																					{
                																						alt51=2;
                																					}
                																				    break;
                																				case LBRACKET:
                																					{
                																						alt51=6;
                																					}
                																				    break;

                																				}

                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;
                								case BOOL_TYPE:
                									{
                										switch ( this->LA(6) )
                										{
                										case LBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case STRING:
                													{
                														switch ( this->LA(8) )
                														{
                														case RBRACE:
                															{
                																switch ( this->LA(9) )
                																{
                																case RSQBRACKET:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case ID:
                																			{
                																				switch ( this->LA(11) )
                																				{
                																				case 85:
                																					{
                																						alt51=2;
                																					}
                																				    break;
                																				case LBRACKET:
                																					{
                																						alt51=6;
                																					}
                																				    break;

                																				}

                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;
                								case CPTR_TYPE:
                									{
                										switch ( this->LA(6) )
                										{
                										case LBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case STRING:
                													{
                														switch ( this->LA(8) )
                														{
                														case RBRACE:
                															{
                																switch ( this->LA(9) )
                																{
                																case RSQBRACKET:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case ID:
                																			{
                																				switch ( this->LA(11) )
                																				{
                																				case 85:
                																					{
                																						alt51=2;
                																					}
                																				    break;
                																				case LBRACKET:
                																					{
                																						alt51=6;
                																					}
                																				    break;

                																				}

                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;
                								case STRING_TYPE:
                									{
                										switch ( this->LA(6) )
                										{
                										case LBRACE:
                											{
                												switch ( this->LA(7) )
                												{
                												case STRING:
                													{
                														switch ( this->LA(8) )
                														{
                														case RBRACE:
                															{
                																switch ( this->LA(9) )
                																{
                																case RSQBRACKET:
                																	{
                																		switch ( this->LA(10) )
                																		{
                																		case ID:
                																			{
                																				switch ( this->LA(11) )
                																				{
                																				case 85:
                																					{
                																						alt51=2;
                																					}
                																				    break;
                																				case LBRACKET:
                																					{
                																						alt51=6;
                																					}
                																				    break;

                																				}

                																			}
                																		    break;

                																		}

                																	}
                																    break;

                																}

                															}
                														    break;

                														}

                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;
                								case RSQBRACKET:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 85:
                													{
                														alt51=2;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt51=6;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case DLSQBRACKET:
                							{
                								switch ( this->LA(5) )
                								{
                								case DRSQBRACKET:
                									{
                										switch ( this->LA(6) )
                										{
                										case ID:
                											{
                												switch ( this->LA(7) )
                												{
                												case 85:
                													{
                														alt51=2;
                													}
                												    break;
                												case LBRACKET:
                													{
                														alt51=6;
                													}
                												    break;

                												}

                											}
                										    break;

                										}

                									}
                								    break;

                								}

                							}
                						    break;
                						case ID:
                							{
                								switch ( this->LA(5) )
                								{
                								case 85:
                									{
                										alt51=2;
                									}
                								    break;
                								case LBRACKET:
                									{
                										alt51=6;
                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case WEAK_REF:
                			{
                				switch ( this->LA(3) )
                				{
                				case TYPE:
                					{
                						switch ( this->LA(4) )
                						{
                						case ID:
                							{
                								switch ( this->LA(5) )
                								{
                								case 85:
                									{
                										alt51=2;
                									}
                								    break;
                								case LBRACKET:
                									{
                										alt51=6;
                									}
                								    break;

                								}

                							}
                						    break;

                						}

                					}
                				    break;

                				}

                			}
                		    break;
                		case 80:
                			{
                				alt51=4;
                			}
                		    break;

                		}

                	}
                    break;
                case 80:
                	{
                		alt51=3;
                	}
                    break;
                case ACTION:
                	{
                		switch ( this->LA(2) )
                		{
                		case VIRTUAL:
                			{
                				alt51=10;
                			}
                		    break;
                		case OVERRIDE:
                			{
                				alt51=13;
                			}
                		    break;
                		case BOOL_TYPE:
                		case CHAR_TYPE:
                		case CPTR_TYPE:
                		case FLOAT_TYPE:
                		case INT_TYPE:
                		case SHARED_REF:
                		case STRING_TYPE:
                		case TYPE:
                		case VOID_TYPE:
                		case WEAK_REF:
                			{
                				alt51=7;
                			}
                		    break;

                		}

                	}
                    break;
                case VIRTUAL:
                	{
                		alt51=8;
                	}
                    break;
                case OVERRIDE:
                	{
                		alt51=11;
                	}
                    break;

                }

                switch (alt51)
                {
            	case 1:
            	    {
            	        {
            	            this->followPush(FOLLOW_declaration_in_classDecl6418);
            	            a=declaration();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            {
            	                 node->add_struct_elem(a
            	                );
            	            }


            	             this->matchToken(SEMICOLON, &FOLLOW_SEMICOLON_in_classDecl6422);
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	        }


            	    }
            	    break;
            	case 2:
            	    {
            	        {
            	             this->matchToken(SYNCHRONIZED, &FOLLOW_SYNCHRONIZED_in_classDecl6446);
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            this->followPush(FOLLOW_declaration_in_classDecl6450);
            	            aa=declaration();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            {
            	                 node->add_struct_elem(aa
            	                , true);
            	            }


            	             this->matchToken(SEMICOLON, &FOLLOW_SEMICOLON_in_classDecl6454);
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	        }


            	    }
            	    break;
            	case 3:
            	    {
            	        {
            	            this->followPush(FOLLOW_inherited_declaration_in_classDecl6481);
            	            j=inherited_declaration();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            {
            	                 node->add_struct_elem(j
            	                );
            	            }


            	             this->matchToken(SEMICOLON, &FOLLOW_SEMICOLON_in_classDecl6485);
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	        }


            	    }
            	    break;
            	case 4:
            	    {
            	        {
            	             this->matchToken(SYNCHRONIZED, &FOLLOW_SYNCHRONIZED_in_classDecl6509);
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            this->followPush(FOLLOW_inherited_declaration_in_classDecl6513);
            	            jj=inherited_declaration();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            {
            	                 node->add_struct_elem(j
            	                , true);
            	            }


            	             this->matchToken(SEMICOLON, &FOLLOW_SEMICOLON_in_classDecl6517);
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	        }


            	    }
            	    break;
            	case 5:
            	    {
            	        {
            	            this->followPush(FOLLOW_function_in_classDecl6543);
            	            b=function();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            {
            	                 node->add_function(b
            	                );
            	            }


            	        }


            	    }
            	    break;
            	case 6:
            	    {
            	        {
            	             this->matchToken(SYNCHRONIZED, &FOLLOW_SYNCHRONIZED_in_classDecl6572);
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            this->followPush(FOLLOW_function_in_classDecl6576);
            	            bb=function();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            {
            	                 bb
            	                ->set_synchronized(true); node->add_function(bb
            	                );
            	            }


            	        }


            	    }
            	    break;
            	case 7:
            	    {
            	        {
            	             this->matchToken(ACTION, &FOLLOW_ACTION_in_classDecl6605);
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            this->followPush(FOLLOW_function_in_classDecl6609);
            	            bbb=function();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            {
            	                 bbb
            	                ->set_action(true); node->add_function(bbb
            	                );
            	            }


            	        }


            	    }
            	    break;
            	case 8:
            	    {
            	        {
            	             this->matchToken(VIRTUAL, &FOLLOW_VIRTUAL_in_classDecl6638);
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            this->followPush(FOLLOW_function_in_classDecl6642);
            	            h=function();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            {
            	                 node->add_function(h
            	                ); h
            	                ->set_is_virtual(true);
            	            }


            	        }


            	    }
            	    break;
            	case 9:
            	    {
            	        {
            	             this->matchToken(SYNCHRONIZED, &FOLLOW_SYNCHRONIZED_in_classDecl6668);
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	             this->matchToken(VIRTUAL, &FOLLOW_VIRTUAL_in_classDecl6670);
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            this->followPush(FOLLOW_function_in_classDecl6674);
            	            hh=function();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            {
            	                 hh
            	                ->set_synchronized(true); node->add_function(hh
            	                ); hh
            	                ->set_is_virtual(true);
            	            }


            	        }


            	    }
            	    break;
            	case 10:
            	    {
            	        {
            	             this->matchToken(ACTION, &FOLLOW_ACTION_in_classDecl6700);
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	             this->matchToken(VIRTUAL, &FOLLOW_VIRTUAL_in_classDecl6702);
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            this->followPush(FOLLOW_function_in_classDecl6706);
            	            hhh=function();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            {
            	                 hhh
            	                ->set_action(true); node->add_function(hhh
            	                ); hhh
            	                ->set_is_virtual(true);
            	            }


            	        }


            	    }
            	    break;
            	case 11:
            	    {
            	        {
            	             this->matchToken(OVERRIDE, &FOLLOW_OVERRIDE_in_classDecl6732);
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            this->followPush(FOLLOW_function_in_classDecl6736);
            	            i=function();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            {
            	                 node->add_function(i
            	                ); i
            	                ->set_is_override(true);
            	            }


            	        }


            	    }
            	    break;
            	case 12:
            	    {
            	        {
            	             this->matchToken(SYNCHRONIZED, &FOLLOW_SYNCHRONIZED_in_classDecl6762);
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	             this->matchToken(OVERRIDE, &FOLLOW_OVERRIDE_in_classDecl6764);
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            this->followPush(FOLLOW_function_in_classDecl6768);
            	            ii=function();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            {
            	                 ii
            	                ->set_synchronized(true); node->add_function(ii
            	                ); ii
            	                ->set_is_override(true);
            	            }


            	        }


            	    }
            	    break;
            	case 13:
            	    {
            	        {
            	             this->matchToken(ACTION, &FOLLOW_ACTION_in_classDecl6794);
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	             this->matchToken(OVERRIDE, &FOLLOW_OVERRIDE_in_classDecl6796);
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            this->followPush(FOLLOW_function_in_classDecl6800);
            	            iii=function();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            {
            	                 iii
            	                ->set_action(true); node->add_function(iii
            	                ); iii
            	                ->set_is_override(true);
            	            }


            	        }


            	    }
            	    break;

            	default:
            	    goto loop51;
            	    break;
                }
            }
            loop51: ;


            RBRACE76 =  this->matchToken(RBRACE, &FOLLOW_RBRACE_in_classDecl6836);
            if  (this->hasException())
            {
                goto ruleclassDeclEx;
            }


            {
                 SET_END_LOCATION(node, RBRACE76);
            }


        }

    }
    goto ruleclassDeclEx;
    ruleclassDeclEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






scripting::top_level_resource*
WNScriptASTParser::topLevelRes()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::top_level_resource* node;


    ImplTraits::CommonTokenType const* rlb = NULL;
    ImplTraits::CommonTokenType const* rls = NULL;
    ImplTraits::CommonTokenType const* rrb = NULL;
    ImplTraits::CommonTokenType const* RESOURCE77 = NULL;






        node = nullptr;



    {
        {
            RESOURCE77 =  this->matchToken(RESOURCE, &FOLLOW_RESOURCE_in_topLevelRes6864);
            if  (this->hasException())
            {
                goto ruletopLevelResEx;
            }


            rlb =  this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_topLevelRes6868);
            if  (this->hasException())
            {
                goto ruletopLevelResEx;
            }


            rls =  this->matchToken(STRING, &FOLLOW_STRING_in_topLevelRes6872);
            if  (this->hasException())
            {
                goto ruletopLevelResEx;
            }


            rrb =  this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_topLevelRes6876);
            if  (this->hasException())
            {
                goto ruletopLevelResEx;
            }


            {
                 auto n = m_allocator->construct<scripting::top_level_resource>(m_allocator, (RESOURCE77->getText()).c_str()+1, (rls->getText()).c_str()); m_file->add_resource((RESOURCE77->getText()).c_str()+1,(rls->getText()).c_str(), false); node = n; SET_LOCATION(node, RESOURCE77); SET_END_LOCATION(node, rrb);
            }


        }

    }
    goto ruletopLevelResEx;
    ruletopLevelResEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}






containers::string
WNScriptASTParser::inc()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    containers::string file;


    ImplTraits::CommonTokenType const* STRING78 = NULL;









    {
        {
             this->matchToken(INCLUDE, &FOLLOW_INCLUDE_in_inc6905);
            if  (this->hasException())
            {
                goto ruleincEx;
            }


            STRING78 =  this->matchToken(STRING, &FOLLOW_STRING_in_inc6907);
            if  (this->hasException())
            {
                goto ruleincEx;
            }


            {
                 file = containers::string(m_allocator, (STRING78->getText()).c_str());
            }


        }

    }
    goto ruleincEx;
    ruleincEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return file;
}






scripting::script_file*
WNScriptASTParser::program()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);

    scripting::script_file* node;


    containers::string inc79;
    scripting::function* function80;
    scripting::struct_definition* structDecl81;
    scripting::struct_definition* classDecl82;
    scripting::top_level_resource* topLevelRes83;





        node = m_allocator->construct<scripting::script_file>(m_allocator);
        m_file = node;



    {
        {

            for (;;)
            {
                int alt52=2;
                switch ( this->LA(1) )
                {
                case INCLUDE:
                	{
                		alt52=1;
                	}
                    break;

                }

                switch (alt52)
                {
            	case 1:
            	    {
            	        this->followPush(FOLLOW_inc_in_program6936);
            	        inc79=inc();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleprogramEx;
            	        }


            	        {
            	             node->add_include(core::move(inc79
            	            ));
            	        }


            	    }
            	    break;

            	default:
            	    goto loop52;
            	    break;
                }
            }
            loop52: ;



            for (;;)
            {
                int alt53=5;
                switch ( this->LA(1) )
                {
                case BOOL_TYPE:
                case CHAR_TYPE:
                case CPTR_TYPE:
                case FLOAT_TYPE:
                case INT_TYPE:
                case SHARED_REF:
                case STRING_TYPE:
                case TYPE:
                case VOID_TYPE:
                case WEAK_REF:
                	{
                		alt53=1;
                	}
                    break;
                case STRUCT:
                	{
                		alt53=2;
                	}
                    break;
                case ACTOR:
                case CLASS:
                	{
                		alt53=3;
                	}
                    break;
                case RESOURCE:
                	{
                		alt53=4;
                	}
                    break;

                }

                switch (alt53)
                {
            	case 1:
            	    {
            	        this->followPush(FOLLOW_function_in_program6975);
            	        function80=function();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleprogramEx;
            	        }


            	        {
            	             node->add_function(function80
            	            );
            	        }


            	    }
            	    break;
            	case 2:
            	    {
            	        this->followPush(FOLLOW_structDecl_in_program6997);
            	        structDecl81=structDecl();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleprogramEx;
            	        }


            	        {
            	             node->add_struct(structDecl81
            	            );
            	        }


            	    }
            	    break;
            	case 3:
            	    {
            	        this->followPush(FOLLOW_classDecl_in_program7017);
            	        classDecl82=classDecl();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleprogramEx;
            	        }


            	        {
            	             node->add_struct(classDecl82
            	            );
            	        }


            	    }
            	    break;
            	case 4:
            	    {
            	        this->followPush(FOLLOW_topLevelRes_in_program7038);
            	        topLevelRes83=topLevelRes();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleprogramEx;
            	        }


            	        {
            	             node->add_top_level_resource(topLevelRes83
            	            );
            	        }


            	    }
            	    break;

            	default:
            	    goto loop53;
            	    break;
                }
            }
            loop53: ;


        }

    }
    goto ruleprogramEx;
    ruleprogramEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}

















