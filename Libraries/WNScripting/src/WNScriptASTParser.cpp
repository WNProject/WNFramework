/** \file
 *  This C++ source file was generated by $ANTLR version 3.5.3-SNAPSHOT
 *
 *     -  From the grammar source file : C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g
 *     -                            On : 2015-08-03 21:13:57
 *     -                for the parser : WNScriptASTParserParser
 *
 * Editing it, at least manually, is not wise.
 *
 * C++ language generator and runtime by Gokulakannan Somasundaram ( heavy lifting from C Run-time by Jim Idle )
 *
 *
*/
// [The "BSD license"]
// Copyright (c) 2005-2009 Gokulakannan Somasundaram, ElectronDB
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


/* =============================================================================
 * This is what the grammar programmer asked us to put at the top of every file.
 */

    #include "WNCore/inc/WNBase.h"
#ifdef _WN_MSVC
    #pragma warning(disable: 4100)
    #pragma warning(disable: 4459)
    #pragma warning(disable: 4703)
#endif
    #include "WNMemory/inc/WNAllocator.h"
	#include "WNScripting/src/WNScriptASTLexer.hpp"
    #include "WNScripting/inc/WNNodeTypes.h"
	
    using namespace wn;
    //
    //

    #ifndef SET_LOCATION
    #define SET_LOCATION(node, tok) { scripting::source_location loc; \
                                     loc.m_start_index = tok->get_startIndex();\
                                     loc.m_end_index = tok->get_stopIndex();\
                                     loc.m_line_start = tok->get_lineStart();\
                                     loc.m_line_number = tok->get_line();\
                                     loc.m_char_number = tok->get_charPositionInLine();\
                                     node->set_start_location(loc); \
                                   }

    #define SET_LOCATION_FROM_NODE(node, node2) { \
                                        if(node2) { \
                                        node->set_start_location(node2->get_start_location()); \
                                        } \
                                   }
    #define SET_START_LOCATION_FROM_NODE(node, node2) { \
                                        if(node2) { \
                                        scripting::source_location loc = node->get_start_location(); \
                                        scripting::source_location loc2 = node2->get_start_location(); \
                                        loc.m_start_index = loc2.m_start_index; \
                                        loc.m_line_start = loc2.m_line_start; \
                                        loc.m_line_number = loc2.m_line_number; \
                                        loc.m_char_number = loc2.m_char_number; \
                                        node->set_start_location(loc); \
                                        } \
                                    }
    #define SET_END_LOCATION(node, tok) { \
                                        node->set_end_index(tok->get_stopIndex()); \
                                      }
    #define SET_END_LOCATION_FROM_NODE(node, node2) { \
                                            if(node2) { \
                                            node->set_end_index(node2->get_start_location().m_end_index); \
                                            } \
                                            }
    #endif

/* End of Header action.
 * =============================================================================
 */

/* -----------------------------------------
 * Include the ANTLR3 generated header file.
 */
#include    "WNScriptASTParser.hpp"
/* ----------------------------------------- */


/* ============================================================================= */

/* =============================================================================
 * Start of recognizer
 */

using namespace antlr3;
/** \brief Table of all token names in symbolic order, mainly used for
 *         error reporting.
 */
ANTLR_UINT8* WNScriptASTParserTokenNames[60+4]
     = {
        (ANTLR_UINT8*) "<invalid>",       /* String to print to indicate an invalid token */
        (ANTLR_UINT8*) "<EOR>",
        (ANTLR_UINT8*) "<DOWN>",
        (ANTLR_UINT8*) "<UP>",
        (ANTLR_UINT8*) "BOOL",
        (ANTLR_UINT8*) "CHAR",
        (ANTLR_UINT8*) "CHOWN",
        (ANTLR_UINT8*) "CLASS",
        (ANTLR_UINT8*) "COLON",
        (ANTLR_UINT8*) "COMMA",
        (ANTLR_UINT8*) "COMMENT",
        (ANTLR_UINT8*) "DO",
        (ANTLR_UINT8*) "DOUBDEC",
        (ANTLR_UINT8*) "DOUBINC",
        (ANTLR_UINT8*) "ELSE",
        (ANTLR_UINT8*) "ESC_SEQ",
        (ANTLR_UINT8*) "EXPONENT",
        (ANTLR_UINT8*) "FLOAT",
        (ANTLR_UINT8*) "FOR",
        (ANTLR_UINT8*) "HEX_DIGIT",
        (ANTLR_UINT8*) "ID",
        (ANTLR_UINT8*) "IF",
        (ANTLR_UINT8*) "INCLUDE",
        (ANTLR_UINT8*) "INT",
        (ANTLR_UINT8*) "LBRACE",
        (ANTLR_UINT8*) "LBRACKET",
        (ANTLR_UINT8*) "LSQBRACKET",
        (ANTLR_UINT8*) "NULLTOK",
        (ANTLR_UINT8*) "OCTAL_ESC",
        (ANTLR_UINT8*) "OVERRIDE",
        (ANTLR_UINT8*) "RBRACE",
        (ANTLR_UINT8*) "RBRACKET",
        (ANTLR_UINT8*) "RETURN",
        (ANTLR_UINT8*) "RETURN_OWN",
        (ANTLR_UINT8*) "RSQBRACKET",
        (ANTLR_UINT8*) "SEMICOLON",
        (ANTLR_UINT8*) "STRING",
        (ANTLR_UINT8*) "STRUCT",
        (ANTLR_UINT8*) "TYPE",
        (ANTLR_UINT8*) "UNICODE_ESC",
        (ANTLR_UINT8*) "VIRTUAL",
        (ANTLR_UINT8*) "WHILE",
        (ANTLR_UINT8*) "WS",
        (ANTLR_UINT8*) "'!='",
        (ANTLR_UINT8*) "'%'",
        (ANTLR_UINT8*) "'%='",
        (ANTLR_UINT8*) "'&&'",
        (ANTLR_UINT8*) "'*'",
        (ANTLR_UINT8*) "'*='",
        (ANTLR_UINT8*) "'+'",
        (ANTLR_UINT8*) "'+='",
        (ANTLR_UINT8*) "'-'",
        (ANTLR_UINT8*) "'-='",
        (ANTLR_UINT8*) "'.'",
        (ANTLR_UINT8*) "'/'",
        (ANTLR_UINT8*) "'/='",
        (ANTLR_UINT8*) "'<'",
        (ANTLR_UINT8*) "'<='",
        (ANTLR_UINT8*) "'='",
        (ANTLR_UINT8*) "'=='",
        (ANTLR_UINT8*) "'>'",
        (ANTLR_UINT8*) "'>='",
        (ANTLR_UINT8*) "'?'",
        (ANTLR_UINT8*) "'||'"
       };


/** \brief Name of the grammar file that generated this code
 */
static const char fileName[] = "C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g";

/** \brief Return the name of the grammar file that generated this code.
 */
const char* WNScriptASTParser::getGrammarFileName()
{
	return fileName;
}
/** \brief Create a new WNScriptASTParser parser and return a context for it.
 *
 * \param[in] instream Pointer to an input stream interface.
 *
 * \return Pointer to new parser context upon success.
 */
WNScriptASTParser::WNScriptASTParser( StreamType* instream)
    :ImplTraits::BaseParserType(ANTLR_SIZE_HINT, instream, NULL)

{
	// See if we can create a new parser with the standard constructor
	//
	this->init(instream);
}

/** \brief Create a new WNScriptASTParser parser and return a context for it.
 *
 * \param[in] instream Pointer to an input stream interface.
 *
 * \return Pointer to new parser context upon success.
 */
WNScriptASTParser::WNScriptASTParser( StreamType* instream, RecognizerSharedStateType* state)
    :ImplTraits::BaseParserType(ANTLR_SIZE_HINT, instream, state)

{
	this->init(instream );
}

void WNScriptASTParser::init(StreamType* instream)
{
	/* Install the token table
	*/
	this->get_psrstate()->set_tokenNames( WNScriptASTParserTokenNames );


}

void
WNScriptASTParser::reset()
{
    this->get_rec()->reset();
}

/** Free the parser resources
 */
WNScriptASTParser::~WNScriptASTParser()
 {
}

/** Return token names used by this parser
 *
 * The returned pointer is used as an index into the token names table (using the token
 * number as the index).
 *
 * \return Pointer to first char * in the table.
 */
static ANTLR_UINT8**	getTokenNames()
{
        return WNScriptASTParserTokenNames;
}


/* Declare the bitsets
 */
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_TYPE_in_scalarType1116_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_TYPE_in_scalarType1116( FOLLOW_TYPE_in_scalarType1116_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_scalarType_in_type1152_bits[]	= { ANTLR_UINT64_LIT(0x0000000004000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_scalarType_in_type1152( FOLLOW_scalarType_in_type1152_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_LSQBRACKET_in_type1173_bits[]	= { ANTLR_UINT64_LIT(0x0000000400000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LSQBRACKET_in_type1173( FOLLOW_LSQBRACKET_in_type1173_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_RSQBRACKET_in_type1175_bits[]	= { ANTLR_UINT64_LIT(0x0000000004000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RSQBRACKET_in_type1175( FOLLOW_RSQBRACKET_in_type1175_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_type_in_decl1207_bits[]	= { ANTLR_UINT64_LIT(0x0000000000100000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_type_in_decl1207( FOLLOW_type_in_decl1207_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_decl1209_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_ID_in_decl1209( FOLLOW_ID_in_decl1209_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_decl_in_declList1241_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000202) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_decl_in_declList1241( FOLLOW_decl_in_declList1241_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_declList1254_bits[]	= { ANTLR_UINT64_LIT(0x0000004000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_COMMA_in_declList1254( FOLLOW_COMMA_in_declList1254_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_decl_in_declList1258_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000202) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_decl_in_declList1258( FOLLOW_decl_in_declList1258_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_LBRACKET_in_parameterList1290_bits[]	= { ANTLR_UINT64_LIT(0x0000004000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_parameterList1290( FOLLOW_LBRACKET_in_parameterList1290_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_declList_in_parameterList1292_bits[]	= { ANTLR_UINT64_LIT(0x0000000080000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_declList_in_parameterList1292( FOLLOW_declList_in_parameterList1292_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_RBRACKET_in_parameterList1294_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_parameterList1294( FOLLOW_RBRACKET_in_parameterList1294_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_LBRACKET_in_parameterList1311_bits[]	= { ANTLR_UINT64_LIT(0x0000000080000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_parameterList1311( FOLLOW_LBRACKET_in_parameterList1311_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_RBRACKET_in_parameterList1313_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_parameterList1313( FOLLOW_RBRACKET_in_parameterList1313_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_58_in_assign_type1349_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_58_in_assign_type1349( FOLLOW_58_in_assign_type1349_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_50_in_assign_type1363_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_50_in_assign_type1363( FOLLOW_50_in_assign_type1363_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_52_in_assign_type1376_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_52_in_assign_type1376( FOLLOW_52_in_assign_type1376_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_48_in_assign_type1389_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_48_in_assign_type1389( FOLLOW_48_in_assign_type1389_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_55_in_assign_type1402_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_55_in_assign_type1402( FOLLOW_55_in_assign_type1402_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_45_in_assign_type1415_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_45_in_assign_type1415( FOLLOW_45_in_assign_type1415_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_CHOWN_in_assign_type1428_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_CHOWN_in_assign_type1428( FOLLOW_CHOWN_in_assign_type1428_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_unary_ex_in_lvalue1458_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_unary_ex_in_lvalue1458( FOLLOW_unary_ex_in_lvalue1458_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_expr_in_arglist1516_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000202) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_arglist1516( FOLLOW_expr_in_arglist1516_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_CHOWN_in_arglist1542_bits[]	= { ANTLR_UINT64_LIT(0x000800500A923030) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_CHOWN_in_arglist1542( FOLLOW_CHOWN_in_arglist1542_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_expr_in_arglist1546_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000202) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_arglist1546( FOLLOW_expr_in_arglist1546_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_arglist1579_bits[]	= { ANTLR_UINT64_LIT(0x000800500A923272) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_COMMA_in_arglist1579( FOLLOW_COMMA_in_arglist1579_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_CHOWN_in_arglist1621_bits[]	= { ANTLR_UINT64_LIT(0x000800500A923030) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_CHOWN_in_arglist1621( FOLLOW_CHOWN_in_arglist1621_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_expr_in_arglist1625_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000202) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_arglist1625( FOLLOW_expr_in_arglist1625_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_expr_in_arglist1657_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000202) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_arglist1657( FOLLOW_expr_in_arglist1657_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_cond_ex_in_expr1732_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_cond_ex_in_expr1732( FOLLOW_cond_ex_in_expr1732_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_or_ex_in_cond_ex1770_bits[]	= { ANTLR_UINT64_LIT(0x4000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_or_ex_in_cond_ex1770( FOLLOW_or_ex_in_cond_ex1770_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_62_in_cond_ex1793_bits[]	= { ANTLR_UINT64_LIT(0x000800500A923030) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_62_in_cond_ex1793( FOLLOW_62_in_cond_ex1793_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_expr_in_cond_ex1797_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000100) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_cond_ex1797( FOLLOW_expr_in_cond_ex1797_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_COLON_in_cond_ex1799_bits[]	= { ANTLR_UINT64_LIT(0x000800500A923030) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_COLON_in_cond_ex1799( FOLLOW_COLON_in_cond_ex1799_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_cond_ex_in_cond_ex1803_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_cond_ex_in_cond_ex1803( FOLLOW_cond_ex_in_cond_ex1803_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_and_ex_in_or_ex1850_bits[]	= { ANTLR_UINT64_LIT(0x8000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_and_ex_in_or_ex1850( FOLLOW_and_ex_in_or_ex1850_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_63_in_or_ex1867_bits[]	= { ANTLR_UINT64_LIT(0x000800500A923030) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_63_in_or_ex1867( FOLLOW_63_in_or_ex1867_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_and_ex_in_or_ex1871_bits[]	= { ANTLR_UINT64_LIT(0x8000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_and_ex_in_or_ex1871( FOLLOW_and_ex_in_or_ex1871_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_eq_ex_in_and_ex1914_bits[]	= { ANTLR_UINT64_LIT(0x0000400000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_eq_ex_in_and_ex1914( FOLLOW_eq_ex_in_and_ex1914_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_46_in_and_ex1931_bits[]	= { ANTLR_UINT64_LIT(0x000800500A923030) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_46_in_and_ex1931( FOLLOW_46_in_and_ex1931_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_eq_ex_in_and_ex1935_bits[]	= { ANTLR_UINT64_LIT(0x0000400000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_eq_ex_in_and_ex1935( FOLLOW_eq_ex_in_and_ex1935_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_rel_ex_in_eq_ex1974_bits[]	= { ANTLR_UINT64_LIT(0x0800080000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_rel_ex_in_eq_ex1974( FOLLOW_rel_ex_in_eq_ex1974_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_59_in_eq_ex2009_bits[]	= { ANTLR_UINT64_LIT(0x000800500A923030) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_59_in_eq_ex2009( FOLLOW_59_in_eq_ex2009_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_rel_ex_in_eq_ex2013_bits[]	= { ANTLR_UINT64_LIT(0x0800080000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_rel_ex_in_eq_ex2013( FOLLOW_rel_ex_in_eq_ex2013_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_43_in_eq_ex2036_bits[]	= { ANTLR_UINT64_LIT(0x000800500A923030) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_43_in_eq_ex2036( FOLLOW_43_in_eq_ex2036_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_rel_ex_in_eq_ex2040_bits[]	= { ANTLR_UINT64_LIT(0x0800080000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_rel_ex_in_eq_ex2040( FOLLOW_rel_ex_in_eq_ex2040_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_add_ex_in_rel_ex2098_bits[]	= { ANTLR_UINT64_LIT(0x3300000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_add_ex_in_rel_ex2098( FOLLOW_add_ex_in_rel_ex2098_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_56_in_rel_ex2134_bits[]	= { ANTLR_UINT64_LIT(0x000800500A923030) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_56_in_rel_ex2134( FOLLOW_56_in_rel_ex2134_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_add_ex_in_rel_ex2138_bits[]	= { ANTLR_UINT64_LIT(0x3300000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_add_ex_in_rel_ex2138( FOLLOW_add_ex_in_rel_ex2138_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_60_in_rel_ex2162_bits[]	= { ANTLR_UINT64_LIT(0x000800500A923030) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_60_in_rel_ex2162( FOLLOW_60_in_rel_ex2162_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_add_ex_in_rel_ex2166_bits[]	= { ANTLR_UINT64_LIT(0x3300000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_add_ex_in_rel_ex2166( FOLLOW_add_ex_in_rel_ex2166_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_57_in_rel_ex2190_bits[]	= { ANTLR_UINT64_LIT(0x000800500A923030) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_57_in_rel_ex2190( FOLLOW_57_in_rel_ex2190_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_add_ex_in_rel_ex2194_bits[]	= { ANTLR_UINT64_LIT(0x3300000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_add_ex_in_rel_ex2194( FOLLOW_add_ex_in_rel_ex2194_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_61_in_rel_ex2218_bits[]	= { ANTLR_UINT64_LIT(0x000800500A923030) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_61_in_rel_ex2218( FOLLOW_61_in_rel_ex2218_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_add_ex_in_rel_ex2222_bits[]	= { ANTLR_UINT64_LIT(0x3300000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_add_ex_in_rel_ex2222( FOLLOW_add_ex_in_rel_ex2222_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_mult_ex_in_add_ex2283_bits[]	= { ANTLR_UINT64_LIT(0x000A000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_mult_ex_in_add_ex2283( FOLLOW_mult_ex_in_add_ex2283_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_49_in_add_ex2318_bits[]	= { ANTLR_UINT64_LIT(0x000800500A923030) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_49_in_add_ex2318( FOLLOW_49_in_add_ex2318_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_mult_ex_in_add_ex2322_bits[]	= { ANTLR_UINT64_LIT(0x000A000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_mult_ex_in_add_ex2322( FOLLOW_mult_ex_in_add_ex2322_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_51_in_add_ex2344_bits[]	= { ANTLR_UINT64_LIT(0x000800500A923030) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_51_in_add_ex2344( FOLLOW_51_in_add_ex2344_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_mult_ex_in_add_ex2348_bits[]	= { ANTLR_UINT64_LIT(0x000A000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_mult_ex_in_add_ex2348( FOLLOW_mult_ex_in_add_ex2348_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_unary_ex_in_mult_ex2407_bits[]	= { ANTLR_UINT64_LIT(0x0040900000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_unary_ex_in_mult_ex2407( FOLLOW_unary_ex_in_mult_ex2407_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_47_in_mult_ex2446_bits[]	= { ANTLR_UINT64_LIT(0x000800500A923030) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_47_in_mult_ex2446( FOLLOW_47_in_mult_ex2446_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_unary_ex_in_mult_ex2450_bits[]	= { ANTLR_UINT64_LIT(0x0040900000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_unary_ex_in_mult_ex2450( FOLLOW_unary_ex_in_mult_ex2450_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_54_in_mult_ex2476_bits[]	= { ANTLR_UINT64_LIT(0x000800500A923030) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_54_in_mult_ex2476( FOLLOW_54_in_mult_ex2476_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_unary_ex_in_mult_ex2480_bits[]	= { ANTLR_UINT64_LIT(0x0040900000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_unary_ex_in_mult_ex2480( FOLLOW_unary_ex_in_mult_ex2480_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_44_in_mult_ex2506_bits[]	= { ANTLR_UINT64_LIT(0x000800500A923030) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_44_in_mult_ex2506( FOLLOW_44_in_mult_ex2506_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_unary_ex_in_mult_ex2510_bits[]	= { ANTLR_UINT64_LIT(0x0040900000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_unary_ex_in_mult_ex2510( FOLLOW_unary_ex_in_mult_ex2510_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_post_ex_in_unary_ex2562_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_post_ex_in_unary_ex2562( FOLLOW_post_ex_in_unary_ex2562_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_DOUBINC_in_unary_ex2575_bits[]	= { ANTLR_UINT64_LIT(0x000800500A923030) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_DOUBINC_in_unary_ex2575( FOLLOW_DOUBINC_in_unary_ex2575_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_unary_ex_in_unary_ex2579_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_unary_ex_in_unary_ex2579( FOLLOW_unary_ex_in_unary_ex2579_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_DOUBDEC_in_unary_ex2592_bits[]	= { ANTLR_UINT64_LIT(0x000800500A923030) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_DOUBDEC_in_unary_ex2592( FOLLOW_DOUBDEC_in_unary_ex2592_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_unary_ex_in_unary_ex2596_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_unary_ex_in_unary_ex2596( FOLLOW_unary_ex_in_unary_ex2596_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_51_in_unary_ex2609_bits[]	= { ANTLR_UINT64_LIT(0x000800500A923030) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_51_in_unary_ex2609( FOLLOW_51_in_unary_ex2609_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_unary_ex_in_unary_ex2613_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_unary_ex_in_unary_ex2613( FOLLOW_unary_ex_in_unary_ex2613_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_LSQBRACKET_in_post_ex_proper2651_bits[]	= { ANTLR_UINT64_LIT(0x000800500A923030) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LSQBRACKET_in_post_ex_proper2651( FOLLOW_LSQBRACKET_in_post_ex_proper2651_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_expr_in_post_ex_proper2655_bits[]	= { ANTLR_UINT64_LIT(0x0000000400000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_post_ex_proper2655( FOLLOW_expr_in_post_ex_proper2655_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_RSQBRACKET_in_post_ex_proper2659_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RSQBRACKET_in_post_ex_proper2659( FOLLOW_RSQBRACKET_in_post_ex_proper2659_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_LBRACKET_in_post_ex_proper2674_bits[]	= { ANTLR_UINT64_LIT(0x0000000080000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_post_ex_proper2674( FOLLOW_LBRACKET_in_post_ex_proper2674_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_RBRACKET_in_post_ex_proper2678_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_post_ex_proper2678( FOLLOW_RBRACKET_in_post_ex_proper2678_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_LBRACKET_in_post_ex_proper2706_bits[]	= { ANTLR_UINT64_LIT(0x000800500A923070) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_post_ex_proper2706( FOLLOW_LBRACKET_in_post_ex_proper2706_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_arglist_in_post_ex_proper2712_bits[]	= { ANTLR_UINT64_LIT(0x0000000080000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_arglist_in_post_ex_proper2712( FOLLOW_arglist_in_post_ex_proper2712_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_RBRACKET_in_post_ex_proper2716_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_post_ex_proper2716( FOLLOW_RBRACKET_in_post_ex_proper2716_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_53_in_post_ex_proper2729_bits[]	= { ANTLR_UINT64_LIT(0x0000000000100000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_53_in_post_ex_proper2729( FOLLOW_53_in_post_ex_proper2729_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_post_ex_proper2733_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_ID_in_post_ex_proper2733( FOLLOW_ID_in_post_ex_proper2733_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_DOUBINC_in_post_ex_proper2760_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_DOUBINC_in_post_ex_proper2760( FOLLOW_DOUBINC_in_post_ex_proper2760_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_DOUBDEC_in_post_ex_proper2789_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_DOUBDEC_in_post_ex_proper2789( FOLLOW_DOUBDEC_in_post_ex_proper2789_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_prim_ex_in_post_ex2842_bits[]	= { ANTLR_UINT64_LIT(0x0020000006003002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_prim_ex_in_post_ex2842( FOLLOW_prim_ex_in_post_ex2842_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_post_ex_proper_in_post_ex2861_bits[]	= { ANTLR_UINT64_LIT(0x0020000006003002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_post_ex_proper_in_post_ex2861( FOLLOW_post_ex_proper_in_post_ex2861_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_lvalue_in_assignment2890_bits[]	= { ANTLR_UINT64_LIT(0x0495200000000042) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_lvalue_in_assignment2890( FOLLOW_lvalue_in_assignment2890_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_assign_type_in_assignment2903_bits[]	= { ANTLR_UINT64_LIT(0x000800500A923030) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_assign_type_in_assignment2903( FOLLOW_assign_type_in_assignment2903_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_expr_in_assignment2905_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_assignment2905( FOLLOW_expr_in_assignment2905_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_INT_in_constant2938_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_INT_in_constant2938( FOLLOW_INT_in_constant2938_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_FLOAT_in_constant2954_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_FLOAT_in_constant2954( FOLLOW_FLOAT_in_constant2954_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_CHAR_in_constant2968_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_CHAR_in_constant2968( FOLLOW_CHAR_in_constant2968_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_STRING_in_constant2983_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_STRING_in_constant2983( FOLLOW_STRING_in_constant2983_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_BOOL_in_constant2995_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_BOOL_in_constant2995( FOLLOW_BOOL_in_constant2995_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_prim_ex3027_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_ID_in_prim_ex3027( FOLLOW_ID_in_prim_ex3027_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_LBRACKET_in_prim_ex3042_bits[]	= { ANTLR_UINT64_LIT(0x000800500A923030) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_prim_ex3042( FOLLOW_LBRACKET_in_prim_ex3042_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_expr_in_prim_ex3046_bits[]	= { ANTLR_UINT64_LIT(0x0000000080000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_prim_ex3046( FOLLOW_expr_in_prim_ex3046_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_RBRACKET_in_prim_ex3050_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_prim_ex3050( FOLLOW_RBRACKET_in_prim_ex3050_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_constant_in_prim_ex3065_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_constant_in_prim_ex3065( FOLLOW_constant_in_prim_ex3065_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_scalarType_in_prim_ex3080_bits[]	= { ANTLR_UINT64_LIT(0x0000000006000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_scalarType_in_prim_ex3080( FOLLOW_scalarType_in_prim_ex3080_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_structInit_in_prim_ex3112_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_structInit_in_prim_ex3112( FOLLOW_structInit_in_prim_ex3112_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_arrayInit_in_prim_ex3136_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_arrayInit_in_prim_ex3136( FOLLOW_arrayInit_in_prim_ex3136_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_NULLTOK_in_prim_ex3165_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_NULLTOK_in_prim_ex3165( FOLLOW_NULLTOK_in_prim_ex3165_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_LBRACKET_in_structInit3194_bits[]	= { ANTLR_UINT64_LIT(0x0000000080000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_structInit3194( FOLLOW_LBRACKET_in_structInit3194_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_RBRACKET_in_structInit3198_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_structInit3198( FOLLOW_RBRACKET_in_structInit3198_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_LBRACKET_in_structInit3210_bits[]	= { ANTLR_UINT64_LIT(0x000800500A923030) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_structInit3210( FOLLOW_LBRACKET_in_structInit3210_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_expr_in_structInit3214_bits[]	= { ANTLR_UINT64_LIT(0x0000000080000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_structInit3214( FOLLOW_expr_in_structInit3214_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_RBRACKET_in_structInit3218_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_structInit3218( FOLLOW_RBRACKET_in_structInit3218_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_LSQBRACKET_in_arrayInit3280_bits[]	= { ANTLR_UINT64_LIT(0x000800500A923030) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LSQBRACKET_in_arrayInit3280( FOLLOW_LSQBRACKET_in_arrayInit3280_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_expr_in_arrayInit3284_bits[]	= { ANTLR_UINT64_LIT(0x0000000400000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_arrayInit3284( FOLLOW_expr_in_arrayInit3284_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_RSQBRACKET_in_arrayInit3286_bits[]	= { ANTLR_UINT64_LIT(0x0000000006000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RSQBRACKET_in_arrayInit3286( FOLLOW_RSQBRACKET_in_arrayInit3286_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_LSQBRACKET_in_arrayInit3310_bits[]	= { ANTLR_UINT64_LIT(0x0000000400000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LSQBRACKET_in_arrayInit3310( FOLLOW_LSQBRACKET_in_arrayInit3310_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_RSQBRACKET_in_arrayInit3312_bits[]	= { ANTLR_UINT64_LIT(0x0000000006000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RSQBRACKET_in_arrayInit3312( FOLLOW_RSQBRACKET_in_arrayInit3312_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_LSQBRACKET_in_arrayInit3350_bits[]	= { ANTLR_UINT64_LIT(0x0000000400000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LSQBRACKET_in_arrayInit3350( FOLLOW_LSQBRACKET_in_arrayInit3350_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_RSQBRACKET_in_arrayInit3352_bits[]	= { ANTLR_UINT64_LIT(0x0000000006000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RSQBRACKET_in_arrayInit3352( FOLLOW_RSQBRACKET_in_arrayInit3352_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_LBRACKET_in_arrayInit3393_bits[]	= { ANTLR_UINT64_LIT(0x0000000080000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_arrayInit3393( FOLLOW_LBRACKET_in_arrayInit3393_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_RBRACKET_in_arrayInit3397_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_arrayInit3397( FOLLOW_RBRACKET_in_arrayInit3397_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_LBRACKET_in_arrayInit3431_bits[]	= { ANTLR_UINT64_LIT(0x000800500A923030) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_arrayInit3431( FOLLOW_LBRACKET_in_arrayInit3431_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_expr_in_arrayInit3435_bits[]	= { ANTLR_UINT64_LIT(0x0000000080000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_arrayInit3435( FOLLOW_expr_in_arrayInit3435_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_RBRACKET_in_arrayInit3439_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_arrayInit3439( FOLLOW_RBRACKET_in_arrayInit3439_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_decl_in_declaration3484_bits[]	= { ANTLR_UINT64_LIT(0x0400000000000040) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_decl_in_declaration3484( FOLLOW_decl_in_declaration3484_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_58_in_declaration3519_bits[]	= { ANTLR_UINT64_LIT(0x000800500A923030) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_58_in_declaration3519( FOLLOW_58_in_declaration3519_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_expr_in_declaration3526_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_declaration3526( FOLLOW_expr_in_declaration3526_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_CHOWN_in_declaration3552_bits[]	= { ANTLR_UINT64_LIT(0x000800500A923030) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_CHOWN_in_declaration3552( FOLLOW_CHOWN_in_declaration3552_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_expr_in_declaration3559_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_declaration3559( FOLLOW_expr_in_declaration3559_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_declaration_in_instructionScalar3608_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_declaration_in_instructionScalar3608( FOLLOW_declaration_in_instructionScalar3608_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_assignment_in_instructionScalar3621_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_assignment_in_instructionScalar3621( FOLLOW_assignment_in_instructionScalar3621_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_RETURN_in_returnInst3653_bits[]	= { ANTLR_UINT64_LIT(0x000800500A923030) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RETURN_in_returnInst3653( FOLLOW_RETURN_in_returnInst3653_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_expr_in_returnInst3655_bits[]	= { ANTLR_UINT64_LIT(0x0000000800000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_returnInst3655( FOLLOW_expr_in_returnInst3655_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_SEMICOLON_in_returnInst3659_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SEMICOLON_in_returnInst3659( FOLLOW_SEMICOLON_in_returnInst3659_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_RETURN_in_returnInst3673_bits[]	= { ANTLR_UINT64_LIT(0x0000000800000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RETURN_in_returnInst3673( FOLLOW_RETURN_in_returnInst3673_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_SEMICOLON_in_returnInst3677_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SEMICOLON_in_returnInst3677( FOLLOW_SEMICOLON_in_returnInst3677_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_RETURN_OWN_in_returnInst3691_bits[]	= { ANTLR_UINT64_LIT(0x000800500A923030) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RETURN_OWN_in_returnInst3691( FOLLOW_RETURN_OWN_in_returnInst3691_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_expr_in_returnInst3693_bits[]	= { ANTLR_UINT64_LIT(0x0000000800000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_returnInst3693( FOLLOW_expr_in_returnInst3693_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_SEMICOLON_in_returnInst3697_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SEMICOLON_in_returnInst3697( FOLLOW_SEMICOLON_in_returnInst3697_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_WHILE_in_whileInst3735_bits[]	= { ANTLR_UINT64_LIT(0x0000000002000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_WHILE_in_whileInst3735( FOLLOW_WHILE_in_whileInst3735_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_LBRACKET_in_whileInst3737_bits[]	= { ANTLR_UINT64_LIT(0x000800500A923030) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_whileInst3737( FOLLOW_LBRACKET_in_whileInst3737_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_expr_in_whileInst3739_bits[]	= { ANTLR_UINT64_LIT(0x0000000080000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_whileInst3739( FOLLOW_expr_in_whileInst3739_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_RBRACKET_in_whileInst3741_bits[]	= { ANTLR_UINT64_LIT(0x0000000001000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_whileInst3741( FOLLOW_RBRACKET_in_whileInst3741_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_body_in_whileInst3743_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_body_in_whileInst3743( FOLLOW_body_in_whileInst3743_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_DO_in_doInst3779_bits[]	= { ANTLR_UINT64_LIT(0x0000000001000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_DO_in_doInst3779( FOLLOW_DO_in_doInst3779_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_body_in_doInst3781_bits[]	= { ANTLR_UINT64_LIT(0x0000020000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_body_in_doInst3781( FOLLOW_body_in_doInst3781_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_WHILE_in_doInst3783_bits[]	= { ANTLR_UINT64_LIT(0x0000000002000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_WHILE_in_doInst3783( FOLLOW_WHILE_in_doInst3783_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_LBRACKET_in_doInst3785_bits[]	= { ANTLR_UINT64_LIT(0x000800500A923030) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_doInst3785( FOLLOW_LBRACKET_in_doInst3785_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_expr_in_doInst3787_bits[]	= { ANTLR_UINT64_LIT(0x0000000080000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_doInst3787( FOLLOW_expr_in_doInst3787_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_RBRACKET_in_doInst3789_bits[]	= { ANTLR_UINT64_LIT(0x0000000800000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_doInst3789( FOLLOW_RBRACKET_in_doInst3789_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_SEMICOLON_in_doInst3791_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SEMICOLON_in_doInst3791( FOLLOW_SEMICOLON_in_doInst3791_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_FOR_in_forInst3823_bits[]	= { ANTLR_UINT64_LIT(0x0000000002000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_FOR_in_forInst3823( FOLLOW_FOR_in_forInst3823_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_LBRACKET_in_forInst3825_bits[]	= { ANTLR_UINT64_LIT(0x000800580A923030) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_forInst3825( FOLLOW_LBRACKET_in_forInst3825_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_instructionScalar_in_forInst3853_bits[]	= { ANTLR_UINT64_LIT(0x0000000800000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_instructionScalar_in_forInst3853( FOLLOW_instructionScalar_in_forInst3853_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_SEMICOLON_in_forInst3859_bits[]	= { ANTLR_UINT64_LIT(0x000800580A923030) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SEMICOLON_in_forInst3859( FOLLOW_SEMICOLON_in_forInst3859_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_expr_in_forInst3884_bits[]	= { ANTLR_UINT64_LIT(0x0000000800000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_forInst3884( FOLLOW_expr_in_forInst3884_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_SEMICOLON_in_forInst3898_bits[]	= { ANTLR_UINT64_LIT(0x000800508A923030) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SEMICOLON_in_forInst3898( FOLLOW_SEMICOLON_in_forInst3898_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_instructionScalar_in_forInst3923_bits[]	= { ANTLR_UINT64_LIT(0x0000000080000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_instructionScalar_in_forInst3923( FOLLOW_instructionScalar_in_forInst3923_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_RBRACKET_in_forInst3929_bits[]	= { ANTLR_UINT64_LIT(0x0000000001000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_forInst3929( FOLLOW_RBRACKET_in_forInst3929_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_body_in_forInst3954_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_body_in_forInst3954( FOLLOW_body_in_forInst3954_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_ELSE_in_elsemiddle4002_bits[]	= { ANTLR_UINT64_LIT(0x0000000000200000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_ELSE_in_elsemiddle4002( FOLLOW_ELSE_in_elsemiddle4002_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_IF_in_elsemiddle4004_bits[]	= { ANTLR_UINT64_LIT(0x0000000002000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_IF_in_elsemiddle4004( FOLLOW_IF_in_elsemiddle4004_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_LBRACKET_in_elsemiddle4006_bits[]	= { ANTLR_UINT64_LIT(0x000800500A923030) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_elsemiddle4006( FOLLOW_LBRACKET_in_elsemiddle4006_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_expr_in_elsemiddle4008_bits[]	= { ANTLR_UINT64_LIT(0x0000000080000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_elsemiddle4008( FOLLOW_expr_in_elsemiddle4008_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_RBRACKET_in_elsemiddle4010_bits[]	= { ANTLR_UINT64_LIT(0x0000000001000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_elsemiddle4010( FOLLOW_RBRACKET_in_elsemiddle4010_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_body_in_elsemiddle4012_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_body_in_elsemiddle4012( FOLLOW_body_in_elsemiddle4012_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_ELSE_in_endif4045_bits[]	= { ANTLR_UINT64_LIT(0x0000000001000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_ELSE_in_endif4045( FOLLOW_ELSE_in_endif4045_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_body_in_endif4047_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_body_in_endif4047( FOLLOW_body_in_endif4047_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_IF_in_ifInst4077_bits[]	= { ANTLR_UINT64_LIT(0x0000000002000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_IF_in_ifInst4077( FOLLOW_IF_in_ifInst4077_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_LBRACKET_in_ifInst4079_bits[]	= { ANTLR_UINT64_LIT(0x000800500A923030) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_ifInst4079( FOLLOW_LBRACKET_in_ifInst4079_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_expr_in_ifInst4081_bits[]	= { ANTLR_UINT64_LIT(0x0000000080000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_expr_in_ifInst4081( FOLLOW_expr_in_ifInst4081_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_RBRACKET_in_ifInst4083_bits[]	= { ANTLR_UINT64_LIT(0x0000000001000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_ifInst4083( FOLLOW_RBRACKET_in_ifInst4083_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_body_in_ifInst4085_bits[]	= { ANTLR_UINT64_LIT(0x0000000000004002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_body_in_ifInst4085( FOLLOW_body_in_ifInst4085_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_elsemiddle_in_ifInst4102_bits[]	= { ANTLR_UINT64_LIT(0x0000000000004002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_elsemiddle_in_ifInst4102( FOLLOW_elsemiddle_in_ifInst4102_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_endif_in_ifInst4122_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_endif_in_ifInst4122( FOLLOW_endif_in_ifInst4122_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_ifInst_in_instruction4156_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_ifInst_in_instruction4156( FOLLOW_ifInst_in_instruction4156_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_whileInst_in_instruction4177_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_whileInst_in_instruction4177( FOLLOW_whileInst_in_instruction4177_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_doInst_in_instruction4194_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_doInst_in_instruction4194( FOLLOW_doInst_in_instruction4194_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_forInst_in_instruction4214_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_forInst_in_instruction4214( FOLLOW_forInst_in_instruction4214_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_instructionScalar_in_instruction4234_bits[]	= { ANTLR_UINT64_LIT(0x0000000800000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_instructionScalar_in_instruction4234( FOLLOW_instructionScalar_in_instruction4234_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_SEMICOLON_in_instruction4236_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SEMICOLON_in_instruction4236( FOLLOW_SEMICOLON_in_instruction4236_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_returnInst_in_instruction4249_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_returnInst_in_instruction4249( FOLLOW_returnInst_in_instruction4249_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_instruction_in_instruction_list4281_bits[]	= { ANTLR_UINT64_LIT(0x000802530AB63832) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_instruction_in_instruction_list4281( FOLLOW_instruction_in_instruction_list4281_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_instruction_in_instruction_list4297_bits[]	= { ANTLR_UINT64_LIT(0x000802530AB63832) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_instruction_in_instruction_list4297( FOLLOW_instruction_in_instruction_list4297_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_LBRACE_in_body4331_bits[]	= { ANTLR_UINT64_LIT(0x0000000040000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACE_in_body4331( FOLLOW_LBRACE_in_body4331_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_RBRACE_in_body4335_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACE_in_body4335( FOLLOW_RBRACE_in_body4335_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_LBRACE_in_body4350_bits[]	= { ANTLR_UINT64_LIT(0x000802530AB63830) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACE_in_body4350( FOLLOW_LBRACE_in_body4350_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_instruction_list_in_body4352_bits[]	= { ANTLR_UINT64_LIT(0x0000000040000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_instruction_list_in_body4352( FOLLOW_instruction_list_in_body4352_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_RBRACE_in_body4356_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACE_in_body4356( FOLLOW_RBRACE_in_body4356_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_decl_in_function4386_bits[]	= { ANTLR_UINT64_LIT(0x0000000002000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_decl_in_function4386( FOLLOW_decl_in_function4386_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_parameterList_in_function4388_bits[]	= { ANTLR_UINT64_LIT(0x0000000001000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_parameterList_in_function4388( FOLLOW_parameterList_in_function4388_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_body_in_function4390_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_body_in_function4390( FOLLOW_body_in_function4390_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_STRUCT_in_structDecl4420_bits[]	= { ANTLR_UINT64_LIT(0x0000004000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_STRUCT_in_structDecl4420( FOLLOW_STRUCT_in_structDecl4420_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_TYPE_in_structDecl4422_bits[]	= { ANTLR_UINT64_LIT(0x0000000001000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_TYPE_in_structDecl4422( FOLLOW_TYPE_in_structDecl4422_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_LBRACE_in_structDecl4438_bits[]	= { ANTLR_UINT64_LIT(0x0000004040000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACE_in_structDecl4438( FOLLOW_LBRACE_in_structDecl4438_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_declaration_in_structDecl4443_bits[]	= { ANTLR_UINT64_LIT(0x0000000800000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_declaration_in_structDecl4443( FOLLOW_declaration_in_structDecl4443_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_SEMICOLON_in_structDecl4447_bits[]	= { ANTLR_UINT64_LIT(0x0000004040000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SEMICOLON_in_structDecl4447( FOLLOW_SEMICOLON_in_structDecl4447_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_RBRACE_in_structDecl4452_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACE_in_structDecl4452( FOLLOW_RBRACE_in_structDecl4452_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_CLASS_in_classDecl4505_bits[]	= { ANTLR_UINT64_LIT(0x0000004000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_CLASS_in_classDecl4505( FOLLOW_CLASS_in_classDecl4505_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_TYPE_in_classDecl4509_bits[]	= { ANTLR_UINT64_LIT(0x0000000001000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_TYPE_in_classDecl4509( FOLLOW_TYPE_in_classDecl4509_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_CLASS_in_classDecl4529_bits[]	= { ANTLR_UINT64_LIT(0x0000004000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_CLASS_in_classDecl4529( FOLLOW_CLASS_in_classDecl4529_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_TYPE_in_classDecl4533_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000100) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_TYPE_in_classDecl4533( FOLLOW_TYPE_in_classDecl4533_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_COLON_in_classDecl4535_bits[]	= { ANTLR_UINT64_LIT(0x0000004000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_COLON_in_classDecl4535( FOLLOW_COLON_in_classDecl4535_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_TYPE_in_classDecl4539_bits[]	= { ANTLR_UINT64_LIT(0x0000000001000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_TYPE_in_classDecl4539( FOLLOW_TYPE_in_classDecl4539_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_LBRACE_in_classDecl4566_bits[]	= { ANTLR_UINT64_LIT(0x0000014060000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_LBRACE_in_classDecl4566( FOLLOW_LBRACE_in_classDecl4566_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_declaration_in_classDecl4609_bits[]	= { ANTLR_UINT64_LIT(0x0000000800000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_declaration_in_classDecl4609( FOLLOW_declaration_in_classDecl4609_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_SEMICOLON_in_classDecl4613_bits[]	= { ANTLR_UINT64_LIT(0x0000014060000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_SEMICOLON_in_classDecl4613( FOLLOW_SEMICOLON_in_classDecl4613_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_function_in_classDecl4639_bits[]	= { ANTLR_UINT64_LIT(0x0000014060000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_function_in_classDecl4639( FOLLOW_function_in_classDecl4639_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_VIRTUAL_in_classDecl4668_bits[]	= { ANTLR_UINT64_LIT(0x0000004000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_VIRTUAL_in_classDecl4668( FOLLOW_VIRTUAL_in_classDecl4668_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_function_in_classDecl4672_bits[]	= { ANTLR_UINT64_LIT(0x0000014060000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_function_in_classDecl4672( FOLLOW_function_in_classDecl4672_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_OVERRIDE_in_classDecl4698_bits[]	= { ANTLR_UINT64_LIT(0x0000004000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_OVERRIDE_in_classDecl4698( FOLLOW_OVERRIDE_in_classDecl4698_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_function_in_classDecl4702_bits[]	= { ANTLR_UINT64_LIT(0x0000014060000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_function_in_classDecl4702( FOLLOW_function_in_classDecl4702_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_RBRACE_in_classDecl4738_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_RBRACE_in_classDecl4738( FOLLOW_RBRACE_in_classDecl4738_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_INCLUDE_in_inc4768_bits[]	= { ANTLR_UINT64_LIT(0x0000001000000000) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_INCLUDE_in_inc4768( FOLLOW_INCLUDE_in_inc4768_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_STRING_in_inc4770_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_STRING_in_inc4770( FOLLOW_STRING_in_inc4770_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_function_in_program4816_bits[]	= { ANTLR_UINT64_LIT(0x0000006000400082) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_function_in_program4816( FOLLOW_function_in_program4816_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_structDecl_in_program4838_bits[]	= { ANTLR_UINT64_LIT(0x0000006000400082) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_structDecl_in_program4838( FOLLOW_structDecl_in_program4838_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_classDecl_in_program4858_bits[]	= { ANTLR_UINT64_LIT(0x0000006000400082) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_classDecl_in_program4858( FOLLOW_classDecl_in_program4858_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTParser  */
static	ANTLR_BITWORD FOLLOW_inc_in_program4879_bits[]	= { ANTLR_UINT64_LIT(0x0000006000400082) };
static  WNScriptASTParserImplTraits::BitsetListType FOLLOW_inc_in_program4879( FOLLOW_inc_in_program4879_bits, 1 );



/* =========================================================================
 * DFA tables for the parser
 */
/** Static dfa state tables for Cyclic dfa:
 *    486:1: instructionScalar returns [scripting::instruction* node] : ( declaration | assignment );
 */
static const ANTLR_INT32 dfa29_eot[7] =
    {
	-1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR_INT32 dfa29_eof[7] =
    {
	-1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR_INT32 dfa29_min[7] =
    {
	4, 20, -1, 4, -1, 20, 34
    };
static const ANTLR_INT32 dfa29_max[7] =
    {
	51, 26, -1, 51, -1, 26, 34
    };
static const ANTLR_INT32 dfa29_accept[7] =
    {
	-1, -1, 2, -1, 1, -1, -1
    };
static const ANTLR_INT32 dfa29_special[7] =
    {
	-1, -1, -1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
static const ANTLR_INT32* dfa29_T_empty	 =   NULL;

static const ANTLR_INT32 dfa29_T0[] =
    {
	2, 2, -1, -1, -1, -1, -1, -1, 2, 2, -1, -1, -1, 2, -1, -1, 2, -1, -1, 2, 
	-1, 2, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, 1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 2
    };
static const ANTLR_INT32 dfa29_T1[] =
    {
	2, 2, -1, -1, -1, -1, -1, -1, 2, 2, -1, -1, -1, 2, -1, -1, 2, -1, -1, 2, 
	-1, 2, -1, 2, -1, -1, -1, -1, -1, -1, 5, -1, 2, -1, 2, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 2
    };
static const ANTLR_INT32 dfa29_T2[] =
    {
	4, -1, -1, -1, -1, 2, 3
    };
static const ANTLR_INT32 dfa29_T3[] =
    {
	4, -1, -1, -1, -1, 2, 6
    };
static const ANTLR_INT32 dfa29_T4[] =
    {
	5
    };


/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR_INT32 * const dfa29_transitions[] =
{
    dfa29_T0, dfa29_T2, NULL, dfa29_T1, NULL, dfa29_T3, dfa29_T4
};


/* Declare tracking structure for Cyclic DFA 29
 */
class WNScriptASTParserCyclicDFA29 : public CyclicDFA< WNScriptASTParserImplTraits, WNScriptASTParser >, public WNScriptASTParserTokens
{
public:
	typedef CyclicDFA< WNScriptASTParserImplTraits, WNScriptASTParser >  BaseType;
	typedef BaseType::ContextType CtxType;

private:
	

public:
	WNScriptASTParserCyclicDFA29( ANTLR_INT32	decisionNumber
					, const ANTLR_UCHAR*	description
					, const ANTLR_INT32* const	eot
					, const ANTLR_INT32* const	eof
					, const ANTLR_INT32* const	min
					, const ANTLR_INT32* const	max
					, const ANTLR_INT32* const	accept
					, const ANTLR_INT32* const	special
					, const ANTLR_INT32* const *const	transition)
					:BaseType( decisionNumber, description, eot, eof, min, max, accept,
								special, transition )
	{
		
	}

};

static WNScriptASTParserCyclicDFA29  cdfa29(
	    29,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const ANTLR_UCHAR*)"486:1: instructionScalar returns [scripting::instruction* node] : ( declaration | assignment );",
	    dfa29_eot,	    /* EOT table			    */
	    dfa29_eof,	    /* EOF table			    */
	    dfa29_min,	    /* Minimum tokens for each state    */
	    dfa29_max,	    /* Maximum tokens for each state    */
	    dfa29_accept,	/* Accept table			    */
	    dfa29_special,	/* Special transition states	    */
	    dfa29_transitions	/* Table of transition tables	    */

	);


/* End of Cyclic DFA 29
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 604:17: ( (a= declaration SEMICOLON ) | (b= function ) | ( VIRTUAL h= function ) | ( OVERRIDE i= function ) )*
 */
static const ANTLR_INT32 dfa41_eot[10] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR_INT32 dfa41_eof[10] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR_INT32 dfa41_min[10] =
    {
	29, -1, 20, -1, -1, 34, 6, 20, -1, -1
    };
static const ANTLR_INT32 dfa41_max[10] =
    {
	40, -1, 26, -1, -1, 34, 58, 26, -1, -1
    };
static const ANTLR_INT32 dfa41_accept[10] =
    {
	-1, 5, -1, 3, 4, -1, -1, -1, 1, 2
    };
static const ANTLR_INT32 dfa41_special[10] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
static const ANTLR_INT32* dfa41_T_empty	 =   NULL;

static const ANTLR_INT32 dfa41_T0[] =
    {
	8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8
    };
static const ANTLR_INT32 dfa41_T1[] =
    {
	6, -1, -1, -1, -1, -1, 5
    };
static const ANTLR_INT32 dfa41_T2[] =
    {
	4, 1, -1, -1, -1, -1, -1, -1, -1, 2, -1, 3
    };
static const ANTLR_INT32 dfa41_T3[] =
    {
	7
    };


/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR_INT32 * const dfa41_transitions[] =
{
    dfa41_T2, NULL, dfa41_T1, NULL, NULL, dfa41_T3, dfa41_T0, dfa41_T1, 
    NULL, NULL
};


/* Declare tracking structure for Cyclic DFA 41
 */
class WNScriptASTParserCyclicDFA41 : public CyclicDFA< WNScriptASTParserImplTraits, WNScriptASTParser >, public WNScriptASTParserTokens
{
public:
	typedef CyclicDFA< WNScriptASTParserImplTraits, WNScriptASTParser >  BaseType;
	typedef BaseType::ContextType CtxType;

private:
	

public:
	WNScriptASTParserCyclicDFA41( ANTLR_INT32	decisionNumber
					, const ANTLR_UCHAR*	description
					, const ANTLR_INT32* const	eot
					, const ANTLR_INT32* const	eof
					, const ANTLR_INT32* const	min
					, const ANTLR_INT32* const	max
					, const ANTLR_INT32* const	accept
					, const ANTLR_INT32* const	special
					, const ANTLR_INT32* const *const	transition)
					:BaseType( decisionNumber, description, eot, eof, min, max, accept,
								special, transition )
	{
		
	}

};

static WNScriptASTParserCyclicDFA41  cdfa41(
	    41,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const ANTLR_UCHAR*)"()* loopback of 604:17: ( (a= declaration SEMICOLON ) | (b= function ) | ( VIRTUAL h= function ) | ( OVERRIDE i= function ) )*",
	    dfa41_eot,	    /* EOT table			    */
	    dfa41_eof,	    /* EOF table			    */
	    dfa41_min,	    /* Minimum tokens for each state    */
	    dfa41_max,	    /* Maximum tokens for each state    */
	    dfa41_accept,	/* Accept table			    */
	    dfa41_special,	/* Special transition states	    */
	    dfa41_transitions	/* Table of transition tables	    */

	);


/* End of Cyclic DFA 41
 * ---------------------
 */ 
/* =========================================================================
 * End of DFA tables for the parser
 */

/* ==============================================
 * Parsing rules
 */
/**
 * $ANTLR start scalarType
 * C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:231:1: scalarType returns [scripting::type_node* node] : TYPE ;
 */
scripting::type_node*
WNScriptASTParser::scalarType()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    scripting::type_node* node;


    const ImplTraits::CommonTokenType* TYPE1 = NULL;

    /* Initialize rule variables
     */
     


        node = wn_nullptr;


 
    {
        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:235:5: ( TYPE )
        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:235:9: TYPE
        {
            TYPE1 =  this->matchToken(TYPE, &FOLLOW_TYPE_in_scalarType1116);
            if  (this->hasException())
            {
                goto rulescalarTypeEx;
            }


            {
                 node = m_allocator->make_allocated<scripting::type_node>(m_allocator, (TYPE1->getText()).c_str()); SET_LOCATION(node, TYPE1); 
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto rulescalarTypeEx; /* Prevent compiler warnings */
    rulescalarTypeEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}
/* $ANTLR end scalarType */

/**
 * $ANTLR start type
 * C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:238:1: type returns [scripting::type_node* node] : scalarType ( LSQBRACKET RSQBRACKET )* ;
 */
scripting::type_node*
WNScriptASTParser::type()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    scripting::type_node* node;


    const ImplTraits::CommonTokenType* RSQBRACKET3 = NULL;
    scripting::type_node* scalarType2;
    /* Initialize rule variables
     */
     


        node = wn_nullptr;


 
    {
        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:242:5: ( scalarType ( LSQBRACKET RSQBRACKET )* )
        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:242:10: scalarType ( LSQBRACKET RSQBRACKET )*
        {
            this->followPush(FOLLOW_scalarType_in_type1152);
            scalarType2=scalarType();

            this->followPop();
            if  (this->hasException())
            {
                goto ruletypeEx;
            }


            {
                 node = scalarType2
                ; SET_LOCATION_FROM_NODE(node, scalarType2
                ); 
            }


            // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:243:17: ( LSQBRACKET RSQBRACKET )*

            for (;;)
            {
                int alt1=2;
                switch ( this->LA(1) )
                {
                case LSQBRACKET:
                	{
                		alt1=1;
                	}
                    break;

                }

                switch (alt1)
                {
            	case 1:
            	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:243:18: LSQBRACKET RSQBRACKET
            	    {
            	         this->matchToken(LSQBRACKET, &FOLLOW_LSQBRACKET_in_type1173);
            	        if  (this->hasException())
            	        {
            	            goto ruletypeEx;
            	        }


            	        RSQBRACKET3 =  this->matchToken(RSQBRACKET, &FOLLOW_RSQBRACKET_in_type1175);
            	        if  (this->hasException())
            	        {
            	            goto ruletypeEx;
            	        }


            	        {
            	             node->add_array_level(); SET_END_LOCATION(node, RSQBRACKET3); 
            	        }


            	    }
            	    break;

            	default:
            	    goto loop1;	/* break out of the loop */
            	    break;
                }
            }
            loop1: ; /* Jump out to here if this rule does not match */


        }

    }
    // This is where rules clean up and exit
    //
    goto ruletypeEx; /* Prevent compiler warnings */
    ruletypeEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}
/* $ANTLR end type */

/**
 * $ANTLR start decl
 * C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:246:1: decl returns [scripting::declaration* node] : type ID ;
 */
scripting::declaration*
WNScriptASTParser::decl()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    scripting::declaration* node;


    const ImplTraits::CommonTokenType* ID5 = NULL;
    scripting::type_node* type4;
    /* Initialize rule variables
     */
     


        node = wn_nullptr;


 
    {
        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:250:5: ( type ID )
        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:250:10: type ID
        {
            this->followPush(FOLLOW_type_in_decl1207);
            type4=type();

            this->followPop();
            if  (this->hasException())
            {
                goto ruledeclEx;
            }


            ID5 =  this->matchToken(ID, &FOLLOW_ID_in_decl1209);
            if  (this->hasException())
            {
                goto ruledeclEx;
            }


            {
                node = m_allocator->make_allocated<scripting::declaration>(m_allocator, type4
                , (ID5->getText()).c_str()); SET_LOCATION_FROM_NODE(node, 
                type4
                ); SET_END_LOCATION(node, ID5); 
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto ruledeclEx; /* Prevent compiler warnings */
    ruledeclEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}
/* $ANTLR end decl */

/**
 * $ANTLR start declList
 * C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:253:1: declList returns [scripting::decl_list* node] : a= decl ( COMMA b= decl )* ;
 */
scripting::decl_list*
WNScriptASTParser::declList()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    scripting::decl_list* node;


    scripting::declaration* a;
    scripting::declaration* b;
    /* Initialize rule variables
     */
     


        node = wn_nullptr;


 
    {
        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:257:5: (a= decl ( COMMA b= decl )* )
        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:257:10: a= decl ( COMMA b= decl )*
        {
            this->followPush(FOLLOW_decl_in_declList1241);
            a=decl();

            this->followPop();
            if  (this->hasException())
            {
                goto ruledeclListEx;
            }


            {
                 node = m_allocator->make_allocated<scripting::decl_list>(m_allocator, a
                ); SET_LOCATION_FROM_NODE(node, a
                ); 
            }


            // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:258:9: ( COMMA b= decl )*

            for (;;)
            {
                int alt2=2;
                switch ( this->LA(1) )
                {
                case COMMA:
                	{
                		alt2=1;
                	}
                    break;

                }

                switch (alt2)
                {
            	case 1:
            	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:258:10: COMMA b= decl
            	    {
            	         this->matchToken(COMMA, &FOLLOW_COMMA_in_declList1254);
            	        if  (this->hasException())
            	        {
            	            goto ruledeclListEx;
            	        }


            	        this->followPush(FOLLOW_decl_in_declList1258);
            	        b=decl();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruledeclListEx;
            	        }


            	        {
            	             node
            	            ->add_declaration(b
            	            ); SET_END_LOCATION_FROM_NODE(node, b
            	            ); 
            	        }


            	    }
            	    break;

            	default:
            	    goto loop2;	/* break out of the loop */
            	    break;
                }
            }
            loop2: ; /* Jump out to here if this rule does not match */


        }

    }
    // This is where rules clean up and exit
    //
    goto ruledeclListEx; /* Prevent compiler warnings */
    ruledeclListEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}
/* $ANTLR end declList */

/**
 * $ANTLR start parameterList
 * C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:261:1: parameterList returns [scripting::decl_list* node] : ( LBRACKET declList RBRACKET | LBRACKET RBRACKET );
 */
scripting::decl_list*
WNScriptASTParser::parameterList()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    scripting::decl_list* node;


    const ImplTraits::CommonTokenType* LBRACKET7 = NULL;
    const ImplTraits::CommonTokenType* RBRACKET8 = NULL;
    scripting::decl_list* declList6;
    /* Initialize rule variables
     */
     


        node = wn_nullptr;


 
    {
        {
            //  C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:265:5: ( LBRACKET declList RBRACKET | LBRACKET RBRACKET )

            ANTLR_UINT32 alt3;

            alt3=2;

            switch ( this->LA(1) )
            {
            case LBRACKET:
            	{
            		switch ( this->LA(2) )
            		{
            		case RBRACKET:
            			{
            				alt3=2;
            			}
            		    break;
            		case TYPE:
            			{
            				alt3=1;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 3 );
            		    ex->set_state( 1 );


            		    goto ruleparameterListEx;

            		}

            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 3 );
                ex->set_state( 0 );


                goto ruleparameterListEx;

            }

            switch (alt3)
            {
        	case 1:
        	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:265:10: LBRACKET declList RBRACKET
        	    {
        	        LBRACKET7 =  this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_parameterList1290);
        	        if  (this->hasException())
        	        {
        	            goto ruleparameterListEx;
        	        }


        	        this->followPush(FOLLOW_declList_in_parameterList1292);
        	        declList6=declList();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleparameterListEx;
        	        }


        	        RBRACKET8 =  this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_parameterList1294);
        	        if  (this->hasException())
        	        {
        	            goto ruleparameterListEx;
        	        }


        	        {
        	             node = declList6
        	            ; SET_LOCATION(node, LBRACKET7); SET_END_LOCATION(node, RBRACKET8); 
        	        }


        	    }
        	    break;
        	case 2:
        	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:266:14: LBRACKET RBRACKET
        	    {
        	         this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_parameterList1311);
        	        if  (this->hasException())
        	        {
        	            goto ruleparameterListEx;
        	        }


        	         this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_parameterList1313);
        	        if  (this->hasException())
        	        {
        	            goto ruleparameterListEx;
        	        }


        	        {
        	             node = wn_nullptr; 
        	        }


        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto ruleparameterListEx; /* Prevent compiler warnings */
    ruleparameterListEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}
/* $ANTLR end parameterList */

/**
 * $ANTLR start assign_type
 * C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:270:1: assign_type returns [scripting::assign_type node] : ( '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '<==' );
 */
scripting::assign_type
WNScriptASTParser::assign_type()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    scripting::assign_type node;


    /* Initialize rule variables
     */
     


        node = scripting::assign_type::equal;


 
    {
        {
            //  C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:274:5: ( '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '<==' )

            ANTLR_UINT32 alt4;

            alt4=7;

            switch ( this->LA(1) )
            {
            case 58:
            	{
            		alt4=1;
            	}
                break;
            case 50:
            	{
            		alt4=2;
            	}
                break;
            case 52:
            	{
            		alt4=3;
            	}
                break;
            case 48:
            	{
            		alt4=4;
            	}
                break;
            case 55:
            	{
            		alt4=5;
            	}
                break;
            case 45:
            	{
            		alt4=6;
            	}
                break;
            case CHOWN:
            	{
            		alt4=7;
            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 4 );
                ex->set_state( 0 );


                goto ruleassign_typeEx;

            }

            switch (alt4)
            {
        	case 1:
        	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:274:10: '='
        	    {
        	         this->matchToken(58, &FOLLOW_58_in_assign_type1349);
        	        if  (this->hasException())
        	        {
        	            goto ruleassign_typeEx;
        	        }


        	        {
        	             node = scripting::assign_type::equal; 
        	        }


        	    }
        	    break;
        	case 2:
        	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:275:10: '+='
        	    {
        	         this->matchToken(50, &FOLLOW_50_in_assign_type1363);
        	        if  (this->hasException())
        	        {
        	            goto ruleassign_typeEx;
        	        }


        	        {
        	             node = scripting::assign_type::add_equal; 
        	        }


        	    }
        	    break;
        	case 3:
        	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:276:10: '-='
        	    {
        	         this->matchToken(52, &FOLLOW_52_in_assign_type1376);
        	        if  (this->hasException())
        	        {
        	            goto ruleassign_typeEx;
        	        }


        	        {
        	             node = scripting::assign_type::sub_equal; 
        	        }


        	    }
        	    break;
        	case 4:
        	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:277:10: '*='
        	    {
        	         this->matchToken(48, &FOLLOW_48_in_assign_type1389);
        	        if  (this->hasException())
        	        {
        	            goto ruleassign_typeEx;
        	        }


        	        {
        	             node = scripting::assign_type::mult_equal; 
        	        }


        	    }
        	    break;
        	case 5:
        	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:278:10: '/='
        	    {
        	         this->matchToken(55, &FOLLOW_55_in_assign_type1402);
        	        if  (this->hasException())
        	        {
        	            goto ruleassign_typeEx;
        	        }


        	        {
        	             node = scripting::assign_type::div_equal; 
        	        }


        	    }
        	    break;
        	case 6:
        	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:279:10: '%='
        	    {
        	         this->matchToken(45, &FOLLOW_45_in_assign_type1415);
        	        if  (this->hasException())
        	        {
        	            goto ruleassign_typeEx;
        	        }


        	        {
        	             node = scripting::assign_type::mod_equal; 
        	        }


        	    }
        	    break;
        	case 7:
        	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:280:10: '<=='
        	    {
        	         this->matchToken(CHOWN, &FOLLOW_CHOWN_in_assign_type1428);
        	        if  (this->hasException())
        	        {
        	            goto ruleassign_typeEx;
        	        }


        	        {
        	             node = scripting::assign_type::change_owner; 
        	        }


        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto ruleassign_typeEx; /* Prevent compiler warnings */
    ruleassign_typeEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}
/* $ANTLR end assign_type */

/**
 * $ANTLR start lvalue
 * C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:283:1: lvalue returns [scripting::lvalue* node] : unary_ex ;
 */
scripting::lvalue*
WNScriptASTParser::lvalue()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    scripting::lvalue* node;


    scripting::expression* unary_ex9;
    /* Initialize rule variables
     */
     


        node = wn_nullptr;


 
    {
        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:287:5: ( unary_ex )
        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:287:10: unary_ex
        {
            this->followPush(FOLLOW_unary_ex_in_lvalue1458);
            unary_ex9=unary_ex();

            this->followPop();
            if  (this->hasException())
            {
                goto rulelvalueEx;
            }


            {
                 node = m_allocator->make_allocated<scripting::lvalue>(m_allocator, unary_ex9
                ); SET_LOCATION_FROM_NODE(node, unary_ex9
                ); 
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto rulelvalueEx; /* Prevent compiler warnings */
    rulelvalueEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}
/* $ANTLR end lvalue */

/**
 * $ANTLR start arglist
 * C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:290:1: arglist returns [scripting::arg_list* node] : ( (a= expr ) | ( '<==' b= expr ) ) ( ',' ( ( '<==' c= expr ) | (d= expr ) |) )* ;
 */
scripting::arg_list*
WNScriptASTParser::arglist()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    scripting::arg_list* node;


    scripting::expression* a;
    scripting::expression* b;
    scripting::expression* c;
    scripting::expression* d;
    /* Initialize rule variables
     */
     


        node = m_allocator->make_allocated<scripting::arg_list>(m_allocator);


 
    {
        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:294:9: ( ( (a= expr ) | ( '<==' b= expr ) ) ( ',' ( ( '<==' c= expr ) | (d= expr ) |) )* )
        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:294:13: ( (a= expr ) | ( '<==' b= expr ) ) ( ',' ( ( '<==' c= expr ) | (d= expr ) |) )*
        {
            // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:294:13: ( (a= expr ) | ( '<==' b= expr ) )
            {
                int alt5=2;
                switch ( this->LA(1) )
                {
                case BOOL:
                case CHAR:
                case DOUBDEC:
                case DOUBINC:
                case FLOAT:
                case ID:
                case INT:
                case LBRACKET:
                case NULLTOK:
                case STRING:
                case TYPE:
                case 51:
                	{
                		alt5=1;
                	}
                    break;
                case CHOWN:
                	{
                		alt5=2;
                	}
                    break;

                default:
                    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 5 );
                    ex->set_state( 0 );


                    goto rulearglistEx;

                }

                switch (alt5)
                {
            	case 1:
            	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:295:21: (a= expr )
            	    {
            	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:295:21: (a= expr )
            	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:295:22: a= expr
            	        {
            	            this->followPush(FOLLOW_expr_in_arglist1516);
            	            a=expr();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulearglistEx;
            	            }


            	            {
            	                 node->add_expression(a
            	                ); SET_LOCATION_FROM_NODE(node, a
            	                ); 
            	            }


            	        }


            	    }
            	    break;
            	case 2:
            	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:296:21: ( '<==' b= expr )
            	    {
            	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:296:21: ( '<==' b= expr )
            	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:296:22: '<==' b= expr
            	        {
            	             this->matchToken(CHOWN, &FOLLOW_CHOWN_in_arglist1542);
            	            if  (this->hasException())
            	            {
            	                goto rulearglistEx;
            	            }


            	            this->followPush(FOLLOW_expr_in_arglist1546);
            	            b=expr();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulearglistEx;
            	            }


            	            {
            	                node->add_expression(b
            	                , wn_true); SET_LOCATION_FROM_NODE(node, b
            	                ); 
            	            }


            	        }


            	    }
            	    break;

                }
            }

            // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:299:13: ( ',' ( ( '<==' c= expr ) | (d= expr ) |) )*

            for (;;)
            {
                int alt7=2;
                switch ( this->LA(1) )
                {
                case COMMA:
                	{
                		alt7=1;
                	}
                    break;

                }

                switch (alt7)
                {
            	case 1:
            	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:299:14: ',' ( ( '<==' c= expr ) | (d= expr ) |)
            	    {
            	         this->matchToken(COMMA, &FOLLOW_COMMA_in_arglist1579);
            	        if  (this->hasException())
            	        {
            	            goto rulearglistEx;
            	        }


            	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:300:17: ( ( '<==' c= expr ) | (d= expr ) |)
            	        {
            	            int alt6=3;
            	            switch ( this->LA(1) )
            	            {
            	            case CHOWN:
            	            	{
            	            		alt6=1;
            	            	}
            	                break;
            	            case BOOL:
            	            case CHAR:
            	            case DOUBDEC:
            	            case DOUBINC:
            	            case FLOAT:
            	            case ID:
            	            case INT:
            	            case LBRACKET:
            	            case NULLTOK:
            	            case STRING:
            	            case TYPE:
            	            case 51:
            	            	{
            	            		alt6=2;
            	            	}
            	                break;
            	            case COMMA:
            	            case RBRACKET:
            	            	{
            	            		alt6=3;
            	            	}
            	                break;

            	            default:
            	                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            	                ex->set_decisionNum( 6 );
            	                ex->set_state( 0 );


            	                goto rulearglistEx;

            	            }

            	            switch (alt6)
            	            {
            	        	case 1:
            	        	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:301:21: ( '<==' c= expr )
            	        	    {
            	        	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:301:21: ( '<==' c= expr )
            	        	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:301:23: '<==' c= expr
            	        	        {
            	        	             this->matchToken(CHOWN, &FOLLOW_CHOWN_in_arglist1621);
            	        	            if  (this->hasException())
            	        	            {
            	        	                goto rulearglistEx;
            	        	            }


            	        	            this->followPush(FOLLOW_expr_in_arglist1625);
            	        	            c=expr();

            	        	            this->followPop();
            	        	            if  (this->hasException())
            	        	            {
            	        	                goto rulearglistEx;
            	        	            }


            	        	            {
            	        	                 node->add_expression(c
            	        	                ); SET_END_LOCATION_FROM_NODE(node, c
            	        	                ); 
            	        	            }


            	        	        }


            	        	    }
            	        	    break;
            	        	case 2:
            	        	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:302:21: (d= expr )
            	        	    {
            	        	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:302:21: (d= expr )
            	        	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:302:23: d= expr
            	        	        {
            	        	            this->followPush(FOLLOW_expr_in_arglist1657);
            	        	            d=expr();

            	        	            this->followPop();
            	        	            if  (this->hasException())
            	        	            {
            	        	                goto rulearglistEx;
            	        	            }


            	        	            {
            	        	                 node->add_expression(d
            	        	                , wn_true); SET_END_LOCATION_FROM_NODE(node, d
            	        	                ); 
            	        	            }


            	        	        }


            	        	    }
            	        	    break;
            	        	case 3:
            	        	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:303:17: 
            	        	    {
            	        	    }
            	        	    break;

            	            }
            	        }

            	    }
            	    break;

            	default:
            	    goto loop7;	/* break out of the loop */
            	    break;
                }
            }
            loop7: ; /* Jump out to here if this rule does not match */


        }

    }
    // This is where rules clean up and exit
    //
    goto rulearglistEx; /* Prevent compiler warnings */
    rulearglistEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}
/* $ANTLR end arglist */

/**
 * $ANTLR start expr
 * C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:307:1: expr returns [scripting::expression* node] : cond_ex ;
 */
scripting::expression*
WNScriptASTParser::expr()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    scripting::expression* node;


    scripting::expression* cond_ex10;
    /* Initialize rule variables
     */
     


        node = wn_nullptr;


 
    {
        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:311:9: ( cond_ex )
        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:311:14: cond_ex
        {
            this->followPush(FOLLOW_cond_ex_in_expr1732);
            cond_ex10=cond_ex();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleexprEx;
            }


            {
                 node = cond_ex10
                ; 
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleexprEx; /* Prevent compiler warnings */
    ruleexprEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}
/* $ANTLR end expr */

/**
 * $ANTLR start cond_ex
 * C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:314:1: cond_ex returns [scripting::expression* node] : or_ex ( '?' b= expr ':' c= cond_ex )? ;
 */
scripting::expression*
WNScriptASTParser::cond_ex()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    scripting::expression* node;


    scripting::expression* b;
    scripting::expression* c;
    scripting::expression* or_ex11;
    /* Initialize rule variables
     */
     


        node = wn_nullptr;


 
    {
        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:318:9: ( or_ex ( '?' b= expr ':' c= cond_ex )? )
        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:318:14: or_ex ( '?' b= expr ':' c= cond_ex )?
        {
            this->followPush(FOLLOW_or_ex_in_cond_ex1770);
            or_ex11=or_ex();

            this->followPop();
            if  (this->hasException())
            {
                goto rulecond_exEx;
            }


            {
                 node = or_ex11
                ; 
            }


            // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:320:17: ( '?' b= expr ':' c= cond_ex )?
            {
                int alt8=2;
                switch ( this->LA(1) )
                {
                    case 62:
                    	{
                    		alt8=1;
                    	}
                        break;
                }

                switch (alt8)
                {
            	case 1:
            	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:320:18: '?' b= expr ':' c= cond_ex
            	    {
            	         this->matchToken(62, &FOLLOW_62_in_cond_ex1793);
            	        if  (this->hasException())
            	        {
            	            goto rulecond_exEx;
            	        }


            	        this->followPush(FOLLOW_expr_in_cond_ex1797);
            	        b=expr();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulecond_exEx;
            	        }


            	         this->matchToken(COLON, &FOLLOW_COLON_in_cond_ex1799);
            	        if  (this->hasException())
            	        {
            	            goto rulecond_exEx;
            	        }


            	        this->followPush(FOLLOW_cond_ex_in_cond_ex1803);
            	        c=cond_ex();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulecond_exEx;
            	        }


            	        {
            	             node = m_allocator->make_allocated<scripting::cond_expression>(m_allocator, node, b
            	            , c
            	            );  SET_LOCATION_FROM_NODE(node, or_ex11
            	            ); SET_END_LOCATION_FROM_NODE(node, c
            	            ); 
            	        }


            	    }
            	    break;

                }
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto rulecond_exEx; /* Prevent compiler warnings */
    rulecond_exEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}
/* $ANTLR end cond_ex */

/**
 * $ANTLR start or_ex
 * C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:323:1: or_ex returns [scripting::expression* node] : a= and_ex ( '||' b= and_ex )* ;
 */
scripting::expression*
WNScriptASTParser::or_ex()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    scripting::expression* node;


    scripting::expression* a;
    scripting::expression* b;
    /* Initialize rule variables
     */
     


        node = wn_nullptr;


 
    {
        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:327:9: (a= and_ex ( '||' b= and_ex )* )
        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:327:14: a= and_ex ( '||' b= and_ex )*
        {
            this->followPush(FOLLOW_and_ex_in_or_ex1850);
            a=and_ex();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleor_exEx;
            }


            {
                 node = a
                ; 
            }


            // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:328:13: ( '||' b= and_ex )*

            for (;;)
            {
                int alt9=2;
                switch ( this->LA(1) )
                {
                case 63:
                	{
                		alt9=1;
                	}
                    break;

                }

                switch (alt9)
                {
            	case 1:
            	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:328:14: '||' b= and_ex
            	    {
            	         this->matchToken(63, &FOLLOW_63_in_or_ex1867);
            	        if  (this->hasException())
            	        {
            	            goto ruleor_exEx;
            	        }


            	        this->followPush(FOLLOW_and_ex_in_or_ex1871);
            	        b=and_ex();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleor_exEx;
            	        }


            	        {
            	             node = m_allocator->make_allocated<scripting::ss_expression>(m_allocator, scripting::short_circuit_type::or_operator, node, b
            	            ); SET_LOCATION_FROM_NODE(node, a
            	            ); SET_END_LOCATION_FROM_NODE(node, b
            	            ); 
            	        }


            	    }
            	    break;

            	default:
            	    goto loop9;	/* break out of the loop */
            	    break;
                }
            }
            loop9: ; /* Jump out to here if this rule does not match */


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleor_exEx; /* Prevent compiler warnings */
    ruleor_exEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}
/* $ANTLR end or_ex */

/**
 * $ANTLR start and_ex
 * C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:331:1: and_ex returns [scripting::expression* node] : a= eq_ex ( '&&' b= eq_ex )* ;
 */
scripting::expression*
WNScriptASTParser::and_ex()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    scripting::expression* node;


    scripting::expression* a;
    scripting::expression* b;
    /* Initialize rule variables
     */
     


        node = wn_nullptr;


 
    {
        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:335:9: (a= eq_ex ( '&&' b= eq_ex )* )
        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:335:14: a= eq_ex ( '&&' b= eq_ex )*
        {
            this->followPush(FOLLOW_eq_ex_in_and_ex1914);
            a=eq_ex();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleand_exEx;
            }


            {
                 node = a
                ; 
            }


            // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:336:13: ( '&&' b= eq_ex )*

            for (;;)
            {
                int alt10=2;
                switch ( this->LA(1) )
                {
                case 46:
                	{
                		alt10=1;
                	}
                    break;

                }

                switch (alt10)
                {
            	case 1:
            	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:336:14: '&&' b= eq_ex
            	    {
            	         this->matchToken(46, &FOLLOW_46_in_and_ex1931);
            	        if  (this->hasException())
            	        {
            	            goto ruleand_exEx;
            	        }


            	        this->followPush(FOLLOW_eq_ex_in_and_ex1935);
            	        b=eq_ex();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleand_exEx;
            	        }


            	        {
            	            node = m_allocator->make_allocated<scripting::ss_expression>(m_allocator, scripting::short_circuit_type::and_operator, node, b
            	            ); SET_LOCATION_FROM_NODE(node, a
            	            ); SET_END_LOCATION_FROM_NODE(node, b
            	            ); 
            	        }


            	    }
            	    break;

            	default:
            	    goto loop10;	/* break out of the loop */
            	    break;
                }
            }
            loop10: ; /* Jump out to here if this rule does not match */


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleand_exEx; /* Prevent compiler warnings */
    ruleand_exEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}
/* $ANTLR end and_ex */

/**
 * $ANTLR start eq_ex
 * C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:338:1: eq_ex returns [scripting::expression* node] : a= rel_ex ( ( '==' b= rel_ex ) | ( '!=' c= rel_ex ) )* ;
 */
scripting::expression*
WNScriptASTParser::eq_ex()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    scripting::expression* node;


    scripting::expression* a;
    scripting::expression* b;
    scripting::expression* c;
    /* Initialize rule variables
     */
     


        node = wn_nullptr;


 
    {
        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:342:9: (a= rel_ex ( ( '==' b= rel_ex ) | ( '!=' c= rel_ex ) )* )
        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:342:14: a= rel_ex ( ( '==' b= rel_ex ) | ( '!=' c= rel_ex ) )*
        {
            this->followPush(FOLLOW_rel_ex_in_eq_ex1974);
            a=rel_ex();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleeq_exEx;
            }


            {
                 node = a
                ; 
            }


            // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:343:13: ( ( '==' b= rel_ex ) | ( '!=' c= rel_ex ) )*

            for (;;)
            {
                int alt11=3;
                switch ( this->LA(1) )
                {
                case 59:
                	{
                		alt11=1;
                	}
                    break;
                case 43:
                	{
                		alt11=2;
                	}
                    break;

                }

                switch (alt11)
                {
            	case 1:
            	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:344:17: ( '==' b= rel_ex )
            	    {
            	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:344:17: ( '==' b= rel_ex )
            	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:344:18: '==' b= rel_ex
            	        {
            	             this->matchToken(59, &FOLLOW_59_in_eq_ex2009);
            	            if  (this->hasException())
            	            {
            	                goto ruleeq_exEx;
            	            }


            	            this->followPush(FOLLOW_rel_ex_in_eq_ex2013);
            	            b=rel_ex();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleeq_exEx;
            	            }


            	            {
            	                node = m_allocator->make_allocated<scripting::binary_expression>(m_allocator, scripting::arithmetic_type::arithmetic_equal, node, b
            	                );  SET_LOCATION_FROM_NODE(node, a
            	                ); SET_END_LOCATION_FROM_NODE(node, b
            	                ); 
            	            }


            	        }


            	    }
            	    break;
            	case 2:
            	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:345:17: ( '!=' c= rel_ex )
            	    {
            	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:345:17: ( '!=' c= rel_ex )
            	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:345:18: '!=' c= rel_ex
            	        {
            	             this->matchToken(43, &FOLLOW_43_in_eq_ex2036);
            	            if  (this->hasException())
            	            {
            	                goto ruleeq_exEx;
            	            }


            	            this->followPush(FOLLOW_rel_ex_in_eq_ex2040);
            	            c=rel_ex();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleeq_exEx;
            	            }


            	            {
            	                node = m_allocator->make_allocated<scripting::binary_expression>(m_allocator, scripting::arithmetic_type::arithmetic_not_equal, node, c
            	                ); SET_LOCATION_FROM_NODE(node, a
            	                ); SET_END_LOCATION_FROM_NODE(node, c
            	                ); 
            	            }


            	        }


            	    }
            	    break;

            	default:
            	    goto loop11;	/* break out of the loop */
            	    break;
                }
            }
            loop11: ; /* Jump out to here if this rule does not match */


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleeq_exEx; /* Prevent compiler warnings */
    ruleeq_exEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}
/* $ANTLR end eq_ex */

/**
 * $ANTLR start rel_ex
 * C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:349:1: rel_ex returns [scripting::expression* node] : a= add_ex ( ( '<' b= add_ex ) | ( '>' c= add_ex ) | ( '<=' d= add_ex ) | ( '>=' e= add_ex ) )* ;
 */
scripting::expression*
WNScriptASTParser::rel_ex()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    scripting::expression* node;


    scripting::expression* a;
    scripting::expression* b;
    scripting::expression* c;
    scripting::expression* d;
    scripting::expression* e;
    /* Initialize rule variables
     */
     


        node = wn_nullptr;


 
    {
        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:353:9: (a= add_ex ( ( '<' b= add_ex ) | ( '>' c= add_ex ) | ( '<=' d= add_ex ) | ( '>=' e= add_ex ) )* )
        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:353:14: a= add_ex ( ( '<' b= add_ex ) | ( '>' c= add_ex ) | ( '<=' d= add_ex ) | ( '>=' e= add_ex ) )*
        {
            this->followPush(FOLLOW_add_ex_in_rel_ex2098);
            a=add_ex();

            this->followPop();
            if  (this->hasException())
            {
                goto rulerel_exEx;
            }


            {
                 node=a
                ; 
            }


            // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:354:13: ( ( '<' b= add_ex ) | ( '>' c= add_ex ) | ( '<=' d= add_ex ) | ( '>=' e= add_ex ) )*

            for (;;)
            {
                int alt12=5;
                switch ( this->LA(1) )
                {
                case 56:
                	{
                		alt12=1;
                	}
                    break;
                case 60:
                	{
                		alt12=2;
                	}
                    break;
                case 57:
                	{
                		alt12=3;
                	}
                    break;
                case 61:
                	{
                		alt12=4;
                	}
                    break;

                }

                switch (alt12)
                {
            	case 1:
            	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:355:17: ( '<' b= add_ex )
            	    {
            	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:355:17: ( '<' b= add_ex )
            	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:355:19: '<' b= add_ex
            	        {
            	             this->matchToken(56, &FOLLOW_56_in_rel_ex2134);
            	            if  (this->hasException())
            	            {
            	                goto rulerel_exEx;
            	            }


            	            this->followPush(FOLLOW_add_ex_in_rel_ex2138);
            	            b=add_ex();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulerel_exEx;
            	            }


            	            {
            	                node = m_allocator->make_allocated<scripting::binary_expression>(m_allocator, scripting::arithmetic_type::arithmetic_less_than, node, b
            	                );   SET_LOCATION_FROM_NODE(node, a
            	                ); SET_END_LOCATION_FROM_NODE(node, b
            	                ); 
            	            }


            	        }


            	    }
            	    break;
            	case 2:
            	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:356:17: ( '>' c= add_ex )
            	    {
            	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:356:17: ( '>' c= add_ex )
            	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:356:19: '>' c= add_ex
            	        {
            	             this->matchToken(60, &FOLLOW_60_in_rel_ex2162);
            	            if  (this->hasException())
            	            {
            	                goto rulerel_exEx;
            	            }


            	            this->followPush(FOLLOW_add_ex_in_rel_ex2166);
            	            c=add_ex();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulerel_exEx;
            	            }


            	            {
            	                node = m_allocator->make_allocated<scripting::binary_expression>(m_allocator, scripting::arithmetic_type::arithmetic_greater_than, node, c
            	                );   SET_LOCATION_FROM_NODE(node, a
            	                ); SET_END_LOCATION_FROM_NODE(node, c
            	                ); 
            	            }


            	        }


            	    }
            	    break;
            	case 3:
            	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:357:17: ( '<=' d= add_ex )
            	    {
            	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:357:17: ( '<=' d= add_ex )
            	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:357:19: '<=' d= add_ex
            	        {
            	             this->matchToken(57, &FOLLOW_57_in_rel_ex2190);
            	            if  (this->hasException())
            	            {
            	                goto rulerel_exEx;
            	            }


            	            this->followPush(FOLLOW_add_ex_in_rel_ex2194);
            	            d=add_ex();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulerel_exEx;
            	            }


            	            {
            	                node = m_allocator->make_allocated<scripting::binary_expression>(m_allocator, scripting::arithmetic_type::arithmetic_less_than_or_equal, node, d
            	                );   SET_LOCATION_FROM_NODE(node, a
            	                ); SET_END_LOCATION_FROM_NODE(node, d
            	                ); 
            	            }


            	        }


            	    }
            	    break;
            	case 4:
            	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:358:17: ( '>=' e= add_ex )
            	    {
            	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:358:17: ( '>=' e= add_ex )
            	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:358:19: '>=' e= add_ex
            	        {
            	             this->matchToken(61, &FOLLOW_61_in_rel_ex2218);
            	            if  (this->hasException())
            	            {
            	                goto rulerel_exEx;
            	            }


            	            this->followPush(FOLLOW_add_ex_in_rel_ex2222);
            	            e=add_ex();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulerel_exEx;
            	            }


            	            {
            	                node = m_allocator->make_allocated<scripting::binary_expression>(m_allocator, scripting::arithmetic_type::arithmetic_greater_than_or_equal, node, e
            	                );   SET_LOCATION_FROM_NODE(node, a
            	                ); SET_END_LOCATION_FROM_NODE(node, e
            	                ); 
            	            }


            	        }


            	    }
            	    break;

            	default:
            	    goto loop12;	/* break out of the loop */
            	    break;
                }
            }
            loop12: ; /* Jump out to here if this rule does not match */


        }

    }
    // This is where rules clean up and exit
    //
    goto rulerel_exEx; /* Prevent compiler warnings */
    rulerel_exEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}
/* $ANTLR end rel_ex */

/**
 * $ANTLR start add_ex
 * C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:362:1: add_ex returns [scripting::expression* node] : a= mult_ex ( ( '+' b= mult_ex ) | ( '-' c= mult_ex ) )* ;
 */
scripting::expression*
WNScriptASTParser::add_ex()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    scripting::expression* node;


    scripting::expression* a;
    scripting::expression* b;
    scripting::expression* c;
    /* Initialize rule variables
     */
     


        node = wn_nullptr;


 
    {
        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:366:9: (a= mult_ex ( ( '+' b= mult_ex ) | ( '-' c= mult_ex ) )* )
        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:366:14: a= mult_ex ( ( '+' b= mult_ex ) | ( '-' c= mult_ex ) )*
        {
            this->followPush(FOLLOW_mult_ex_in_add_ex2283);
            a=mult_ex();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleadd_exEx;
            }


            {
                node = a
                ; 
            }


            // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:367:13: ( ( '+' b= mult_ex ) | ( '-' c= mult_ex ) )*

            for (;;)
            {
                int alt13=3;
                switch ( this->LA(1) )
                {
                case 49:
                	{
                		alt13=1;
                	}
                    break;
                case 51:
                	{
                		alt13=2;
                	}
                    break;

                }

                switch (alt13)
                {
            	case 1:
            	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:368:17: ( '+' b= mult_ex )
            	    {
            	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:368:17: ( '+' b= mult_ex )
            	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:368:18: '+' b= mult_ex
            	        {
            	             this->matchToken(49, &FOLLOW_49_in_add_ex2318);
            	            if  (this->hasException())
            	            {
            	                goto ruleadd_exEx;
            	            }


            	            this->followPush(FOLLOW_mult_ex_in_add_ex2322);
            	            b=mult_ex();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleadd_exEx;
            	            }


            	            {
            	                node = m_allocator->make_allocated<scripting::binary_expression>(m_allocator, scripting::arithmetic_type::arithmetic_add, node, b
            	                );   SET_LOCATION_FROM_NODE(node, a
            	                ); SET_END_LOCATION_FROM_NODE(node, b
            	                ); 
            	            }


            	        }


            	    }
            	    break;
            	case 2:
            	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:369:17: ( '-' c= mult_ex )
            	    {
            	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:369:17: ( '-' c= mult_ex )
            	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:369:18: '-' c= mult_ex
            	        {
            	             this->matchToken(51, &FOLLOW_51_in_add_ex2344);
            	            if  (this->hasException())
            	            {
            	                goto ruleadd_exEx;
            	            }


            	            this->followPush(FOLLOW_mult_ex_in_add_ex2348);
            	            c=mult_ex();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleadd_exEx;
            	            }


            	            {
            	                node = m_allocator->make_allocated<scripting::binary_expression>(m_allocator, scripting::arithmetic_type::arithmetic_sub, node, c
            	                );   SET_LOCATION_FROM_NODE(node, a
            	                ); SET_END_LOCATION_FROM_NODE(node, c
            	                ); 
            	            }


            	        }


            	    }
            	    break;

            	default:
            	    goto loop13;	/* break out of the loop */
            	    break;
                }
            }
            loop13: ; /* Jump out to here if this rule does not match */


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleadd_exEx; /* Prevent compiler warnings */
    ruleadd_exEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}
/* $ANTLR end add_ex */

/**
 * $ANTLR start mult_ex
 * C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:373:1: mult_ex returns [scripting::expression* node] : a= unary_ex ( ( '*' b= unary_ex ) | ( '/' c= unary_ex ) | ( '%' d= unary_ex ) )* ;
 */
scripting::expression*
WNScriptASTParser::mult_ex()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    scripting::expression* node;


    scripting::expression* a;
    scripting::expression* b;
    scripting::expression* c;
    scripting::expression* d;
    /* Initialize rule variables
     */
     


        node = wn_nullptr;


 
    {
        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:377:9: (a= unary_ex ( ( '*' b= unary_ex ) | ( '/' c= unary_ex ) | ( '%' d= unary_ex ) )* )
        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:377:14: a= unary_ex ( ( '*' b= unary_ex ) | ( '/' c= unary_ex ) | ( '%' d= unary_ex ) )*
        {
            this->followPush(FOLLOW_unary_ex_in_mult_ex2407);
            a=unary_ex();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemult_exEx;
            }


            {
                 node = a
                ; 
            }


            // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:378:13: ( ( '*' b= unary_ex ) | ( '/' c= unary_ex ) | ( '%' d= unary_ex ) )*

            for (;;)
            {
                int alt14=4;
                switch ( this->LA(1) )
                {
                case 47:
                	{
                		alt14=1;
                	}
                    break;
                case 54:
                	{
                		alt14=2;
                	}
                    break;
                case 44:
                	{
                		alt14=3;
                	}
                    break;

                }

                switch (alt14)
                {
            	case 1:
            	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:379:21: ( '*' b= unary_ex )
            	    {
            	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:379:21: ( '*' b= unary_ex )
            	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:379:22: '*' b= unary_ex
            	        {
            	             this->matchToken(47, &FOLLOW_47_in_mult_ex2446);
            	            if  (this->hasException())
            	            {
            	                goto rulemult_exEx;
            	            }


            	            this->followPush(FOLLOW_unary_ex_in_mult_ex2450);
            	            b=unary_ex();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulemult_exEx;
            	            }


            	            {
            	                node = m_allocator->make_allocated<scripting::binary_expression>(m_allocator, scripting::arithmetic_type::arithmetic_mult, node, b
            	                );   SET_LOCATION_FROM_NODE(node, a
            	                ); SET_END_LOCATION_FROM_NODE(node, b
            	                ); 
            	            }


            	        }


            	    }
            	    break;
            	case 2:
            	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:380:21: ( '/' c= unary_ex )
            	    {
            	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:380:21: ( '/' c= unary_ex )
            	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:380:22: '/' c= unary_ex
            	        {
            	             this->matchToken(54, &FOLLOW_54_in_mult_ex2476);
            	            if  (this->hasException())
            	            {
            	                goto rulemult_exEx;
            	            }


            	            this->followPush(FOLLOW_unary_ex_in_mult_ex2480);
            	            c=unary_ex();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulemult_exEx;
            	            }


            	            {
            	                node = m_allocator->make_allocated<scripting::binary_expression>(m_allocator, scripting::arithmetic_type::arithmetic_div, node, c
            	                );   SET_LOCATION_FROM_NODE(node, a
            	                ); SET_END_LOCATION_FROM_NODE(node, c
            	                ); 
            	            }


            	        }


            	    }
            	    break;
            	case 3:
            	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:381:21: ( '%' d= unary_ex )
            	    {
            	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:381:21: ( '%' d= unary_ex )
            	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:381:22: '%' d= unary_ex
            	        {
            	             this->matchToken(44, &FOLLOW_44_in_mult_ex2506);
            	            if  (this->hasException())
            	            {
            	                goto rulemult_exEx;
            	            }


            	            this->followPush(FOLLOW_unary_ex_in_mult_ex2510);
            	            d=unary_ex();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulemult_exEx;
            	            }


            	            {
            	                node = m_allocator->make_allocated<scripting::binary_expression>(m_allocator, scripting::arithmetic_type::arithmetic_mod, node, d
            	                );   SET_LOCATION_FROM_NODE(node, a
            	                ); SET_END_LOCATION_FROM_NODE(node, d
            	                ); 
            	            }


            	        }


            	    }
            	    break;

            	default:
            	    goto loop14;	/* break out of the loop */
            	    break;
                }
            }
            loop14: ; /* Jump out to here if this rule does not match */


        }

    }
    // This is where rules clean up and exit
    //
    goto rulemult_exEx; /* Prevent compiler warnings */
    rulemult_exEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}
/* $ANTLR end mult_ex */

/**
 * $ANTLR start unary_ex
 * C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:385:1: unary_ex returns [scripting::expression* node] : (a= post_ex | '++' b= unary_ex | '--' c= unary_ex | '-' d= unary_ex );
 */
scripting::expression*
WNScriptASTParser::unary_ex()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    scripting::expression* node;


    scripting::expression* a;
    scripting::expression* b;
    scripting::expression* c;
    scripting::expression* d;
    /* Initialize rule variables
     */
     


        node = wn_nullptr;


 
    {
        {
            //  C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:389:5: (a= post_ex | '++' b= unary_ex | '--' c= unary_ex | '-' d= unary_ex )

            ANTLR_UINT32 alt15;

            alt15=4;

            switch ( this->LA(1) )
            {
            case BOOL:
            case CHAR:
            case FLOAT:
            case ID:
            case INT:
            case LBRACKET:
            case NULLTOK:
            case STRING:
            case TYPE:
            	{
            		alt15=1;
            	}
                break;
            case DOUBINC:
            	{
            		alt15=2;
            	}
                break;
            case DOUBDEC:
            	{
            		alt15=3;
            	}
                break;
            case 51:
            	{
            		alt15=4;
            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 15 );
                ex->set_state( 0 );


                goto ruleunary_exEx;

            }

            switch (alt15)
            {
        	case 1:
        	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:389:10: a= post_ex
        	    {
        	        this->followPush(FOLLOW_post_ex_in_unary_ex2562);
        	        a=post_ex();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleunary_exEx;
        	        }


        	        {
        	             node = a
        	            ; 
        	        }


        	    }
        	    break;
        	case 2:
        	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:390:10: '++' b= unary_ex
        	    {
        	         this->matchToken(DOUBINC, &FOLLOW_DOUBINC_in_unary_ex2575);
        	        if  (this->hasException())
        	        {
        	            goto ruleunary_exEx;
        	        }


        	        this->followPush(FOLLOW_unary_ex_in_unary_ex2579);
        	        b=unary_ex();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleunary_exEx;
        	        }


        	        {
        	             scripting::node* t = node; node = m_allocator->make_allocated<scripting::unary_expression>(m_allocator, scripting::unary_type::pre_increment, b
        	            );   SET_LOCATION_FROM_NODE(node, t); SET_END_LOCATION_FROM_NODE(node, b
        	            ); 
        	        }


        	    }
        	    break;
        	case 3:
        	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:391:10: '--' c= unary_ex
        	    {
        	         this->matchToken(DOUBDEC, &FOLLOW_DOUBDEC_in_unary_ex2592);
        	        if  (this->hasException())
        	        {
        	            goto ruleunary_exEx;
        	        }


        	        this->followPush(FOLLOW_unary_ex_in_unary_ex2596);
        	        c=unary_ex();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleunary_exEx;
        	        }


        	        {
        	             scripting::node* t = node; node = m_allocator->make_allocated<scripting::unary_expression>(m_allocator, scripting::unary_type::pre_decrement, c
        	            );   SET_LOCATION_FROM_NODE(node, t); SET_END_LOCATION_FROM_NODE(node, c
        	            ); 
        	        }


        	    }
        	    break;
        	case 4:
        	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:392:10: '-' d= unary_ex
        	    {
        	         this->matchToken(51, &FOLLOW_51_in_unary_ex2609);
        	        if  (this->hasException())
        	        {
        	            goto ruleunary_exEx;
        	        }


        	        this->followPush(FOLLOW_unary_ex_in_unary_ex2613);
        	        d=unary_ex();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleunary_exEx;
        	        }


        	        {
        	             scripting::node* t = node; node = m_allocator->make_allocated<scripting::unary_expression>(m_allocator, scripting::unary_type::negation, d
        	            );   SET_LOCATION_FROM_NODE(node, t); SET_END_LOCATION_FROM_NODE(node, d
        	            ); 
        	        }


        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto ruleunary_exEx; /* Prevent compiler warnings */
    ruleunary_exEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}
/* $ANTLR end unary_ex */

/**
 * $ANTLR start post_ex_proper
 * C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:396:1: post_ex_proper returns [scripting::post_expression* node] : (d= LSQBRACKET a= expr e= RSQBRACKET |f= LBRACKET g= RBRACKET |h= LBRACKET b= arglist i= RBRACKET | '.' c= ID | DOUBINC | DOUBDEC );
 */
scripting::post_expression*
WNScriptASTParser::post_ex_proper()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    scripting::post_expression* node;


    const ImplTraits::CommonTokenType* d = NULL;
    const ImplTraits::CommonTokenType* e = NULL;
    const ImplTraits::CommonTokenType* f = NULL;
    const ImplTraits::CommonTokenType* g = NULL;
    const ImplTraits::CommonTokenType* h = NULL;
    const ImplTraits::CommonTokenType* i = NULL;
    const ImplTraits::CommonTokenType* c = NULL;
    const ImplTraits::CommonTokenType* DOUBINC12 = NULL;
    const ImplTraits::CommonTokenType* DOUBDEC13 = NULL;
    scripting::expression* a;
    scripting::arg_list* b;
    /* Initialize rule variables
     */
     


        node = wn_nullptr;


 
    {
        {
            //  C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:400:5: (d= LSQBRACKET a= expr e= RSQBRACKET |f= LBRACKET g= RBRACKET |h= LBRACKET b= arglist i= RBRACKET | '.' c= ID | DOUBINC | DOUBDEC )

            ANTLR_UINT32 alt16;

            alt16=6;

            switch ( this->LA(1) )
            {
            case LSQBRACKET:
            	{
            		alt16=1;
            	}
                break;
            case LBRACKET:
            	{
            		switch ( this->LA(2) )
            		{
            		case RBRACKET:
            			{
            				alt16=2;
            			}
            		    break;
            		case BOOL:
            		case CHAR:
            		case CHOWN:
            		case DOUBDEC:
            		case DOUBINC:
            		case FLOAT:
            		case ID:
            		case INT:
            		case LBRACKET:
            		case NULLTOK:
            		case STRING:
            		case TYPE:
            		case 51:
            			{
            				alt16=3;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 16 );
            		    ex->set_state( 2 );


            		    goto rulepost_ex_properEx;

            		}

            	}
                break;
            case 53:
            	{
            		alt16=4;
            	}
                break;
            case DOUBINC:
            	{
            		alt16=5;
            	}
                break;
            case DOUBDEC:
            	{
            		alt16=6;
            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 16 );
                ex->set_state( 0 );


                goto rulepost_ex_properEx;

            }

            switch (alt16)
            {
        	case 1:
        	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:400:10: d= LSQBRACKET a= expr e= RSQBRACKET
        	    {
        	        d =  this->matchToken(LSQBRACKET, &FOLLOW_LSQBRACKET_in_post_ex_proper2651);
        	        if  (this->hasException())
        	        {
        	            goto rulepost_ex_properEx;
        	        }


        	        this->followPush(FOLLOW_expr_in_post_ex_proper2655);
        	        a=expr();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulepost_ex_properEx;
        	        }


        	        e =  this->matchToken(RSQBRACKET, &FOLLOW_RSQBRACKET_in_post_ex_proper2659);
        	        if  (this->hasException())
        	        {
        	            goto rulepost_ex_properEx;
        	        }


        	        {
        	             node = m_allocator->make_allocated<scripting::array_access_expression>(m_allocator, a
        	            ); SET_LOCATION(node, d); SET_END_LOCATION(node, e); 
        	        }


        	    }
        	    break;
        	case 2:
        	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:401:10: f= LBRACKET g= RBRACKET
        	    {
        	        f =  this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_post_ex_proper2674);
        	        if  (this->hasException())
        	        {
        	            goto rulepost_ex_properEx;
        	        }


        	        g =  this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_post_ex_proper2678);
        	        if  (this->hasException())
        	        {
        	            goto rulepost_ex_properEx;
        	        }


        	        {
        	             node = m_allocator->make_allocated<scripting::function_call_expression>(m_allocator); SET_LOCATION(node, f); SET_END_LOCATION(node, g); 
        	        }


        	    }
        	    break;
        	case 3:
        	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:402:10: h= LBRACKET b= arglist i= RBRACKET
        	    {
        	        h =  this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_post_ex_proper2706);
        	        if  (this->hasException())
        	        {
        	            goto rulepost_ex_properEx;
        	        }


        	        this->followPush(FOLLOW_arglist_in_post_ex_proper2712);
        	        b=arglist();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulepost_ex_properEx;
        	        }


        	        i =  this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_post_ex_proper2716);
        	        if  (this->hasException())
        	        {
        	            goto rulepost_ex_properEx;
        	        }


        	        {
        	             node = m_allocator->make_allocated<scripting::function_call_expression>(m_allocator, b
        	            ); SET_LOCATION(node, h); SET_END_LOCATION(node, i); 
        	        }


        	    }
        	    break;
        	case 4:
        	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:403:9: '.' c= ID
        	    {
        	         this->matchToken(53, &FOLLOW_53_in_post_ex_proper2729);
        	        if  (this->hasException())
        	        {
        	            goto rulepost_ex_properEx;
        	        }


        	        c =  this->matchToken(ID, &FOLLOW_ID_in_post_ex_proper2733);
        	        if  (this->hasException())
        	        {
        	            goto rulepost_ex_properEx;
        	        }


        	        {
        	             node = m_allocator->make_allocated<scripting::member_access_expression>(m_allocator, (c->getText()).c_str()); SET_LOCATION(node, c); 
        	        }


        	    }
        	    break;
        	case 5:
        	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:404:11: DOUBINC
        	    {
        	        DOUBINC12 =  this->matchToken(DOUBINC, &FOLLOW_DOUBINC_in_post_ex_proper2760);
        	        if  (this->hasException())
        	        {
        	            goto rulepost_ex_properEx;
        	        }


        	        {
        	             node = m_allocator->make_allocated<scripting::post_unary_expression>(m_allocator, scripting::post_unary_type::post_increment); SET_LOCATION(node, DOUBINC12);
        	        }


        	    }
        	    break;
        	case 6:
        	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:405:9: DOUBDEC
        	    {
        	        DOUBDEC13 =  this->matchToken(DOUBDEC, &FOLLOW_DOUBDEC_in_post_ex_proper2789);
        	        if  (this->hasException())
        	        {
        	            goto rulepost_ex_properEx;
        	        }


        	        {
        	             node = m_allocator->make_allocated<scripting::post_unary_expression>(m_allocator, scripting::post_unary_type::post_decrement); SET_LOCATION(node, DOUBDEC13);
        	        }


        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto rulepost_ex_properEx; /* Prevent compiler warnings */
    rulepost_ex_properEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}
/* $ANTLR end post_ex_proper */

/**
 * $ANTLR start post_ex
 * C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:408:1: post_ex returns [scripting::expression* node] : prim_ex (a= post_ex_proper )* ;
 */
scripting::expression*
WNScriptASTParser::post_ex()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    scripting::expression* node;


    scripting::post_expression* a;
    scripting::expression * prim_ex14;
    /* Initialize rule variables
     */
     


        node = wn_nullptr;


 
    {
        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:412:9: ( prim_ex (a= post_ex_proper )* )
        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:412:13: prim_ex (a= post_ex_proper )*
        {
            this->followPush(FOLLOW_prim_ex_in_post_ex2842);
            prim_ex14=prim_ex();

            this->followPop();
            if  (this->hasException())
            {
                goto rulepost_exEx;
            }


            {
                 node = prim_ex14
                ; 
            }


            // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:413:13: (a= post_ex_proper )*

            for (;;)
            {
                int alt17=2;
                switch ( this->LA(1) )
                {
                case DOUBDEC:
                case DOUBINC:
                case LBRACKET:
                case LSQBRACKET:
                case 53:
                	{
                		alt17=1;
                	}
                    break;

                }

                switch (alt17)
                {
            	case 1:
            	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:413:14: a= post_ex_proper
            	    {
            	        this->followPush(FOLLOW_post_ex_proper_in_post_ex2861);
            	        a=post_ex_proper();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulepost_exEx;
            	        }


            	        {
            	            a
            	            ->add_base_expression(node); SET_END_LOCATION_FROM_NODE(a
            	            , node); node = a
            	            ;  
            	        }


            	    }
            	    break;

            	default:
            	    goto loop17;	/* break out of the loop */
            	    break;
                }
            }
            loop17: ; /* Jump out to here if this rule does not match */


        }

    }
    // This is where rules clean up and exit
    //
    goto rulepost_exEx; /* Prevent compiler warnings */
    rulepost_exEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}
/* $ANTLR end post_ex */

/**
 * $ANTLR start assignment
 * C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:415:1: assignment returns [scripting::assignment_instruction* node] : lvalue ( assign_type expr )? ;
 */
scripting::assignment_instruction*
WNScriptASTParser::assignment()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    scripting::assignment_instruction* node;


    scripting::lvalue* lvalue15;
    scripting::assign_type assign_type16;
    scripting::expression* expr17;
    /* Initialize rule variables
     */
     


        node = wn_nullptr;


 
    {
        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:419:5: ( lvalue ( assign_type expr )? )
        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:419:10: lvalue ( assign_type expr )?
        {
            this->followPush(FOLLOW_lvalue_in_assignment2890);
            lvalue15=lvalue();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleassignmentEx;
            }


            {
                 node = m_allocator->make_allocated<scripting::assignment_instruction>(m_allocator, lvalue15
                ); SET_LOCATION_FROM_NODE(node, lvalue15
                ); 
            }


            // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:420:9: ( assign_type expr )?
            {
                int alt18=2;
                switch ( this->LA(1) )
                {
                    case CHOWN:
                    case 45:
                    case 48:
                    case 50:
                    case 52:
                    case 55:
                    case 58:
                    	{
                    		alt18=1;
                    	}
                        break;
                }

                switch (alt18)
                {
            	case 1:
            	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:420:10: assign_type expr
            	    {
            	        this->followPush(FOLLOW_assign_type_in_assignment2903);
            	        assign_type16=assign_type();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleassignmentEx;
            	        }


            	        this->followPush(FOLLOW_expr_in_assignment2905);
            	        expr17=expr();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleassignmentEx;
            	        }


            	        {
            	             node->add_value(assign_type16
            	            , expr17
            	            ); SET_END_LOCATION_FROM_NODE(node, expr17
            	            ); 
            	        }


            	    }
            	    break;

                }
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleassignmentEx; /* Prevent compiler warnings */
    ruleassignmentEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}
/* $ANTLR end assignment */

/**
 * $ANTLR start constant
 * C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:422:1: constant returns [scripting::constant_expression* node] : ( INT | FLOAT | CHAR | STRING | BOOL );
 */
scripting::constant_expression*
WNScriptASTParser::constant()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    scripting::constant_expression* node;


    const ImplTraits::CommonTokenType* INT18 = NULL;
    const ImplTraits::CommonTokenType* FLOAT19 = NULL;
    const ImplTraits::CommonTokenType* CHAR20 = NULL;
    const ImplTraits::CommonTokenType* STRING21 = NULL;
    const ImplTraits::CommonTokenType* BOOL22 = NULL;

    /* Initialize rule variables
     */
     


        node = wn_nullptr;


 
    {
        {
            //  C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:426:5: ( INT | FLOAT | CHAR | STRING | BOOL )

            ANTLR_UINT32 alt19;

            alt19=5;

            switch ( this->LA(1) )
            {
            case INT:
            	{
            		alt19=1;
            	}
                break;
            case FLOAT:
            	{
            		alt19=2;
            	}
                break;
            case CHAR:
            	{
            		alt19=3;
            	}
                break;
            case STRING:
            	{
            		alt19=4;
            	}
                break;
            case BOOL:
            	{
            		alt19=5;
            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 19 );
                ex->set_state( 0 );


                goto ruleconstantEx;

            }

            switch (alt19)
            {
        	case 1:
        	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:426:10: INT
        	    {
        	        INT18 =  this->matchToken(INT, &FOLLOW_INT_in_constant2938);
        	        if  (this->hasException())
        	        {
        	            goto ruleconstantEx;
        	        }


        	        {
        	             node = m_allocator->make_allocated<scripting::constant_expression>(m_allocator, scripting::type_classification::int_type, (INT18->getText()).c_str()); SET_LOCATION(node, INT18); 
        	        }


        	    }
        	    break;
        	case 2:
        	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:427:10: FLOAT
        	    {
        	        FLOAT19 =  this->matchToken(FLOAT, &FOLLOW_FLOAT_in_constant2954);
        	        if  (this->hasException())
        	        {
        	            goto ruleconstantEx;
        	        }


        	        {
        	             node = m_allocator->make_allocated<scripting::constant_expression>(m_allocator, scripting::type_classification::float_type, (FLOAT19->getText()).c_str()); SET_LOCATION(node, FLOAT19); 
        	        }


        	    }
        	    break;
        	case 3:
        	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:428:10: CHAR
        	    {
        	        CHAR20 =  this->matchToken(CHAR, &FOLLOW_CHAR_in_constant2968);
        	        if  (this->hasException())
        	        {
        	            goto ruleconstantEx;
        	        }


        	        {
        	             node = m_allocator->make_allocated<scripting::constant_expression>(m_allocator, scripting::type_classification::char_type, (CHAR20->getText()).c_str()); SET_LOCATION(node, CHAR20);
        	        }


        	    }
        	    break;
        	case 4:
        	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:429:10: STRING
        	    {
        	        STRING21 =  this->matchToken(STRING, &FOLLOW_STRING_in_constant2983);
        	        if  (this->hasException())
        	        {
        	            goto ruleconstantEx;
        	        }


        	        {
        	             node = m_allocator->make_allocated<scripting::constant_expression>(m_allocator, scripting::type_classification::string_type, (STRING21->getText()).c_str()); SET_LOCATION(node, STRING21); 
        	        }


        	    }
        	    break;
        	case 5:
        	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:430:9: BOOL
        	    {
        	        BOOL22 =  this->matchToken(BOOL, &FOLLOW_BOOL_in_constant2995);
        	        if  (this->hasException())
        	        {
        	            goto ruleconstantEx;
        	        }


        	        {
        	             node = m_allocator->make_allocated<scripting::constant_expression>(m_allocator, scripting::type_classification::bool_type, (BOOL22->getText()).c_str()); SET_LOCATION(node, BOOL22); 
        	        }


        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto ruleconstantEx; /* Prevent compiler warnings */
    ruleconstantEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}
/* $ANTLR end constant */

/**
 * $ANTLR start prim_ex
 * C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:433:1: prim_ex returns [scripting::expression * node] : ( ID |ba= LBRACKET a= expr bb= RBRACKET |b= constant |c= scalarType ( (e= structInit ) | (f= arrayInit ) ) |d= NULLTOK );
 */
scripting::expression *
WNScriptASTParser::prim_ex()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    scripting::expression * node;


    const ImplTraits::CommonTokenType* ba = NULL;
    const ImplTraits::CommonTokenType* bb = NULL;
    const ImplTraits::CommonTokenType* d = NULL;
    const ImplTraits::CommonTokenType* ID23 = NULL;
    scripting::expression* a;
    scripting::constant_expression* b;
    scripting::type_node* c;
    scripting::struct_allocation_expression* e;
    scripting::array_allocation_expression* f;
    /* Initialize rule variables
     */
     


        node = wn_nullptr;


 
    {
        {
            //  C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:437:5: ( ID |ba= LBRACKET a= expr bb= RBRACKET |b= constant |c= scalarType ( (e= structInit ) | (f= arrayInit ) ) |d= NULLTOK )

            ANTLR_UINT32 alt21;

            alt21=5;

            switch ( this->LA(1) )
            {
            case ID:
            	{
            		alt21=1;
            	}
                break;
            case LBRACKET:
            	{
            		alt21=2;
            	}
                break;
            case BOOL:
            case CHAR:
            case FLOAT:
            case INT:
            case STRING:
            	{
            		alt21=3;
            	}
                break;
            case TYPE:
            	{
            		alt21=4;
            	}
                break;
            case NULLTOK:
            	{
            		alt21=5;
            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 21 );
                ex->set_state( 0 );


                goto ruleprim_exEx;

            }

            switch (alt21)
            {
        	case 1:
        	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:437:10: ID
        	    {
        	        ID23 =  this->matchToken(ID, &FOLLOW_ID_in_prim_ex3027);
        	        if  (this->hasException())
        	        {
        	            goto ruleprim_exEx;
        	        }


        	        {
        	             node = m_allocator->make_allocated<scripting::id_expression>(m_allocator, (ID23->getText()).c_str()); SET_LOCATION(node, ID23);
        	        }


        	    }
        	    break;
        	case 2:
        	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:438:10: ba= LBRACKET a= expr bb= RBRACKET
        	    {
        	        ba =  this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_prim_ex3042);
        	        if  (this->hasException())
        	        {
        	            goto ruleprim_exEx;
        	        }


        	        this->followPush(FOLLOW_expr_in_prim_ex3046);
        	        a=expr();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleprim_exEx;
        	        }


        	        bb =  this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_prim_ex3050);
        	        if  (this->hasException())
        	        {
        	            goto ruleprim_exEx;
        	        }


        	        {
        	            node = a
        	            ; SET_LOCATION(node, ba); SET_END_LOCATION(node, bb); 
        	        }


        	    }
        	    break;
        	case 3:
        	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:439:10: b= constant
        	    {
        	        this->followPush(FOLLOW_constant_in_prim_ex3065);
        	        b=constant();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleprim_exEx;
        	        }


        	        {
        	            node = b
        	            ; 
        	        }


        	    }
        	    break;
        	case 4:
        	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:440:9: c= scalarType ( (e= structInit ) | (f= arrayInit ) )
        	    {
        	        this->followPush(FOLLOW_scalarType_in_prim_ex3080);
        	        c=scalarType();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleprim_exEx;
        	        }


        	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:441:11: ( (e= structInit ) | (f= arrayInit ) )
        	        {
        	            int alt20=2;
        	            switch ( this->LA(1) )
        	            {
        	            case LBRACKET:
        	            	{
        	            		alt20=1;
        	            	}
        	                break;
        	            case LSQBRACKET:
        	            	{
        	            		alt20=2;
        	            	}
        	                break;

        	            default:
        	                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
        	                ex->set_decisionNum( 20 );
        	                ex->set_state( 0 );


        	                goto ruleprim_exEx;

        	            }

        	            switch (alt20)
        	            {
        	        	case 1:
        	        	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:442:15: (e= structInit )
        	        	    {
        	        	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:442:15: (e= structInit )
        	        	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:442:17: e= structInit
        	        	        {
        	        	            this->followPush(FOLLOW_structInit_in_prim_ex3112);
        	        	            e=structInit();

        	        	            this->followPop();
        	        	            if  (this->hasException())
        	        	            {
        	        	                goto ruleprim_exEx;
        	        	            }


        	        	        }


        	        	        {
        	        	             e
        	        	            ->set_type(c
        	        	            ); node=e
        	        	            ; SET_START_LOCATION_FROM_NODE(node, c
        	        	            ); 
        	        	        }


        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:443:15: (f= arrayInit )
        	        	    {
        	        	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:443:15: (f= arrayInit )
        	        	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:443:17: f= arrayInit
        	        	        {
        	        	            this->followPush(FOLLOW_arrayInit_in_prim_ex3136);
        	        	            f=arrayInit();

        	        	            this->followPop();
        	        	            if  (this->hasException())
        	        	            {
        	        	                goto ruleprim_exEx;
        	        	            }


        	        	        }


        	        	        {
        	        	             f
        	        	            ->set_type(c
        	        	            ); node=f
        	        	            ; SET_START_LOCATION_FROM_NODE(node, c
        	        	            ); 
        	        	        }


        	        	    }
        	        	    break;

        	            }
        	        }

        	    }
        	    break;
        	case 5:
        	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:445:9: d= NULLTOK
        	    {
        	        d =  this->matchToken(NULLTOK, &FOLLOW_NULLTOK_in_prim_ex3165);
        	        if  (this->hasException())
        	        {
        	            goto ruleprim_exEx;
        	        }


        	        {
        	             node = m_allocator->make_allocated<scripting::null_allocation_expression>(m_allocator); SET_LOCATION(node, d); 
        	        }


        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto ruleprim_exEx; /* Prevent compiler warnings */
    ruleprim_exEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}
/* $ANTLR end prim_ex */

/**
 * $ANTLR start structInit
 * C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:448:1: structInit returns [scripting::struct_allocation_expression* node] : (a= LBRACKET b= RBRACKET |c= LBRACKET d= expr e= RBRACKET );
 */
scripting::struct_allocation_expression*
WNScriptASTParser::structInit()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    scripting::struct_allocation_expression* node;


    const ImplTraits::CommonTokenType* a = NULL;
    const ImplTraits::CommonTokenType* b = NULL;
    const ImplTraits::CommonTokenType* c = NULL;
    const ImplTraits::CommonTokenType* e = NULL;
    scripting::expression* d;
    /* Initialize rule variables
     */
     


        node = wn_nullptr;


 
    {
        {
            //  C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:452:5: (a= LBRACKET b= RBRACKET |c= LBRACKET d= expr e= RBRACKET )

            ANTLR_UINT32 alt22;

            alt22=2;

            switch ( this->LA(1) )
            {
            case LBRACKET:
            	{
            		switch ( this->LA(2) )
            		{
            		case RBRACKET:
            			{
            				alt22=1;
            			}
            		    break;
            		case BOOL:
            		case CHAR:
            		case DOUBDEC:
            		case DOUBINC:
            		case FLOAT:
            		case ID:
            		case INT:
            		case LBRACKET:
            		case NULLTOK:
            		case STRING:
            		case TYPE:
            		case 51:
            			{
            				alt22=2;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 22 );
            		    ex->set_state( 1 );


            		    goto rulestructInitEx;

            		}

            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 22 );
                ex->set_state( 0 );


                goto rulestructInitEx;

            }

            switch (alt22)
            {
        	case 1:
        	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:452:7: a= LBRACKET b= RBRACKET
        	    {
        	        a =  this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_structInit3194);
        	        if  (this->hasException())
        	        {
        	            goto rulestructInitEx;
        	        }


        	        b =  this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_structInit3198);
        	        if  (this->hasException())
        	        {
        	            goto rulestructInitEx;
        	        }


        	        {
        	             node = m_allocator->make_allocated<scripting::struct_allocation_expression>(m_allocator); SET_LOCATION(node, a); SET_END_LOCATION(node, b); 
        	        }


        	    }
        	    break;
        	case 2:
        	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:453:7: c= LBRACKET d= expr e= RBRACKET
        	    {
        	        c =  this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_structInit3210);
        	        if  (this->hasException())
        	        {
        	            goto rulestructInitEx;
        	        }


        	        this->followPush(FOLLOW_expr_in_structInit3214);
        	        d=expr();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestructInitEx;
        	        }


        	        e =  this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_structInit3218);
        	        if  (this->hasException())
        	        {
        	            goto rulestructInitEx;
        	        }


        	        {
        	             node = m_allocator->make_allocated<scripting::struct_allocation_expression>(m_allocator); node->set_copy_initializer(d); SET_LOCATION(node, c); SET_END_LOCATION(node, e); 
        	        }


        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto rulestructInitEx; /* Prevent compiler warnings */
    rulestructInitEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}
/* $ANTLR end structInit */

/**
 * $ANTLR start arrayInit
 * C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:456:1: arrayInit returns [scripting::array_allocation_expression* node] : ( ( ( LSQBRACKET e= expr RSQBRACKET )+ ( LSQBRACKET RSQBRACKET )* ) | ( LSQBRACKET RSQBRACKET )+ ) ( ( LBRACKET a= RBRACKET ) | ( LBRACKET b= expr c= RBRACKET ) ) ;
 */
scripting::array_allocation_expression*
WNScriptASTParser::arrayInit()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    scripting::array_allocation_expression* node;


    const ImplTraits::CommonTokenType* a = NULL;
    const ImplTraits::CommonTokenType* c = NULL;
    scripting::expression* e;
    scripting::expression* b;
    /* Initialize rule variables
     */
     


        node = m_allocator->make_allocated<scripting::array_allocation_expression>(m_allocator);


 
    {
        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:460:5: ( ( ( ( LSQBRACKET e= expr RSQBRACKET )+ ( LSQBRACKET RSQBRACKET )* ) | ( LSQBRACKET RSQBRACKET )+ ) ( ( LBRACKET a= RBRACKET ) | ( LBRACKET b= expr c= RBRACKET ) ) )
        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:460:9: ( ( ( LSQBRACKET e= expr RSQBRACKET )+ ( LSQBRACKET RSQBRACKET )* ) | ( LSQBRACKET RSQBRACKET )+ ) ( ( LBRACKET a= RBRACKET ) | ( LBRACKET b= expr c= RBRACKET ) )
        {
            // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:460:9: ( ( ( LSQBRACKET e= expr RSQBRACKET )+ ( LSQBRACKET RSQBRACKET )* ) | ( LSQBRACKET RSQBRACKET )+ )
            {
                int alt26=2;
                switch ( this->LA(1) )
                {
                case LSQBRACKET:
                	{
                		switch ( this->LA(2) )
                		{
                		case RSQBRACKET:
                			{
                				alt26=2;
                			}
                		    break;
                		case BOOL:
                		case CHAR:
                		case DOUBDEC:
                		case DOUBINC:
                		case FLOAT:
                		case ID:
                		case INT:
                		case LBRACKET:
                		case NULLTOK:
                		case STRING:
                		case TYPE:
                		case 51:
                			{
                				alt26=1;
                			}
                		    break;

                		default:
                		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		    ex->set_decisionNum( 26 );
                		    ex->set_state( 1 );


                		    goto rulearrayInitEx;

                		}

                	}
                    break;

                default:
                    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 26 );
                    ex->set_state( 0 );


                    goto rulearrayInitEx;

                }

                switch (alt26)
                {
            	case 1:
            	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:461:13: ( ( LSQBRACKET e= expr RSQBRACKET )+ ( LSQBRACKET RSQBRACKET )* )
            	    {
            	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:461:13: ( ( LSQBRACKET e= expr RSQBRACKET )+ ( LSQBRACKET RSQBRACKET )* )
            	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:462:17: ( LSQBRACKET e= expr RSQBRACKET )+ ( LSQBRACKET RSQBRACKET )*
            	        {
            	            // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:462:17: ( LSQBRACKET e= expr RSQBRACKET )+
            	            {
            	                int cnt23=0;

            	                for (;;)
            	                {
            	                    int alt23=2;
            	            	switch ( this->LA(1) )
            	            	{
            	            	case LSQBRACKET:
            	            		{
            	            			switch ( this->LA(2) )
            	            			{
            	            			case BOOL:
            	            			case CHAR:
            	            			case DOUBDEC:
            	            			case DOUBINC:
            	            			case FLOAT:
            	            			case ID:
            	            			case INT:
            	            			case LBRACKET:
            	            			case NULLTOK:
            	            			case STRING:
            	            			case TYPE:
            	            			case 51:
            	            				{
            	            					alt23=1;
            	            				}
            	            			    break;

            	            			}

            	            		}
            	            	    break;

            	            	}

            	            	switch (alt23)
            	            	{
            	            	    case 1:
            	            	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:462:18: LSQBRACKET e= expr RSQBRACKET
            	            	        {
            	            	             this->matchToken(LSQBRACKET, &FOLLOW_LSQBRACKET_in_arrayInit3280);
            	            	            if  (this->hasException())
            	            	            {
            	            	                goto rulearrayInitEx;
            	            	            }


            	            	            this->followPush(FOLLOW_expr_in_arrayInit3284);
            	            	            e=expr();

            	            	            this->followPop();
            	            	            if  (this->hasException())
            	            	            {
            	            	                goto rulearrayInitEx;
            	            	            }


            	            	             this->matchToken(RSQBRACKET, &FOLLOW_RSQBRACKET_in_arrayInit3286);
            	            	            if  (this->hasException())
            	            	            {
            	            	                goto rulearrayInitEx;
            	            	            }


            	            	            {
            	            	                 node->add_expression(e
            	            	                );
            	            	            }


            	            	        }
            	            	        break;

            	            	    default:

            	            		if ( cnt23 >= 1 )
            	            		{
            	            		    goto loop23;
            	            		}
            	            		/* mismatchedSetEx()
            	            		 */
            	            		new ANTLR_Exception< WNScriptASTParserImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


            	            		goto rulearrayInitEx;
            	            	}
            	            	cnt23++;
            	                }
            	                loop23: ;	/* Jump to here if this rule does not match */
            	            }

            	            // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:463:17: ( LSQBRACKET RSQBRACKET )*

            	            for (;;)
            	            {
            	                int alt24=2;
            	                switch ( this->LA(1) )
            	                {
            	                case LSQBRACKET:
            	                	{
            	                		alt24=1;
            	                	}
            	                    break;

            	                }

            	                switch (alt24)
            	                {
            	            	case 1:
            	            	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:463:18: LSQBRACKET RSQBRACKET
            	            	    {
            	            	         this->matchToken(LSQBRACKET, &FOLLOW_LSQBRACKET_in_arrayInit3310);
            	            	        if  (this->hasException())
            	            	        {
            	            	            goto rulearrayInitEx;
            	            	        }


            	            	         this->matchToken(RSQBRACKET, &FOLLOW_RSQBRACKET_in_arrayInit3312);
            	            	        if  (this->hasException())
            	            	        {
            	            	            goto rulearrayInitEx;
            	            	        }


            	            	        {
            	            	             node->add_level(); 
            	            	        }


            	            	    }
            	            	    break;

            	            	default:
            	            	    goto loop24;	/* break out of the loop */
            	            	    break;
            	                }
            	            }
            	            loop24: ; /* Jump out to here if this rule does not match */


            	        }


            	    }
            	    break;
            	case 2:
            	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:465:17: ( LSQBRACKET RSQBRACKET )+
            	    {
            	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:465:17: ( LSQBRACKET RSQBRACKET )+
            	        {
            	            int cnt25=0;

            	            for (;;)
            	            {
            	                int alt25=2;
            	        	switch ( this->LA(1) )
            	        	{
            	        	case LSQBRACKET:
            	        		{
            	        			alt25=1;
            	        		}
            	        	    break;

            	        	}

            	        	switch (alt25)
            	        	{
            	        	    case 1:
            	        	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:465:18: LSQBRACKET RSQBRACKET
            	        	        {
            	        	             this->matchToken(LSQBRACKET, &FOLLOW_LSQBRACKET_in_arrayInit3350);
            	        	            if  (this->hasException())
            	        	            {
            	        	                goto rulearrayInitEx;
            	        	            }


            	        	             this->matchToken(RSQBRACKET, &FOLLOW_RSQBRACKET_in_arrayInit3352);
            	        	            if  (this->hasException())
            	        	            {
            	        	                goto rulearrayInitEx;
            	        	            }


            	        	            {
            	        	                 node->add_level(); 
            	        	            }


            	        	        }
            	        	        break;

            	        	    default:

            	        		if ( cnt25 >= 1 )
            	        		{
            	        		    goto loop25;
            	        		}
            	        		/* mismatchedSetEx()
            	        		 */
            	        		new ANTLR_Exception< WNScriptASTParserImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


            	        		goto rulearrayInitEx;
            	        	}
            	        	cnt25++;
            	            }
            	            loop25: ;	/* Jump to here if this rule does not match */
            	        }

            	    }
            	    break;

                }
            }

            // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:467:9: ( ( LBRACKET a= RBRACKET ) | ( LBRACKET b= expr c= RBRACKET ) )
            {
                int alt27=2;
                switch ( this->LA(1) )
                {
                case LBRACKET:
                	{
                		switch ( this->LA(2) )
                		{
                		case RBRACKET:
                			{
                				alt27=1;
                			}
                		    break;
                		case BOOL:
                		case CHAR:
                		case DOUBDEC:
                		case DOUBINC:
                		case FLOAT:
                		case ID:
                		case INT:
                		case LBRACKET:
                		case NULLTOK:
                		case STRING:
                		case TYPE:
                		case 51:
                			{
                				alt27=2;
                			}
                		    break;

                		default:
                		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		    ex->set_decisionNum( 27 );
                		    ex->set_state( 1 );


                		    goto rulearrayInitEx;

                		}

                	}
                    break;

                default:
                    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 27 );
                    ex->set_state( 0 );


                    goto rulearrayInitEx;

                }

                switch (alt27)
                {
            	case 1:
            	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:468:13: ( LBRACKET a= RBRACKET )
            	    {
            	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:468:13: ( LBRACKET a= RBRACKET )
            	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:468:15: LBRACKET a= RBRACKET
            	        {
            	             this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_arrayInit3393);
            	            if  (this->hasException())
            	            {
            	                goto rulearrayInitEx;
            	            }


            	            a =  this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_arrayInit3397);
            	            if  (this->hasException())
            	            {
            	                goto rulearrayInitEx;
            	            }


            	            {
            	                 SET_LOCATION(node, a); 
            	            }


            	        }


            	    }
            	    break;
            	case 2:
            	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:470:13: ( LBRACKET b= expr c= RBRACKET )
            	    {
            	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:470:13: ( LBRACKET b= expr c= RBRACKET )
            	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:470:15: LBRACKET b= expr c= RBRACKET
            	        {
            	             this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_arrayInit3431);
            	            if  (this->hasException())
            	            {
            	                goto rulearrayInitEx;
            	            }


            	            this->followPush(FOLLOW_expr_in_arrayInit3435);
            	            b=expr();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulearrayInitEx;
            	            }


            	            c =  this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_arrayInit3439);
            	            if  (this->hasException())
            	            {
            	                goto rulearrayInitEx;
            	            }


            	            {
            	                 node->set_copy_initializer(b); SET_LOCATION(node, c); 
            	            }


            	        }


            	    }
            	    break;

                }
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto rulearrayInitEx; /* Prevent compiler warnings */
    rulearrayInitEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}
/* $ANTLR end arrayInit */

/**
 * $ANTLR start declaration
 * C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:475:1: declaration returns [scripting::declaration* node] : a= decl ( ( '=' ( (c= expr ) ) ) | ( '<==' ( (d= expr ) ) ) ) ;
 */
scripting::declaration*
WNScriptASTParser::declaration()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    scripting::declaration* node;


    scripting::declaration* a;
    scripting::expression* c;
    scripting::expression* d;
    /* Initialize rule variables
     */
     


        node = wn_nullptr;


 
    {
        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:479:5: (a= decl ( ( '=' ( (c= expr ) ) ) | ( '<==' ( (d= expr ) ) ) ) )
        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:479:10: a= decl ( ( '=' ( (c= expr ) ) ) | ( '<==' ( (d= expr ) ) ) )
        {
            this->followPush(FOLLOW_decl_in_declaration3484);
            a=decl();

            this->followPop();
            if  (this->hasException())
            {
                goto ruledeclarationEx;
            }


            {
                 node = a
                ; 
            }


            // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:480:13: ( ( '=' ( (c= expr ) ) ) | ( '<==' ( (d= expr ) ) ) )
            {
                int alt28=2;
                switch ( this->LA(1) )
                {
                case 58:
                	{
                		alt28=1;
                	}
                    break;
                case CHOWN:
                	{
                		alt28=2;
                	}
                    break;

                default:
                    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 28 );
                    ex->set_state( 0 );


                    goto ruledeclarationEx;

                }

                switch (alt28)
                {
            	case 1:
            	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:481:17: ( '=' ( (c= expr ) ) )
            	    {
            	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:481:17: ( '=' ( (c= expr ) ) )
            	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:481:18: '=' ( (c= expr ) )
            	        {
            	             this->matchToken(58, &FOLLOW_58_in_declaration3519);
            	            if  (this->hasException())
            	            {
            	                goto ruledeclarationEx;
            	            }


            	            // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:481:22: ( (c= expr ) )
            	            // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:481:24: (c= expr )
            	            {
            	                // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:481:24: (c= expr )
            	                // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:481:25: c= expr
            	                {
            	                    this->followPush(FOLLOW_expr_in_declaration3526);
            	                    c=expr();

            	                    this->followPop();
            	                    if  (this->hasException())
            	                    {
            	                        goto ruledeclarationEx;
            	                    }


            	                }


            	                {
            	                     node->add_expression_initializer(c
            	                    ); SET_END_LOCATION_FROM_NODE(node, c
            	                    ); 
            	                }


            	            }


            	        }


            	    }
            	    break;
            	case 2:
            	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:482:17: ( '<==' ( (d= expr ) ) )
            	    {
            	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:482:17: ( '<==' ( (d= expr ) ) )
            	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:482:18: '<==' ( (d= expr ) )
            	        {
            	             this->matchToken(CHOWN, &FOLLOW_CHOWN_in_declaration3552);
            	            if  (this->hasException())
            	            {
            	                goto ruledeclarationEx;
            	            }


            	            // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:482:24: ( (d= expr ) )
            	            // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:482:26: (d= expr )
            	            {
            	                // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:482:26: (d= expr )
            	                // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:482:27: d= expr
            	                {
            	                    this->followPush(FOLLOW_expr_in_declaration3559);
            	                    d=expr();

            	                    this->followPop();
            	                    if  (this->hasException())
            	                    {
            	                        goto ruledeclarationEx;
            	                    }


            	                }


            	                {
            	                     node->add_expression_initializer(d
            	                    , true); SET_END_LOCATION_FROM_NODE(node, d
            	                    ); 
            	                }


            	            }


            	        }


            	    }
            	    break;

                }
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto ruledeclarationEx; /* Prevent compiler warnings */
    ruledeclarationEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}
/* $ANTLR end declaration */

/**
 * $ANTLR start instructionScalar
 * C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:486:1: instructionScalar returns [scripting::instruction* node] : ( declaration | assignment );
 */
scripting::instruction*
WNScriptASTParser::instructionScalar()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    scripting::instruction* node;


    scripting::declaration* declaration24;
    scripting::assignment_instruction* assignment25;
    /* Initialize rule variables
     */
     


        node = wn_nullptr;


 
    {
        {
            //  C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:490:5: ( declaration | assignment )

            ANTLR_UINT32 alt29;

            alt29=2;

            alt29 = cdfa29.predict(this, this->get_rec(), this->get_istream(), cdfa29 );
            if  (this->hasException())
            {
                goto ruleinstructionScalarEx;
            }

            switch (alt29)
            {
        	case 1:
        	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:490:10: declaration
        	    {
        	        this->followPush(FOLLOW_declaration_in_instructionScalar3608);
        	        declaration24=declaration();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleinstructionScalarEx;
        	        }


        	        {
        	            node = declaration24
        	            ; 
        	        }


        	    }
        	    break;
        	case 2:
        	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:491:10: assignment
        	    {
        	        this->followPush(FOLLOW_assignment_in_instructionScalar3621);
        	        assignment25=assignment();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleinstructionScalarEx;
        	        }


        	        {
        	            node = assignment25
        	            ; 
        	        }


        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto ruleinstructionScalarEx; /* Prevent compiler warnings */
    ruleinstructionScalarEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}
/* $ANTLR end instructionScalar */

/**
 * $ANTLR start returnInst
 * C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:494:1: returnInst returns [scripting::return_instruction* node] : (a= RETURN expr b= SEMICOLON |c= RETURN d= SEMICOLON |e= RETURN_OWN expr f= SEMICOLON );
 */
scripting::return_instruction*
WNScriptASTParser::returnInst()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    scripting::return_instruction* node;


    const ImplTraits::CommonTokenType* a = NULL;
    const ImplTraits::CommonTokenType* b = NULL;
    const ImplTraits::CommonTokenType* c = NULL;
    const ImplTraits::CommonTokenType* d = NULL;
    const ImplTraits::CommonTokenType* e = NULL;
    const ImplTraits::CommonTokenType* f = NULL;
    scripting::expression* expr26;
    scripting::expression* expr27;
    /* Initialize rule variables
     */
     


        node = wn_nullptr;


 
    {
        {
            //  C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:498:5: (a= RETURN expr b= SEMICOLON |c= RETURN d= SEMICOLON |e= RETURN_OWN expr f= SEMICOLON )

            ANTLR_UINT32 alt30;

            alt30=3;

            switch ( this->LA(1) )
            {
            case RETURN:
            	{
            		switch ( this->LA(2) )
            		{
            		case SEMICOLON:
            			{
            				alt30=2;
            			}
            		    break;
            		case BOOL:
            		case CHAR:
            		case DOUBDEC:
            		case DOUBINC:
            		case FLOAT:
            		case ID:
            		case INT:
            		case LBRACKET:
            		case NULLTOK:
            		case STRING:
            		case TYPE:
            		case 51:
            			{
            				alt30=1;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 30 );
            		    ex->set_state( 1 );


            		    goto rulereturnInstEx;

            		}

            	}
                break;
            case RETURN_OWN:
            	{
            		alt30=3;
            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 30 );
                ex->set_state( 0 );


                goto rulereturnInstEx;

            }

            switch (alt30)
            {
        	case 1:
        	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:498:9: a= RETURN expr b= SEMICOLON
        	    {
        	        a =  this->matchToken(RETURN, &FOLLOW_RETURN_in_returnInst3653);
        	        if  (this->hasException())
        	        {
        	            goto rulereturnInstEx;
        	        }


        	        this->followPush(FOLLOW_expr_in_returnInst3655);
        	        expr26=expr();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulereturnInstEx;
        	        }


        	        b =  this->matchToken(SEMICOLON, &FOLLOW_SEMICOLON_in_returnInst3659);
        	        if  (this->hasException())
        	        {
        	            goto rulereturnInstEx;
        	        }


        	        {
        	             node = m_allocator->make_allocated<scripting::return_instruction>(m_allocator, expr26
        	            ); SET_LOCATION(node, a); SET_END_LOCATION(node, b);
        	        }


        	    }
        	    break;
        	case 2:
        	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:499:9: c= RETURN d= SEMICOLON
        	    {
        	        c =  this->matchToken(RETURN, &FOLLOW_RETURN_in_returnInst3673);
        	        if  (this->hasException())
        	        {
        	            goto rulereturnInstEx;
        	        }


        	        d =  this->matchToken(SEMICOLON, &FOLLOW_SEMICOLON_in_returnInst3677);
        	        if  (this->hasException())
        	        {
        	            goto rulereturnInstEx;
        	        }


        	        {
        	             node = m_allocator->make_allocated<scripting::return_instruction>(m_allocator); SET_LOCATION(node, c); SET_END_LOCATION(node, d); 
        	        }


        	    }
        	    break;
        	case 3:
        	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:500:9: e= RETURN_OWN expr f= SEMICOLON
        	    {
        	        e =  this->matchToken(RETURN_OWN, &FOLLOW_RETURN_OWN_in_returnInst3691);
        	        if  (this->hasException())
        	        {
        	            goto rulereturnInstEx;
        	        }


        	        this->followPush(FOLLOW_expr_in_returnInst3693);
        	        expr27=expr();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulereturnInstEx;
        	        }


        	        f =  this->matchToken(SEMICOLON, &FOLLOW_SEMICOLON_in_returnInst3697);
        	        if  (this->hasException())
        	        {
        	            goto rulereturnInstEx;
        	        }


        	        {
        	             node = m_allocator->make_allocated<scripting::return_instruction>(m_allocator, expr27
        	            , true); SET_LOCATION(node, e); SET_END_LOCATION(node, f); 
        	        }


        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto rulereturnInstEx; /* Prevent compiler warnings */
    rulereturnInstEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}
/* $ANTLR end returnInst */

/**
 * $ANTLR start whileInst
 * C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:503:1: whileInst returns [scripting::instruction* node] : WHILE LBRACKET expr RBRACKET body ;
 */
scripting::instruction*
WNScriptASTParser::whileInst()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    scripting::instruction* node;


    const ImplTraits::CommonTokenType* WHILE30 = NULL;
    scripting::expression* expr28;
    scripting::instruction_list* body29;
    /* Initialize rule variables
     */
     


        node = wn_nullptr;


 
    {
        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:507:9: ( WHILE LBRACKET expr RBRACKET body )
        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:507:14: WHILE LBRACKET expr RBRACKET body
        {
            WHILE30 =  this->matchToken(WHILE, &FOLLOW_WHILE_in_whileInst3735);
            if  (this->hasException())
            {
                goto rulewhileInstEx;
            }


             this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_whileInst3737);
            if  (this->hasException())
            {
                goto rulewhileInstEx;
            }


            this->followPush(FOLLOW_expr_in_whileInst3739);
            expr28=expr();

            this->followPop();
            if  (this->hasException())
            {
                goto rulewhileInstEx;
            }


             this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_whileInst3741);
            if  (this->hasException())
            {
                goto rulewhileInstEx;
            }


            this->followPush(FOLLOW_body_in_whileInst3743);
            body29=body();

            this->followPop();
            if  (this->hasException())
            {
                goto rulewhileInstEx;
            }


            {
                 node = m_allocator->make_allocated<scripting::while_instruction>(m_allocator, expr28
                , body29
                ); SET_LOCATION(node, WHILE30); SET_END_LOCATION_FROM_NODE(node, 
                body29
                ); 
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto rulewhileInstEx; /* Prevent compiler warnings */
    rulewhileInstEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}
/* $ANTLR end whileInst */

/**
 * $ANTLR start doInst
 * C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:509:1: doInst returns [scripting::instruction* node] : DO body WHILE LBRACKET expr RBRACKET SEMICOLON ;
 */
scripting::instruction*
WNScriptASTParser::doInst()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    scripting::instruction* node;


    const ImplTraits::CommonTokenType* DO33 = NULL;
    const ImplTraits::CommonTokenType* SEMICOLON34 = NULL;
    scripting::expression* expr31;
    scripting::instruction_list* body32;
    /* Initialize rule variables
     */
     


        node = wn_nullptr;


 
    {
        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:513:5: ( DO body WHILE LBRACKET expr RBRACKET SEMICOLON )
        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:513:10: DO body WHILE LBRACKET expr RBRACKET SEMICOLON
        {
            DO33 =  this->matchToken(DO, &FOLLOW_DO_in_doInst3779);
            if  (this->hasException())
            {
                goto ruledoInstEx;
            }


            this->followPush(FOLLOW_body_in_doInst3781);
            body32=body();

            this->followPop();
            if  (this->hasException())
            {
                goto ruledoInstEx;
            }


             this->matchToken(WHILE, &FOLLOW_WHILE_in_doInst3783);
            if  (this->hasException())
            {
                goto ruledoInstEx;
            }


             this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_doInst3785);
            if  (this->hasException())
            {
                goto ruledoInstEx;
            }


            this->followPush(FOLLOW_expr_in_doInst3787);
            expr31=expr();

            this->followPop();
            if  (this->hasException())
            {
                goto ruledoInstEx;
            }


             this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_doInst3789);
            if  (this->hasException())
            {
                goto ruledoInstEx;
            }


            SEMICOLON34 =  this->matchToken(SEMICOLON, &FOLLOW_SEMICOLON_in_doInst3791);
            if  (this->hasException())
            {
                goto ruledoInstEx;
            }


            {
                node = m_allocator->make_allocated<scripting::do_instruction>(m_allocator, expr31
                , body32
                ); SET_LOCATION(node, DO33); SET_END_LOCATION(node, SEMICOLON34); 
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto ruledoInstEx; /* Prevent compiler warnings */
    ruledoInstEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}
/* $ANTLR end doInst */

/**
 * $ANTLR start forInst
 * C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:516:1: forInst returns [scripting::for_instruction* node] : FOR LBRACKET (a= instructionScalar )? SEMICOLON (b= expr )? SEMICOLON (c= instructionScalar )? RBRACKET (d= body ) ;
 */
scripting::for_instruction*
WNScriptASTParser::forInst()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    scripting::for_instruction* node;


    const ImplTraits::CommonTokenType* FOR35 = NULL;
    scripting::instruction* a;
    scripting::expression* b;
    scripting::instruction* c;
    scripting::instruction_list* d;
    /* Initialize rule variables
     */
     


        node =  m_allocator->make_allocated<scripting::for_instruction>(m_allocator);


 
    {
        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:520:5: ( FOR LBRACKET (a= instructionScalar )? SEMICOLON (b= expr )? SEMICOLON (c= instructionScalar )? RBRACKET (d= body ) )
        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:520:10: FOR LBRACKET (a= instructionScalar )? SEMICOLON (b= expr )? SEMICOLON (c= instructionScalar )? RBRACKET (d= body )
        {
            FOR35 =  this->matchToken(FOR, &FOLLOW_FOR_in_forInst3823);
            if  (this->hasException())
            {
                goto ruleforInstEx;
            }


             this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_forInst3825);
            if  (this->hasException())
            {
                goto ruleforInstEx;
            }


            {
                 SET_LOCATION(node, FOR35); 
            }


            // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:521:21: (a= instructionScalar )?
            {
                int alt31=2;
                switch ( this->LA(1) )
                {
                    case BOOL:
                    case CHAR:
                    case DOUBDEC:
                    case DOUBINC:
                    case FLOAT:
                    case ID:
                    case INT:
                    case LBRACKET:
                    case NULLTOK:
                    case STRING:
                    case TYPE:
                    case 51:
                    	{
                    		alt31=1;
                    	}
                        break;
                }

                switch (alt31)
                {
            	case 1:
            	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:521:22: a= instructionScalar
            	    {
            	        this->followPush(FOLLOW_instructionScalar_in_forInst3853);
            	        a=instructionScalar();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleforInstEx;
            	        }


            	        {
            	            node->add_initializer(a
            	            );
            	        }


            	    }
            	    break;

                }
            }

             this->matchToken(SEMICOLON, &FOLLOW_SEMICOLON_in_forInst3859);
            if  (this->hasException())
            {
                goto ruleforInstEx;
            }


            // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:522:21: (b= expr )?
            {
                int alt32=2;
                switch ( this->LA(1) )
                {
                    case BOOL:
                    case CHAR:
                    case DOUBDEC:
                    case DOUBINC:
                    case FLOAT:
                    case ID:
                    case INT:
                    case LBRACKET:
                    case NULLTOK:
                    case STRING:
                    case TYPE:
                    case 51:
                    	{
                    		alt32=1;
                    	}
                        break;
                }

                switch (alt32)
                {
            	case 1:
            	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:522:22: b= expr
            	    {
            	        this->followPush(FOLLOW_expr_in_forInst3884);
            	        b=expr();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleforInstEx;
            	        }


            	        {
            	            node->add_condition(b
            	            ); 
            	        }


            	    }
            	    break;

                }
            }

             this->matchToken(SEMICOLON, &FOLLOW_SEMICOLON_in_forInst3898);
            if  (this->hasException())
            {
                goto ruleforInstEx;
            }


            // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:523:21: (c= instructionScalar )?
            {
                int alt33=2;
                switch ( this->LA(1) )
                {
                    case BOOL:
                    case CHAR:
                    case DOUBDEC:
                    case DOUBINC:
                    case FLOAT:
                    case ID:
                    case INT:
                    case LBRACKET:
                    case NULLTOK:
                    case STRING:
                    case TYPE:
                    case 51:
                    	{
                    		alt33=1;
                    	}
                        break;
                }

                switch (alt33)
                {
            	case 1:
            	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:523:22: c= instructionScalar
            	    {
            	        this->followPush(FOLLOW_instructionScalar_in_forInst3923);
            	        c=instructionScalar();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleforInstEx;
            	        }


            	        {
            	            node->add_post_op(c
            	            ); 
            	        }


            	    }
            	    break;

                }
            }

             this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_forInst3929);
            if  (this->hasException())
            {
                goto ruleforInstEx;
            }


            // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:524:21: (d= body )
            // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:524:22: d= body
            {
                this->followPush(FOLLOW_body_in_forInst3954);
                d=body();

                this->followPop();
                if  (this->hasException())
                {
                    goto ruleforInstEx;
                }


                {
                    node->add_body(d
                    ); SET_END_LOCATION_FROM_NODE(node, d
                    ); 
                }


            }


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleforInstEx; /* Prevent compiler warnings */
    ruleforInstEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}
/* $ANTLR end forInst */

/**
 * $ANTLR start elsemiddle
 * C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:528:1: elsemiddle returns [scripting::else_if_instruction* node] : ELSE IF LBRACKET expr RBRACKET body ;
 */
scripting::else_if_instruction*
WNScriptASTParser::elsemiddle()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    scripting::else_if_instruction* node;


    const ImplTraits::CommonTokenType* ELSE38 = NULL;
    scripting::expression* expr36;
    scripting::instruction_list* body37;
    /* Initialize rule variables
     */
     


        node = wn_nullptr;


 
    {
        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:532:5: ( ELSE IF LBRACKET expr RBRACKET body )
        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:532:10: ELSE IF LBRACKET expr RBRACKET body
        {
            ELSE38 =  this->matchToken(ELSE, &FOLLOW_ELSE_in_elsemiddle4002);
            if  (this->hasException())
            {
                goto ruleelsemiddleEx;
            }


             this->matchToken(IF, &FOLLOW_IF_in_elsemiddle4004);
            if  (this->hasException())
            {
                goto ruleelsemiddleEx;
            }


             this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_elsemiddle4006);
            if  (this->hasException())
            {
                goto ruleelsemiddleEx;
            }


            this->followPush(FOLLOW_expr_in_elsemiddle4008);
            expr36=expr();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleelsemiddleEx;
            }


             this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_elsemiddle4010);
            if  (this->hasException())
            {
                goto ruleelsemiddleEx;
            }


            this->followPush(FOLLOW_body_in_elsemiddle4012);
            body37=body();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleelsemiddleEx;
            }


            {
                 node = m_allocator->make_allocated<scripting::else_if_instruction>(m_allocator, expr36
                , body37
                ); SET_LOCATION(node, ELSE38); SET_END_LOCATION_FROM_NODE(node, 
                body37
                ); 
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleelsemiddleEx; /* Prevent compiler warnings */
    ruleelsemiddleEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}
/* $ANTLR end elsemiddle */

/**
 * $ANTLR start endif
 * C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:535:1: endif returns [scripting::instruction_list* node] : 'else' body ;
 */
scripting::instruction_list*
WNScriptASTParser::endif()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    scripting::instruction_list* node;


    scripting::instruction_list* body39;
    /* Initialize rule variables
     */
     


        node = wn_nullptr;


 
    {
        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:539:5: ( 'else' body )
        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:539:10: 'else' body
        {
             this->matchToken(ELSE, &FOLLOW_ELSE_in_endif4045);
            if  (this->hasException())
            {
                goto ruleendifEx;
            }


            this->followPush(FOLLOW_body_in_endif4047);
            body39=body();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleendifEx;
            }


            {
                node = body39
                ; 
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleendifEx; /* Prevent compiler warnings */
    ruleendifEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}
/* $ANTLR end endif */

/**
 * $ANTLR start ifInst
 * C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:542:1: ifInst returns [scripting::if_instruction* node] : IF LBRACKET expr RBRACKET body ( elsemiddle )* ( endif )? ;
 */
scripting::if_instruction*
WNScriptASTParser::ifInst()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    scripting::if_instruction* node;


    const ImplTraits::CommonTokenType* IF42 = NULL;
    scripting::expression* expr40;
    scripting::instruction_list* body41;
    scripting::else_if_instruction* elsemiddle43;
    scripting::instruction_list* endif44;
    /* Initialize rule variables
     */
     


        node = wn_nullptr;


 
    {
        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:546:5: ( IF LBRACKET expr RBRACKET body ( elsemiddle )* ( endif )? )
        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:546:10: IF LBRACKET expr RBRACKET body ( elsemiddle )* ( endif )?
        {
            IF42 =  this->matchToken(IF, &FOLLOW_IF_in_ifInst4077);
            if  (this->hasException())
            {
                goto ruleifInstEx;
            }


             this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_ifInst4079);
            if  (this->hasException())
            {
                goto ruleifInstEx;
            }


            this->followPush(FOLLOW_expr_in_ifInst4081);
            expr40=expr();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleifInstEx;
            }


             this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_ifInst4083);
            if  (this->hasException())
            {
                goto ruleifInstEx;
            }


            this->followPush(FOLLOW_body_in_ifInst4085);
            body41=body();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleifInstEx;
            }


            {
                node = m_allocator->make_allocated<scripting::if_instruction>(m_allocator, expr40
                , body41
                ); SET_LOCATION(node, IF42); SET_END_LOCATION_FROM_NODE(node, 
                body41
                ); 
            }


            // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:547:13: ( elsemiddle )*

            for (;;)
            {
                int alt34=2;
                switch ( this->LA(1) )
                {
                case ELSE:
                	{
                		switch ( this->LA(2) )
                		{
                		case IF:
                			{
                				alt34=1;
                			}
                		    break;

                		}

                	}
                    break;

                }

                switch (alt34)
                {
            	case 1:
            	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:547:14: elsemiddle
            	    {
            	        this->followPush(FOLLOW_elsemiddle_in_ifInst4102);
            	        elsemiddle43=elsemiddle();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleifInstEx;
            	        }


            	        {
            	            node->add_else_if(elsemiddle43
            	            ); SET_END_LOCATION_FROM_NODE(node, elsemiddle43
            	            ); 
            	        }


            	    }
            	    break;

            	default:
            	    goto loop34;	/* break out of the loop */
            	    break;
                }
            }
            loop34: ; /* Jump out to here if this rule does not match */


            // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:548:13: ( endif )?
            {
                int alt35=2;
                switch ( this->LA(1) )
                {
                    case ELSE:
                    	{
                    		alt35=1;
                    	}
                        break;
                }

                switch (alt35)
                {
            	case 1:
            	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:548:14: endif
            	    {
            	        this->followPush(FOLLOW_endif_in_ifInst4122);
            	        endif44=endif();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleifInstEx;
            	        }


            	        {
            	            node->add_else(endif44
            	            ); SET_LOCATION(node, IF42); SET_END_LOCATION_FROM_NODE(node, 
            	            endif44
            	            ); 
            	        }


            	    }
            	    break;

                }
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleifInstEx; /* Prevent compiler warnings */
    ruleifInstEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}
/* $ANTLR end ifInst */

/**
 * $ANTLR start instruction
 * C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:551:1: instruction returns [scripting::instruction* node] : ( ifInst | whileInst | doInst | forInst | instructionScalar ';' | returnInst );
 */
scripting::instruction*
WNScriptASTParser::instruction()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    scripting::instruction* node;


    scripting::if_instruction* ifInst45;
    scripting::instruction* whileInst46;
    scripting::instruction* doInst47;
    scripting::for_instruction* forInst48;
    scripting::instruction* instructionScalar49;
    scripting::return_instruction* returnInst50;
    /* Initialize rule variables
     */
     


        node = wn_nullptr;


 
    {
        {
            //  C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:555:5: ( ifInst | whileInst | doInst | forInst | instructionScalar ';' | returnInst )

            ANTLR_UINT32 alt36;

            alt36=6;

            switch ( this->LA(1) )
            {
            case IF:
            	{
            		alt36=1;
            	}
                break;
            case WHILE:
            	{
            		alt36=2;
            	}
                break;
            case DO:
            	{
            		alt36=3;
            	}
                break;
            case FOR:
            	{
            		alt36=4;
            	}
                break;
            case BOOL:
            case CHAR:
            case DOUBDEC:
            case DOUBINC:
            case FLOAT:
            case ID:
            case INT:
            case LBRACKET:
            case NULLTOK:
            case STRING:
            case TYPE:
            case 51:
            	{
            		alt36=5;
            	}
                break;
            case RETURN:
            case RETURN_OWN:
            	{
            		alt36=6;
            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 36 );
                ex->set_state( 0 );


                goto ruleinstructionEx;

            }

            switch (alt36)
            {
        	case 1:
        	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:555:10: ifInst
        	    {
        	        this->followPush(FOLLOW_ifInst_in_instruction4156);
        	        ifInst45=ifInst();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleinstructionEx;
        	        }


        	        {
        	             node = ifInst45
        	            ; 
        	        }


        	    }
        	    break;
        	case 2:
        	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:556:10: whileInst
        	    {
        	        this->followPush(FOLLOW_whileInst_in_instruction4177);
        	        whileInst46=whileInst();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleinstructionEx;
        	        }


        	        {
        	            node = whileInst46
        	            ; 
        	        }


        	    }
        	    break;
        	case 3:
        	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:557:10: doInst
        	    {
        	        this->followPush(FOLLOW_doInst_in_instruction4194);
        	        doInst47=doInst();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleinstructionEx;
        	        }


        	        {
        	            node = doInst47
        	            ; 
        	        }


        	    }
        	    break;
        	case 4:
        	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:558:10: forInst
        	    {
        	        this->followPush(FOLLOW_forInst_in_instruction4214);
        	        forInst48=forInst();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleinstructionEx;
        	        }


        	        {
        	            node = forInst48
        	            ; 
        	        }


        	    }
        	    break;
        	case 5:
        	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:559:10: instructionScalar ';'
        	    {
        	        this->followPush(FOLLOW_instructionScalar_in_instruction4234);
        	        instructionScalar49=instructionScalar();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleinstructionEx;
        	        }


        	         this->matchToken(SEMICOLON, &FOLLOW_SEMICOLON_in_instruction4236);
        	        if  (this->hasException())
        	        {
        	            goto ruleinstructionEx;
        	        }


        	        {
        	            node = instructionScalar49
        	            ;
        	        }


        	    }
        	    break;
        	case 6:
        	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:560:10: returnInst
        	    {
        	        this->followPush(FOLLOW_returnInst_in_instruction4249);
        	        returnInst50=returnInst();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleinstructionEx;
        	        }


        	        {
        	            node = returnInst50
        	            ; 
        	        }


        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto ruleinstructionEx; /* Prevent compiler warnings */
    ruleinstructionEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}
/* $ANTLR end instruction */

/**
 * $ANTLR start instruction_list
 * C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:563:1: instruction_list returns [scripting::instruction_list* node] : a= instruction (b= instruction )* ;
 */
scripting::instruction_list*
WNScriptASTParser::instruction_list()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    scripting::instruction_list* node;


    scripting::instruction* a;
    scripting::instruction* b;
    /* Initialize rule variables
     */
     


        node = wn_nullptr;


 
    {
        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:567:5: (a= instruction (b= instruction )* )
        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:567:10: a= instruction (b= instruction )*
        {
            this->followPush(FOLLOW_instruction_in_instruction_list4281);
            a=instruction();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleinstruction_listEx;
            }


            {
                node = m_allocator->make_allocated<scripting::instruction_list>(m_allocator, a
                ); SET_LOCATION_FROM_NODE(node, a
                ); 
            }


            // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:568:9: (b= instruction )*

            for (;;)
            {
                int alt37=2;
                switch ( this->LA(1) )
                {
                case BOOL:
                case CHAR:
                case DO:
                case DOUBDEC:
                case DOUBINC:
                case FLOAT:
                case FOR:
                case ID:
                case IF:
                case INT:
                case LBRACKET:
                case NULLTOK:
                case RETURN:
                case RETURN_OWN:
                case STRING:
                case TYPE:
                case WHILE:
                case 51:
                	{
                		alt37=1;
                	}
                    break;

                }

                switch (alt37)
                {
            	case 1:
            	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:568:10: b= instruction
            	    {
            	        this->followPush(FOLLOW_instruction_in_instruction_list4297);
            	        b=instruction();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleinstruction_listEx;
            	        }


            	        {
            	            node->add_instruction(b
            	            ); SET_END_LOCATION_FROM_NODE(node, b
            	            ); 
            	        }


            	    }
            	    break;

            	default:
            	    goto loop37;	/* break out of the loop */
            	    break;
                }
            }
            loop37: ; /* Jump out to here if this rule does not match */


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleinstruction_listEx; /* Prevent compiler warnings */
    ruleinstruction_listEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}
/* $ANTLR end instruction_list */

/**
 * $ANTLR start body
 * C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:571:1: body returns [scripting::instruction_list* node] : (a= LBRACE b= RBRACE |d= LBRACE instruction_list e= RBRACE );
 */
scripting::instruction_list*
WNScriptASTParser::body()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    scripting::instruction_list* node;


    const ImplTraits::CommonTokenType* a = NULL;
    const ImplTraits::CommonTokenType* b = NULL;
    const ImplTraits::CommonTokenType* d = NULL;
    const ImplTraits::CommonTokenType* e = NULL;
    scripting::instruction_list* instruction_list51;
    /* Initialize rule variables
     */
     


        node = wn_nullptr;


 
    {
        {
            //  C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:575:5: (a= LBRACE b= RBRACE |d= LBRACE instruction_list e= RBRACE )

            ANTLR_UINT32 alt38;

            alt38=2;

            switch ( this->LA(1) )
            {
            case LBRACE:
            	{
            		switch ( this->LA(2) )
            		{
            		case RBRACE:
            			{
            				alt38=1;
            			}
            		    break;
            		case BOOL:
            		case CHAR:
            		case DO:
            		case DOUBDEC:
            		case DOUBINC:
            		case FLOAT:
            		case FOR:
            		case ID:
            		case IF:
            		case INT:
            		case LBRACKET:
            		case NULLTOK:
            		case RETURN:
            		case RETURN_OWN:
            		case STRING:
            		case TYPE:
            		case WHILE:
            		case 51:
            			{
            				alt38=2;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 38 );
            		    ex->set_state( 1 );


            		    goto rulebodyEx;

            		}

            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 38 );
                ex->set_state( 0 );


                goto rulebodyEx;

            }

            switch (alt38)
            {
        	case 1:
        	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:575:10: a= LBRACE b= RBRACE
        	    {
        	        a =  this->matchToken(LBRACE, &FOLLOW_LBRACE_in_body4331);
        	        if  (this->hasException())
        	        {
        	            goto rulebodyEx;
        	        }


        	        b =  this->matchToken(RBRACE, &FOLLOW_RBRACE_in_body4335);
        	        if  (this->hasException())
        	        {
        	            goto rulebodyEx;
        	        }


        	        {
        	             node = m_allocator->make_allocated<scripting::instruction_list>(m_allocator); SET_LOCATION(node, a); SET_END_LOCATION(node, b); 
        	        }


        	    }
        	    break;
        	case 2:
        	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:576:10: d= LBRACE instruction_list e= RBRACE
        	    {
        	        d =  this->matchToken(LBRACE, &FOLLOW_LBRACE_in_body4350);
        	        if  (this->hasException())
        	        {
        	            goto rulebodyEx;
        	        }


        	        this->followPush(FOLLOW_instruction_list_in_body4352);
        	        instruction_list51=instruction_list();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulebodyEx;
        	        }


        	        e =  this->matchToken(RBRACE, &FOLLOW_RBRACE_in_body4356);
        	        if  (this->hasException())
        	        {
        	            goto rulebodyEx;
        	        }


        	        {
        	            node = instruction_list51
        	            ; SET_LOCATION(node, d); SET_END_LOCATION(node, e); 
        	        }


        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto rulebodyEx; /* Prevent compiler warnings */
    rulebodyEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}
/* $ANTLR end body */

/**
 * $ANTLR start function
 * C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:579:1: function returns [scripting::function* node] : decl parameterList body ;
 */
scripting::function*
WNScriptASTParser::function()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    scripting::function* node;


    scripting::declaration* decl52;
    scripting::decl_list* parameterList53;
    scripting::instruction_list* body54;
    /* Initialize rule variables
     */
     


        node = wn_nullptr;


 
    {
        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:583:5: ( decl parameterList body )
        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:583:10: decl parameterList body
        {
            this->followPush(FOLLOW_decl_in_function4386);
            decl52=decl();

            this->followPop();
            if  (this->hasException())
            {
                goto rulefunctionEx;
            }


            this->followPush(FOLLOW_parameterList_in_function4388);
            parameterList53=parameterList();

            this->followPop();
            if  (this->hasException())
            {
                goto rulefunctionEx;
            }


            this->followPush(FOLLOW_body_in_function4390);
            body54=body();

            this->followPop();
            if  (this->hasException())
            {
                goto rulefunctionEx;
            }


            {
                 node = m_allocator->make_allocated<scripting::function>(m_allocator, decl52
                , parameterList53
                , body54
                ); SET_LOCATION_FROM_NODE(node, decl52
                ); SET_END_LOCATION_FROM_NODE(node, body54
                ); 
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto rulefunctionEx; /* Prevent compiler warnings */
    rulefunctionEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}
/* $ANTLR end function */

/**
 * $ANTLR start structDecl
 * C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:586:1: structDecl returns [scripting::struct_definition* node] : STRUCT TYPE LBRACE (a= declaration SEMICOLON )* RBRACE ;
 */
scripting::struct_definition*
WNScriptASTParser::structDecl()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    scripting::struct_definition* node;


    const ImplTraits::CommonTokenType* TYPE55 = NULL;
    const ImplTraits::CommonTokenType* STRUCT56 = NULL;
    const ImplTraits::CommonTokenType* RBRACE57 = NULL;
    scripting::declaration* a;
    /* Initialize rule variables
     */
     


        node = wn_nullptr;


 
    {
        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:590:5: ( STRUCT TYPE LBRACE (a= declaration SEMICOLON )* RBRACE )
        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:590:10: STRUCT TYPE LBRACE (a= declaration SEMICOLON )* RBRACE
        {
            STRUCT56 =  this->matchToken(STRUCT, &FOLLOW_STRUCT_in_structDecl4420);
            if  (this->hasException())
            {
                goto rulestructDeclEx;
            }


            TYPE55 =  this->matchToken(TYPE, &FOLLOW_TYPE_in_structDecl4422);
            if  (this->hasException())
            {
                goto rulestructDeclEx;
            }


            {
                node= m_allocator->make_allocated<scripting::struct_definition>(m_allocator, (TYPE55->getText()).c_str()); SET_LOCATION(node, STRUCT56); 
            }


             this->matchToken(LBRACE, &FOLLOW_LBRACE_in_structDecl4438);
            if  (this->hasException())
            {
                goto rulestructDeclEx;
            }


            // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:591:20: (a= declaration SEMICOLON )*

            for (;;)
            {
                int alt39=2;
                switch ( this->LA(1) )
                {
                case TYPE:
                	{
                		alt39=1;
                	}
                    break;

                }

                switch (alt39)
                {
            	case 1:
            	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:591:21: a= declaration SEMICOLON
            	    {
            	        this->followPush(FOLLOW_declaration_in_structDecl4443);
            	        a=declaration();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulestructDeclEx;
            	        }


            	        {
            	             node->add_struct_elem(a
            	            );
            	        }


            	         this->matchToken(SEMICOLON, &FOLLOW_SEMICOLON_in_structDecl4447);
            	        if  (this->hasException())
            	        {
            	            goto rulestructDeclEx;
            	        }


            	    }
            	    break;

            	default:
            	    goto loop39;	/* break out of the loop */
            	    break;
                }
            }
            loop39: ; /* Jump out to here if this rule does not match */


            RBRACE57 =  this->matchToken(RBRACE, &FOLLOW_RBRACE_in_structDecl4452);
            if  (this->hasException())
            {
                goto rulestructDeclEx;
            }


            {
                 SET_END_LOCATION(node, RBRACE57); 
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto rulestructDeclEx; /* Prevent compiler warnings */
    rulestructDeclEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}
/* $ANTLR end structDecl */

/**
 * $ANTLR start classDecl
 * C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:594:1: classDecl returns [scripting::struct_definition* node] : ( (f= CLASS c= TYPE ) | (g= CLASS d= TYPE COLON e= TYPE ) ) LBRACE ( (a= declaration SEMICOLON ) | (b= function ) | ( VIRTUAL h= function ) | ( OVERRIDE i= function ) )* RBRACE ;
 */
scripting::struct_definition*
WNScriptASTParser::classDecl()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    scripting::struct_definition* node;


    const ImplTraits::CommonTokenType* f = NULL;
    const ImplTraits::CommonTokenType* c = NULL;
    const ImplTraits::CommonTokenType* g = NULL;
    const ImplTraits::CommonTokenType* d = NULL;
    const ImplTraits::CommonTokenType* e = NULL;
    const ImplTraits::CommonTokenType* RBRACE58 = NULL;
    scripting::declaration* a;
    scripting::function* b;
    scripting::function* h;
    scripting::function* i;
    /* Initialize rule variables
     */
     


        node = wn_nullptr;


 
    {
        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:598:5: ( ( (f= CLASS c= TYPE ) | (g= CLASS d= TYPE COLON e= TYPE ) ) LBRACE ( (a= declaration SEMICOLON ) | (b= function ) | ( VIRTUAL h= function ) | ( OVERRIDE i= function ) )* RBRACE )
        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:599:9: ( (f= CLASS c= TYPE ) | (g= CLASS d= TYPE COLON e= TYPE ) ) LBRACE ( (a= declaration SEMICOLON ) | (b= function ) | ( VIRTUAL h= function ) | ( OVERRIDE i= function ) )* RBRACE
        {
            // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:599:9: ( (f= CLASS c= TYPE ) | (g= CLASS d= TYPE COLON e= TYPE ) )
            {
                int alt40=2;
                switch ( this->LA(1) )
                {
                case CLASS:
                	{
                		switch ( this->LA(2) )
                		{
                		case TYPE:
                			{
                				switch ( this->LA(3) )
                				{
                				case COLON:
                					{
                						alt40=2;
                					}
                				    break;
                				case LBRACE:
                					{
                						alt40=1;
                					}
                				    break;

                				default:
                				    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                				    ex->set_decisionNum( 40 );
                				    ex->set_state( 2 );


                				    goto ruleclassDeclEx;

                				}

                			}
                		    break;

                		default:
                		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		    ex->set_decisionNum( 40 );
                		    ex->set_state( 1 );


                		    goto ruleclassDeclEx;

                		}

                	}
                    break;

                default:
                    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 40 );
                    ex->set_state( 0 );


                    goto ruleclassDeclEx;

                }

                switch (alt40)
                {
            	case 1:
            	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:600:13: (f= CLASS c= TYPE )
            	    {
            	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:600:13: (f= CLASS c= TYPE )
            	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:600:14: f= CLASS c= TYPE
            	        {
            	            f =  this->matchToken(CLASS, &FOLLOW_CLASS_in_classDecl4505);
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            c =  this->matchToken(TYPE, &FOLLOW_TYPE_in_classDecl4509);
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            {
            	                node= m_allocator->make_allocated<scripting::struct_definition>(m_allocator, (c->getText()).c_str(), true); SET_LOCATION(node, f); 
            	            }


            	        }


            	    }
            	    break;
            	case 2:
            	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:601:13: (g= CLASS d= TYPE COLON e= TYPE )
            	    {
            	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:601:13: (g= CLASS d= TYPE COLON e= TYPE )
            	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:601:14: g= CLASS d= TYPE COLON e= TYPE
            	        {
            	            g =  this->matchToken(CLASS, &FOLLOW_CLASS_in_classDecl4529);
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            d =  this->matchToken(TYPE, &FOLLOW_TYPE_in_classDecl4533);
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	             this->matchToken(COLON, &FOLLOW_COLON_in_classDecl4535);
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            e =  this->matchToken(TYPE, &FOLLOW_TYPE_in_classDecl4539);
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            {
            	                node= m_allocator->make_allocated<scripting::struct_definition>(m_allocator, (d->getText()).c_str(), true, (e->getText()).c_str()); SET_LOCATION(node, g); 
            	            }


            	        }


            	    }
            	    break;

                }
            }

             this->matchToken(LBRACE, &FOLLOW_LBRACE_in_classDecl4566);
            if  (this->hasException())
            {
                goto ruleclassDeclEx;
            }


            // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:604:17: ( (a= declaration SEMICOLON ) | (b= function ) | ( VIRTUAL h= function ) | ( OVERRIDE i= function ) )*

            for (;;)
            {
                int alt41=5;
                alt41 = cdfa41.predict(this, this->get_rec(), this->get_istream(), cdfa41 );
                if  (this->hasException())
                {
                    goto ruleclassDeclEx;
                }

                switch (alt41)
                {
            	case 1:
            	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:605:21: (a= declaration SEMICOLON )
            	    {
            	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:605:21: (a= declaration SEMICOLON )
            	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:605:22: a= declaration SEMICOLON
            	        {
            	            this->followPush(FOLLOW_declaration_in_classDecl4609);
            	            a=declaration();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            {
            	                 node->add_struct_elem(a
            	                );
            	            }


            	             this->matchToken(SEMICOLON, &FOLLOW_SEMICOLON_in_classDecl4613);
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	        }


            	    }
            	    break;
            	case 2:
            	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:606:21: (b= function )
            	    {
            	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:606:21: (b= function )
            	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:606:22: b= function
            	        {
            	            this->followPush(FOLLOW_function_in_classDecl4639);
            	            b=function();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            {
            	                 node->add_function(b
            	                ); 
            	            }


            	        }


            	    }
            	    break;
            	case 3:
            	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:607:21: ( VIRTUAL h= function )
            	    {
            	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:607:21: ( VIRTUAL h= function )
            	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:607:22: VIRTUAL h= function
            	        {
            	             this->matchToken(VIRTUAL, &FOLLOW_VIRTUAL_in_classDecl4668);
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            this->followPush(FOLLOW_function_in_classDecl4672);
            	            h=function();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            {
            	                 node->add_function(h
            	                ); h
            	                ->set_is_virtual(wn_true); 
            	            }


            	        }


            	    }
            	    break;
            	case 4:
            	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:608:21: ( OVERRIDE i= function )
            	    {
            	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:608:21: ( OVERRIDE i= function )
            	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:608:22: OVERRIDE i= function
            	        {
            	             this->matchToken(OVERRIDE, &FOLLOW_OVERRIDE_in_classDecl4698);
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            this->followPush(FOLLOW_function_in_classDecl4702);
            	            i=function();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            {
            	                 node->add_function(i
            	                ); i
            	                ->set_is_override(wn_true); 
            	            }


            	        }


            	    }
            	    break;

            	default:
            	    goto loop41;	/* break out of the loop */
            	    break;
                }
            }
            loop41: ; /* Jump out to here if this rule does not match */


            RBRACE58 =  this->matchToken(RBRACE, &FOLLOW_RBRACE_in_classDecl4738);
            if  (this->hasException())
            {
                goto ruleclassDeclEx;
            }


            {
                 SET_END_LOCATION(node, RBRACE58); 
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleclassDeclEx; /* Prevent compiler warnings */
    ruleclassDeclEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}
/* $ANTLR end classDecl */

/**
 * $ANTLR start inc
 * C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:613:1: inc returns [const wn_char* file] : INCLUDE STRING ;
 */
const wn_char*
WNScriptASTParser::inc()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    const wn_char* file;


    const ImplTraits::CommonTokenType* STRING59 = NULL;

    /* Initialize rule variables
     */
     


        file = wn_nullptr;


 
    {
        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:617:5: ( INCLUDE STRING )
        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:617:9: INCLUDE STRING
        {
             this->matchToken(INCLUDE, &FOLLOW_INCLUDE_in_inc4768);
            if  (this->hasException())
            {
                goto ruleincEx;
            }


            STRING59 =  this->matchToken(STRING, &FOLLOW_STRING_in_inc4770);
            if  (this->hasException())
            {
                goto ruleincEx;
            }


            {
                 file = (STRING59->getText()).c_str(); 
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleincEx; /* Prevent compiler warnings */
    ruleincEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return file;
}
/* $ANTLR end inc */

/**
 * $ANTLR start program
 * C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:620:1: program returns [scripting::script_file* node] : ( function | structDecl | classDecl | inc )* ;
 */
scripting::script_file*
WNScriptASTParser::program()
{
        WNScriptASTParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    scripting::script_file* node;


    scripting::function* function60;
    scripting::struct_definition* structDecl61;
    scripting::struct_definition* classDecl62;
    const wn_char* inc63;
    /* Initialize rule variables
     */
     


        node = m_allocator->make_allocated<scripting::script_file>(m_allocator);


 
    {
        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:624:5: ( ( function | structDecl | classDecl | inc )* )
        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:624:9: ( function | structDecl | classDecl | inc )*
        {
            // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:624:9: ( function | structDecl | classDecl | inc )*

            for (;;)
            {
                int alt42=5;
                switch ( this->LA(1) )
                {
                case TYPE:
                	{
                		alt42=1;
                	}
                    break;
                case STRUCT:
                	{
                		alt42=2;
                	}
                    break;
                case CLASS:
                	{
                		alt42=3;
                	}
                    break;
                case INCLUDE:
                	{
                		alt42=4;
                	}
                    break;

                }

                switch (alt42)
                {
            	case 1:
            	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:625:17: function
            	    {
            	        this->followPush(FOLLOW_function_in_program4816);
            	        function60=function();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleprogramEx;
            	        }


            	        {
            	             node->add_function(function60
            	            ); 
            	        }


            	    }
            	    break;
            	case 2:
            	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:626:17: structDecl
            	    {
            	        this->followPush(FOLLOW_structDecl_in_program4838);
            	        structDecl61=structDecl();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleprogramEx;
            	        }


            	        {
            	             node->add_struct(structDecl61
            	            ); 
            	        }


            	    }
            	    break;
            	case 3:
            	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:627:17: classDecl
            	    {
            	        this->followPush(FOLLOW_classDecl_in_program4858);
            	        classDecl62=classDecl();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleprogramEx;
            	        }


            	        {
            	             node->add_struct(classDecl62
            	            ); 
            	        }


            	    }
            	    break;
            	case 4:
            	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptAST.g:628:17: inc
            	    {
            	        this->followPush(FOLLOW_inc_in_program4879);
            	        inc63=inc();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleprogramEx;
            	        }


            	        {
            	             node->add_include(inc63
            	            ); 
            	        }


            	    }
            	    break;

            	default:
            	    goto loop42;	/* break out of the loop */
            	    break;
                }
            }
            loop42: ; /* Jump out to here if this rule does not match */


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleprogramEx; /* Prevent compiler warnings */
    ruleprogramEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}
/* $ANTLR end program */
/* End of parsing rules
 * ==============================================
 */

/* ==============================================
 * Syntactic predicates
 */
/* End of syntactic predicates
 * ==============================================
 */



/* End of code
 * =============================================================================
 */
