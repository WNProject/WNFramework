// Copyright (c) 2022, WNProject Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

struct Foo { Int x = 4; }

struct Bar { shared Foo f = shared Foo(); }

// CHECK: {{14array_destructE.*{}}
// RUN: array_destruct 4 -> 32
// RUN: array_destruct 1 -> 4
Int array_destruct(Int x) {
// CHECK:       _array0_Bar* b;
// CHECK-NEXT:  _array10_Bar _wns_temp0;
// CHECK-NEXT:  _wns_temp0._size = 10;
// CHECK-NEXT:  int32_t _wns_temp1 = 0;
// CHECK-NEXT:  while ((_wns_temp1 < _wns_temp0._size)) {
// CHECK-NEXT:    {
// CHECK-NEXT:      _ZN3wns14_construct_BarEP3BarP3Bar((&_wns_temp0._val[_wns_temp1]));
// CHECK-NEXT:      _wns_temp1 = (_wns_temp1 + 1);
// CHECK-NEXT:    }
// CHECK-NEXT:  }
// CHECK:  b = ((_array0_Bar*)&_wns_temp0);
// CHECK-NEXT:  ((b->_val[4].f)->x) = 32;
// CHECK-NEXT:  _return = ((b->_val[x].f)->x);
// CHECK-NEXT:  for (uint32_t __c_temp0 = 0; __c_temp0 < _wns_temp0._size; ++__c_temp0) {
// CHECK-NEXT:    _ZN3wns13_destruct_BarEvP3Bar(&(_wns_temp0._val[__c_temp0]));
// CHECK-NEXT:  }
  Bar[] b = Bar[10](Bar());
  b[4].f.x = 32;
  return b[x].f.x;
}

// CHECK: {{20fixed_array_destructE.*{}}
// RUN: fixed_array_destruct 4 -> 32
// RUN: fixed_array_destruct 2 -> 4
Int fixed_array_destruct(Int x) {
// CHECK:  _array5_Bar b;
// CHECK-NEXT:  b._size = 5;
// CHECK-NEXT:  int32_t _wns_temp2 = 0;
// CHECK-NEXT:  while ((_wns_temp2 < b._size)) {
// CHECK-NEXT:    {
// CHECK-NEXT:      _ZN3wns14_construct_BarEP3BarP3Bar((&b._val[_wns_temp2]));
// CHECK-NEXT:      _wns_temp2 = (_wns_temp2 + 1);
// CHECK-NEXT:    }
// CHECK-NEXT:  }
  Bar[5] b = Bar[5](Bar());
  b[4].f.x = 32;
  return b[x].f.x;
// CHECK:       for (uint32_t __c_temp1 = 0; __c_temp1 < b._size; ++__c_temp1) {
// CHECK-NEXT:    _ZN3wns13_destruct_BarEvP3Bar(&(b._val[__c_temp1]));
// CHECK-NEXT:  }
}
