// Copyright (c) 2022, WNProject Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

struct A {
  Int y = 4;
}

struct Bar {
  Int x = 4;
  shared A a = shared A();
}

struct Foo {
  shared Bar[[]] b = shared Bar[[4]](shared Bar());
}

// CHECK: Foo* _ZN3wns14_construct_FooEP3FooP3Foo(Foo* _this) {
// CHECK-NEXT:  _this->b = ((_runtime_array__shared_Bar)(_ZN3wns23_allocate_runtime_arrayEPvN3wns4sizeEN3wns4sizeE(sizeof(_shared_Bar), ((size_t)(4)))));
// CHECK-NEXT:  _this->b->_size = 4;
// CHECK-NEXT:  int32_t _wns_temp0 = 0;
// CHECK-NEXT:  while ((_wns_temp0 < _this->b->_size)) {
// CHECK-NEXT:    {
// CHECK-NEXT:      _this->b->_val[_wns_temp0] = ((_shared_Bar)(_ZN3wns14_construct_BarEP3BarP3Bar(((Bar*)(_ZN3wns20_wns_allocate_sharedEPvN3wns4sizeEFvPvE(sizeof(Bar), ((_wns_fn_ptr_0)(&_ZN3wns13_destruct_BarEvP3Bar))))))));
// CHECK-NEXT:      _wns_temp0 = (_wns_temp0 + 1);
// CHECK-NEXT:    }
// CHECK-NEXT:  }
// CHECK-NEXT:   return _this;
// CHECK-NEXT: }

// CHECK: void _ZN3wns13_destruct_FooEvP3Foo(Foo* _this) {
// CHECK-NEXT:  for (uint32_t __c_temp0 = 0; __c_temp0 < _this->b->_size; ++__c_temp0) {
// CHECK-NEXT:     _ZN3wns12_wns_releaseEvPv((void*)(_this->b->_val[__c_temp0]));
// CHECK-NEXT:  }
// CHECK-NEXT:  _ZN3wns5_freeEvPv(((void*)(_this->b)));
// CHECK-NEXT:  return;
// CHECK-NEXT:}

// CHECK: void _ZN3wns11_assign_FooEvP3Foo3Foo(Foo* _this, Foo* _other, bool _uninitialized_this) {
// CHECK-NEXT:  bool _wns_temp1 = true;
// CHECK-NEXT:  if (!(_uninitialized_this)) {
// CHECK-NEXT:    for (uint32_t __c_temp1 = 0; __c_temp1 < (_this->b)->_size; ++__c_temp1) {
// CHECK-NEXT:      _ZN3wns12_wns_releaseEvPv((void*)((_this->b)->_val[__c_temp1]));
// CHECK-NEXT:    }
// CHECK-NEXT:    if (((_other->b)->_size != (_other->b)->_size)) {
// CHECK-NEXT:      _ZN3wns5_freeEvPv(((void*)((_this->b))));
// CHECK-NEXT:    }
// CHECK-NEXT:    if (((_other->b)->_size == (_other->b)->_size)) {
// CHECK-NEXT:      _wns_temp1 = false;
// CHECK-NEXT:    }
// CHECK-NEXT:  }
// CHECK-NEXT:  if (_wns_temp1) {
// CHECK-NEXT:    (_this->b) = ((_runtime_array__shared_Bar)(_ZN3wns23_allocate_runtime_arrayEPvN3wns4sizeEN3wns4sizeE(sizeof(_shared_Bar), ((size_t)((_other->b)->_size)))));
// CHECK-NEXT:  }
// CHECK-NEXT:  int32_t _wns_temp3 = (_other->b)->_size;
// CHECK-NEXT:  while ((_wns_temp3 != 0)) {
// CHECK-NEXT:    {
// CHECK-NEXT:      _wns_temp3 = (_wns_temp3 - 1);
// CHECK-NEXT:      (_this->b)->_val[_wns_temp3] = ((_shared_Bar)(_ZN3wns18_wns_assign_sharedEPvPvPv(((void*)(NULL)), ((void*)((_other->b)->_val[_wns_temp3])))));
// CHECK-NEXT:    }
// CHECK-NEXT:  }
// CHECK-NEXT:  return;

// CHECK: {{3fooE.*{}}
// RUN: foo 12 2 0 2 -> 2
// RUN: foo 12 2 0 0 -> 4
Int foo(Int x, Int y, Int z, Int w) {
// CHECK: f = ((_runtime_array_Foo)(_ZN3wns23_allocate_runtime_arrayEPvN3wns4sizeEN3wns4sizeE(sizeof(Foo), ((size_t)(x)))));
// CHECK-NEXT:  f->_size = x;
// CHECK-NEXT:  int32_t _wns_temp4 = 0;
// CHECK-NEXT:  while ((_wns_temp4 < f->_size)) {
// CHECK-NEXT:    {
// CHECK-NEXT:      _ZN3wns14_construct_FooEP3FooP3Foo((&f->_val[_wns_temp4]));
// CHECK-NEXT:      _wns_temp4 = (_wns_temp4 + 1);
// CHECK-NEXT:    }
// CHECK-NEXT:  }
  Foo[[]] f = Foo[[x]](Foo());
  f[y].b[z].x = w;
  return f[w].b[z].x;
// CHECK: for (uint32_t __c_temp2 = 0; __c_temp2 < f->_size; ++__c_temp2) {
// CHECK-NEXT:    _ZN3wns13_destruct_FooEvP3Foo(&(f->_val[__c_temp2]));
// CHECK-NEXT:  }
// CHECK-NEXT:  _ZN3wns5_freeEvPv(((void*)(f)));
}
