// Copyright (c) 2021, WNProject Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

struct Foo {
    Bool b = false;
    Int x = 4;
}

// RUN:while_test_simple 5 -> -5
// RUN: while_test_simple -5 -> -5
// CHECK: {{.*while_test_simple.*{}}
Int while_test_simple(Int x) {
// CHECK:       while (true) {
// CHECK-NEXT:     {
// CHECK-NEXT:       bool _wns_temp0 = (x > 0);
// CHECK-NEXT:       if (!_wns_temp0) break;
// CHECK-NEXT:     }{
// CHECK-NEXT:       x = (x - 10);
// CHECK-NEXT:     }
// CHECK-NEXT:   }
    while(x > 0) {
        x = x - 10;
    }
    return x;
}

// RUN: while_test_temp_condition 5 -> 5
// RUN: while_test_temp_condition 10 -> 10
// CHECK: {{.*while_test_temp_condition.*{}}
Int while_test_temp_condition(Int x) {
// CHECK-NEXT: int32_t _return;
// CHECK-NEXT: while (true) {
// CHECK-NEXT:     {
// CHECK-NEXT:       Foo _wns_temp1;
// CHECK-NEXT:       bool _wns_temp2 = (_ZN3wns14_construct_FooEP3FooP3Foo((&_wns_temp1))->b);
// CHECK-NEXT:       if (!_wns_temp2) break;
// CHECK-NEXT:     }{
// CHECK-NEXT:       x = (x - 10);
// CHECK-NEXT:     }
// CHECK-NEXT:   }
    while(Foo().b) {
        x = x - 10;
    }
    return x;
}

// RUN: do_test 15 -> -5
// RUN: do_test -5 -> -15
// CHECK: {{.*do_test.*{}}
Int do_test(Int x) {
// CHECK-NEXT: int32_t _return;
// CHECK-NEXT: do {
// CHECK-NEXT:   x = (x - 10);
// CHECK-NEXT: } while ((x > 0));
    do {
        x = x - 10;
    } while(x > 0);
    return x;
}

// RUN: do_test_temp_condition 5 -> -5
// RUN: do_test_temp_condition -5 -> -15
// RUN: do_test_temp_condition 25 -> 15
// CHECK: {{.*do_test_temp_condition.*{}}
Int do_test_temp_condition(Int x) {
// CHECK-NEXT: int32_t _return;
// CHECK-NEXT: do {
// CHECK-NEXT:     x = (x - 10);
// CHECK-NEXT:     Foo _wns_temp3;
// CHECK-NEXT: } while ((_ZN3wns14_construct_FooEP3FooP3Foo((&_wns_temp3))->b));
    do {
        x = x - 10;
    } while(Foo().b);

    return x;
}

// RUN: simple_for_loop 10 -> -90
// RUN: simple_for_loop 0 -> -100
// CHECK: {{.*simple_for_loop.*{}}
Int simple_for_loop(Int x) {
// CHECK:      int32_t i = 0;
// CHECK-NEXT:    bool __c_temp0 = false; // Should we break from this loop
// CHECK-NEXT:    while (true) {
// CHECK-NEXT:      {
// CHECK-NEXT:        bool _wns_temp4 = (i < 10);
// CHECK-NEXT:        if (!_wns_temp4) break;
// CHECK-NEXT:      }{
// CHECK-NEXT:        do {
// CHECK-NEXT:          x = (x - 10);
// CHECK-NEXT:        } while (false);
// CHECK-NEXT:        if (__c_temp0) { break; }
// CHECK-NEXT:        {
// CHECK-NEXT:          i = (i + 1);
// CHECK-NEXT:        }
// CHECK-NEXT:      }
// CHECK-NEXT:    }
    for (Int i = 0; i < 10; i += 1) {
        x = x - 10;
    }
    return x;
}

// RUN: for_loop_with_temp 10 -> -20
// RUN: for_loop_with_temp 0 -> -30
// CHECK: {{.*for_loop_with_temp.*{}}
Int for_loop_with_temp(Int x) {
    // CHECK:      int32_t i = 0;
    // CHECK-NEXT: bool __c_temp1 = false; // Should we break from this loop
    // CHECK-NEXT: while (true) {
    // CHECK-NEXT: {
    // CHECK-NEXT:     bool _wns_temp5 = (i < 10);
    // CHECK-NEXT:     if (!_wns_temp5) break;
    // CHECK-NEXT: }{
    // CHECK-NEXT:     do {
    // CHECK-NEXT:     x = (x - 10);
    // CHECK-NEXT:     } while (false);
    // CHECK-NEXT:     if (__c_temp1) { break; }
    // CHECK-NEXT:     {
    // CHECK-NEXT:     Foo _wns_temp6;
    // CHECK-NEXT:     i = (i + (_ZN3wns14_construct_FooEP3FooP3Foo((&_wns_temp6))->x));
    // CHECK-NEXT:     }
    // CHECK-NEXT: }
    // CHECK-NEXT: }
    for (Int i = 0; i < 10; i += Foo().x) {
        x = x - 10;
    }
    return x;
}

// RUN: for_loop_with_cond_temp 10 -> -30
// RUN: for_loop_with_cond_temp 0 -> -40
// CHECK: {{.*for_loop_with_cond_temp.*{}}
Int for_loop_with_cond_temp(Int x) {
    // CHECK: int32_t i = 0;
    // CHECK-NEXT:     bool __c_temp2 = false; // Should we break from this loop
    // CHECK-NEXT:     while (true) {
    // CHECK-NEXT:       {
    // CHECK-NEXT:         Foo _wns_temp7;
    // CHECK-NEXT:         bool _wns_temp8 = (i < (_ZN3wns14_construct_FooEP3FooP3Foo((&_wns_temp7))->x));
    // CHECK-NEXT:         if (!_wns_temp8) break;
    // CHECK-NEXT:       }{
    // CHECK-NEXT:         do {
    // CHECK-NEXT:           x = (x - 10);
    // CHECK-NEXT:         } while (false);
    // CHECK-NEXT:         if (__c_temp2) { break; }
    // CHECK-NEXT:         {
    // CHECK-NEXT:           i = (i + 1);
    // CHECK-NEXT:         }
    // CHECK-NEXT:       }
    // CHECK-NEXT:     }

    for (Int i = 0; i < Foo().x; i += 1) {
        x = x - 10;
    }
    return x;
}
