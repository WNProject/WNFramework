// Copyright (c) 2020, WNProject Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

struct Baz {
  Int x = 3;
}

struct Bar {
  shared Baz baz = shared Baz();
}

struct Foo {
  Bar[10] b = Bar[10](Bar());
}

// CHECK: Foo* _ZN3wns14_construct_FooEP3FooP3Foo(Foo* _this) {
// CHECK-NEXT:  _this->b._size = 10;
// CHECK-NEXT:  int32_t _wns_temp0 = 0;
// CHECK-NEXT:  while ((_wns_temp0 < _this->b._size)) {
// CHECK-NEXT:    {
// CHECK-NEXT:      _ZN3wns14_construct_BarEP3BarP3Bar((&_this->b._val[_wns_temp0]));
// CHECK-NEXT:      _wns_temp0 = (_wns_temp0 + 1);
// CHECK-NEXT:    }
// CHECK-NEXT:  }

// CHECK: void _ZN3wns13_destruct_FooEvP3Foo(Foo* _this) {
// CHECK-NEXT:   for (uint32_t __c_temp0 = 0; __c_temp0 < _this->b._size; ++__c_temp0) {
// CHECK-NEXT:     _ZN3wns13_destruct_BarEvP3Bar(&(_this->b._val[__c_temp0]));
// CHECK-NEXT:  }

// CHECK: void _ZN3wns11_assign_FooEvP3Foo3Foo(Foo* _this, Foo* _other, bool _uninitialized_this) {
// CHECK-NEXT:  int32_t _wns_temp2 = (_other->b)._size;
// CHECK-NEXT:  while ((_wns_temp2 != 0)) {
// CHECK-NEXT:    {
// CHECK-NEXT:      _wns_temp2 = (_wns_temp2 - 1);
// CHECK-NEXT:      _ZN3wns11_assign_BarEvP3Bar3Bar((&(_this->b)._val[_wns_temp2]), (&(_other->b)._val[_wns_temp2]), _uninitialized_this);
// CHECK-NEXT:    }
// CHECK-NEXT:  }

// CHECK: Bazz* _ZN3wns15_construct_BazzEP4BazzP5_Bazz(_Bazz* _this) {
// CHECK-NEXT:  _this->_wns_temp3._size = 10;
// CHECK-NEXT:  int32_t _wns_temp4 = 0;
// CHECK-NEXT:  while ((_wns_temp4 < _this->_wns_temp3._size)) {
// CHECK-NEXT:    {
// CHECK-NEXT:      _this->_wns_temp3._val[_wns_temp4] = ((_shared_Child)(_ZN3wns17_construct_ParentEP6ParentP6Parent(((Parent*)(_ZN3wns20_wns_allocate_sharedEPvN3wns4sizeEFvPvE(sizeof(Parent), ((_wns_fn_ptr_0)(NULL))))))));
// CHECK-NEXT:      _wns_temp4 = (_wns_temp4 + 1);
// CHECK-NEXT:    }
// CHECK-NEXT:  }
// CHECK:       _this->b = ((_array0__shared_Child*)&_this->_wns_temp3);

// CHECK: void _ZN3wns14_destruct_BazzEvP5_Bazz(_Bazz* _this) {
// CHECK-NEXT:   for (uint32_t __c_temp1 = 0; __c_temp1 < _this->_wns_temp3._size; ++__c_temp1) {
// CHECK-NEXT:    _ZN3wns12_wns_releaseEvPv((void*)(_this->_wns_temp3._val[__c_temp1]));
// CHECK-NEXT:  }

// CHECK: {{27destruct_in_array_in_structE.*{}}
// RUN: destruct_in_array_in_struct 4 -> 12
// RUN: destruct_in_array_in_struct 0 -> 3
Int destruct_in_array_in_struct(Int x) {
  Foo f = Foo();
  f.b[4].baz.x = 12;
  return f.b[x].baz.x;
}

// CHECK: {{20copy_array_in_structE.*{}}
// RUN: copy_array_in_struct 4 -> 12
// RUN: copy_array_in_struct 0 -> 3
Int copy_array_in_struct(Int x) {
  Foo f = Foo();
  Foo f2 = Foo();
  f2 = f;
  f.b[4].baz.x = 12;
  return f2.b[x].baz.x;
}

class Child {
  Int x = 4;
}

class Parent : Child {
  Int y = 4;
}

class Bazz  {
  shared Child[] b = shared Child[10](shared Parent());
}

// CHECK: {{25shared_in_array_in_structE.*{}}
// RUN: shared_in_array_in_struct 4 -> 12
// RUN: shared_in_array_in_struct 0 -> 4
Int shared_in_array_in_struct(Int x) {
  Bazz b = Bazz();
  b.b[4].x = 12;
  return b.b[x].x;
}
