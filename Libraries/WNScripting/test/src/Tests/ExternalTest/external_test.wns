// Copyright (c) 2017, WNProject Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE.txt file.

// RUN: test1 3 -> 4
// RUN: test1 8 -> 9
// CHECK: {{test1.*\(ExternalStruct\* s\) {}}
Int test1(ExternalStruct s) {
// CHECK-NEXT: int32_t _return;
// CHECK-NEXT: _return = (s->i);
    return s.i;
}

// CHECK: {{test2.*\(ExternalStruct\* s\) {}}
Int test2(ExternalStruct s) {
// CHECK: (s->i) = ((s->i) * 2);
    s.i *= 2;
    return s.i;
}

// CHECK: {{test3.*\(ExternalStruct\* s\) {}}
Int test3(ExternalStruct s) {
// CHECK: _return = ((s->s2).y);
    return s.s2.y;
}

// CHECK: {{test4.*\(ExternalStruct\* s\) {}}
Int test4(ExternalStruct s) {
// CHECK: _ZN3wns14ExternalStruct11increment_iEvPE14ExternalStruct(s);
// CHECK: _ZN3wns14ExternalStruct11increment_xEvPE14ExternalStruct(s);
    s.increment_i();
    s.increment_x();
    return s.i;
}

// CHECK: {{test5.*\(ExternalStructChild\* s\) {}}
Int test5(ExternalStructChild s) {
// CHECK: _ZN3wns14ExternalStruct11increment_iEvPE14ExternalStruct(((ExternalStruct*)(s)));
// CHECK: _ZN3wns14ExternalStruct11increment_xEvPE14ExternalStruct(((ExternalStruct*)(s)));
    s.increment_i();
    s.increment_x();
    return s.i;
}

Int test6(Int[] x, Int y) {
    return x[y];
}

Int test7(ExternalStructChild s, Int y) {
    Int[] x = Int[42](32);
    for (Int i = 0; i < 42; ++i) {
        x[i] = i;
    }
    return s.get_y(x, y);
}

Int test8(ExternalStructChild s) {
    s.printf("Hello World!");
    return 32;
}

Int test9(ExternalSliceStruct s) {
    Int[4] x = Int[4](3);
    x[0] = 3;
    x[1] = 5;
    x[2] = 32;
    Int|| y = x{0:4};
    return s.do_x(y);
}

Int test10(Int|| s, Int y) {
    return s[y];
}

Int test11(ExternalSliceStruct s, Int y) {
    return s.get_vals()[y];
}

Int|| test12(Int[] x, Int y) {
    return x{y: length(x)};
}

class ExportedA {
  Int x = 3;

  Int do_a(Int f) {
      x = x + f;
      return x;
  }
}

class ExportedB : ExportedA {
  Int do_b(Int f) {
      x = x + f + f;
      return x;
  }

  virtual Int do_c(Int f) {
      return f * 2;
  }
}

class UnexportedC : ExportedB {
  override Int do_c(Int f) {
      return f * 3;
  }
}

shared ExportedA test13() {
    shared ExportedA ea = shared ExportedA();
    return ea;
}

shared ExportedB test14() {
    shared ExportedB ea = shared ExportedB();
    return ea;
}

shared ExportedB test15() {
    shared UnexportedC ea = shared UnexportedC();
    shared ExportedB eb = ea;
    return eb;
}

Int test16(shared ExternalStruct s) {
    return s.i;
}
