/** \file
 *  This C++ source file was generated by $ANTLR version 3.5.3-SNAPSHOT
 *
 *     -  From the grammar source file : C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g
 *     -                            On : 2015-07-30 21:37:11
 *     -                for the parser : WNScriptASTDeprecatedParserParser
 *
 * Editing it, at least manually, is not wise.
 *
 * C++ language generator and runtime by Gokulakannan Somasundaram ( heavy lifting from C Run-time by Jim Idle )
 *
 *
*/
// [The "BSD license"]
// Copyright (c) 2005-2009 Gokulakannan Somasundaram, ElectronDB
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


/* =============================================================================
 * This is what the grammar programmer asked us to put at the top of every file.
 */

    #include "WNCore/inc/WNBase.h"
#ifdef _WN_MSVC
    #pragma warning(disable: 4100)
    #pragma warning(disable: 4459)
    #pragma warning(disable: 4703)
#endif
    #include "WNDeprecatedScripting/src/WNScriptASTDeprecatedLexer.hpp"
    #include "WNDeprecatedScripting/inc/WNScriptingAllocations.h"
    #include "WNDeprecatedScripting/inc/WNArgList.h"
    #include "WNDeprecatedScripting/inc/WNArrayAccessExpression.h"
    #include "WNDeprecatedScripting/inc/WNArrayAllocation.h"
    #include "WNDeprecatedScripting/inc/WNAssignment.h"
    #include "WNDeprecatedScripting/inc/WNBinExpression.h"
    #include "WNDeprecatedScripting/inc/WNCondExpression.h"
    #include "WNDeprecatedScripting/inc/WNConstantExpression.h"
    #include "WNDeprecatedScripting/inc/WNDeclaration.h"
    #include "WNDeprecatedScripting/inc/WNDeclList.h"
    #include "WNDeprecatedScripting/inc/WNDoInstruction.h"
    #include "WNDeprecatedScripting/inc/WNExpression.h"
    #include "WNDeprecatedScripting/inc/WNForInstruction.h"
    #include "WNDeprecatedScripting/inc/WNFunction.h"
    #include "WNDeprecatedScripting/inc/WNFunctionCallExpression.h"
    #include "WNDeprecatedScripting/inc/WNIDExpression.h"
    #include "WNDeprecatedScripting/inc/WNIfInstruction.h"
    #include "WNDeprecatedScripting/inc/WNInstruction.h"
    #include "WNDeprecatedScripting/inc/WNInstructionList.h"
    #include "WNDeprecatedScripting/inc/WNLValue.h"
    #include "WNDeprecatedScripting/inc/WNMemberAccessExpression.h"
    #include "WNDeprecatedScripting/inc/WNNode.h"
    #include "WNDeprecatedScripting/inc/WNNullAllocation.h"
    #include "WNDeprecatedScripting/inc/WNPostExpression.h"
    #include "WNDeprecatedScripting/inc/WNPostUNExpression.h"
    #include "WNDeprecatedScripting/inc/WNScriptFile.h"
    #include "WNDeprecatedScripting/inc/WNSSExpression.h"
    #include "WNDeprecatedScripting/inc/WNStruct.h"
    #include "WNDeprecatedScripting/inc/WNStructAllocation.h"
    #include "WNDeprecatedScripting/inc/WNTypeNode.h"
    #include "WNDeprecatedScripting/inc/WNUnExpression.h"
    #include "WNDeprecatedScripting/inc/WNWhileInstruction.h"
    #include "WNDeprecatedScripting/inc/WNReturn.h"
    using namespace WNScripting;
    //
    //

    #ifndef SetLocation
    #define SetLocation(node, tok) { WNScriptLocation loc; \
                                     loc.mStartIndex = tok->get_startIndex();\
                                     loc.mEndIndex = tok->get_stopIndex();\
                                     loc.mLineStart = tok->get_lineStart();\
                                     loc.mLineNumber = tok->get_line();\
                                     loc.mCharNumber = tok->get_charPositionInLine();\
                                     node->SetStartPosition(loc); \
                                   }
    #define SetLocationFromNode(node, node2) { \
                                        if(node2) { \
                                        node->SetStartPosition(node2->GetStartPosition()); \
                                        } \
                                   }
    #define SetStartLocationFromNode(node, node2) { \
                                        if(node2) { \
                                        WNScriptLocation loc = node->GetStartPosition(); \
                                        WNScriptLocation loc2 = node2->GetStartPosition(); \
                                        loc.mStartIndex = loc2.mStartIndex; \
                                        loc.mLineStart = loc2.mLineStart; \
                                        loc.mLineNumber = loc2.mLineNumber; \
                                        loc.mCharNumber = loc2.mCharNumber; \
                                        node->SetStartPosition(loc); \
                                        } \
                                    }
    #define SetEndLocation(node, tok) { \
                                        node->SetEndIndex(tok->get_stopIndex()); \
                                      }
    #define SetEndLocationFromNode(node, node2) { \
                                            if(node2) { \
                                            node->SetEndIndex(node2->GetStartPosition().mEndIndex); \
                                            } \
                                            }
    #endif

/* End of Header action.
 * =============================================================================
 */

/* -----------------------------------------
 * Include the ANTLR3 generated header file.
 */
#include    "WNScriptASTDeprecatedParser.hpp"
/* ----------------------------------------- */


/* ============================================================================= */

/* =============================================================================
 * Start of recognizer
 */

using namespace antlr3;
/** \brief Table of all token names in symbolic order, mainly used for
 *         error reporting.
 */
ANTLR_UINT8* WNScriptASTDeprecatedParserTokenNames[60+4]
     = {
        (ANTLR_UINT8*) "<invalid>",       /* String to print to indicate an invalid token */
        (ANTLR_UINT8*) "<EOR>",
        (ANTLR_UINT8*) "<DOWN>",
        (ANTLR_UINT8*) "<UP>",
        (ANTLR_UINT8*) "BOOL",
        (ANTLR_UINT8*) "CHAR",
        (ANTLR_UINT8*) "CHOWN",
        (ANTLR_UINT8*) "CLASS",
        (ANTLR_UINT8*) "COLON",
        (ANTLR_UINT8*) "COMMA",
        (ANTLR_UINT8*) "COMMENT",
        (ANTLR_UINT8*) "DO",
        (ANTLR_UINT8*) "DOUBDEC",
        (ANTLR_UINT8*) "DOUBINC",
        (ANTLR_UINT8*) "ELSE",
        (ANTLR_UINT8*) "ESC_SEQ",
        (ANTLR_UINT8*) "EXPONENT",
        (ANTLR_UINT8*) "FLOAT",
        (ANTLR_UINT8*) "FOR",
        (ANTLR_UINT8*) "HEX_DIGIT",
        (ANTLR_UINT8*) "ID",
        (ANTLR_UINT8*) "IF",
        (ANTLR_UINT8*) "INCLUDE",
        (ANTLR_UINT8*) "INT",
        (ANTLR_UINT8*) "LBRACE",
        (ANTLR_UINT8*) "LBRACKET",
        (ANTLR_UINT8*) "LSQBRACKET",
        (ANTLR_UINT8*) "NULLTOK",
        (ANTLR_UINT8*) "OCTAL_ESC",
        (ANTLR_UINT8*) "OVERRIDE",
        (ANTLR_UINT8*) "RBRACE",
        (ANTLR_UINT8*) "RBRACKET",
        (ANTLR_UINT8*) "RETURN",
        (ANTLR_UINT8*) "RETURN_OWN",
        (ANTLR_UINT8*) "RSQBRACKET",
        (ANTLR_UINT8*) "SEMICOLON",
        (ANTLR_UINT8*) "STRING",
        (ANTLR_UINT8*) "STRUCT",
        (ANTLR_UINT8*) "TYPE",
        (ANTLR_UINT8*) "UNICODE_ESC",
        (ANTLR_UINT8*) "VIRTUAL",
        (ANTLR_UINT8*) "WHILE",
        (ANTLR_UINT8*) "WS",
        (ANTLR_UINT8*) "'!='",
        (ANTLR_UINT8*) "'%'",
        (ANTLR_UINT8*) "'%='",
        (ANTLR_UINT8*) "'&&'",
        (ANTLR_UINT8*) "'*'",
        (ANTLR_UINT8*) "'*='",
        (ANTLR_UINT8*) "'+'",
        (ANTLR_UINT8*) "'+='",
        (ANTLR_UINT8*) "'-'",
        (ANTLR_UINT8*) "'-='",
        (ANTLR_UINT8*) "'.'",
        (ANTLR_UINT8*) "'/'",
        (ANTLR_UINT8*) "'/='",
        (ANTLR_UINT8*) "'<'",
        (ANTLR_UINT8*) "'<='",
        (ANTLR_UINT8*) "'='",
        (ANTLR_UINT8*) "'=='",
        (ANTLR_UINT8*) "'>'",
        (ANTLR_UINT8*) "'>='",
        (ANTLR_UINT8*) "'?'",
        (ANTLR_UINT8*) "'||'"
       };


/** \brief Name of the grammar file that generated this code
 */
static const char fileName[] = "C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g";

/** \brief Return the name of the grammar file that generated this code.
 */
const char* WNScriptASTDeprecatedParser::getGrammarFileName()
{
	return fileName;
}
/** \brief Create a new WNScriptASTDeprecatedParser parser and return a context for it.
 *
 * \param[in] instream Pointer to an input stream interface.
 *
 * \return Pointer to new parser context upon success.
 */
WNScriptASTDeprecatedParser::WNScriptASTDeprecatedParser( StreamType* instream)
    :ImplTraits::BaseParserType(ANTLR_SIZE_HINT, instream, NULL)

{
	// See if we can create a new parser with the standard constructor
	//
	this->init(instream);
}

/** \brief Create a new WNScriptASTDeprecatedParser parser and return a context for it.
 *
 * \param[in] instream Pointer to an input stream interface.
 *
 * \return Pointer to new parser context upon success.
 */
WNScriptASTDeprecatedParser::WNScriptASTDeprecatedParser( StreamType* instream, RecognizerSharedStateType* state)
    :ImplTraits::BaseParserType(ANTLR_SIZE_HINT, instream, state)

{
	this->init(instream );
}

void WNScriptASTDeprecatedParser::init(StreamType* instream)
{
	/* Install the token table
	*/
	this->get_psrstate()->set_tokenNames( WNScriptASTDeprecatedParserTokenNames );


}

void
WNScriptASTDeprecatedParser::reset()
{
    this->get_rec()->reset();
}

/** Free the parser resources
 */
WNScriptASTDeprecatedParser::~WNScriptASTDeprecatedParser()
 {
}

/** Return token names used by this parser
 *
 * The returned pointer is used as an index into the token names table (using the token
 * number as the index).
 *
 * \return Pointer to first char * in the table.
 */
static ANTLR_UINT8**	getTokenNames()
{
        return WNScriptASTDeprecatedParserTokenNames;
}


/* Declare the bitsets
 */
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_TYPE_in_scalarType1107_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_TYPE_in_scalarType1107( FOLLOW_TYPE_in_scalarType1107_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_scalarType_in_type1143_bits[]	= { ANTLR_UINT64_LIT(0x0000000004000002) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_scalarType_in_type1143( FOLLOW_scalarType_in_type1143_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_LSQBRACKET_in_type1164_bits[]	= { ANTLR_UINT64_LIT(0x0000000400000000) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_LSQBRACKET_in_type1164( FOLLOW_LSQBRACKET_in_type1164_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_RSQBRACKET_in_type1166_bits[]	= { ANTLR_UINT64_LIT(0x0000000004000002) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_RSQBRACKET_in_type1166( FOLLOW_RSQBRACKET_in_type1166_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_type_in_decl1198_bits[]	= { ANTLR_UINT64_LIT(0x0000000000100000) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_type_in_decl1198( FOLLOW_type_in_decl1198_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_decl1200_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_ID_in_decl1200( FOLLOW_ID_in_decl1200_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_decl_in_declList1232_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000202) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_decl_in_declList1232( FOLLOW_decl_in_declList1232_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_declList1245_bits[]	= { ANTLR_UINT64_LIT(0x0000004000000000) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_COMMA_in_declList1245( FOLLOW_COMMA_in_declList1245_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_decl_in_declList1249_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000202) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_decl_in_declList1249( FOLLOW_decl_in_declList1249_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_LBRACKET_in_parameterList1281_bits[]	= { ANTLR_UINT64_LIT(0x0000004000000000) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_parameterList1281( FOLLOW_LBRACKET_in_parameterList1281_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_declList_in_parameterList1283_bits[]	= { ANTLR_UINT64_LIT(0x0000000080000000) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_declList_in_parameterList1283( FOLLOW_declList_in_parameterList1283_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_RBRACKET_in_parameterList1285_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_parameterList1285( FOLLOW_RBRACKET_in_parameterList1285_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_LBRACKET_in_parameterList1302_bits[]	= { ANTLR_UINT64_LIT(0x0000000080000000) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_parameterList1302( FOLLOW_LBRACKET_in_parameterList1302_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_RBRACKET_in_parameterList1304_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_parameterList1304( FOLLOW_RBRACKET_in_parameterList1304_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_58_in_assign_op1340_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_58_in_assign_op1340( FOLLOW_58_in_assign_op1340_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_50_in_assign_op1354_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_50_in_assign_op1354( FOLLOW_50_in_assign_op1354_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_52_in_assign_op1367_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_52_in_assign_op1367( FOLLOW_52_in_assign_op1367_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_48_in_assign_op1380_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_48_in_assign_op1380( FOLLOW_48_in_assign_op1380_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_55_in_assign_op1393_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_55_in_assign_op1393( FOLLOW_55_in_assign_op1393_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_45_in_assign_op1406_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_45_in_assign_op1406( FOLLOW_45_in_assign_op1406_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_CHOWN_in_assign_op1419_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_CHOWN_in_assign_op1419( FOLLOW_CHOWN_in_assign_op1419_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_unary_ex_in_lvalue1449_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_unary_ex_in_lvalue1449( FOLLOW_unary_ex_in_lvalue1449_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_expression_in_arglist1507_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000202) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_expression_in_arglist1507( FOLLOW_expression_in_arglist1507_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_CHOWN_in_arglist1533_bits[]	= { ANTLR_UINT64_LIT(0x000800500A923030) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_CHOWN_in_arglist1533( FOLLOW_CHOWN_in_arglist1533_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_expression_in_arglist1537_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000202) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_expression_in_arglist1537( FOLLOW_expression_in_arglist1537_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_arglist1570_bits[]	= { ANTLR_UINT64_LIT(0x000800500A923272) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_COMMA_in_arglist1570( FOLLOW_COMMA_in_arglist1570_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_CHOWN_in_arglist1612_bits[]	= { ANTLR_UINT64_LIT(0x000800500A923030) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_CHOWN_in_arglist1612( FOLLOW_CHOWN_in_arglist1612_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_expression_in_arglist1616_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000202) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_expression_in_arglist1616( FOLLOW_expression_in_arglist1616_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_expression_in_arglist1648_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000202) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_expression_in_arglist1648( FOLLOW_expression_in_arglist1648_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_cond_ex_in_expression1723_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_cond_ex_in_expression1723( FOLLOW_cond_ex_in_expression1723_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_or_ex_in_cond_ex1761_bits[]	= { ANTLR_UINT64_LIT(0x4000000000000002) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_or_ex_in_cond_ex1761( FOLLOW_or_ex_in_cond_ex1761_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_62_in_cond_ex1784_bits[]	= { ANTLR_UINT64_LIT(0x000800500A923030) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_62_in_cond_ex1784( FOLLOW_62_in_cond_ex1784_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_expression_in_cond_ex1788_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000100) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_expression_in_cond_ex1788( FOLLOW_expression_in_cond_ex1788_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_COLON_in_cond_ex1790_bits[]	= { ANTLR_UINT64_LIT(0x000800500A923030) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_COLON_in_cond_ex1790( FOLLOW_COLON_in_cond_ex1790_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_cond_ex_in_cond_ex1794_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_cond_ex_in_cond_ex1794( FOLLOW_cond_ex_in_cond_ex1794_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_and_ex_in_or_ex1841_bits[]	= { ANTLR_UINT64_LIT(0x8000000000000002) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_and_ex_in_or_ex1841( FOLLOW_and_ex_in_or_ex1841_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_63_in_or_ex1858_bits[]	= { ANTLR_UINT64_LIT(0x000800500A923030) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_63_in_or_ex1858( FOLLOW_63_in_or_ex1858_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_and_ex_in_or_ex1862_bits[]	= { ANTLR_UINT64_LIT(0x8000000000000002) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_and_ex_in_or_ex1862( FOLLOW_and_ex_in_or_ex1862_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_eq_ex_in_and_ex1905_bits[]	= { ANTLR_UINT64_LIT(0x0000400000000002) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_eq_ex_in_and_ex1905( FOLLOW_eq_ex_in_and_ex1905_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_46_in_and_ex1922_bits[]	= { ANTLR_UINT64_LIT(0x000800500A923030) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_46_in_and_ex1922( FOLLOW_46_in_and_ex1922_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_eq_ex_in_and_ex1926_bits[]	= { ANTLR_UINT64_LIT(0x0000400000000002) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_eq_ex_in_and_ex1926( FOLLOW_eq_ex_in_and_ex1926_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_rel_ex_in_eq_ex1961_bits[]	= { ANTLR_UINT64_LIT(0x0800080000000002) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_rel_ex_in_eq_ex1961( FOLLOW_rel_ex_in_eq_ex1961_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_59_in_eq_ex1996_bits[]	= { ANTLR_UINT64_LIT(0x000800500A923030) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_59_in_eq_ex1996( FOLLOW_59_in_eq_ex1996_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_rel_ex_in_eq_ex2000_bits[]	= { ANTLR_UINT64_LIT(0x0800080000000002) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_rel_ex_in_eq_ex2000( FOLLOW_rel_ex_in_eq_ex2000_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_43_in_eq_ex2023_bits[]	= { ANTLR_UINT64_LIT(0x000800500A923030) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_43_in_eq_ex2023( FOLLOW_43_in_eq_ex2023_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_rel_ex_in_eq_ex2027_bits[]	= { ANTLR_UINT64_LIT(0x0800080000000002) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_rel_ex_in_eq_ex2027( FOLLOW_rel_ex_in_eq_ex2027_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_add_ex_in_rel_ex2085_bits[]	= { ANTLR_UINT64_LIT(0x3300000000000002) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_add_ex_in_rel_ex2085( FOLLOW_add_ex_in_rel_ex2085_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_56_in_rel_ex2121_bits[]	= { ANTLR_UINT64_LIT(0x000800500A923030) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_56_in_rel_ex2121( FOLLOW_56_in_rel_ex2121_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_add_ex_in_rel_ex2125_bits[]	= { ANTLR_UINT64_LIT(0x3300000000000002) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_add_ex_in_rel_ex2125( FOLLOW_add_ex_in_rel_ex2125_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_60_in_rel_ex2149_bits[]	= { ANTLR_UINT64_LIT(0x000800500A923030) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_60_in_rel_ex2149( FOLLOW_60_in_rel_ex2149_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_add_ex_in_rel_ex2153_bits[]	= { ANTLR_UINT64_LIT(0x3300000000000002) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_add_ex_in_rel_ex2153( FOLLOW_add_ex_in_rel_ex2153_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_57_in_rel_ex2177_bits[]	= { ANTLR_UINT64_LIT(0x000800500A923030) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_57_in_rel_ex2177( FOLLOW_57_in_rel_ex2177_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_add_ex_in_rel_ex2181_bits[]	= { ANTLR_UINT64_LIT(0x3300000000000002) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_add_ex_in_rel_ex2181( FOLLOW_add_ex_in_rel_ex2181_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_61_in_rel_ex2205_bits[]	= { ANTLR_UINT64_LIT(0x000800500A923030) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_61_in_rel_ex2205( FOLLOW_61_in_rel_ex2205_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_add_ex_in_rel_ex2209_bits[]	= { ANTLR_UINT64_LIT(0x3300000000000002) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_add_ex_in_rel_ex2209( FOLLOW_add_ex_in_rel_ex2209_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_mult_ex_in_add_ex2270_bits[]	= { ANTLR_UINT64_LIT(0x000A000000000002) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_mult_ex_in_add_ex2270( FOLLOW_mult_ex_in_add_ex2270_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_49_in_add_ex2305_bits[]	= { ANTLR_UINT64_LIT(0x000800500A923030) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_49_in_add_ex2305( FOLLOW_49_in_add_ex2305_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_mult_ex_in_add_ex2309_bits[]	= { ANTLR_UINT64_LIT(0x000A000000000002) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_mult_ex_in_add_ex2309( FOLLOW_mult_ex_in_add_ex2309_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_51_in_add_ex2331_bits[]	= { ANTLR_UINT64_LIT(0x000800500A923030) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_51_in_add_ex2331( FOLLOW_51_in_add_ex2331_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_mult_ex_in_add_ex2335_bits[]	= { ANTLR_UINT64_LIT(0x000A000000000002) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_mult_ex_in_add_ex2335( FOLLOW_mult_ex_in_add_ex2335_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_unary_ex_in_mult_ex2394_bits[]	= { ANTLR_UINT64_LIT(0x0040900000000002) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_unary_ex_in_mult_ex2394( FOLLOW_unary_ex_in_mult_ex2394_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_47_in_mult_ex2433_bits[]	= { ANTLR_UINT64_LIT(0x000800500A923030) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_47_in_mult_ex2433( FOLLOW_47_in_mult_ex2433_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_unary_ex_in_mult_ex2437_bits[]	= { ANTLR_UINT64_LIT(0x0040900000000002) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_unary_ex_in_mult_ex2437( FOLLOW_unary_ex_in_mult_ex2437_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_54_in_mult_ex2463_bits[]	= { ANTLR_UINT64_LIT(0x000800500A923030) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_54_in_mult_ex2463( FOLLOW_54_in_mult_ex2463_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_unary_ex_in_mult_ex2467_bits[]	= { ANTLR_UINT64_LIT(0x0040900000000002) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_unary_ex_in_mult_ex2467( FOLLOW_unary_ex_in_mult_ex2467_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_44_in_mult_ex2493_bits[]	= { ANTLR_UINT64_LIT(0x000800500A923030) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_44_in_mult_ex2493( FOLLOW_44_in_mult_ex2493_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_unary_ex_in_mult_ex2497_bits[]	= { ANTLR_UINT64_LIT(0x0040900000000002) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_unary_ex_in_mult_ex2497( FOLLOW_unary_ex_in_mult_ex2497_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_post_ex_in_unary_ex2549_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_post_ex_in_unary_ex2549( FOLLOW_post_ex_in_unary_ex2549_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_DOUBINC_in_unary_ex2562_bits[]	= { ANTLR_UINT64_LIT(0x000800500A923030) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_DOUBINC_in_unary_ex2562( FOLLOW_DOUBINC_in_unary_ex2562_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_unary_ex_in_unary_ex2566_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_unary_ex_in_unary_ex2566( FOLLOW_unary_ex_in_unary_ex2566_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_DOUBDEC_in_unary_ex2579_bits[]	= { ANTLR_UINT64_LIT(0x000800500A923030) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_DOUBDEC_in_unary_ex2579( FOLLOW_DOUBDEC_in_unary_ex2579_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_unary_ex_in_unary_ex2583_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_unary_ex_in_unary_ex2583( FOLLOW_unary_ex_in_unary_ex2583_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_51_in_unary_ex2596_bits[]	= { ANTLR_UINT64_LIT(0x000800500A923030) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_51_in_unary_ex2596( FOLLOW_51_in_unary_ex2596_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_unary_ex_in_unary_ex2600_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_unary_ex_in_unary_ex2600( FOLLOW_unary_ex_in_unary_ex2600_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_LSQBRACKET_in_post_ex_proper2638_bits[]	= { ANTLR_UINT64_LIT(0x000800500A923030) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_LSQBRACKET_in_post_ex_proper2638( FOLLOW_LSQBRACKET_in_post_ex_proper2638_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_expression_in_post_ex_proper2642_bits[]	= { ANTLR_UINT64_LIT(0x0000000400000000) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_expression_in_post_ex_proper2642( FOLLOW_expression_in_post_ex_proper2642_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_RSQBRACKET_in_post_ex_proper2646_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_RSQBRACKET_in_post_ex_proper2646( FOLLOW_RSQBRACKET_in_post_ex_proper2646_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_LBRACKET_in_post_ex_proper2661_bits[]	= { ANTLR_UINT64_LIT(0x0000000080000000) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_post_ex_proper2661( FOLLOW_LBRACKET_in_post_ex_proper2661_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_RBRACKET_in_post_ex_proper2665_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_post_ex_proper2665( FOLLOW_RBRACKET_in_post_ex_proper2665_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_LBRACKET_in_post_ex_proper2693_bits[]	= { ANTLR_UINT64_LIT(0x000800500A923070) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_post_ex_proper2693( FOLLOW_LBRACKET_in_post_ex_proper2693_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_arglist_in_post_ex_proper2699_bits[]	= { ANTLR_UINT64_LIT(0x0000000080000000) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_arglist_in_post_ex_proper2699( FOLLOW_arglist_in_post_ex_proper2699_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_RBRACKET_in_post_ex_proper2703_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_post_ex_proper2703( FOLLOW_RBRACKET_in_post_ex_proper2703_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_53_in_post_ex_proper2716_bits[]	= { ANTLR_UINT64_LIT(0x0000000000100000) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_53_in_post_ex_proper2716( FOLLOW_53_in_post_ex_proper2716_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_post_ex_proper2720_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_ID_in_post_ex_proper2720( FOLLOW_ID_in_post_ex_proper2720_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_DOUBINC_in_post_ex_proper2747_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_DOUBINC_in_post_ex_proper2747( FOLLOW_DOUBINC_in_post_ex_proper2747_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_DOUBDEC_in_post_ex_proper2776_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_DOUBDEC_in_post_ex_proper2776( FOLLOW_DOUBDEC_in_post_ex_proper2776_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_prim_ex_in_post_ex2829_bits[]	= { ANTLR_UINT64_LIT(0x0020000006003002) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_prim_ex_in_post_ex2829( FOLLOW_prim_ex_in_post_ex2829_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_post_ex_proper_in_post_ex2848_bits[]	= { ANTLR_UINT64_LIT(0x0020000006003002) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_post_ex_proper_in_post_ex2848( FOLLOW_post_ex_proper_in_post_ex2848_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_lvalue_in_assignment2877_bits[]	= { ANTLR_UINT64_LIT(0x0495200000000042) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_lvalue_in_assignment2877( FOLLOW_lvalue_in_assignment2877_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_assign_op_in_assignment2890_bits[]	= { ANTLR_UINT64_LIT(0x000800500A923030) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_assign_op_in_assignment2890( FOLLOW_assign_op_in_assignment2890_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_expression_in_assignment2892_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_expression_in_assignment2892( FOLLOW_expression_in_assignment2892_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_INT_in_constant2925_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_INT_in_constant2925( FOLLOW_INT_in_constant2925_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_FLOAT_in_constant2941_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_FLOAT_in_constant2941( FOLLOW_FLOAT_in_constant2941_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_CHAR_in_constant2955_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_CHAR_in_constant2955( FOLLOW_CHAR_in_constant2955_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_STRING_in_constant2970_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_STRING_in_constant2970( FOLLOW_STRING_in_constant2970_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_BOOL_in_constant2982_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_BOOL_in_constant2982( FOLLOW_BOOL_in_constant2982_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_ID_in_prim_ex3014_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_ID_in_prim_ex3014( FOLLOW_ID_in_prim_ex3014_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_LBRACKET_in_prim_ex3029_bits[]	= { ANTLR_UINT64_LIT(0x000800500A923030) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_prim_ex3029( FOLLOW_LBRACKET_in_prim_ex3029_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_expression_in_prim_ex3033_bits[]	= { ANTLR_UINT64_LIT(0x0000000080000000) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_expression_in_prim_ex3033( FOLLOW_expression_in_prim_ex3033_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_RBRACKET_in_prim_ex3037_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_prim_ex3037( FOLLOW_RBRACKET_in_prim_ex3037_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_constant_in_prim_ex3052_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_constant_in_prim_ex3052( FOLLOW_constant_in_prim_ex3052_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_scalarType_in_prim_ex3067_bits[]	= { ANTLR_UINT64_LIT(0x0000000006000000) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_scalarType_in_prim_ex3067( FOLLOW_scalarType_in_prim_ex3067_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_structInit_in_prim_ex3099_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_structInit_in_prim_ex3099( FOLLOW_structInit_in_prim_ex3099_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_arrayInit_in_prim_ex3123_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_arrayInit_in_prim_ex3123( FOLLOW_arrayInit_in_prim_ex3123_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_NULLTOK_in_prim_ex3152_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_NULLTOK_in_prim_ex3152( FOLLOW_NULLTOK_in_prim_ex3152_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_LBRACKET_in_structInit3176_bits[]	= { ANTLR_UINT64_LIT(0x0000000080000000) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_structInit3176( FOLLOW_LBRACKET_in_structInit3176_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_RBRACKET_in_structInit3180_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_structInit3180( FOLLOW_RBRACKET_in_structInit3180_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_LBRACKET_in_structInit3192_bits[]	= { ANTLR_UINT64_LIT(0x000800500A923030) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_structInit3192( FOLLOW_LBRACKET_in_structInit3192_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_expression_in_structInit3196_bits[]	= { ANTLR_UINT64_LIT(0x0000000080000000) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_expression_in_structInit3196( FOLLOW_expression_in_structInit3196_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_RBRACKET_in_structInit3200_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_structInit3200( FOLLOW_RBRACKET_in_structInit3200_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_LSQBRACKET_in_arrayInit3262_bits[]	= { ANTLR_UINT64_LIT(0x000800500A923030) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_LSQBRACKET_in_arrayInit3262( FOLLOW_LSQBRACKET_in_arrayInit3262_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_expression_in_arrayInit3266_bits[]	= { ANTLR_UINT64_LIT(0x0000000400000000) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_expression_in_arrayInit3266( FOLLOW_expression_in_arrayInit3266_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_RSQBRACKET_in_arrayInit3268_bits[]	= { ANTLR_UINT64_LIT(0x0000000006000000) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_RSQBRACKET_in_arrayInit3268( FOLLOW_RSQBRACKET_in_arrayInit3268_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_LSQBRACKET_in_arrayInit3292_bits[]	= { ANTLR_UINT64_LIT(0x0000000400000000) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_LSQBRACKET_in_arrayInit3292( FOLLOW_LSQBRACKET_in_arrayInit3292_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_RSQBRACKET_in_arrayInit3294_bits[]	= { ANTLR_UINT64_LIT(0x0000000006000000) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_RSQBRACKET_in_arrayInit3294( FOLLOW_RSQBRACKET_in_arrayInit3294_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_LSQBRACKET_in_arrayInit3332_bits[]	= { ANTLR_UINT64_LIT(0x0000000400000000) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_LSQBRACKET_in_arrayInit3332( FOLLOW_LSQBRACKET_in_arrayInit3332_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_RSQBRACKET_in_arrayInit3334_bits[]	= { ANTLR_UINT64_LIT(0x0000000006000000) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_RSQBRACKET_in_arrayInit3334( FOLLOW_RSQBRACKET_in_arrayInit3334_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_LBRACKET_in_arrayInit3375_bits[]	= { ANTLR_UINT64_LIT(0x0000000080000000) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_arrayInit3375( FOLLOW_LBRACKET_in_arrayInit3375_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_RBRACKET_in_arrayInit3379_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_arrayInit3379( FOLLOW_RBRACKET_in_arrayInit3379_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_LBRACKET_in_arrayInit3413_bits[]	= { ANTLR_UINT64_LIT(0x000800500A923030) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_arrayInit3413( FOLLOW_LBRACKET_in_arrayInit3413_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_expression_in_arrayInit3417_bits[]	= { ANTLR_UINT64_LIT(0x0000000080000000) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_expression_in_arrayInit3417( FOLLOW_expression_in_arrayInit3417_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_RBRACKET_in_arrayInit3421_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_arrayInit3421( FOLLOW_RBRACKET_in_arrayInit3421_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_decl_in_declaration3466_bits[]	= { ANTLR_UINT64_LIT(0x0400000000000040) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_decl_in_declaration3466( FOLLOW_decl_in_declaration3466_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_58_in_declaration3501_bits[]	= { ANTLR_UINT64_LIT(0x000800500A923030) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_58_in_declaration3501( FOLLOW_58_in_declaration3501_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_expression_in_declaration3508_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_expression_in_declaration3508( FOLLOW_expression_in_declaration3508_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_CHOWN_in_declaration3534_bits[]	= { ANTLR_UINT64_LIT(0x000800500A923030) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_CHOWN_in_declaration3534( FOLLOW_CHOWN_in_declaration3534_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_expression_in_declaration3541_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_expression_in_declaration3541( FOLLOW_expression_in_declaration3541_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_declaration_in_instructionScalar3590_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_declaration_in_instructionScalar3590( FOLLOW_declaration_in_instructionScalar3590_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_assignment_in_instructionScalar3603_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_assignment_in_instructionScalar3603( FOLLOW_assignment_in_instructionScalar3603_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_RETURN_in_returnInst3635_bits[]	= { ANTLR_UINT64_LIT(0x000800500A923030) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_RETURN_in_returnInst3635( FOLLOW_RETURN_in_returnInst3635_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_expression_in_returnInst3637_bits[]	= { ANTLR_UINT64_LIT(0x0000000800000000) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_expression_in_returnInst3637( FOLLOW_expression_in_returnInst3637_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_SEMICOLON_in_returnInst3641_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_SEMICOLON_in_returnInst3641( FOLLOW_SEMICOLON_in_returnInst3641_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_RETURN_in_returnInst3655_bits[]	= { ANTLR_UINT64_LIT(0x0000000800000000) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_RETURN_in_returnInst3655( FOLLOW_RETURN_in_returnInst3655_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_SEMICOLON_in_returnInst3659_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_SEMICOLON_in_returnInst3659( FOLLOW_SEMICOLON_in_returnInst3659_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_RETURN_OWN_in_returnInst3673_bits[]	= { ANTLR_UINT64_LIT(0x000800500A923030) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_RETURN_OWN_in_returnInst3673( FOLLOW_RETURN_OWN_in_returnInst3673_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_expression_in_returnInst3675_bits[]	= { ANTLR_UINT64_LIT(0x0000000800000000) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_expression_in_returnInst3675( FOLLOW_expression_in_returnInst3675_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_SEMICOLON_in_returnInst3679_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_SEMICOLON_in_returnInst3679( FOLLOW_SEMICOLON_in_returnInst3679_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_WHILE_in_whileInst3717_bits[]	= { ANTLR_UINT64_LIT(0x0000000002000000) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_WHILE_in_whileInst3717( FOLLOW_WHILE_in_whileInst3717_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_LBRACKET_in_whileInst3719_bits[]	= { ANTLR_UINT64_LIT(0x000800500A923030) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_whileInst3719( FOLLOW_LBRACKET_in_whileInst3719_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_expression_in_whileInst3721_bits[]	= { ANTLR_UINT64_LIT(0x0000000080000000) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_expression_in_whileInst3721( FOLLOW_expression_in_whileInst3721_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_RBRACKET_in_whileInst3723_bits[]	= { ANTLR_UINT64_LIT(0x0000000001000000) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_whileInst3723( FOLLOW_RBRACKET_in_whileInst3723_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_body_in_whileInst3725_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_body_in_whileInst3725( FOLLOW_body_in_whileInst3725_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_DO_in_doInst3761_bits[]	= { ANTLR_UINT64_LIT(0x0000000001000000) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_DO_in_doInst3761( FOLLOW_DO_in_doInst3761_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_body_in_doInst3763_bits[]	= { ANTLR_UINT64_LIT(0x0000020000000000) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_body_in_doInst3763( FOLLOW_body_in_doInst3763_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_WHILE_in_doInst3765_bits[]	= { ANTLR_UINT64_LIT(0x0000000002000000) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_WHILE_in_doInst3765( FOLLOW_WHILE_in_doInst3765_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_LBRACKET_in_doInst3767_bits[]	= { ANTLR_UINT64_LIT(0x000800500A923030) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_doInst3767( FOLLOW_LBRACKET_in_doInst3767_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_expression_in_doInst3769_bits[]	= { ANTLR_UINT64_LIT(0x0000000080000000) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_expression_in_doInst3769( FOLLOW_expression_in_doInst3769_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_RBRACKET_in_doInst3771_bits[]	= { ANTLR_UINT64_LIT(0x0000000800000000) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_doInst3771( FOLLOW_RBRACKET_in_doInst3771_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_SEMICOLON_in_doInst3773_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_SEMICOLON_in_doInst3773( FOLLOW_SEMICOLON_in_doInst3773_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_FOR_in_forInst3805_bits[]	= { ANTLR_UINT64_LIT(0x0000000002000000) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_FOR_in_forInst3805( FOLLOW_FOR_in_forInst3805_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_LBRACKET_in_forInst3807_bits[]	= { ANTLR_UINT64_LIT(0x000800580A923030) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_forInst3807( FOLLOW_LBRACKET_in_forInst3807_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_instructionScalar_in_forInst3835_bits[]	= { ANTLR_UINT64_LIT(0x0000000800000000) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_instructionScalar_in_forInst3835( FOLLOW_instructionScalar_in_forInst3835_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_SEMICOLON_in_forInst3841_bits[]	= { ANTLR_UINT64_LIT(0x000800580A923030) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_SEMICOLON_in_forInst3841( FOLLOW_SEMICOLON_in_forInst3841_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_expression_in_forInst3866_bits[]	= { ANTLR_UINT64_LIT(0x0000000800000000) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_expression_in_forInst3866( FOLLOW_expression_in_forInst3866_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_SEMICOLON_in_forInst3880_bits[]	= { ANTLR_UINT64_LIT(0x000800508A923030) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_SEMICOLON_in_forInst3880( FOLLOW_SEMICOLON_in_forInst3880_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_instructionScalar_in_forInst3905_bits[]	= { ANTLR_UINT64_LIT(0x0000000080000000) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_instructionScalar_in_forInst3905( FOLLOW_instructionScalar_in_forInst3905_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_RBRACKET_in_forInst3911_bits[]	= { ANTLR_UINT64_LIT(0x0000000001000000) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_forInst3911( FOLLOW_RBRACKET_in_forInst3911_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_body_in_forInst3936_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_body_in_forInst3936( FOLLOW_body_in_forInst3936_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_ELSE_in_elsemiddle3984_bits[]	= { ANTLR_UINT64_LIT(0x0000000000200000) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_ELSE_in_elsemiddle3984( FOLLOW_ELSE_in_elsemiddle3984_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_IF_in_elsemiddle3986_bits[]	= { ANTLR_UINT64_LIT(0x0000000002000000) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_IF_in_elsemiddle3986( FOLLOW_IF_in_elsemiddle3986_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_LBRACKET_in_elsemiddle3988_bits[]	= { ANTLR_UINT64_LIT(0x000800500A923030) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_elsemiddle3988( FOLLOW_LBRACKET_in_elsemiddle3988_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_expression_in_elsemiddle3990_bits[]	= { ANTLR_UINT64_LIT(0x0000000080000000) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_expression_in_elsemiddle3990( FOLLOW_expression_in_elsemiddle3990_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_RBRACKET_in_elsemiddle3992_bits[]	= { ANTLR_UINT64_LIT(0x0000000001000000) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_elsemiddle3992( FOLLOW_RBRACKET_in_elsemiddle3992_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_body_in_elsemiddle3994_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_body_in_elsemiddle3994( FOLLOW_body_in_elsemiddle3994_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_ELSE_in_endif4027_bits[]	= { ANTLR_UINT64_LIT(0x0000000001000000) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_ELSE_in_endif4027( FOLLOW_ELSE_in_endif4027_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_body_in_endif4029_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_body_in_endif4029( FOLLOW_body_in_endif4029_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_IF_in_ifInst4059_bits[]	= { ANTLR_UINT64_LIT(0x0000000002000000) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_IF_in_ifInst4059( FOLLOW_IF_in_ifInst4059_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_LBRACKET_in_ifInst4061_bits[]	= { ANTLR_UINT64_LIT(0x000800500A923030) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_LBRACKET_in_ifInst4061( FOLLOW_LBRACKET_in_ifInst4061_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_expression_in_ifInst4063_bits[]	= { ANTLR_UINT64_LIT(0x0000000080000000) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_expression_in_ifInst4063( FOLLOW_expression_in_ifInst4063_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_RBRACKET_in_ifInst4065_bits[]	= { ANTLR_UINT64_LIT(0x0000000001000000) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_RBRACKET_in_ifInst4065( FOLLOW_RBRACKET_in_ifInst4065_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_body_in_ifInst4067_bits[]	= { ANTLR_UINT64_LIT(0x0000000000004002) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_body_in_ifInst4067( FOLLOW_body_in_ifInst4067_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_elsemiddle_in_ifInst4084_bits[]	= { ANTLR_UINT64_LIT(0x0000000000004002) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_elsemiddle_in_ifInst4084( FOLLOW_elsemiddle_in_ifInst4084_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_endif_in_ifInst4104_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_endif_in_ifInst4104( FOLLOW_endif_in_ifInst4104_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_ifInst_in_instruction4138_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_ifInst_in_instruction4138( FOLLOW_ifInst_in_instruction4138_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_whileInst_in_instruction4159_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_whileInst_in_instruction4159( FOLLOW_whileInst_in_instruction4159_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_doInst_in_instruction4176_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_doInst_in_instruction4176( FOLLOW_doInst_in_instruction4176_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_forInst_in_instruction4196_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_forInst_in_instruction4196( FOLLOW_forInst_in_instruction4196_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_instructionScalar_in_instruction4216_bits[]	= { ANTLR_UINT64_LIT(0x0000000800000000) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_instructionScalar_in_instruction4216( FOLLOW_instructionScalar_in_instruction4216_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_SEMICOLON_in_instruction4218_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_SEMICOLON_in_instruction4218( FOLLOW_SEMICOLON_in_instruction4218_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_returnInst_in_instruction4231_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_returnInst_in_instruction4231( FOLLOW_returnInst_in_instruction4231_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_instruction_in_instructionList4263_bits[]	= { ANTLR_UINT64_LIT(0x000802530AB63832) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_instruction_in_instructionList4263( FOLLOW_instruction_in_instructionList4263_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_instruction_in_instructionList4279_bits[]	= { ANTLR_UINT64_LIT(0x000802530AB63832) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_instruction_in_instructionList4279( FOLLOW_instruction_in_instructionList4279_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_LBRACE_in_body4313_bits[]	= { ANTLR_UINT64_LIT(0x0000000040000000) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_LBRACE_in_body4313( FOLLOW_LBRACE_in_body4313_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_RBRACE_in_body4317_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_RBRACE_in_body4317( FOLLOW_RBRACE_in_body4317_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_LBRACE_in_body4332_bits[]	= { ANTLR_UINT64_LIT(0x000802530AB63830) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_LBRACE_in_body4332( FOLLOW_LBRACE_in_body4332_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_instructionList_in_body4334_bits[]	= { ANTLR_UINT64_LIT(0x0000000040000000) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_instructionList_in_body4334( FOLLOW_instructionList_in_body4334_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_RBRACE_in_body4338_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_RBRACE_in_body4338( FOLLOW_RBRACE_in_body4338_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_decl_in_function4368_bits[]	= { ANTLR_UINT64_LIT(0x0000000002000000) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_decl_in_function4368( FOLLOW_decl_in_function4368_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_parameterList_in_function4370_bits[]	= { ANTLR_UINT64_LIT(0x0000000001000000) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_parameterList_in_function4370( FOLLOW_parameterList_in_function4370_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_body_in_function4372_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_body_in_function4372( FOLLOW_body_in_function4372_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_STRUCT_in_structDecl4397_bits[]	= { ANTLR_UINT64_LIT(0x0000004000000000) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_STRUCT_in_structDecl4397( FOLLOW_STRUCT_in_structDecl4397_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_TYPE_in_structDecl4399_bits[]	= { ANTLR_UINT64_LIT(0x0000000001000000) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_TYPE_in_structDecl4399( FOLLOW_TYPE_in_structDecl4399_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_LBRACE_in_structDecl4415_bits[]	= { ANTLR_UINT64_LIT(0x0000004040000000) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_LBRACE_in_structDecl4415( FOLLOW_LBRACE_in_structDecl4415_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_declaration_in_structDecl4420_bits[]	= { ANTLR_UINT64_LIT(0x0000000800000000) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_declaration_in_structDecl4420( FOLLOW_declaration_in_structDecl4420_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_SEMICOLON_in_structDecl4424_bits[]	= { ANTLR_UINT64_LIT(0x0000004040000000) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_SEMICOLON_in_structDecl4424( FOLLOW_SEMICOLON_in_structDecl4424_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_RBRACE_in_structDecl4429_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_RBRACE_in_structDecl4429( FOLLOW_RBRACE_in_structDecl4429_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_CLASS_in_classDecl4477_bits[]	= { ANTLR_UINT64_LIT(0x0000004000000000) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_CLASS_in_classDecl4477( FOLLOW_CLASS_in_classDecl4477_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_TYPE_in_classDecl4481_bits[]	= { ANTLR_UINT64_LIT(0x0000000001000000) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_TYPE_in_classDecl4481( FOLLOW_TYPE_in_classDecl4481_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_CLASS_in_classDecl4501_bits[]	= { ANTLR_UINT64_LIT(0x0000004000000000) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_CLASS_in_classDecl4501( FOLLOW_CLASS_in_classDecl4501_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_TYPE_in_classDecl4505_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000100) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_TYPE_in_classDecl4505( FOLLOW_TYPE_in_classDecl4505_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_COLON_in_classDecl4507_bits[]	= { ANTLR_UINT64_LIT(0x0000004000000000) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_COLON_in_classDecl4507( FOLLOW_COLON_in_classDecl4507_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_TYPE_in_classDecl4511_bits[]	= { ANTLR_UINT64_LIT(0x0000000001000000) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_TYPE_in_classDecl4511( FOLLOW_TYPE_in_classDecl4511_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_LBRACE_in_classDecl4538_bits[]	= { ANTLR_UINT64_LIT(0x0000014060000000) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_LBRACE_in_classDecl4538( FOLLOW_LBRACE_in_classDecl4538_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_declaration_in_classDecl4581_bits[]	= { ANTLR_UINT64_LIT(0x0000000800000000) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_declaration_in_classDecl4581( FOLLOW_declaration_in_classDecl4581_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_SEMICOLON_in_classDecl4585_bits[]	= { ANTLR_UINT64_LIT(0x0000014060000000) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_SEMICOLON_in_classDecl4585( FOLLOW_SEMICOLON_in_classDecl4585_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_function_in_classDecl4611_bits[]	= { ANTLR_UINT64_LIT(0x0000014060000000) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_function_in_classDecl4611( FOLLOW_function_in_classDecl4611_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_VIRTUAL_in_classDecl4640_bits[]	= { ANTLR_UINT64_LIT(0x0000004000000000) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_VIRTUAL_in_classDecl4640( FOLLOW_VIRTUAL_in_classDecl4640_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_function_in_classDecl4644_bits[]	= { ANTLR_UINT64_LIT(0x0000014060000000) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_function_in_classDecl4644( FOLLOW_function_in_classDecl4644_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_OVERRIDE_in_classDecl4670_bits[]	= { ANTLR_UINT64_LIT(0x0000004000000000) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_OVERRIDE_in_classDecl4670( FOLLOW_OVERRIDE_in_classDecl4670_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_function_in_classDecl4674_bits[]	= { ANTLR_UINT64_LIT(0x0000014060000000) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_function_in_classDecl4674( FOLLOW_function_in_classDecl4674_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_RBRACE_in_classDecl4710_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_RBRACE_in_classDecl4710( FOLLOW_RBRACE_in_classDecl4710_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_INCLUDE_in_inc4735_bits[]	= { ANTLR_UINT64_LIT(0x0000001000000000) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_INCLUDE_in_inc4735( FOLLOW_INCLUDE_in_inc4735_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_STRING_in_inc4737_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_STRING_in_inc4737( FOLLOW_STRING_in_inc4737_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_function_in_program4783_bits[]	= { ANTLR_UINT64_LIT(0x0000006000400082) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_function_in_program4783( FOLLOW_function_in_program4783_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_structDecl_in_program4805_bits[]	= { ANTLR_UINT64_LIT(0x0000006000400082) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_structDecl_in_program4805( FOLLOW_structDecl_in_program4805_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_classDecl_in_program4825_bits[]	= { ANTLR_UINT64_LIT(0x0000006000400082) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_classDecl_in_program4825( FOLLOW_classDecl_in_program4825_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: WNScriptASTDeprecatedParser  */
static	ANTLR_BITWORD FOLLOW_inc_in_program4846_bits[]	= { ANTLR_UINT64_LIT(0x0000006000400082) };
static  WNScriptASTDeprecatedParserImplTraits::BitsetListType FOLLOW_inc_in_program4846( FOLLOW_inc_in_program4846_bits, 1 );



/* =========================================================================
 * DFA tables for the parser
 */
/** Static dfa state tables for Cyclic dfa:
 *    502:1: instructionScalar returns [WNInstruction* node] : ( declaration | assignment );
 */
static const ANTLR_INT32 dfa29_eot[7] =
    {
	-1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR_INT32 dfa29_eof[7] =
    {
	-1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR_INT32 dfa29_min[7] =
    {
	4, 20, -1, 4, -1, 20, 34
    };
static const ANTLR_INT32 dfa29_max[7] =
    {
	51, 26, -1, 51, -1, 26, 34
    };
static const ANTLR_INT32 dfa29_accept[7] =
    {
	-1, -1, 2, -1, 1, -1, -1
    };
static const ANTLR_INT32 dfa29_special[7] =
    {
	-1, -1, -1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
static const ANTLR_INT32* dfa29_T_empty	 =   NULL;

static const ANTLR_INT32 dfa29_T0[] =
    {
	2, 2, -1, -1, -1, -1, -1, -1, 2, 2, -1, -1, -1, 2, -1, -1, 2, -1, -1, 2, 
	-1, 2, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, 1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 2
    };
static const ANTLR_INT32 dfa29_T1[] =
    {
	2, 2, -1, -1, -1, -1, -1, -1, 2, 2, -1, -1, -1, 2, -1, -1, 2, -1, -1, 2, 
	-1, 2, -1, 2, -1, -1, -1, -1, -1, -1, 5, -1, 2, -1, 2, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, 2
    };
static const ANTLR_INT32 dfa29_T2[] =
    {
	4, -1, -1, -1, -1, 2, 3
    };
static const ANTLR_INT32 dfa29_T3[] =
    {
	4, -1, -1, -1, -1, 2, 6
    };
static const ANTLR_INT32 dfa29_T4[] =
    {
	5
    };


/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR_INT32 * const dfa29_transitions[] =
{
    dfa29_T0, dfa29_T2, NULL, dfa29_T1, NULL, dfa29_T3, dfa29_T4
};


/* Declare tracking structure for Cyclic DFA 29
 */
class WNScriptASTDeprecatedParserCyclicDFA29 : public CyclicDFA< WNScriptASTDeprecatedParserImplTraits, WNScriptASTDeprecatedParser >, public WNScriptASTDeprecatedParserTokens
{
public:
	typedef CyclicDFA< WNScriptASTDeprecatedParserImplTraits, WNScriptASTDeprecatedParser >  BaseType;
	typedef BaseType::ContextType CtxType;

private:
	

public:
	WNScriptASTDeprecatedParserCyclicDFA29( ANTLR_INT32	decisionNumber
					, const ANTLR_UCHAR*	description
					, const ANTLR_INT32* const	eot
					, const ANTLR_INT32* const	eof
					, const ANTLR_INT32* const	min
					, const ANTLR_INT32* const	max
					, const ANTLR_INT32* const	accept
					, const ANTLR_INT32* const	special
					, const ANTLR_INT32* const *const	transition)
					:BaseType( decisionNumber, description, eot, eof, min, max, accept,
								special, transition )
	{
		
	}

};

static WNScriptASTDeprecatedParserCyclicDFA29  cdfa29(
	    29,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const ANTLR_UCHAR*)"502:1: instructionScalar returns [WNInstruction* node] : ( declaration | assignment );",
	    dfa29_eot,	    /* EOT table			    */
	    dfa29_eof,	    /* EOF table			    */
	    dfa29_min,	    /* Minimum tokens for each state    */
	    dfa29_max,	    /* Maximum tokens for each state    */
	    dfa29_accept,	/* Accept table			    */
	    dfa29_special,	/* Special transition states	    */
	    dfa29_transitions	/* Table of transition tables	    */

	);


/* End of Cyclic DFA 29
 * ---------------------
 *//** Static dfa state tables for Cyclic dfa:
 *    ()* loopback of 612:17: ( (a= declaration SEMICOLON ) | (b= function ) | ( VIRTUAL h= function ) | ( OVERRIDE i= function ) )*
 */
static const ANTLR_INT32 dfa41_eot[10] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR_INT32 dfa41_eof[10] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };
static const ANTLR_INT32 dfa41_min[10] =
    {
	29, -1, 20, -1, -1, 34, 6, 20, -1, -1
    };
static const ANTLR_INT32 dfa41_max[10] =
    {
	40, -1, 26, -1, -1, 34, 58, 26, -1, -1
    };
static const ANTLR_INT32 dfa41_accept[10] =
    {
	-1, 5, -1, 3, 4, -1, -1, -1, 1, 2
    };
static const ANTLR_INT32 dfa41_special[10] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
static const ANTLR_INT32* dfa41_T_empty	 =   NULL;

static const ANTLR_INT32 dfa41_T0[] =
    {
	8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8
    };
static const ANTLR_INT32 dfa41_T1[] =
    {
	6, -1, -1, -1, -1, -1, 5
    };
static const ANTLR_INT32 dfa41_T2[] =
    {
	4, 1, -1, -1, -1, -1, -1, -1, -1, 2, -1, 3
    };
static const ANTLR_INT32 dfa41_T3[] =
    {
	7
    };


/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR_INT32 * const dfa41_transitions[] =
{
    dfa41_T2, NULL, dfa41_T1, NULL, NULL, dfa41_T3, dfa41_T0, dfa41_T1, 
    NULL, NULL
};


/* Declare tracking structure for Cyclic DFA 41
 */
class WNScriptASTDeprecatedParserCyclicDFA41 : public CyclicDFA< WNScriptASTDeprecatedParserImplTraits, WNScriptASTDeprecatedParser >, public WNScriptASTDeprecatedParserTokens
{
public:
	typedef CyclicDFA< WNScriptASTDeprecatedParserImplTraits, WNScriptASTDeprecatedParser >  BaseType;
	typedef BaseType::ContextType CtxType;

private:
	

public:
	WNScriptASTDeprecatedParserCyclicDFA41( ANTLR_INT32	decisionNumber
					, const ANTLR_UCHAR*	description
					, const ANTLR_INT32* const	eot
					, const ANTLR_INT32* const	eof
					, const ANTLR_INT32* const	min
					, const ANTLR_INT32* const	max
					, const ANTLR_INT32* const	accept
					, const ANTLR_INT32* const	special
					, const ANTLR_INT32* const *const	transition)
					:BaseType( decisionNumber, description, eot, eof, min, max, accept,
								special, transition )
	{
		
	}

};

static WNScriptASTDeprecatedParserCyclicDFA41  cdfa41(
	    41,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const ANTLR_UCHAR*)"()* loopback of 612:17: ( (a= declaration SEMICOLON ) | (b= function ) | ( VIRTUAL h= function ) | ( OVERRIDE i= function ) )*",
	    dfa41_eot,	    /* EOT table			    */
	    dfa41_eof,	    /* EOF table			    */
	    dfa41_min,	    /* Minimum tokens for each state    */
	    dfa41_max,	    /* Maximum tokens for each state    */
	    dfa41_accept,	/* Accept table			    */
	    dfa41_special,	/* Special transition states	    */
	    dfa41_transitions	/* Table of transition tables	    */

	);


/* End of Cyclic DFA 41
 * ---------------------
 */ 
/* =========================================================================
 * End of DFA tables for the parser
 */

/* ==============================================
 * Parsing rules
 */
/**
 * $ANTLR start scalarType
 * C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:251:1: scalarType returns [WNTypeNode* node] : TYPE ;
 */
WNTypeNode*
WNScriptASTDeprecatedParser::scalarType()
{
        WNScriptASTDeprecatedParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    WNTypeNode* node;


    const ImplTraits::CommonTokenType* TYPE1 = NULL;

    /* Initialize rule variables
     */
     


        node = wn_nullptr;


 
    {
        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:255:5: ( TYPE )
        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:255:9: TYPE
        {
            TYPE1 =  this->matchToken(TYPE, &FOLLOW_TYPE_in_scalarType1107);
            if  (this->hasException())
            {
                goto rulescalarTypeEx;
            }


            {
                 node = WN_SCRIPTNODE_NEW(WNTypeNode((TYPE1->getText()).c_str())); SetLocation(node, TYPE1); 
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto rulescalarTypeEx; /* Prevent compiler warnings */
    rulescalarTypeEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}
/* $ANTLR end scalarType */

/**
 * $ANTLR start type
 * C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:258:1: type returns [WNTypeNode* node] : scalarType ( LSQBRACKET RSQBRACKET )* ;
 */
WNTypeNode*
WNScriptASTDeprecatedParser::type()
{
        WNScriptASTDeprecatedParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    WNTypeNode* node;


    const ImplTraits::CommonTokenType* RSQBRACKET3 = NULL;
    WNTypeNode* scalarType2;
    /* Initialize rule variables
     */
     


        node = wn_nullptr;


 
    {
        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:262:5: ( scalarType ( LSQBRACKET RSQBRACKET )* )
        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:262:10: scalarType ( LSQBRACKET RSQBRACKET )*
        {
            this->followPush(FOLLOW_scalarType_in_type1143);
            scalarType2=scalarType();

            this->followPop();
            if  (this->hasException())
            {
                goto ruletypeEx;
            }


            {
                 node = scalarType2
                ; SetLocationFromNode(node, scalarType2
                ); 
            }


            // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:263:17: ( LSQBRACKET RSQBRACKET )*

            for (;;)
            {
                int alt1=2;
                switch ( this->LA(1) )
                {
                case LSQBRACKET:
                	{
                		alt1=1;
                	}
                    break;

                }

                switch (alt1)
                {
            	case 1:
            	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:263:18: LSQBRACKET RSQBRACKET
            	    {
            	         this->matchToken(LSQBRACKET, &FOLLOW_LSQBRACKET_in_type1164);
            	        if  (this->hasException())
            	        {
            	            goto ruletypeEx;
            	        }


            	        RSQBRACKET3 =  this->matchToken(RSQBRACKET, &FOLLOW_RSQBRACKET_in_type1166);
            	        if  (this->hasException())
            	        {
            	            goto ruletypeEx;
            	        }


            	        {
            	             node->AddArrayLevel(); SetEndLocation(node, RSQBRACKET3); 
            	        }


            	    }
            	    break;

            	default:
            	    goto loop1;	/* break out of the loop */
            	    break;
                }
            }
            loop1: ; /* Jump out to here if this rule does not match */


        }

    }
    // This is where rules clean up and exit
    //
    goto ruletypeEx; /* Prevent compiler warnings */
    ruletypeEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}
/* $ANTLR end type */

/**
 * $ANTLR start decl
 * C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:266:1: decl returns [WNDeclaration* node] : type ID ;
 */
WNDeclaration*
WNScriptASTDeprecatedParser::decl()
{
        WNScriptASTDeprecatedParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    WNDeclaration* node;


    const ImplTraits::CommonTokenType* ID5 = NULL;
    WNTypeNode* type4;
    /* Initialize rule variables
     */
     


        node = wn_nullptr;


 
    {
        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:270:5: ( type ID )
        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:270:10: type ID
        {
            this->followPush(FOLLOW_type_in_decl1198);
            type4=type();

            this->followPop();
            if  (this->hasException())
            {
                goto ruledeclEx;
            }


            ID5 =  this->matchToken(ID, &FOLLOW_ID_in_decl1200);
            if  (this->hasException())
            {
                goto ruledeclEx;
            }


            {
                node = WN_SCRIPTNODE_NEW(WNDeclaration(type4
                , (ID5->getText()).c_str())); SetLocationFromNode(node, 
                type4
                ); SetEndLocation(node, ID5); 
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto ruledeclEx; /* Prevent compiler warnings */
    ruledeclEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}
/* $ANTLR end decl */

/**
 * $ANTLR start declList
 * C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:273:1: declList returns [WNDeclList* node] : a= decl ( COMMA b= decl )* ;
 */
WNDeclList*
WNScriptASTDeprecatedParser::declList()
{
        WNScriptASTDeprecatedParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    WNDeclList* node;


    WNDeclaration* a;
    WNDeclaration* b;
    /* Initialize rule variables
     */
     


        node = wn_nullptr;


 
    {
        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:277:5: (a= decl ( COMMA b= decl )* )
        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:277:10: a= decl ( COMMA b= decl )*
        {
            this->followPush(FOLLOW_decl_in_declList1232);
            a=decl();

            this->followPop();
            if  (this->hasException())
            {
                goto ruledeclListEx;
            }


            {
                 node = WN_SCRIPTNODE_NEW(WNDeclList(a
                )); SetLocationFromNode(node, a
                ); 
            }


            // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:278:9: ( COMMA b= decl )*

            for (;;)
            {
                int alt2=2;
                switch ( this->LA(1) )
                {
                case COMMA:
                	{
                		alt2=1;
                	}
                    break;

                }

                switch (alt2)
                {
            	case 1:
            	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:278:10: COMMA b= decl
            	    {
            	         this->matchToken(COMMA, &FOLLOW_COMMA_in_declList1245);
            	        if  (this->hasException())
            	        {
            	            goto ruledeclListEx;
            	        }


            	        this->followPush(FOLLOW_decl_in_declList1249);
            	        b=decl();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruledeclListEx;
            	        }


            	        {
            	             node
            	            ->AddDeclaration(b
            	            ); SetEndLocationFromNode(node, b
            	            ); 
            	        }


            	    }
            	    break;

            	default:
            	    goto loop2;	/* break out of the loop */
            	    break;
                }
            }
            loop2: ; /* Jump out to here if this rule does not match */


        }

    }
    // This is where rules clean up and exit
    //
    goto ruledeclListEx; /* Prevent compiler warnings */
    ruledeclListEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}
/* $ANTLR end declList */

/**
 * $ANTLR start parameterList
 * C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:281:1: parameterList returns [WNDeclList* node] : ( LBRACKET declList RBRACKET | LBRACKET RBRACKET );
 */
WNDeclList*
WNScriptASTDeprecatedParser::parameterList()
{
        WNScriptASTDeprecatedParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    WNDeclList* node;


    const ImplTraits::CommonTokenType* LBRACKET7 = NULL;
    const ImplTraits::CommonTokenType* RBRACKET8 = NULL;
    WNDeclList* declList6;
    /* Initialize rule variables
     */
     


        node = wn_nullptr;


 
    {
        {
            //  C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:285:5: ( LBRACKET declList RBRACKET | LBRACKET RBRACKET )

            ANTLR_UINT32 alt3;

            alt3=2;

            switch ( this->LA(1) )
            {
            case LBRACKET:
            	{
            		switch ( this->LA(2) )
            		{
            		case RBRACKET:
            			{
            				alt3=2;
            			}
            		    break;
            		case TYPE:
            			{
            				alt3=1;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTDeprecatedParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 3 );
            		    ex->set_state( 1 );


            		    goto ruleparameterListEx;

            		}

            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTDeprecatedParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 3 );
                ex->set_state( 0 );


                goto ruleparameterListEx;

            }

            switch (alt3)
            {
        	case 1:
        	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:285:10: LBRACKET declList RBRACKET
        	    {
        	        LBRACKET7 =  this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_parameterList1281);
        	        if  (this->hasException())
        	        {
        	            goto ruleparameterListEx;
        	        }


        	        this->followPush(FOLLOW_declList_in_parameterList1283);
        	        declList6=declList();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleparameterListEx;
        	        }


        	        RBRACKET8 =  this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_parameterList1285);
        	        if  (this->hasException())
        	        {
        	            goto ruleparameterListEx;
        	        }


        	        {
        	             node = declList6
        	            ; SetLocation(node, LBRACKET7); SetEndLocation(node, RBRACKET8); 
        	        }


        	    }
        	    break;
        	case 2:
        	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:286:14: LBRACKET RBRACKET
        	    {
        	         this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_parameterList1302);
        	        if  (this->hasException())
        	        {
        	            goto ruleparameterListEx;
        	        }


        	         this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_parameterList1304);
        	        if  (this->hasException())
        	        {
        	            goto ruleparameterListEx;
        	        }


        	        {
        	             node = wn_nullptr; 
        	        }


        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto ruleparameterListEx; /* Prevent compiler warnings */
    ruleparameterListEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}
/* $ANTLR end parameterList */

/**
 * $ANTLR start assign_op
 * C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:290:1: assign_op returns [WNAssignType node] : ( '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '<==' );
 */
WNAssignType
WNScriptASTDeprecatedParser::assign_op()
{
        WNScriptASTDeprecatedParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    WNAssignType node;


    /* Initialize rule variables
     */
     


        node = AT_EQ;


 
    {
        {
            //  C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:294:5: ( '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '<==' )

            ANTLR_UINT32 alt4;

            alt4=7;

            switch ( this->LA(1) )
            {
            case 58:
            	{
            		alt4=1;
            	}
                break;
            case 50:
            	{
            		alt4=2;
            	}
                break;
            case 52:
            	{
            		alt4=3;
            	}
                break;
            case 48:
            	{
            		alt4=4;
            	}
                break;
            case 55:
            	{
            		alt4=5;
            	}
                break;
            case 45:
            	{
            		alt4=6;
            	}
                break;
            case CHOWN:
            	{
            		alt4=7;
            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTDeprecatedParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 4 );
                ex->set_state( 0 );


                goto ruleassign_opEx;

            }

            switch (alt4)
            {
        	case 1:
        	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:294:10: '='
        	    {
        	         this->matchToken(58, &FOLLOW_58_in_assign_op1340);
        	        if  (this->hasException())
        	        {
        	            goto ruleassign_opEx;
        	        }


        	        {
        	             node = AT_EQ; 
        	        }


        	    }
        	    break;
        	case 2:
        	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:295:10: '+='
        	    {
        	         this->matchToken(50, &FOLLOW_50_in_assign_op1354);
        	        if  (this->hasException())
        	        {
        	            goto ruleassign_opEx;
        	        }


        	        {
        	             node = AT_ADD_EQ; 
        	        }


        	    }
        	    break;
        	case 3:
        	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:296:10: '-='
        	    {
        	         this->matchToken(52, &FOLLOW_52_in_assign_op1367);
        	        if  (this->hasException())
        	        {
        	            goto ruleassign_opEx;
        	        }


        	        {
        	             node = AT_SUB_EQ; 
        	        }


        	    }
        	    break;
        	case 4:
        	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:297:10: '*='
        	    {
        	         this->matchToken(48, &FOLLOW_48_in_assign_op1380);
        	        if  (this->hasException())
        	        {
        	            goto ruleassign_opEx;
        	        }


        	        {
        	             node = AT_MULT_EQ; 
        	        }


        	    }
        	    break;
        	case 5:
        	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:298:10: '/='
        	    {
        	         this->matchToken(55, &FOLLOW_55_in_assign_op1393);
        	        if  (this->hasException())
        	        {
        	            goto ruleassign_opEx;
        	        }


        	        {
        	             node = AT_DIV_EQ; 
        	        }


        	    }
        	    break;
        	case 6:
        	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:299:10: '%='
        	    {
        	         this->matchToken(45, &FOLLOW_45_in_assign_op1406);
        	        if  (this->hasException())
        	        {
        	            goto ruleassign_opEx;
        	        }


        	        {
        	             node = AT_MOD_EQ; 
        	        }


        	    }
        	    break;
        	case 7:
        	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:300:10: '<=='
        	    {
        	         this->matchToken(CHOWN, &FOLLOW_CHOWN_in_assign_op1419);
        	        if  (this->hasException())
        	        {
        	            goto ruleassign_opEx;
        	        }


        	        {
        	             node = AT_CHOWN; 
        	        }


        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto ruleassign_opEx; /* Prevent compiler warnings */
    ruleassign_opEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}
/* $ANTLR end assign_op */

/**
 * $ANTLR start lvalue
 * C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:303:1: lvalue returns [WNLValue* node] : unary_ex ;
 */
WNLValue*
WNScriptASTDeprecatedParser::lvalue()
{
        WNScriptASTDeprecatedParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    WNLValue* node;


    WNExpression* unary_ex9;
    /* Initialize rule variables
     */
     


        node = wn_nullptr;


 
    {
        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:307:5: ( unary_ex )
        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:307:10: unary_ex
        {
            this->followPush(FOLLOW_unary_ex_in_lvalue1449);
            unary_ex9=unary_ex();

            this->followPop();
            if  (this->hasException())
            {
                goto rulelvalueEx;
            }


            {
                 node = WN_SCRIPTNODE_NEW(WNLValue(unary_ex9
                )); SetLocationFromNode(node, unary_ex9
                ); 
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto rulelvalueEx; /* Prevent compiler warnings */
    rulelvalueEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}
/* $ANTLR end lvalue */

/**
 * $ANTLR start arglist
 * C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:310:1: arglist returns [WNArgList* node] : ( (a= expression ) | ( '<==' b= expression ) ) ( ',' ( ( '<==' c= expression ) | (d= expression ) |) )* ;
 */
WNArgList*
WNScriptASTDeprecatedParser::arglist()
{
        WNScriptASTDeprecatedParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    WNArgList* node;


    WNExpression* a;
    WNExpression* b;
    WNExpression* c;
    WNExpression* d;
    /* Initialize rule variables
     */
     


        node = WN_SCRIPTNODE_NEW(WNArgList());


 
    {
        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:314:9: ( ( (a= expression ) | ( '<==' b= expression ) ) ( ',' ( ( '<==' c= expression ) | (d= expression ) |) )* )
        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:314:13: ( (a= expression ) | ( '<==' b= expression ) ) ( ',' ( ( '<==' c= expression ) | (d= expression ) |) )*
        {
            // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:314:13: ( (a= expression ) | ( '<==' b= expression ) )
            {
                int alt5=2;
                switch ( this->LA(1) )
                {
                case BOOL:
                case CHAR:
                case DOUBDEC:
                case DOUBINC:
                case FLOAT:
                case ID:
                case INT:
                case LBRACKET:
                case NULLTOK:
                case STRING:
                case TYPE:
                case 51:
                	{
                		alt5=1;
                	}
                    break;
                case CHOWN:
                	{
                		alt5=2;
                	}
                    break;

                default:
                    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTDeprecatedParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 5 );
                    ex->set_state( 0 );


                    goto rulearglistEx;

                }

                switch (alt5)
                {
            	case 1:
            	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:315:21: (a= expression )
            	    {
            	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:315:21: (a= expression )
            	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:315:22: a= expression
            	        {
            	            this->followPush(FOLLOW_expression_in_arglist1507);
            	            a=expression();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulearglistEx;
            	            }


            	            {
            	                 node->AddExpression(a
            	                ); SetLocationFromNode(node, a
            	                ); 
            	            }


            	        }


            	    }
            	    break;
            	case 2:
            	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:316:21: ( '<==' b= expression )
            	    {
            	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:316:21: ( '<==' b= expression )
            	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:316:22: '<==' b= expression
            	        {
            	             this->matchToken(CHOWN, &FOLLOW_CHOWN_in_arglist1533);
            	            if  (this->hasException())
            	            {
            	                goto rulearglistEx;
            	            }


            	            this->followPush(FOLLOW_expression_in_arglist1537);
            	            b=expression();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulearglistEx;
            	            }


            	            {
            	                node->AddExpression(b
            	                , wn_true); SetLocationFromNode(node, b
            	                ); 
            	            }


            	        }


            	    }
            	    break;

                }
            }

            // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:319:13: ( ',' ( ( '<==' c= expression ) | (d= expression ) |) )*

            for (;;)
            {
                int alt7=2;
                switch ( this->LA(1) )
                {
                case COMMA:
                	{
                		alt7=1;
                	}
                    break;

                }

                switch (alt7)
                {
            	case 1:
            	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:319:14: ',' ( ( '<==' c= expression ) | (d= expression ) |)
            	    {
            	         this->matchToken(COMMA, &FOLLOW_COMMA_in_arglist1570);
            	        if  (this->hasException())
            	        {
            	            goto rulearglistEx;
            	        }


            	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:320:17: ( ( '<==' c= expression ) | (d= expression ) |)
            	        {
            	            int alt6=3;
            	            switch ( this->LA(1) )
            	            {
            	            case CHOWN:
            	            	{
            	            		alt6=1;
            	            	}
            	                break;
            	            case BOOL:
            	            case CHAR:
            	            case DOUBDEC:
            	            case DOUBINC:
            	            case FLOAT:
            	            case ID:
            	            case INT:
            	            case LBRACKET:
            	            case NULLTOK:
            	            case STRING:
            	            case TYPE:
            	            case 51:
            	            	{
            	            		alt6=2;
            	            	}
            	                break;
            	            case COMMA:
            	            case RBRACKET:
            	            	{
            	            		alt6=3;
            	            	}
            	                break;

            	            default:
            	                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTDeprecatedParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            	                ex->set_decisionNum( 6 );
            	                ex->set_state( 0 );


            	                goto rulearglistEx;

            	            }

            	            switch (alt6)
            	            {
            	        	case 1:
            	        	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:321:21: ( '<==' c= expression )
            	        	    {
            	        	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:321:21: ( '<==' c= expression )
            	        	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:321:23: '<==' c= expression
            	        	        {
            	        	             this->matchToken(CHOWN, &FOLLOW_CHOWN_in_arglist1612);
            	        	            if  (this->hasException())
            	        	            {
            	        	                goto rulearglistEx;
            	        	            }


            	        	            this->followPush(FOLLOW_expression_in_arglist1616);
            	        	            c=expression();

            	        	            this->followPop();
            	        	            if  (this->hasException())
            	        	            {
            	        	                goto rulearglistEx;
            	        	            }


            	        	            {
            	        	                 node->AddExpression(c
            	        	                ); SetEndLocationFromNode(node, c
            	        	                ); 
            	        	            }


            	        	        }


            	        	    }
            	        	    break;
            	        	case 2:
            	        	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:322:21: (d= expression )
            	        	    {
            	        	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:322:21: (d= expression )
            	        	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:322:23: d= expression
            	        	        {
            	        	            this->followPush(FOLLOW_expression_in_arglist1648);
            	        	            d=expression();

            	        	            this->followPop();
            	        	            if  (this->hasException())
            	        	            {
            	        	                goto rulearglistEx;
            	        	            }


            	        	            {
            	        	                 node->AddExpression(d
            	        	                , wn_true); SetEndLocationFromNode(node, d
            	        	                ); 
            	        	            }


            	        	        }


            	        	    }
            	        	    break;
            	        	case 3:
            	        	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:323:17: 
            	        	    {
            	        	    }
            	        	    break;

            	            }
            	        }

            	    }
            	    break;

            	default:
            	    goto loop7;	/* break out of the loop */
            	    break;
                }
            }
            loop7: ; /* Jump out to here if this rule does not match */


        }

    }
    // This is where rules clean up and exit
    //
    goto rulearglistEx; /* Prevent compiler warnings */
    rulearglistEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}
/* $ANTLR end arglist */

/**
 * $ANTLR start expression
 * C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:327:1: expression returns [WNExpression* node] : cond_ex ;
 */
WNExpression*
WNScriptASTDeprecatedParser::expression()
{
        WNScriptASTDeprecatedParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    WNExpression* node;


    WNExpression* cond_ex10;
    /* Initialize rule variables
     */
     


        node = wn_nullptr;


 
    {
        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:331:9: ( cond_ex )
        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:331:14: cond_ex
        {
            this->followPush(FOLLOW_cond_ex_in_expression1723);
            cond_ex10=cond_ex();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleexpressionEx;
            }


            {
                 node = cond_ex10
                ; 
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleexpressionEx; /* Prevent compiler warnings */
    ruleexpressionEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}
/* $ANTLR end expression */

/**
 * $ANTLR start cond_ex
 * C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:334:1: cond_ex returns [WNExpression* node] : or_ex ( '?' b= expression ':' c= cond_ex )? ;
 */
WNExpression*
WNScriptASTDeprecatedParser::cond_ex()
{
        WNScriptASTDeprecatedParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    WNExpression* node;


    WNExpression* b;
    WNExpression* c;
    WNExpression* or_ex11;
    /* Initialize rule variables
     */
     


        node = wn_nullptr;


 
    {
        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:338:9: ( or_ex ( '?' b= expression ':' c= cond_ex )? )
        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:338:14: or_ex ( '?' b= expression ':' c= cond_ex )?
        {
            this->followPush(FOLLOW_or_ex_in_cond_ex1761);
            or_ex11=or_ex();

            this->followPop();
            if  (this->hasException())
            {
                goto rulecond_exEx;
            }


            {
                 node = or_ex11
                ; 
            }


            // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:340:17: ( '?' b= expression ':' c= cond_ex )?
            {
                int alt8=2;
                switch ( this->LA(1) )
                {
                    case 62:
                    	{
                    		alt8=1;
                    	}
                        break;
                }

                switch (alt8)
                {
            	case 1:
            	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:340:18: '?' b= expression ':' c= cond_ex
            	    {
            	         this->matchToken(62, &FOLLOW_62_in_cond_ex1784);
            	        if  (this->hasException())
            	        {
            	            goto rulecond_exEx;
            	        }


            	        this->followPush(FOLLOW_expression_in_cond_ex1788);
            	        b=expression();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulecond_exEx;
            	        }


            	         this->matchToken(COLON, &FOLLOW_COLON_in_cond_ex1790);
            	        if  (this->hasException())
            	        {
            	            goto rulecond_exEx;
            	        }


            	        this->followPush(FOLLOW_cond_ex_in_cond_ex1794);
            	        c=cond_ex();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulecond_exEx;
            	        }


            	        {
            	             node = WN_SCRIPTNODE_NEW(WNCondExpression(node, b
            	            , c
            	            ));  SetLocationFromNode(node, or_ex11
            	            ); SetEndLocationFromNode(node, c
            	            ); 
            	        }


            	    }
            	    break;

                }
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto rulecond_exEx; /* Prevent compiler warnings */
    rulecond_exEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}
/* $ANTLR end cond_ex */

/**
 * $ANTLR start or_ex
 * C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:343:1: or_ex returns [WNExpression* node] : a= and_ex ( '||' b= and_ex )* ;
 */
WNExpression*
WNScriptASTDeprecatedParser::or_ex()
{
        WNScriptASTDeprecatedParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    WNExpression* node;


    WNExpression* a;
    WNExpression* b;
    /* Initialize rule variables
     */
     


        node = wn_nullptr;


 
    {
        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:347:9: (a= and_ex ( '||' b= and_ex )* )
        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:347:14: a= and_ex ( '||' b= and_ex )*
        {
            this->followPush(FOLLOW_and_ex_in_or_ex1841);
            a=and_ex();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleor_exEx;
            }


            {
                 node = a
                ; 
            }


            // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:348:13: ( '||' b= and_ex )*

            for (;;)
            {
                int alt9=2;
                switch ( this->LA(1) )
                {
                case 63:
                	{
                		alt9=1;
                	}
                    break;

                }

                switch (alt9)
                {
            	case 1:
            	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:348:14: '||' b= and_ex
            	    {
            	         this->matchToken(63, &FOLLOW_63_in_or_ex1858);
            	        if  (this->hasException())
            	        {
            	            goto ruleor_exEx;
            	        }


            	        this->followPush(FOLLOW_and_ex_in_or_ex1862);
            	        b=and_ex();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleor_exEx;
            	        }


            	        {
            	             node = WN_SCRIPTNODE_NEW(WNSSExpression(ST_OR, node, b
            	            )); SetLocationFromNode(node, a
            	            ); SetEndLocationFromNode(node, b
            	            ); 
            	        }


            	    }
            	    break;

            	default:
            	    goto loop9;	/* break out of the loop */
            	    break;
                }
            }
            loop9: ; /* Jump out to here if this rule does not match */


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleor_exEx; /* Prevent compiler warnings */
    ruleor_exEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}
/* $ANTLR end or_ex */

/**
 * $ANTLR start and_ex
 * C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:351:1: and_ex returns [WNExpression* node] : a= eq_ex ( '&&' b= eq_ex )* ;
 */
WNExpression*
WNScriptASTDeprecatedParser::and_ex()
{
        WNScriptASTDeprecatedParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    WNExpression* node;


    WNExpression* a;
    WNExpression* b;
    /* Initialize rule variables
     */
     


        node = wn_nullptr;


 
    {
        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:355:9: (a= eq_ex ( '&&' b= eq_ex )* )
        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:355:14: a= eq_ex ( '&&' b= eq_ex )*
        {
            this->followPush(FOLLOW_eq_ex_in_and_ex1905);
            a=eq_ex();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleand_exEx;
            }


            {
                 node = a
                ; 
            }


            // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:356:13: ( '&&' b= eq_ex )*

            for (;;)
            {
                int alt10=2;
                switch ( this->LA(1) )
                {
                case 46:
                	{
                		alt10=1;
                	}
                    break;

                }

                switch (alt10)
                {
            	case 1:
            	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:356:14: '&&' b= eq_ex
            	    {
            	         this->matchToken(46, &FOLLOW_46_in_and_ex1922);
            	        if  (this->hasException())
            	        {
            	            goto ruleand_exEx;
            	        }


            	        this->followPush(FOLLOW_eq_ex_in_and_ex1926);
            	        b=eq_ex();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleand_exEx;
            	        }


            	        {
            	            node = WN_SCRIPTNODE_NEW(WNSSExpression(ST_AND, node, b
            	            )); SetLocationFromNode(node, a
            	            ); SetEndLocationFromNode(node, b
            	            ); 
            	        }


            	    }
            	    break;

            	default:
            	    goto loop10;	/* break out of the loop */
            	    break;
                }
            }
            loop10: ; /* Jump out to here if this rule does not match */


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleand_exEx; /* Prevent compiler warnings */
    ruleand_exEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}
/* $ANTLR end and_ex */

/**
 * $ANTLR start eq_ex
 * C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:357:1: eq_ex returns [WNExpression* node] : a= rel_ex ( ( '==' b= rel_ex ) | ( '!=' c= rel_ex ) )* ;
 */
WNExpression*
WNScriptASTDeprecatedParser::eq_ex()
{
        WNScriptASTDeprecatedParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    WNExpression* node;


    WNExpression* a;
    WNExpression* b;
    WNExpression* c;
    /* Initialize rule variables
     */
     


        node = wn_nullptr;


 
    {
        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:361:9: (a= rel_ex ( ( '==' b= rel_ex ) | ( '!=' c= rel_ex ) )* )
        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:361:14: a= rel_ex ( ( '==' b= rel_ex ) | ( '!=' c= rel_ex ) )*
        {
            this->followPush(FOLLOW_rel_ex_in_eq_ex1961);
            a=rel_ex();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleeq_exEx;
            }


            {
                 node = a
                ; 
            }


            // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:362:13: ( ( '==' b= rel_ex ) | ( '!=' c= rel_ex ) )*

            for (;;)
            {
                int alt11=3;
                switch ( this->LA(1) )
                {
                case 59:
                	{
                		alt11=1;
                	}
                    break;
                case 43:
                	{
                		alt11=2;
                	}
                    break;

                }

                switch (alt11)
                {
            	case 1:
            	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:363:17: ( '==' b= rel_ex )
            	    {
            	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:363:17: ( '==' b= rel_ex )
            	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:363:18: '==' b= rel_ex
            	        {
            	             this->matchToken(59, &FOLLOW_59_in_eq_ex1996);
            	            if  (this->hasException())
            	            {
            	                goto ruleeq_exEx;
            	            }


            	            this->followPush(FOLLOW_rel_ex_in_eq_ex2000);
            	            b=rel_ex();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleeq_exEx;
            	            }


            	            {
            	                node = WN_SCRIPTNODE_NEW(WNBinExpression(AR_EQ, node, b
            	                ));  SetLocationFromNode(node, a
            	                ); SetEndLocationFromNode(node, b
            	                ); 
            	            }


            	        }


            	    }
            	    break;
            	case 2:
            	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:364:17: ( '!=' c= rel_ex )
            	    {
            	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:364:17: ( '!=' c= rel_ex )
            	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:364:18: '!=' c= rel_ex
            	        {
            	             this->matchToken(43, &FOLLOW_43_in_eq_ex2023);
            	            if  (this->hasException())
            	            {
            	                goto ruleeq_exEx;
            	            }


            	            this->followPush(FOLLOW_rel_ex_in_eq_ex2027);
            	            c=rel_ex();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleeq_exEx;
            	            }


            	            {
            	                node = WN_SCRIPTNODE_NEW(WNBinExpression(AR_NEQ, node, c
            	                )); SetLocationFromNode(node, a
            	                ); SetEndLocationFromNode(node, c
            	                ); 
            	            }


            	        }


            	    }
            	    break;

            	default:
            	    goto loop11;	/* break out of the loop */
            	    break;
                }
            }
            loop11: ; /* Jump out to here if this rule does not match */


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleeq_exEx; /* Prevent compiler warnings */
    ruleeq_exEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}
/* $ANTLR end eq_ex */

/**
 * $ANTLR start rel_ex
 * C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:368:1: rel_ex returns [WNExpression* node] : a= add_ex ( ( '<' b= add_ex ) | ( '>' c= add_ex ) | ( '<=' d= add_ex ) | ( '>=' e= add_ex ) )* ;
 */
WNExpression*
WNScriptASTDeprecatedParser::rel_ex()
{
        WNScriptASTDeprecatedParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    WNExpression* node;


    WNExpression* a;
    WNExpression* b;
    WNExpression* c;
    WNExpression* d;
    WNExpression* e;
    /* Initialize rule variables
     */
     


        node = wn_nullptr;


 
    {
        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:372:9: (a= add_ex ( ( '<' b= add_ex ) | ( '>' c= add_ex ) | ( '<=' d= add_ex ) | ( '>=' e= add_ex ) )* )
        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:372:14: a= add_ex ( ( '<' b= add_ex ) | ( '>' c= add_ex ) | ( '<=' d= add_ex ) | ( '>=' e= add_ex ) )*
        {
            this->followPush(FOLLOW_add_ex_in_rel_ex2085);
            a=add_ex();

            this->followPop();
            if  (this->hasException())
            {
                goto rulerel_exEx;
            }


            {
                 node=a
                ; 
            }


            // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:373:13: ( ( '<' b= add_ex ) | ( '>' c= add_ex ) | ( '<=' d= add_ex ) | ( '>=' e= add_ex ) )*

            for (;;)
            {
                int alt12=5;
                switch ( this->LA(1) )
                {
                case 56:
                	{
                		alt12=1;
                	}
                    break;
                case 60:
                	{
                		alt12=2;
                	}
                    break;
                case 57:
                	{
                		alt12=3;
                	}
                    break;
                case 61:
                	{
                		alt12=4;
                	}
                    break;

                }

                switch (alt12)
                {
            	case 1:
            	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:374:17: ( '<' b= add_ex )
            	    {
            	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:374:17: ( '<' b= add_ex )
            	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:374:19: '<' b= add_ex
            	        {
            	             this->matchToken(56, &FOLLOW_56_in_rel_ex2121);
            	            if  (this->hasException())
            	            {
            	                goto rulerel_exEx;
            	            }


            	            this->followPush(FOLLOW_add_ex_in_rel_ex2125);
            	            b=add_ex();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulerel_exEx;
            	            }


            	            {
            	                node = WN_SCRIPTNODE_NEW(WNBinExpression(AR_LT, node, b
            	                ));   SetLocationFromNode(node, a
            	                ); SetEndLocationFromNode(node, b
            	                ); 
            	            }


            	        }


            	    }
            	    break;
            	case 2:
            	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:375:17: ( '>' c= add_ex )
            	    {
            	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:375:17: ( '>' c= add_ex )
            	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:375:19: '>' c= add_ex
            	        {
            	             this->matchToken(60, &FOLLOW_60_in_rel_ex2149);
            	            if  (this->hasException())
            	            {
            	                goto rulerel_exEx;
            	            }


            	            this->followPush(FOLLOW_add_ex_in_rel_ex2153);
            	            c=add_ex();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulerel_exEx;
            	            }


            	            {
            	                node = WN_SCRIPTNODE_NEW(WNBinExpression(AR_GT, node, c
            	                ));   SetLocationFromNode(node, a
            	                ); SetEndLocationFromNode(node, c
            	                ); 
            	            }


            	        }


            	    }
            	    break;
            	case 3:
            	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:376:17: ( '<=' d= add_ex )
            	    {
            	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:376:17: ( '<=' d= add_ex )
            	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:376:19: '<=' d= add_ex
            	        {
            	             this->matchToken(57, &FOLLOW_57_in_rel_ex2177);
            	            if  (this->hasException())
            	            {
            	                goto rulerel_exEx;
            	            }


            	            this->followPush(FOLLOW_add_ex_in_rel_ex2181);
            	            d=add_ex();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulerel_exEx;
            	            }


            	            {
            	                node = WN_SCRIPTNODE_NEW(WNBinExpression(AR_LEQ, node, d
            	                ));   SetLocationFromNode(node, a
            	                ); SetEndLocationFromNode(node, d
            	                ); 
            	            }


            	        }


            	    }
            	    break;
            	case 4:
            	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:377:17: ( '>=' e= add_ex )
            	    {
            	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:377:17: ( '>=' e= add_ex )
            	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:377:19: '>=' e= add_ex
            	        {
            	             this->matchToken(61, &FOLLOW_61_in_rel_ex2205);
            	            if  (this->hasException())
            	            {
            	                goto rulerel_exEx;
            	            }


            	            this->followPush(FOLLOW_add_ex_in_rel_ex2209);
            	            e=add_ex();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulerel_exEx;
            	            }


            	            {
            	                node = WN_SCRIPTNODE_NEW(WNBinExpression(AR_GEQ, node, e
            	                ));   SetLocationFromNode(node, a
            	                ); SetEndLocationFromNode(node, e
            	                ); 
            	            }


            	        }


            	    }
            	    break;

            	default:
            	    goto loop12;	/* break out of the loop */
            	    break;
                }
            }
            loop12: ; /* Jump out to here if this rule does not match */


        }

    }
    // This is where rules clean up and exit
    //
    goto rulerel_exEx; /* Prevent compiler warnings */
    rulerel_exEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}
/* $ANTLR end rel_ex */

/**
 * $ANTLR start add_ex
 * C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:381:1: add_ex returns [WNExpression* node] : a= mult_ex ( ( '+' b= mult_ex ) | ( '-' c= mult_ex ) )* ;
 */
WNExpression*
WNScriptASTDeprecatedParser::add_ex()
{
        WNScriptASTDeprecatedParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    WNExpression* node;


    WNExpression* a;
    WNExpression* b;
    WNExpression* c;
    /* Initialize rule variables
     */
     


        node = wn_nullptr;


 
    {
        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:385:9: (a= mult_ex ( ( '+' b= mult_ex ) | ( '-' c= mult_ex ) )* )
        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:385:14: a= mult_ex ( ( '+' b= mult_ex ) | ( '-' c= mult_ex ) )*
        {
            this->followPush(FOLLOW_mult_ex_in_add_ex2270);
            a=mult_ex();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleadd_exEx;
            }


            {
                node = a
                ; 
            }


            // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:386:13: ( ( '+' b= mult_ex ) | ( '-' c= mult_ex ) )*

            for (;;)
            {
                int alt13=3;
                switch ( this->LA(1) )
                {
                case 49:
                	{
                		alt13=1;
                	}
                    break;
                case 51:
                	{
                		alt13=2;
                	}
                    break;

                }

                switch (alt13)
                {
            	case 1:
            	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:387:17: ( '+' b= mult_ex )
            	    {
            	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:387:17: ( '+' b= mult_ex )
            	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:387:18: '+' b= mult_ex
            	        {
            	             this->matchToken(49, &FOLLOW_49_in_add_ex2305);
            	            if  (this->hasException())
            	            {
            	                goto ruleadd_exEx;
            	            }


            	            this->followPush(FOLLOW_mult_ex_in_add_ex2309);
            	            b=mult_ex();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleadd_exEx;
            	            }


            	            {
            	                node = WN_SCRIPTNODE_NEW(WNBinExpression(AR_ADD, node, b
            	                ));   SetLocationFromNode(node, a
            	                ); SetEndLocationFromNode(node, b
            	                ); 
            	            }


            	        }


            	    }
            	    break;
            	case 2:
            	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:388:17: ( '-' c= mult_ex )
            	    {
            	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:388:17: ( '-' c= mult_ex )
            	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:388:18: '-' c= mult_ex
            	        {
            	             this->matchToken(51, &FOLLOW_51_in_add_ex2331);
            	            if  (this->hasException())
            	            {
            	                goto ruleadd_exEx;
            	            }


            	            this->followPush(FOLLOW_mult_ex_in_add_ex2335);
            	            c=mult_ex();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleadd_exEx;
            	            }


            	            {
            	                node = WN_SCRIPTNODE_NEW(WNBinExpression(AR_SUB, node, c
            	                ));   SetLocationFromNode(node, a
            	                ); SetEndLocationFromNode(node, c
            	                ); 
            	            }


            	        }


            	    }
            	    break;

            	default:
            	    goto loop13;	/* break out of the loop */
            	    break;
                }
            }
            loop13: ; /* Jump out to here if this rule does not match */


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleadd_exEx; /* Prevent compiler warnings */
    ruleadd_exEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}
/* $ANTLR end add_ex */

/**
 * $ANTLR start mult_ex
 * C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:392:1: mult_ex returns [WNExpression* node] : a= unary_ex ( ( '*' b= unary_ex ) | ( '/' c= unary_ex ) | ( '%' d= unary_ex ) )* ;
 */
WNExpression*
WNScriptASTDeprecatedParser::mult_ex()
{
        WNScriptASTDeprecatedParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    WNExpression* node;


    WNExpression* a;
    WNExpression* b;
    WNExpression* c;
    WNExpression* d;
    /* Initialize rule variables
     */
     


        node = wn_nullptr;


 
    {
        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:396:9: (a= unary_ex ( ( '*' b= unary_ex ) | ( '/' c= unary_ex ) | ( '%' d= unary_ex ) )* )
        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:396:14: a= unary_ex ( ( '*' b= unary_ex ) | ( '/' c= unary_ex ) | ( '%' d= unary_ex ) )*
        {
            this->followPush(FOLLOW_unary_ex_in_mult_ex2394);
            a=unary_ex();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemult_exEx;
            }


            {
                 node = a
                ; 
            }


            // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:397:13: ( ( '*' b= unary_ex ) | ( '/' c= unary_ex ) | ( '%' d= unary_ex ) )*

            for (;;)
            {
                int alt14=4;
                switch ( this->LA(1) )
                {
                case 47:
                	{
                		alt14=1;
                	}
                    break;
                case 54:
                	{
                		alt14=2;
                	}
                    break;
                case 44:
                	{
                		alt14=3;
                	}
                    break;

                }

                switch (alt14)
                {
            	case 1:
            	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:398:21: ( '*' b= unary_ex )
            	    {
            	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:398:21: ( '*' b= unary_ex )
            	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:398:22: '*' b= unary_ex
            	        {
            	             this->matchToken(47, &FOLLOW_47_in_mult_ex2433);
            	            if  (this->hasException())
            	            {
            	                goto rulemult_exEx;
            	            }


            	            this->followPush(FOLLOW_unary_ex_in_mult_ex2437);
            	            b=unary_ex();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulemult_exEx;
            	            }


            	            {
            	                node = WN_SCRIPTNODE_NEW(WNBinExpression(AR_MULT, node, b
            	                ));   SetLocationFromNode(node, a
            	                ); SetEndLocationFromNode(node, b
            	                ); 
            	            }


            	        }


            	    }
            	    break;
            	case 2:
            	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:399:21: ( '/' c= unary_ex )
            	    {
            	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:399:21: ( '/' c= unary_ex )
            	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:399:22: '/' c= unary_ex
            	        {
            	             this->matchToken(54, &FOLLOW_54_in_mult_ex2463);
            	            if  (this->hasException())
            	            {
            	                goto rulemult_exEx;
            	            }


            	            this->followPush(FOLLOW_unary_ex_in_mult_ex2467);
            	            c=unary_ex();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulemult_exEx;
            	            }


            	            {
            	                node = WN_SCRIPTNODE_NEW(WNBinExpression(AR_DIV, node, c
            	                ));   SetLocationFromNode(node, a
            	                ); SetEndLocationFromNode(node, c
            	                ); 
            	            }


            	        }


            	    }
            	    break;
            	case 3:
            	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:400:21: ( '%' d= unary_ex )
            	    {
            	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:400:21: ( '%' d= unary_ex )
            	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:400:22: '%' d= unary_ex
            	        {
            	             this->matchToken(44, &FOLLOW_44_in_mult_ex2493);
            	            if  (this->hasException())
            	            {
            	                goto rulemult_exEx;
            	            }


            	            this->followPush(FOLLOW_unary_ex_in_mult_ex2497);
            	            d=unary_ex();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulemult_exEx;
            	            }


            	            {
            	                node = WN_SCRIPTNODE_NEW(WNBinExpression(AR_MOD, node, d
            	                ));   SetLocationFromNode(node, a
            	                ); SetEndLocationFromNode(node, d
            	                ); 
            	            }


            	        }


            	    }
            	    break;

            	default:
            	    goto loop14;	/* break out of the loop */
            	    break;
                }
            }
            loop14: ; /* Jump out to here if this rule does not match */


        }

    }
    // This is where rules clean up and exit
    //
    goto rulemult_exEx; /* Prevent compiler warnings */
    rulemult_exEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}
/* $ANTLR end mult_ex */

/**
 * $ANTLR start unary_ex
 * C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:404:1: unary_ex returns [WNExpression* node] : (a= post_ex | '++' b= unary_ex | '--' c= unary_ex | '-' d= unary_ex );
 */
WNExpression*
WNScriptASTDeprecatedParser::unary_ex()
{
        WNScriptASTDeprecatedParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    WNExpression* node;


    WNExpression* a;
    WNExpression* b;
    WNExpression* c;
    WNExpression* d;
    /* Initialize rule variables
     */
     


        node = wn_nullptr;


 
    {
        {
            //  C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:408:5: (a= post_ex | '++' b= unary_ex | '--' c= unary_ex | '-' d= unary_ex )

            ANTLR_UINT32 alt15;

            alt15=4;

            switch ( this->LA(1) )
            {
            case BOOL:
            case CHAR:
            case FLOAT:
            case ID:
            case INT:
            case LBRACKET:
            case NULLTOK:
            case STRING:
            case TYPE:
            	{
            		alt15=1;
            	}
                break;
            case DOUBINC:
            	{
            		alt15=2;
            	}
                break;
            case DOUBDEC:
            	{
            		alt15=3;
            	}
                break;
            case 51:
            	{
            		alt15=4;
            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTDeprecatedParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 15 );
                ex->set_state( 0 );


                goto ruleunary_exEx;

            }

            switch (alt15)
            {
        	case 1:
        	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:408:10: a= post_ex
        	    {
        	        this->followPush(FOLLOW_post_ex_in_unary_ex2549);
        	        a=post_ex();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleunary_exEx;
        	        }


        	        {
        	             node = a
        	            ; 
        	        }


        	    }
        	    break;
        	case 2:
        	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:409:10: '++' b= unary_ex
        	    {
        	         this->matchToken(DOUBINC, &FOLLOW_DOUBINC_in_unary_ex2562);
        	        if  (this->hasException())
        	        {
        	            goto ruleunary_exEx;
        	        }


        	        this->followPush(FOLLOW_unary_ex_in_unary_ex2566);
        	        b=unary_ex();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleunary_exEx;
        	        }


        	        {
        	             WNNode* t = node; node = WN_SCRIPTNODE_NEW(WNUNExpression(UN_PREINC, b
        	            ));   SetLocationFromNode(node, t); SetEndLocationFromNode(node, b
        	            ); 
        	        }


        	    }
        	    break;
        	case 3:
        	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:410:10: '--' c= unary_ex
        	    {
        	         this->matchToken(DOUBDEC, &FOLLOW_DOUBDEC_in_unary_ex2579);
        	        if  (this->hasException())
        	        {
        	            goto ruleunary_exEx;
        	        }


        	        this->followPush(FOLLOW_unary_ex_in_unary_ex2583);
        	        c=unary_ex();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleunary_exEx;
        	        }


        	        {
        	             WNNode* t = node; node = WN_SCRIPTNODE_NEW(WNUNExpression(UN_PREDEC, c
        	            ));   SetLocationFromNode(node, t); SetEndLocationFromNode(node, c
        	            ); 
        	        }


        	    }
        	    break;
        	case 4:
        	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:411:10: '-' d= unary_ex
        	    {
        	         this->matchToken(51, &FOLLOW_51_in_unary_ex2596);
        	        if  (this->hasException())
        	        {
        	            goto ruleunary_exEx;
        	        }


        	        this->followPush(FOLLOW_unary_ex_in_unary_ex2600);
        	        d=unary_ex();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleunary_exEx;
        	        }


        	        {
        	             WNNode* t = node; node = WN_SCRIPTNODE_NEW(WNUNExpression(UN_NEG, d
        	            ));   SetLocationFromNode(node, t); SetEndLocationFromNode(node, d
        	            ); 
        	        }


        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto ruleunary_exEx; /* Prevent compiler warnings */
    ruleunary_exEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}
/* $ANTLR end unary_ex */

/**
 * $ANTLR start post_ex_proper
 * C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:415:1: post_ex_proper returns [WNPostExpression* node] : (d= LSQBRACKET a= expression e= RSQBRACKET |f= LBRACKET g= RBRACKET |h= LBRACKET b= arglist i= RBRACKET | '.' c= ID | DOUBINC | DOUBDEC );
 */
WNPostExpression*
WNScriptASTDeprecatedParser::post_ex_proper()
{
        WNScriptASTDeprecatedParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    WNPostExpression* node;


    const ImplTraits::CommonTokenType* d = NULL;
    const ImplTraits::CommonTokenType* e = NULL;
    const ImplTraits::CommonTokenType* f = NULL;
    const ImplTraits::CommonTokenType* g = NULL;
    const ImplTraits::CommonTokenType* h = NULL;
    const ImplTraits::CommonTokenType* i = NULL;
    const ImplTraits::CommonTokenType* c = NULL;
    const ImplTraits::CommonTokenType* DOUBINC12 = NULL;
    const ImplTraits::CommonTokenType* DOUBDEC13 = NULL;
    WNExpression* a;
    WNArgList* b;
    /* Initialize rule variables
     */
     


        node = wn_nullptr;


 
    {
        {
            //  C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:419:5: (d= LSQBRACKET a= expression e= RSQBRACKET |f= LBRACKET g= RBRACKET |h= LBRACKET b= arglist i= RBRACKET | '.' c= ID | DOUBINC | DOUBDEC )

            ANTLR_UINT32 alt16;

            alt16=6;

            switch ( this->LA(1) )
            {
            case LSQBRACKET:
            	{
            		alt16=1;
            	}
                break;
            case LBRACKET:
            	{
            		switch ( this->LA(2) )
            		{
            		case RBRACKET:
            			{
            				alt16=2;
            			}
            		    break;
            		case BOOL:
            		case CHAR:
            		case CHOWN:
            		case DOUBDEC:
            		case DOUBINC:
            		case FLOAT:
            		case ID:
            		case INT:
            		case LBRACKET:
            		case NULLTOK:
            		case STRING:
            		case TYPE:
            		case 51:
            			{
            				alt16=3;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTDeprecatedParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 16 );
            		    ex->set_state( 2 );


            		    goto rulepost_ex_properEx;

            		}

            	}
                break;
            case 53:
            	{
            		alt16=4;
            	}
                break;
            case DOUBINC:
            	{
            		alt16=5;
            	}
                break;
            case DOUBDEC:
            	{
            		alt16=6;
            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTDeprecatedParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 16 );
                ex->set_state( 0 );


                goto rulepost_ex_properEx;

            }

            switch (alt16)
            {
        	case 1:
        	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:419:10: d= LSQBRACKET a= expression e= RSQBRACKET
        	    {
        	        d =  this->matchToken(LSQBRACKET, &FOLLOW_LSQBRACKET_in_post_ex_proper2638);
        	        if  (this->hasException())
        	        {
        	            goto rulepost_ex_properEx;
        	        }


        	        this->followPush(FOLLOW_expression_in_post_ex_proper2642);
        	        a=expression();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulepost_ex_properEx;
        	        }


        	        e =  this->matchToken(RSQBRACKET, &FOLLOW_RSQBRACKET_in_post_ex_proper2646);
        	        if  (this->hasException())
        	        {
        	            goto rulepost_ex_properEx;
        	        }


        	        {
        	             node = WN_SCRIPTNODE_NEW(WNArrayAccessExpr(a
        	            )); SetLocation(node, d); SetEndLocation(node, e); 
        	        }


        	    }
        	    break;
        	case 2:
        	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:420:10: f= LBRACKET g= RBRACKET
        	    {
        	        f =  this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_post_ex_proper2661);
        	        if  (this->hasException())
        	        {
        	            goto rulepost_ex_properEx;
        	        }


        	        g =  this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_post_ex_proper2665);
        	        if  (this->hasException())
        	        {
        	            goto rulepost_ex_properEx;
        	        }


        	        {
        	             node = WN_SCRIPTNODE_NEW(WNFunctionCallExpr()); SetLocation(node, f); SetEndLocation(node, g); 
        	        }


        	    }
        	    break;
        	case 3:
        	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:421:10: h= LBRACKET b= arglist i= RBRACKET
        	    {
        	        h =  this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_post_ex_proper2693);
        	        if  (this->hasException())
        	        {
        	            goto rulepost_ex_properEx;
        	        }


        	        this->followPush(FOLLOW_arglist_in_post_ex_proper2699);
        	        b=arglist();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulepost_ex_properEx;
        	        }


        	        i =  this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_post_ex_proper2703);
        	        if  (this->hasException())
        	        {
        	            goto rulepost_ex_properEx;
        	        }


        	        {
        	             node = WN_SCRIPTNODE_NEW(WNFunctionCallExpr(b
        	            )); SetLocation(node, h); SetEndLocation(node, i); 
        	        }


        	    }
        	    break;
        	case 4:
        	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:422:9: '.' c= ID
        	    {
        	         this->matchToken(53, &FOLLOW_53_in_post_ex_proper2716);
        	        if  (this->hasException())
        	        {
        	            goto rulepost_ex_properEx;
        	        }


        	        c =  this->matchToken(ID, &FOLLOW_ID_in_post_ex_proper2720);
        	        if  (this->hasException())
        	        {
        	            goto rulepost_ex_properEx;
        	        }


        	        {
        	             node = WN_SCRIPTNODE_NEW(WNMemberAccessExpr((c->getText()).c_str())); SetLocation(node, c); 
        	        }


        	    }
        	    break;
        	case 5:
        	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:423:11: DOUBINC
        	    {
        	        DOUBINC12 =  this->matchToken(DOUBINC, &FOLLOW_DOUBINC_in_post_ex_proper2747);
        	        if  (this->hasException())
        	        {
        	            goto rulepost_ex_properEx;
        	        }


        	        {
        	             node = WN_SCRIPTNODE_NEW(WNPostUNExpression(UN_POSTINC)); SetLocation(node, DOUBINC12);
        	        }


        	    }
        	    break;
        	case 6:
        	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:424:9: DOUBDEC
        	    {
        	        DOUBDEC13 =  this->matchToken(DOUBDEC, &FOLLOW_DOUBDEC_in_post_ex_proper2776);
        	        if  (this->hasException())
        	        {
        	            goto rulepost_ex_properEx;
        	        }


        	        {
        	             node = WN_SCRIPTNODE_NEW(WNPostUNExpression(UN_POSTDEC)); SetLocation(node, DOUBDEC13);
        	        }


        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto rulepost_ex_properEx; /* Prevent compiler warnings */
    rulepost_ex_properEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}
/* $ANTLR end post_ex_proper */

/**
 * $ANTLR start post_ex
 * C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:427:1: post_ex returns [WNExpression* node] : prim_ex (a= post_ex_proper )* ;
 */
WNExpression*
WNScriptASTDeprecatedParser::post_ex()
{
        WNScriptASTDeprecatedParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    WNExpression* node;


    WNPostExpression* a;
    WNExpression * prim_ex14;
    /* Initialize rule variables
     */
     


        node = wn_nullptr;


 
    {
        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:431:9: ( prim_ex (a= post_ex_proper )* )
        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:431:13: prim_ex (a= post_ex_proper )*
        {
            this->followPush(FOLLOW_prim_ex_in_post_ex2829);
            prim_ex14=prim_ex();

            this->followPop();
            if  (this->hasException())
            {
                goto rulepost_exEx;
            }


            {
                 node = prim_ex14
                ; 
            }


            // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:432:13: (a= post_ex_proper )*

            for (;;)
            {
                int alt17=2;
                switch ( this->LA(1) )
                {
                case DOUBDEC:
                case DOUBINC:
                case LBRACKET:
                case LSQBRACKET:
                case 53:
                	{
                		alt17=1;
                	}
                    break;

                }

                switch (alt17)
                {
            	case 1:
            	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:432:14: a= post_ex_proper
            	    {
            	        this->followPush(FOLLOW_post_ex_proper_in_post_ex2848);
            	        a=post_ex_proper();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulepost_exEx;
            	        }


            	        {
            	            a
            	            ->AddBaseExpr(node); SetEndLocationFromNode(a
            	            , node); node = a
            	            ;  
            	        }


            	    }
            	    break;

            	default:
            	    goto loop17;	/* break out of the loop */
            	    break;
                }
            }
            loop17: ; /* Jump out to here if this rule does not match */


        }

    }
    // This is where rules clean up and exit
    //
    goto rulepost_exEx; /* Prevent compiler warnings */
    rulepost_exEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}
/* $ANTLR end post_ex */

/**
 * $ANTLR start assignment
 * C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:434:1: assignment returns [WNAssignment* node] : lvalue ( assign_op expression )? ;
 */
WNAssignment*
WNScriptASTDeprecatedParser::assignment()
{
        WNScriptASTDeprecatedParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    WNAssignment* node;


    WNLValue* lvalue15;
    WNAssignType assign_op16;
    WNExpression* expression17;
    /* Initialize rule variables
     */
     


        node = wn_nullptr;


 
    {
        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:438:5: ( lvalue ( assign_op expression )? )
        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:438:10: lvalue ( assign_op expression )?
        {
            this->followPush(FOLLOW_lvalue_in_assignment2877);
            lvalue15=lvalue();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleassignmentEx;
            }


            {
                 node = WN_SCRIPTNODE_NEW(WNAssignment(lvalue15
                )); SetLocationFromNode(node, lvalue15
                ); 
            }


            // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:439:9: ( assign_op expression )?
            {
                int alt18=2;
                switch ( this->LA(1) )
                {
                    case CHOWN:
                    case 45:
                    case 48:
                    case 50:
                    case 52:
                    case 55:
                    case 58:
                    	{
                    		alt18=1;
                    	}
                        break;
                }

                switch (alt18)
                {
            	case 1:
            	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:439:10: assign_op expression
            	    {
            	        this->followPush(FOLLOW_assign_op_in_assignment2890);
            	        assign_op16=assign_op();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleassignmentEx;
            	        }


            	        this->followPush(FOLLOW_expression_in_assignment2892);
            	        expression17=expression();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleassignmentEx;
            	        }


            	        {
            	             node->AddValue(assign_op16
            	            , expression17
            	            ); SetEndLocationFromNode(node, expression17
            	            ); 
            	        }


            	    }
            	    break;

                }
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleassignmentEx; /* Prevent compiler warnings */
    ruleassignmentEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}
/* $ANTLR end assignment */

/**
 * $ANTLR start constant
 * C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:441:1: constant returns [WNConstantExpression* node] : ( INT | FLOAT | CHAR | STRING | BOOL );
 */
WNConstantExpression*
WNScriptASTDeprecatedParser::constant()
{
        WNScriptASTDeprecatedParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    WNConstantExpression* node;


    const ImplTraits::CommonTokenType* INT18 = NULL;
    const ImplTraits::CommonTokenType* FLOAT19 = NULL;
    const ImplTraits::CommonTokenType* CHAR20 = NULL;
    const ImplTraits::CommonTokenType* STRING21 = NULL;
    const ImplTraits::CommonTokenType* BOOL22 = NULL;

    /* Initialize rule variables
     */
     


        node = wn_nullptr;


 
    {
        {
            //  C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:445:5: ( INT | FLOAT | CHAR | STRING | BOOL )

            ANTLR_UINT32 alt19;

            alt19=5;

            switch ( this->LA(1) )
            {
            case INT:
            	{
            		alt19=1;
            	}
                break;
            case FLOAT:
            	{
            		alt19=2;
            	}
                break;
            case CHAR:
            	{
            		alt19=3;
            	}
                break;
            case STRING:
            	{
            		alt19=4;
            	}
                break;
            case BOOL:
            	{
            		alt19=5;
            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTDeprecatedParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 19 );
                ex->set_state( 0 );


                goto ruleconstantEx;

            }

            switch (alt19)
            {
        	case 1:
        	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:445:10: INT
        	    {
        	        INT18 =  this->matchToken(INT, &FOLLOW_INT_in_constant2925);
        	        if  (this->hasException())
        	        {
        	            goto ruleconstantEx;
        	        }


        	        {
        	             node = WN_SCRIPTNODE_NEW(WNConstantExpression(SC_INT, (INT18->getText()).c_str())); SetLocation(node, INT18); 
        	        }


        	    }
        	    break;
        	case 2:
        	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:446:10: FLOAT
        	    {
        	        FLOAT19 =  this->matchToken(FLOAT, &FOLLOW_FLOAT_in_constant2941);
        	        if  (this->hasException())
        	        {
        	            goto ruleconstantEx;
        	        }


        	        {
        	             node = WN_SCRIPTNODE_NEW(WNConstantExpression(SC_FLOAT, (FLOAT19->getText()).c_str())); SetLocation(node, FLOAT19); 
        	        }


        	    }
        	    break;
        	case 3:
        	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:447:10: CHAR
        	    {
        	        CHAR20 =  this->matchToken(CHAR, &FOLLOW_CHAR_in_constant2955);
        	        if  (this->hasException())
        	        {
        	            goto ruleconstantEx;
        	        }


        	        {
        	             node = WN_SCRIPTNODE_NEW(WNConstantExpression(SC_CHAR, (CHAR20->getText()).c_str())); SetLocation(node, CHAR20);
        	        }


        	    }
        	    break;
        	case 4:
        	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:448:10: STRING
        	    {
        	        STRING21 =  this->matchToken(STRING, &FOLLOW_STRING_in_constant2970);
        	        if  (this->hasException())
        	        {
        	            goto ruleconstantEx;
        	        }


        	        {
        	             node = WN_SCRIPTNODE_NEW(WNConstantExpression(SC_STRING, (STRING21->getText()).c_str())); SetLocation(node, STRING21); 
        	        }


        	    }
        	    break;
        	case 5:
        	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:449:9: BOOL
        	    {
        	        BOOL22 =  this->matchToken(BOOL, &FOLLOW_BOOL_in_constant2982);
        	        if  (this->hasException())
        	        {
        	            goto ruleconstantEx;
        	        }


        	        {
        	             node = WN_SCRIPTNODE_NEW(WNConstantExpression(SC_BOOL, (BOOL22->getText()).c_str())); SetLocation(node, BOOL22); 
        	        }


        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto ruleconstantEx; /* Prevent compiler warnings */
    ruleconstantEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}
/* $ANTLR end constant */

/**
 * $ANTLR start prim_ex
 * C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:452:1: prim_ex returns [WNExpression * node] : ( ID |ba= LBRACKET a= expression bb= RBRACKET |b= constant |c= scalarType ( (e= structInit ) | (f= arrayInit ) ) |d= NULLTOK );
 */
WNExpression *
WNScriptASTDeprecatedParser::prim_ex()
{
        WNScriptASTDeprecatedParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    WNExpression * node;


    const ImplTraits::CommonTokenType* ba = NULL;
    const ImplTraits::CommonTokenType* bb = NULL;
    const ImplTraits::CommonTokenType* d = NULL;
    const ImplTraits::CommonTokenType* ID23 = NULL;
    WNExpression* a;
    WNConstantExpression* b;
    WNTypeNode* c;
    WNStructAllocation* e;
    WNArrayAllocation* f;
    /* Initialize rule variables
     */
     


        node = wn_nullptr;


 
    {
        {
            //  C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:456:5: ( ID |ba= LBRACKET a= expression bb= RBRACKET |b= constant |c= scalarType ( (e= structInit ) | (f= arrayInit ) ) |d= NULLTOK )

            ANTLR_UINT32 alt21;

            alt21=5;

            switch ( this->LA(1) )
            {
            case ID:
            	{
            		alt21=1;
            	}
                break;
            case LBRACKET:
            	{
            		alt21=2;
            	}
                break;
            case BOOL:
            case CHAR:
            case FLOAT:
            case INT:
            case STRING:
            	{
            		alt21=3;
            	}
                break;
            case TYPE:
            	{
            		alt21=4;
            	}
                break;
            case NULLTOK:
            	{
            		alt21=5;
            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTDeprecatedParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 21 );
                ex->set_state( 0 );


                goto ruleprim_exEx;

            }

            switch (alt21)
            {
        	case 1:
        	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:456:10: ID
        	    {
        	        ID23 =  this->matchToken(ID, &FOLLOW_ID_in_prim_ex3014);
        	        if  (this->hasException())
        	        {
        	            goto ruleprim_exEx;
        	        }


        	        {
        	             node = WN_SCRIPTNODE_NEW(WNIDExpression((ID23->getText()).c_str())); SetLocation(node, ID23);
        	        }


        	    }
        	    break;
        	case 2:
        	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:457:10: ba= LBRACKET a= expression bb= RBRACKET
        	    {
        	        ba =  this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_prim_ex3029);
        	        if  (this->hasException())
        	        {
        	            goto ruleprim_exEx;
        	        }


        	        this->followPush(FOLLOW_expression_in_prim_ex3033);
        	        a=expression();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleprim_exEx;
        	        }


        	        bb =  this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_prim_ex3037);
        	        if  (this->hasException())
        	        {
        	            goto ruleprim_exEx;
        	        }


        	        {
        	            node = a
        	            ; SetLocation(node, ba); SetEndLocation(node, bb); 
        	        }


        	    }
        	    break;
        	case 3:
        	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:458:10: b= constant
        	    {
        	        this->followPush(FOLLOW_constant_in_prim_ex3052);
        	        b=constant();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleprim_exEx;
        	        }


        	        {
        	            node = b
        	            ; 
        	        }


        	    }
        	    break;
        	case 4:
        	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:459:9: c= scalarType ( (e= structInit ) | (f= arrayInit ) )
        	    {
        	        this->followPush(FOLLOW_scalarType_in_prim_ex3067);
        	        c=scalarType();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleprim_exEx;
        	        }


        	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:460:11: ( (e= structInit ) | (f= arrayInit ) )
        	        {
        	            int alt20=2;
        	            switch ( this->LA(1) )
        	            {
        	            case LBRACKET:
        	            	{
        	            		alt20=1;
        	            	}
        	                break;
        	            case LSQBRACKET:
        	            	{
        	            		alt20=2;
        	            	}
        	                break;

        	            default:
        	                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTDeprecatedParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
        	                ex->set_decisionNum( 20 );
        	                ex->set_state( 0 );


        	                goto ruleprim_exEx;

        	            }

        	            switch (alt20)
        	            {
        	        	case 1:
        	        	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:461:15: (e= structInit )
        	        	    {
        	        	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:461:15: (e= structInit )
        	        	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:461:17: e= structInit
        	        	        {
        	        	            this->followPush(FOLLOW_structInit_in_prim_ex3099);
        	        	            e=structInit();

        	        	            this->followPop();
        	        	            if  (this->hasException())
        	        	            {
        	        	                goto ruleprim_exEx;
        	        	            }


        	        	        }


        	        	        {
        	        	             e
        	        	            ->SetType(c
        	        	            ); node=e
        	        	            ; SetStartLocationFromNode(node, c
        	        	            ); 
        	        	        }


        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:462:15: (f= arrayInit )
        	        	    {
        	        	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:462:15: (f= arrayInit )
        	        	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:462:17: f= arrayInit
        	        	        {
        	        	            this->followPush(FOLLOW_arrayInit_in_prim_ex3123);
        	        	            f=arrayInit();

        	        	            this->followPop();
        	        	            if  (this->hasException())
        	        	            {
        	        	                goto ruleprim_exEx;
        	        	            }


        	        	        }


        	        	        {
        	        	             f
        	        	            ->SetType(c
        	        	            ); node=f
        	        	            ; SetStartLocationFromNode(node, c
        	        	            ); 
        	        	        }


        	        	    }
        	        	    break;

        	            }
        	        }

        	    }
        	    break;
        	case 5:
        	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:464:9: d= NULLTOK
        	    {
        	        d =  this->matchToken(NULLTOK, &FOLLOW_NULLTOK_in_prim_ex3152);
        	        if  (this->hasException())
        	        {
        	            goto ruleprim_exEx;
        	        }


        	        {
        	             node= WN_SCRIPTNODE_NEW(WNNullAllocation()); SetLocation(node, d); 
        	        }


        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto ruleprim_exEx; /* Prevent compiler warnings */
    ruleprim_exEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}
/* $ANTLR end prim_ex */

/**
 * $ANTLR start structInit
 * C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:467:1: structInit returns [WNStructAllocation* node] : (a= LBRACKET b= RBRACKET |c= LBRACKET d= expression e= RBRACKET );
 */
WNStructAllocation*
WNScriptASTDeprecatedParser::structInit()
{
        WNScriptASTDeprecatedParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    WNStructAllocation* node;


    const ImplTraits::CommonTokenType* a = NULL;
    const ImplTraits::CommonTokenType* b = NULL;
    const ImplTraits::CommonTokenType* c = NULL;
    const ImplTraits::CommonTokenType* e = NULL;
    WNExpression* d;
    /* Initialize rule variables
     */
     


 
    {
        {
            //  C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:468:5: (a= LBRACKET b= RBRACKET |c= LBRACKET d= expression e= RBRACKET )

            ANTLR_UINT32 alt22;

            alt22=2;

            switch ( this->LA(1) )
            {
            case LBRACKET:
            	{
            		switch ( this->LA(2) )
            		{
            		case RBRACKET:
            			{
            				alt22=1;
            			}
            		    break;
            		case BOOL:
            		case CHAR:
            		case DOUBDEC:
            		case DOUBINC:
            		case FLOAT:
            		case ID:
            		case INT:
            		case LBRACKET:
            		case NULLTOK:
            		case STRING:
            		case TYPE:
            		case 51:
            			{
            				alt22=2;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTDeprecatedParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 22 );
            		    ex->set_state( 1 );


            		    goto rulestructInitEx;

            		}

            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTDeprecatedParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 22 );
                ex->set_state( 0 );


                goto rulestructInitEx;

            }

            switch (alt22)
            {
        	case 1:
        	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:468:7: a= LBRACKET b= RBRACKET
        	    {
        	        a =  this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_structInit3176);
        	        if  (this->hasException())
        	        {
        	            goto rulestructInitEx;
        	        }


        	        b =  this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_structInit3180);
        	        if  (this->hasException())
        	        {
        	            goto rulestructInitEx;
        	        }


        	        {
        	             node = WN_SCRIPTNODE_NEW(WNStructAllocation()); SetLocation(node, a); SetEndLocation(node, b); 
        	        }


        	    }
        	    break;
        	case 2:
        	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:469:7: c= LBRACKET d= expression e= RBRACKET
        	    {
        	        c =  this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_structInit3192);
        	        if  (this->hasException())
        	        {
        	            goto rulestructInitEx;
        	        }


        	        this->followPush(FOLLOW_expression_in_structInit3196);
        	        d=expression();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestructInitEx;
        	        }


        	        e =  this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_structInit3200);
        	        if  (this->hasException())
        	        {
        	            goto rulestructInitEx;
        	        }


        	        {
        	             node = WN_SCRIPTNODE_NEW(WNStructAllocation()); node->SetCopyInitializer(d); SetLocation(node, c); SetEndLocation(node, e); 
        	        }


        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto rulestructInitEx; /* Prevent compiler warnings */
    rulestructInitEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}
/* $ANTLR end structInit */

/**
 * $ANTLR start arrayInit
 * C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:472:1: arrayInit returns [WNArrayAllocation* node] : ( ( ( LSQBRACKET e= expression RSQBRACKET )+ ( LSQBRACKET RSQBRACKET )* ) | ( LSQBRACKET RSQBRACKET )+ ) ( ( LBRACKET a= RBRACKET ) | ( LBRACKET b= expression c= RBRACKET ) ) ;
 */
WNArrayAllocation*
WNScriptASTDeprecatedParser::arrayInit()
{
        WNScriptASTDeprecatedParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    WNArrayAllocation* node;


    const ImplTraits::CommonTokenType* a = NULL;
    const ImplTraits::CommonTokenType* c = NULL;
    WNExpression* e;
    WNExpression* b;
    /* Initialize rule variables
     */
     


        node = WN_SCRIPTNODE_NEW(WNArrayAllocation());


 
    {
        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:476:5: ( ( ( ( LSQBRACKET e= expression RSQBRACKET )+ ( LSQBRACKET RSQBRACKET )* ) | ( LSQBRACKET RSQBRACKET )+ ) ( ( LBRACKET a= RBRACKET ) | ( LBRACKET b= expression c= RBRACKET ) ) )
        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:476:9: ( ( ( LSQBRACKET e= expression RSQBRACKET )+ ( LSQBRACKET RSQBRACKET )* ) | ( LSQBRACKET RSQBRACKET )+ ) ( ( LBRACKET a= RBRACKET ) | ( LBRACKET b= expression c= RBRACKET ) )
        {
            // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:476:9: ( ( ( LSQBRACKET e= expression RSQBRACKET )+ ( LSQBRACKET RSQBRACKET )* ) | ( LSQBRACKET RSQBRACKET )+ )
            {
                int alt26=2;
                switch ( this->LA(1) )
                {
                case LSQBRACKET:
                	{
                		switch ( this->LA(2) )
                		{
                		case RSQBRACKET:
                			{
                				alt26=2;
                			}
                		    break;
                		case BOOL:
                		case CHAR:
                		case DOUBDEC:
                		case DOUBINC:
                		case FLOAT:
                		case ID:
                		case INT:
                		case LBRACKET:
                		case NULLTOK:
                		case STRING:
                		case TYPE:
                		case 51:
                			{
                				alt26=1;
                			}
                		    break;

                		default:
                		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTDeprecatedParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		    ex->set_decisionNum( 26 );
                		    ex->set_state( 1 );


                		    goto rulearrayInitEx;

                		}

                	}
                    break;

                default:
                    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTDeprecatedParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 26 );
                    ex->set_state( 0 );


                    goto rulearrayInitEx;

                }

                switch (alt26)
                {
            	case 1:
            	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:477:13: ( ( LSQBRACKET e= expression RSQBRACKET )+ ( LSQBRACKET RSQBRACKET )* )
            	    {
            	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:477:13: ( ( LSQBRACKET e= expression RSQBRACKET )+ ( LSQBRACKET RSQBRACKET )* )
            	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:478:17: ( LSQBRACKET e= expression RSQBRACKET )+ ( LSQBRACKET RSQBRACKET )*
            	        {
            	            // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:478:17: ( LSQBRACKET e= expression RSQBRACKET )+
            	            {
            	                int cnt23=0;

            	                for (;;)
            	                {
            	                    int alt23=2;
            	            	switch ( this->LA(1) )
            	            	{
            	            	case LSQBRACKET:
            	            		{
            	            			switch ( this->LA(2) )
            	            			{
            	            			case BOOL:
            	            			case CHAR:
            	            			case DOUBDEC:
            	            			case DOUBINC:
            	            			case FLOAT:
            	            			case ID:
            	            			case INT:
            	            			case LBRACKET:
            	            			case NULLTOK:
            	            			case STRING:
            	            			case TYPE:
            	            			case 51:
            	            				{
            	            					alt23=1;
            	            				}
            	            			    break;

            	            			}

            	            		}
            	            	    break;

            	            	}

            	            	switch (alt23)
            	            	{
            	            	    case 1:
            	            	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:478:18: LSQBRACKET e= expression RSQBRACKET
            	            	        {
            	            	             this->matchToken(LSQBRACKET, &FOLLOW_LSQBRACKET_in_arrayInit3262);
            	            	            if  (this->hasException())
            	            	            {
            	            	                goto rulearrayInitEx;
            	            	            }


            	            	            this->followPush(FOLLOW_expression_in_arrayInit3266);
            	            	            e=expression();

            	            	            this->followPop();
            	            	            if  (this->hasException())
            	            	            {
            	            	                goto rulearrayInitEx;
            	            	            }


            	            	             this->matchToken(RSQBRACKET, &FOLLOW_RSQBRACKET_in_arrayInit3268);
            	            	            if  (this->hasException())
            	            	            {
            	            	                goto rulearrayInitEx;
            	            	            }


            	            	            {
            	            	                 node->AddExpression(e
            	            	                );
            	            	            }


            	            	        }
            	            	        break;

            	            	    default:

            	            		if ( cnt23 >= 1 )
            	            		{
            	            		    goto loop23;
            	            		}
            	            		/* mismatchedSetEx()
            	            		 */
            	            		new ANTLR_Exception< WNScriptASTDeprecatedParserImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


            	            		goto rulearrayInitEx;
            	            	}
            	            	cnt23++;
            	                }
            	                loop23: ;	/* Jump to here if this rule does not match */
            	            }

            	            // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:479:17: ( LSQBRACKET RSQBRACKET )*

            	            for (;;)
            	            {
            	                int alt24=2;
            	                switch ( this->LA(1) )
            	                {
            	                case LSQBRACKET:
            	                	{
            	                		alt24=1;
            	                	}
            	                    break;

            	                }

            	                switch (alt24)
            	                {
            	            	case 1:
            	            	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:479:18: LSQBRACKET RSQBRACKET
            	            	    {
            	            	         this->matchToken(LSQBRACKET, &FOLLOW_LSQBRACKET_in_arrayInit3292);
            	            	        if  (this->hasException())
            	            	        {
            	            	            goto rulearrayInitEx;
            	            	        }


            	            	         this->matchToken(RSQBRACKET, &FOLLOW_RSQBRACKET_in_arrayInit3294);
            	            	        if  (this->hasException())
            	            	        {
            	            	            goto rulearrayInitEx;
            	            	        }


            	            	        {
            	            	             node->AddLevel(); 
            	            	        }


            	            	    }
            	            	    break;

            	            	default:
            	            	    goto loop24;	/* break out of the loop */
            	            	    break;
            	                }
            	            }
            	            loop24: ; /* Jump out to here if this rule does not match */


            	        }


            	    }
            	    break;
            	case 2:
            	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:481:17: ( LSQBRACKET RSQBRACKET )+
            	    {
            	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:481:17: ( LSQBRACKET RSQBRACKET )+
            	        {
            	            int cnt25=0;

            	            for (;;)
            	            {
            	                int alt25=2;
            	        	switch ( this->LA(1) )
            	        	{
            	        	case LSQBRACKET:
            	        		{
            	        			alt25=1;
            	        		}
            	        	    break;

            	        	}

            	        	switch (alt25)
            	        	{
            	        	    case 1:
            	        	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:481:18: LSQBRACKET RSQBRACKET
            	        	        {
            	        	             this->matchToken(LSQBRACKET, &FOLLOW_LSQBRACKET_in_arrayInit3332);
            	        	            if  (this->hasException())
            	        	            {
            	        	                goto rulearrayInitEx;
            	        	            }


            	        	             this->matchToken(RSQBRACKET, &FOLLOW_RSQBRACKET_in_arrayInit3334);
            	        	            if  (this->hasException())
            	        	            {
            	        	                goto rulearrayInitEx;
            	        	            }


            	        	            {
            	        	                 node->AddLevel(); 
            	        	            }


            	        	        }
            	        	        break;

            	        	    default:

            	        		if ( cnt25 >= 1 )
            	        		{
            	        		    goto loop25;
            	        		}
            	        		/* mismatchedSetEx()
            	        		 */
            	        		new ANTLR_Exception< WNScriptASTDeprecatedParserImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


            	        		goto rulearrayInitEx;
            	        	}
            	        	cnt25++;
            	            }
            	            loop25: ;	/* Jump to here if this rule does not match */
            	        }

            	    }
            	    break;

                }
            }

            // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:483:9: ( ( LBRACKET a= RBRACKET ) | ( LBRACKET b= expression c= RBRACKET ) )
            {
                int alt27=2;
                switch ( this->LA(1) )
                {
                case LBRACKET:
                	{
                		switch ( this->LA(2) )
                		{
                		case RBRACKET:
                			{
                				alt27=1;
                			}
                		    break;
                		case BOOL:
                		case CHAR:
                		case DOUBDEC:
                		case DOUBINC:
                		case FLOAT:
                		case ID:
                		case INT:
                		case LBRACKET:
                		case NULLTOK:
                		case STRING:
                		case TYPE:
                		case 51:
                			{
                				alt27=2;
                			}
                		    break;

                		default:
                		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTDeprecatedParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		    ex->set_decisionNum( 27 );
                		    ex->set_state( 1 );


                		    goto rulearrayInitEx;

                		}

                	}
                    break;

                default:
                    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTDeprecatedParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 27 );
                    ex->set_state( 0 );


                    goto rulearrayInitEx;

                }

                switch (alt27)
                {
            	case 1:
            	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:484:13: ( LBRACKET a= RBRACKET )
            	    {
            	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:484:13: ( LBRACKET a= RBRACKET )
            	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:484:15: LBRACKET a= RBRACKET
            	        {
            	             this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_arrayInit3375);
            	            if  (this->hasException())
            	            {
            	                goto rulearrayInitEx;
            	            }


            	            a =  this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_arrayInit3379);
            	            if  (this->hasException())
            	            {
            	                goto rulearrayInitEx;
            	            }


            	            {
            	                 SetLocation(node, a); 
            	            }


            	        }


            	    }
            	    break;
            	case 2:
            	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:486:13: ( LBRACKET b= expression c= RBRACKET )
            	    {
            	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:486:13: ( LBRACKET b= expression c= RBRACKET )
            	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:486:15: LBRACKET b= expression c= RBRACKET
            	        {
            	             this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_arrayInit3413);
            	            if  (this->hasException())
            	            {
            	                goto rulearrayInitEx;
            	            }


            	            this->followPush(FOLLOW_expression_in_arrayInit3417);
            	            b=expression();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulearrayInitEx;
            	            }


            	            c =  this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_arrayInit3421);
            	            if  (this->hasException())
            	            {
            	                goto rulearrayInitEx;
            	            }


            	            {
            	                 node->SetCopyInitializer(b); SetLocation(node, c); 
            	            }


            	        }


            	    }
            	    break;

                }
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto rulearrayInitEx; /* Prevent compiler warnings */
    rulearrayInitEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}
/* $ANTLR end arrayInit */

/**
 * $ANTLR start declaration
 * C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:491:1: declaration returns [WNDeclaration* node] : a= decl ( ( '=' ( (c= expression ) ) ) | ( '<==' ( (d= expression ) ) ) ) ;
 */
WNDeclaration*
WNScriptASTDeprecatedParser::declaration()
{
        WNScriptASTDeprecatedParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    WNDeclaration* node;


    WNDeclaration* a;
    WNExpression* c;
    WNExpression* d;
    /* Initialize rule variables
     */
     


        node = wn_nullptr;


 
    {
        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:495:5: (a= decl ( ( '=' ( (c= expression ) ) ) | ( '<==' ( (d= expression ) ) ) ) )
        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:495:10: a= decl ( ( '=' ( (c= expression ) ) ) | ( '<==' ( (d= expression ) ) ) )
        {
            this->followPush(FOLLOW_decl_in_declaration3466);
            a=decl();

            this->followPop();
            if  (this->hasException())
            {
                goto ruledeclarationEx;
            }


            {
                 node = a
                ; 
            }


            // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:496:13: ( ( '=' ( (c= expression ) ) ) | ( '<==' ( (d= expression ) ) ) )
            {
                int alt28=2;
                switch ( this->LA(1) )
                {
                case 58:
                	{
                		alt28=1;
                	}
                    break;
                case CHOWN:
                	{
                		alt28=2;
                	}
                    break;

                default:
                    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTDeprecatedParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 28 );
                    ex->set_state( 0 );


                    goto ruledeclarationEx;

                }

                switch (alt28)
                {
            	case 1:
            	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:497:17: ( '=' ( (c= expression ) ) )
            	    {
            	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:497:17: ( '=' ( (c= expression ) ) )
            	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:497:18: '=' ( (c= expression ) )
            	        {
            	             this->matchToken(58, &FOLLOW_58_in_declaration3501);
            	            if  (this->hasException())
            	            {
            	                goto ruledeclarationEx;
            	            }


            	            // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:497:22: ( (c= expression ) )
            	            // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:497:24: (c= expression )
            	            {
            	                // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:497:24: (c= expression )
            	                // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:497:25: c= expression
            	                {
            	                    this->followPush(FOLLOW_expression_in_declaration3508);
            	                    c=expression();

            	                    this->followPop();
            	                    if  (this->hasException())
            	                    {
            	                        goto ruledeclarationEx;
            	                    }


            	                }


            	                {
            	                     node->AddExpressionInitializer(c
            	                    ); SetEndLocationFromNode(node, c
            	                    ); 
            	                }


            	            }


            	        }


            	    }
            	    break;
            	case 2:
            	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:498:17: ( '<==' ( (d= expression ) ) )
            	    {
            	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:498:17: ( '<==' ( (d= expression ) ) )
            	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:498:18: '<==' ( (d= expression ) )
            	        {
            	             this->matchToken(CHOWN, &FOLLOW_CHOWN_in_declaration3534);
            	            if  (this->hasException())
            	            {
            	                goto ruledeclarationEx;
            	            }


            	            // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:498:24: ( (d= expression ) )
            	            // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:498:26: (d= expression )
            	            {
            	                // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:498:26: (d= expression )
            	                // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:498:27: d= expression
            	                {
            	                    this->followPush(FOLLOW_expression_in_declaration3541);
            	                    d=expression();

            	                    this->followPop();
            	                    if  (this->hasException())
            	                    {
            	                        goto ruledeclarationEx;
            	                    }


            	                }


            	                {
            	                     node->AddExpressionInitializer(d
            	                    , true); SetEndLocationFromNode(node, d
            	                    ); 
            	                }


            	            }


            	        }


            	    }
            	    break;

                }
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto ruledeclarationEx; /* Prevent compiler warnings */
    ruledeclarationEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}
/* $ANTLR end declaration */

/**
 * $ANTLR start instructionScalar
 * C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:502:1: instructionScalar returns [WNInstruction* node] : ( declaration | assignment );
 */
WNInstruction*
WNScriptASTDeprecatedParser::instructionScalar()
{
        WNScriptASTDeprecatedParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    WNInstruction* node;


    WNDeclaration* declaration24;
    WNAssignment* assignment25;
    /* Initialize rule variables
     */
     


        node = wn_nullptr;


 
    {
        {
            //  C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:506:5: ( declaration | assignment )

            ANTLR_UINT32 alt29;

            alt29=2;

            alt29 = cdfa29.predict(this, this->get_rec(), this->get_istream(), cdfa29 );
            if  (this->hasException())
            {
                goto ruleinstructionScalarEx;
            }

            switch (alt29)
            {
        	case 1:
        	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:506:10: declaration
        	    {
        	        this->followPush(FOLLOW_declaration_in_instructionScalar3590);
        	        declaration24=declaration();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleinstructionScalarEx;
        	        }


        	        {
        	            node = declaration24
        	            ; 
        	        }


        	    }
        	    break;
        	case 2:
        	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:507:10: assignment
        	    {
        	        this->followPush(FOLLOW_assignment_in_instructionScalar3603);
        	        assignment25=assignment();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleinstructionScalarEx;
        	        }


        	        {
        	            node = assignment25
        	            ; 
        	        }


        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto ruleinstructionScalarEx; /* Prevent compiler warnings */
    ruleinstructionScalarEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}
/* $ANTLR end instructionScalar */

/**
 * $ANTLR start returnInst
 * C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:510:1: returnInst returns [WNReturn* node] : (a= RETURN expression b= SEMICOLON |c= RETURN d= SEMICOLON |e= RETURN_OWN expression f= SEMICOLON );
 */
WNReturn*
WNScriptASTDeprecatedParser::returnInst()
{
        WNScriptASTDeprecatedParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    WNReturn* node;


    const ImplTraits::CommonTokenType* a = NULL;
    const ImplTraits::CommonTokenType* b = NULL;
    const ImplTraits::CommonTokenType* c = NULL;
    const ImplTraits::CommonTokenType* d = NULL;
    const ImplTraits::CommonTokenType* e = NULL;
    const ImplTraits::CommonTokenType* f = NULL;
    WNExpression* expression26;
    WNExpression* expression27;
    /* Initialize rule variables
     */
     


        node = wn_nullptr;


 
    {
        {
            //  C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:514:5: (a= RETURN expression b= SEMICOLON |c= RETURN d= SEMICOLON |e= RETURN_OWN expression f= SEMICOLON )

            ANTLR_UINT32 alt30;

            alt30=3;

            switch ( this->LA(1) )
            {
            case RETURN:
            	{
            		switch ( this->LA(2) )
            		{
            		case SEMICOLON:
            			{
            				alt30=2;
            			}
            		    break;
            		case BOOL:
            		case CHAR:
            		case DOUBDEC:
            		case DOUBINC:
            		case FLOAT:
            		case ID:
            		case INT:
            		case LBRACKET:
            		case NULLTOK:
            		case STRING:
            		case TYPE:
            		case 51:
            			{
            				alt30=1;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTDeprecatedParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 30 );
            		    ex->set_state( 1 );


            		    goto rulereturnInstEx;

            		}

            	}
                break;
            case RETURN_OWN:
            	{
            		alt30=3;
            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTDeprecatedParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 30 );
                ex->set_state( 0 );


                goto rulereturnInstEx;

            }

            switch (alt30)
            {
        	case 1:
        	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:514:9: a= RETURN expression b= SEMICOLON
        	    {
        	        a =  this->matchToken(RETURN, &FOLLOW_RETURN_in_returnInst3635);
        	        if  (this->hasException())
        	        {
        	            goto rulereturnInstEx;
        	        }


        	        this->followPush(FOLLOW_expression_in_returnInst3637);
        	        expression26=expression();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulereturnInstEx;
        	        }


        	        b =  this->matchToken(SEMICOLON, &FOLLOW_SEMICOLON_in_returnInst3641);
        	        if  (this->hasException())
        	        {
        	            goto rulereturnInstEx;
        	        }


        	        {
        	             node = WN_SCRIPTNODE_NEW(WNReturn(expression26
        	            )); SetLocation(node, a); SetEndLocation(node, b);
        	        }


        	    }
        	    break;
        	case 2:
        	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:515:9: c= RETURN d= SEMICOLON
        	    {
        	        c =  this->matchToken(RETURN, &FOLLOW_RETURN_in_returnInst3655);
        	        if  (this->hasException())
        	        {
        	            goto rulereturnInstEx;
        	        }


        	        d =  this->matchToken(SEMICOLON, &FOLLOW_SEMICOLON_in_returnInst3659);
        	        if  (this->hasException())
        	        {
        	            goto rulereturnInstEx;
        	        }


        	        {
        	             node = WN_SCRIPTNODE_NEW(WNReturn()); SetLocation(node, c); SetEndLocation(node, d); 
        	        }


        	    }
        	    break;
        	case 3:
        	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:516:9: e= RETURN_OWN expression f= SEMICOLON
        	    {
        	        e =  this->matchToken(RETURN_OWN, &FOLLOW_RETURN_OWN_in_returnInst3673);
        	        if  (this->hasException())
        	        {
        	            goto rulereturnInstEx;
        	        }


        	        this->followPush(FOLLOW_expression_in_returnInst3675);
        	        expression27=expression();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulereturnInstEx;
        	        }


        	        f =  this->matchToken(SEMICOLON, &FOLLOW_SEMICOLON_in_returnInst3679);
        	        if  (this->hasException())
        	        {
        	            goto rulereturnInstEx;
        	        }


        	        {
        	             node = WN_SCRIPTNODE_NEW(WNReturn(expression27
        	            , true)); SetLocation(node, e); SetEndLocation(node, f); 
        	        }


        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto rulereturnInstEx; /* Prevent compiler warnings */
    rulereturnInstEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}
/* $ANTLR end returnInst */

/**
 * $ANTLR start whileInst
 * C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:519:1: whileInst returns [WNInstruction* node] : WHILE LBRACKET expression RBRACKET body ;
 */
WNInstruction*
WNScriptASTDeprecatedParser::whileInst()
{
        WNScriptASTDeprecatedParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    WNInstruction* node;


    const ImplTraits::CommonTokenType* WHILE30 = NULL;
    WNExpression* expression28;
    WNInstructionList* body29;
    /* Initialize rule variables
     */
     


        node = wn_nullptr;


 
    {
        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:523:9: ( WHILE LBRACKET expression RBRACKET body )
        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:523:14: WHILE LBRACKET expression RBRACKET body
        {
            WHILE30 =  this->matchToken(WHILE, &FOLLOW_WHILE_in_whileInst3717);
            if  (this->hasException())
            {
                goto rulewhileInstEx;
            }


             this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_whileInst3719);
            if  (this->hasException())
            {
                goto rulewhileInstEx;
            }


            this->followPush(FOLLOW_expression_in_whileInst3721);
            expression28=expression();

            this->followPop();
            if  (this->hasException())
            {
                goto rulewhileInstEx;
            }


             this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_whileInst3723);
            if  (this->hasException())
            {
                goto rulewhileInstEx;
            }


            this->followPush(FOLLOW_body_in_whileInst3725);
            body29=body();

            this->followPop();
            if  (this->hasException())
            {
                goto rulewhileInstEx;
            }


            {
                 node = WN_SCRIPTNODE_NEW(WNWhileInstruction(expression28
                , body29
                )); SetLocation(node, WHILE30); SetEndLocationFromNode(node, 
                body29
                ); 
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto rulewhileInstEx; /* Prevent compiler warnings */
    rulewhileInstEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}
/* $ANTLR end whileInst */

/**
 * $ANTLR start doInst
 * C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:525:1: doInst returns [WNInstruction* node] : DO body WHILE LBRACKET expression RBRACKET SEMICOLON ;
 */
WNInstruction*
WNScriptASTDeprecatedParser::doInst()
{
        WNScriptASTDeprecatedParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    WNInstruction* node;


    const ImplTraits::CommonTokenType* DO33 = NULL;
    const ImplTraits::CommonTokenType* SEMICOLON34 = NULL;
    WNExpression* expression31;
    WNInstructionList* body32;
    /* Initialize rule variables
     */
     


        node = wn_nullptr;


 
    {
        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:529:5: ( DO body WHILE LBRACKET expression RBRACKET SEMICOLON )
        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:529:10: DO body WHILE LBRACKET expression RBRACKET SEMICOLON
        {
            DO33 =  this->matchToken(DO, &FOLLOW_DO_in_doInst3761);
            if  (this->hasException())
            {
                goto ruledoInstEx;
            }


            this->followPush(FOLLOW_body_in_doInst3763);
            body32=body();

            this->followPop();
            if  (this->hasException())
            {
                goto ruledoInstEx;
            }


             this->matchToken(WHILE, &FOLLOW_WHILE_in_doInst3765);
            if  (this->hasException())
            {
                goto ruledoInstEx;
            }


             this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_doInst3767);
            if  (this->hasException())
            {
                goto ruledoInstEx;
            }


            this->followPush(FOLLOW_expression_in_doInst3769);
            expression31=expression();

            this->followPop();
            if  (this->hasException())
            {
                goto ruledoInstEx;
            }


             this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_doInst3771);
            if  (this->hasException())
            {
                goto ruledoInstEx;
            }


            SEMICOLON34 =  this->matchToken(SEMICOLON, &FOLLOW_SEMICOLON_in_doInst3773);
            if  (this->hasException())
            {
                goto ruledoInstEx;
            }


            {
                node = WN_SCRIPTNODE_NEW(WNDoInstruction(expression31
                , body32
                )); SetLocation(node, DO33); SetEndLocation(node, SEMICOLON34); 
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto ruledoInstEx; /* Prevent compiler warnings */
    ruledoInstEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}
/* $ANTLR end doInst */

/**
 * $ANTLR start forInst
 * C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:532:1: forInst returns [WNInstruction* node] : FOR LBRACKET (a= instructionScalar )? SEMICOLON (b= expression )? SEMICOLON (c= instructionScalar )? RBRACKET (d= body ) ;
 */
WNInstruction*
WNScriptASTDeprecatedParser::forInst()
{
        WNScriptASTDeprecatedParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    WNInstruction* node;


    const ImplTraits::CommonTokenType* FOR35 = NULL;
    WNInstruction* a;
    WNExpression* b;
    WNInstruction* c;
    WNInstructionList* d;
    /* Initialize rule variables
     */
     


        WNForInstruction* forNode = WN_SCRIPTNODE_NEW(WNForInstruction());
        node = forNode;


 
    {
        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:537:5: ( FOR LBRACKET (a= instructionScalar )? SEMICOLON (b= expression )? SEMICOLON (c= instructionScalar )? RBRACKET (d= body ) )
        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:537:10: FOR LBRACKET (a= instructionScalar )? SEMICOLON (b= expression )? SEMICOLON (c= instructionScalar )? RBRACKET (d= body )
        {
            FOR35 =  this->matchToken(FOR, &FOLLOW_FOR_in_forInst3805);
            if  (this->hasException())
            {
                goto ruleforInstEx;
            }


             this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_forInst3807);
            if  (this->hasException())
            {
                goto ruleforInstEx;
            }


            {
                 SetLocation(forNode, FOR35); 
            }


            // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:538:21: (a= instructionScalar )?
            {
                int alt31=2;
                switch ( this->LA(1) )
                {
                    case BOOL:
                    case CHAR:
                    case DOUBDEC:
                    case DOUBINC:
                    case FLOAT:
                    case ID:
                    case INT:
                    case LBRACKET:
                    case NULLTOK:
                    case STRING:
                    case TYPE:
                    case 51:
                    	{
                    		alt31=1;
                    	}
                        break;
                }

                switch (alt31)
                {
            	case 1:
            	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:538:22: a= instructionScalar
            	    {
            	        this->followPush(FOLLOW_instructionScalar_in_forInst3835);
            	        a=instructionScalar();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleforInstEx;
            	        }


            	        {
            	            forNode->AddInitializer(a
            	            );
            	        }


            	    }
            	    break;

                }
            }

             this->matchToken(SEMICOLON, &FOLLOW_SEMICOLON_in_forInst3841);
            if  (this->hasException())
            {
                goto ruleforInstEx;
            }


            // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:539:21: (b= expression )?
            {
                int alt32=2;
                switch ( this->LA(1) )
                {
                    case BOOL:
                    case CHAR:
                    case DOUBDEC:
                    case DOUBINC:
                    case FLOAT:
                    case ID:
                    case INT:
                    case LBRACKET:
                    case NULLTOK:
                    case STRING:
                    case TYPE:
                    case 51:
                    	{
                    		alt32=1;
                    	}
                        break;
                }

                switch (alt32)
                {
            	case 1:
            	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:539:22: b= expression
            	    {
            	        this->followPush(FOLLOW_expression_in_forInst3866);
            	        b=expression();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleforInstEx;
            	        }


            	        {
            	            forNode->AddCondition(b
            	            ); 
            	        }


            	    }
            	    break;

                }
            }

             this->matchToken(SEMICOLON, &FOLLOW_SEMICOLON_in_forInst3880);
            if  (this->hasException())
            {
                goto ruleforInstEx;
            }


            // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:540:21: (c= instructionScalar )?
            {
                int alt33=2;
                switch ( this->LA(1) )
                {
                    case BOOL:
                    case CHAR:
                    case DOUBDEC:
                    case DOUBINC:
                    case FLOAT:
                    case ID:
                    case INT:
                    case LBRACKET:
                    case NULLTOK:
                    case STRING:
                    case TYPE:
                    case 51:
                    	{
                    		alt33=1;
                    	}
                        break;
                }

                switch (alt33)
                {
            	case 1:
            	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:540:22: c= instructionScalar
            	    {
            	        this->followPush(FOLLOW_instructionScalar_in_forInst3905);
            	        c=instructionScalar();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleforInstEx;
            	        }


            	        {
            	            forNode->AddPostOp(c
            	            ); 
            	        }


            	    }
            	    break;

                }
            }

             this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_forInst3911);
            if  (this->hasException())
            {
                goto ruleforInstEx;
            }


            // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:541:21: (d= body )
            // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:541:22: d= body
            {
                this->followPush(FOLLOW_body_in_forInst3936);
                d=body();

                this->followPop();
                if  (this->hasException())
                {
                    goto ruleforInstEx;
                }


                {
                    forNode->AddBody(d
                    ); SetEndLocationFromNode(forNode, d
                    ); 
                }


            }


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleforInstEx; /* Prevent compiler warnings */
    ruleforInstEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}
/* $ANTLR end forInst */

/**
 * $ANTLR start elsemiddle
 * C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:545:1: elsemiddle returns [WNElseIf* node] : ELSE IF LBRACKET expression RBRACKET body ;
 */
WNElseIf*
WNScriptASTDeprecatedParser::elsemiddle()
{
        WNScriptASTDeprecatedParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    WNElseIf* node;


    const ImplTraits::CommonTokenType* ELSE38 = NULL;
    WNExpression* expression36;
    WNInstructionList* body37;
    /* Initialize rule variables
     */
     


        node = wn_nullptr;


 
    {
        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:549:5: ( ELSE IF LBRACKET expression RBRACKET body )
        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:549:10: ELSE IF LBRACKET expression RBRACKET body
        {
            ELSE38 =  this->matchToken(ELSE, &FOLLOW_ELSE_in_elsemiddle3984);
            if  (this->hasException())
            {
                goto ruleelsemiddleEx;
            }


             this->matchToken(IF, &FOLLOW_IF_in_elsemiddle3986);
            if  (this->hasException())
            {
                goto ruleelsemiddleEx;
            }


             this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_elsemiddle3988);
            if  (this->hasException())
            {
                goto ruleelsemiddleEx;
            }


            this->followPush(FOLLOW_expression_in_elsemiddle3990);
            expression36=expression();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleelsemiddleEx;
            }


             this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_elsemiddle3992);
            if  (this->hasException())
            {
                goto ruleelsemiddleEx;
            }


            this->followPush(FOLLOW_body_in_elsemiddle3994);
            body37=body();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleelsemiddleEx;
            }


            {
                 node = WN_SCRIPTNODE_NEW(WNElseIf(expression36
                , body37
                )); SetLocation(node, ELSE38); SetEndLocationFromNode(node, 
                body37
                ); 
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleelsemiddleEx; /* Prevent compiler warnings */
    ruleelsemiddleEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}
/* $ANTLR end elsemiddle */

/**
 * $ANTLR start endif
 * C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:552:1: endif returns [WNInstructionList* node] : 'else' body ;
 */
WNInstructionList*
WNScriptASTDeprecatedParser::endif()
{
        WNScriptASTDeprecatedParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    WNInstructionList* node;


    WNInstructionList* body39;
    /* Initialize rule variables
     */
     


        node = wn_nullptr;


 
    {
        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:556:5: ( 'else' body )
        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:556:10: 'else' body
        {
             this->matchToken(ELSE, &FOLLOW_ELSE_in_endif4027);
            if  (this->hasException())
            {
                goto ruleendifEx;
            }


            this->followPush(FOLLOW_body_in_endif4029);
            body39=body();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleendifEx;
            }


            {
                node = body39
                ; 
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleendifEx; /* Prevent compiler warnings */
    ruleendifEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}
/* $ANTLR end endif */

/**
 * $ANTLR start ifInst
 * C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:559:1: ifInst returns [WNInstruction* node] : IF LBRACKET expression RBRACKET body ( elsemiddle )* ( endif )? ;
 */
WNInstruction*
WNScriptASTDeprecatedParser::ifInst()
{
        WNScriptASTDeprecatedParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    WNInstruction* node;


    const ImplTraits::CommonTokenType* IF42 = NULL;
    WNExpression* expression40;
    WNInstructionList* body41;
    WNElseIf* elsemiddle43;
    WNInstructionList* endif44;
    /* Initialize rule variables
     */
     


        WNIFInstruction* inst;
        node = wn_nullptr;


 
    {
        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:564:5: ( IF LBRACKET expression RBRACKET body ( elsemiddle )* ( endif )? )
        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:564:10: IF LBRACKET expression RBRACKET body ( elsemiddle )* ( endif )?
        {
            IF42 =  this->matchToken(IF, &FOLLOW_IF_in_ifInst4059);
            if  (this->hasException())
            {
                goto ruleifInstEx;
            }


             this->matchToken(LBRACKET, &FOLLOW_LBRACKET_in_ifInst4061);
            if  (this->hasException())
            {
                goto ruleifInstEx;
            }


            this->followPush(FOLLOW_expression_in_ifInst4063);
            expression40=expression();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleifInstEx;
            }


             this->matchToken(RBRACKET, &FOLLOW_RBRACKET_in_ifInst4065);
            if  (this->hasException())
            {
                goto ruleifInstEx;
            }


            this->followPush(FOLLOW_body_in_ifInst4067);
            body41=body();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleifInstEx;
            }


            {
                inst = WN_SCRIPTNODE_NEW(WNIFInstruction(expression40
                , body41
                )); node = inst; SetLocation(node, IF42); SetEndLocationFromNode(node, 
                body41
                ); 
            }


            // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:565:13: ( elsemiddle )*

            for (;;)
            {
                int alt34=2;
                switch ( this->LA(1) )
                {
                case ELSE:
                	{
                		switch ( this->LA(2) )
                		{
                		case IF:
                			{
                				alt34=1;
                			}
                		    break;

                		}

                	}
                    break;

                }

                switch (alt34)
                {
            	case 1:
            	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:565:14: elsemiddle
            	    {
            	        this->followPush(FOLLOW_elsemiddle_in_ifInst4084);
            	        elsemiddle43=elsemiddle();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleifInstEx;
            	        }


            	        {
            	            inst->AddElseIf(elsemiddle43
            	            ); SetEndLocationFromNode(node, elsemiddle43
            	            ); 
            	        }


            	    }
            	    break;

            	default:
            	    goto loop34;	/* break out of the loop */
            	    break;
                }
            }
            loop34: ; /* Jump out to here if this rule does not match */


            // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:566:13: ( endif )?
            {
                int alt35=2;
                switch ( this->LA(1) )
                {
                    case ELSE:
                    	{
                    		alt35=1;
                    	}
                        break;
                }

                switch (alt35)
                {
            	case 1:
            	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:566:14: endif
            	    {
            	        this->followPush(FOLLOW_endif_in_ifInst4104);
            	        endif44=endif();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleifInstEx;
            	        }


            	        {
            	            inst->AddElse(endif44
            	            ); SetLocation(node, IF42); SetEndLocationFromNode(node, 
            	            endif44
            	            ); 
            	        }


            	    }
            	    break;

                }
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleifInstEx; /* Prevent compiler warnings */
    ruleifInstEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}
/* $ANTLR end ifInst */

/**
 * $ANTLR start instruction
 * C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:569:1: instruction returns [WNInstruction* node] : ( ifInst | whileInst | doInst | forInst | instructionScalar ';' | returnInst );
 */
WNInstruction*
WNScriptASTDeprecatedParser::instruction()
{
        WNScriptASTDeprecatedParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    WNInstruction* node;


    WNInstruction* ifInst45;
    WNInstruction* whileInst46;
    WNInstruction* doInst47;
    WNInstruction* forInst48;
    WNInstruction* instructionScalar49;
    WNReturn* returnInst50;
    /* Initialize rule variables
     */
     




 
    {
        {
            //  C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:572:5: ( ifInst | whileInst | doInst | forInst | instructionScalar ';' | returnInst )

            ANTLR_UINT32 alt36;

            alt36=6;

            switch ( this->LA(1) )
            {
            case IF:
            	{
            		alt36=1;
            	}
                break;
            case WHILE:
            	{
            		alt36=2;
            	}
                break;
            case DO:
            	{
            		alt36=3;
            	}
                break;
            case FOR:
            	{
            		alt36=4;
            	}
                break;
            case BOOL:
            case CHAR:
            case DOUBDEC:
            case DOUBINC:
            case FLOAT:
            case ID:
            case INT:
            case LBRACKET:
            case NULLTOK:
            case STRING:
            case TYPE:
            case 51:
            	{
            		alt36=5;
            	}
                break;
            case RETURN:
            case RETURN_OWN:
            	{
            		alt36=6;
            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTDeprecatedParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 36 );
                ex->set_state( 0 );


                goto ruleinstructionEx;

            }

            switch (alt36)
            {
        	case 1:
        	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:572:10: ifInst
        	    {
        	        this->followPush(FOLLOW_ifInst_in_instruction4138);
        	        ifInst45=ifInst();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleinstructionEx;
        	        }


        	        {
        	             node = ifInst45
        	            ; 
        	        }


        	    }
        	    break;
        	case 2:
        	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:573:10: whileInst
        	    {
        	        this->followPush(FOLLOW_whileInst_in_instruction4159);
        	        whileInst46=whileInst();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleinstructionEx;
        	        }


        	        {
        	            node = whileInst46
        	            ; 
        	        }


        	    }
        	    break;
        	case 3:
        	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:574:10: doInst
        	    {
        	        this->followPush(FOLLOW_doInst_in_instruction4176);
        	        doInst47=doInst();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleinstructionEx;
        	        }


        	        {
        	            node = doInst47
        	            ; 
        	        }


        	    }
        	    break;
        	case 4:
        	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:575:10: forInst
        	    {
        	        this->followPush(FOLLOW_forInst_in_instruction4196);
        	        forInst48=forInst();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleinstructionEx;
        	        }


        	        {
        	            node = forInst48
        	            ; 
        	        }


        	    }
        	    break;
        	case 5:
        	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:576:10: instructionScalar ';'
        	    {
        	        this->followPush(FOLLOW_instructionScalar_in_instruction4216);
        	        instructionScalar49=instructionScalar();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleinstructionEx;
        	        }


        	         this->matchToken(SEMICOLON, &FOLLOW_SEMICOLON_in_instruction4218);
        	        if  (this->hasException())
        	        {
        	            goto ruleinstructionEx;
        	        }


        	        {
        	            node = instructionScalar49
        	            ;
        	        }


        	    }
        	    break;
        	case 6:
        	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:577:10: returnInst
        	    {
        	        this->followPush(FOLLOW_returnInst_in_instruction4231);
        	        returnInst50=returnInst();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleinstructionEx;
        	        }


        	        {
        	            node = returnInst50
        	            ; 
        	        }


        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto ruleinstructionEx; /* Prevent compiler warnings */
    ruleinstructionEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}
/* $ANTLR end instruction */

/**
 * $ANTLR start instructionList
 * C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:580:1: instructionList returns [WNInstructionList* node] : a= instruction (b= instruction )* ;
 */
WNInstructionList*
WNScriptASTDeprecatedParser::instructionList()
{
        WNScriptASTDeprecatedParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    WNInstructionList* node;


    WNInstruction* a;
    WNInstruction* b;
    /* Initialize rule variables
     */
     




 
    {
        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:583:5: (a= instruction (b= instruction )* )
        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:583:10: a= instruction (b= instruction )*
        {
            this->followPush(FOLLOW_instruction_in_instructionList4263);
            a=instruction();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleinstructionListEx;
            }


            {
                node = WN_SCRIPTNODE_NEW(WNInstructionList(a
                )); SetLocationFromNode(node, a
                ); 
            }


            // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:584:9: (b= instruction )*

            for (;;)
            {
                int alt37=2;
                switch ( this->LA(1) )
                {
                case BOOL:
                case CHAR:
                case DO:
                case DOUBDEC:
                case DOUBINC:
                case FLOAT:
                case FOR:
                case ID:
                case IF:
                case INT:
                case LBRACKET:
                case NULLTOK:
                case RETURN:
                case RETURN_OWN:
                case STRING:
                case TYPE:
                case WHILE:
                case 51:
                	{
                		alt37=1;
                	}
                    break;

                }

                switch (alt37)
                {
            	case 1:
            	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:584:10: b= instruction
            	    {
            	        this->followPush(FOLLOW_instruction_in_instructionList4279);
            	        b=instruction();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleinstructionListEx;
            	        }


            	        {
            	            node->AddInstruction(b
            	            ); SetEndLocationFromNode(node, b
            	            ); 
            	        }


            	    }
            	    break;

            	default:
            	    goto loop37;	/* break out of the loop */
            	    break;
                }
            }
            loop37: ; /* Jump out to here if this rule does not match */


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleinstructionListEx; /* Prevent compiler warnings */
    ruleinstructionListEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}
/* $ANTLR end instructionList */

/**
 * $ANTLR start body
 * C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:587:1: body returns [WNInstructionList* node] : (a= LBRACE b= RBRACE |d= LBRACE instructionList e= RBRACE );
 */
WNInstructionList*
WNScriptASTDeprecatedParser::body()
{
        WNScriptASTDeprecatedParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    WNInstructionList* node;


    const ImplTraits::CommonTokenType* a = NULL;
    const ImplTraits::CommonTokenType* b = NULL;
    const ImplTraits::CommonTokenType* d = NULL;
    const ImplTraits::CommonTokenType* e = NULL;
    WNInstructionList* instructionList51;
    /* Initialize rule variables
     */
     




 
    {
        {
            //  C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:590:5: (a= LBRACE b= RBRACE |d= LBRACE instructionList e= RBRACE )

            ANTLR_UINT32 alt38;

            alt38=2;

            switch ( this->LA(1) )
            {
            case LBRACE:
            	{
            		switch ( this->LA(2) )
            		{
            		case RBRACE:
            			{
            				alt38=1;
            			}
            		    break;
            		case BOOL:
            		case CHAR:
            		case DO:
            		case DOUBDEC:
            		case DOUBINC:
            		case FLOAT:
            		case FOR:
            		case ID:
            		case IF:
            		case INT:
            		case LBRACKET:
            		case NULLTOK:
            		case RETURN:
            		case RETURN_OWN:
            		case STRING:
            		case TYPE:
            		case WHILE:
            		case 51:
            			{
            				alt38=2;
            			}
            		    break;

            		default:
            		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTDeprecatedParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		    ex->set_decisionNum( 38 );
            		    ex->set_state( 1 );


            		    goto rulebodyEx;

            		}

            	}
                break;

            default:
                ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTDeprecatedParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 38 );
                ex->set_state( 0 );


                goto rulebodyEx;

            }

            switch (alt38)
            {
        	case 1:
        	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:590:10: a= LBRACE b= RBRACE
        	    {
        	        a =  this->matchToken(LBRACE, &FOLLOW_LBRACE_in_body4313);
        	        if  (this->hasException())
        	        {
        	            goto rulebodyEx;
        	        }


        	        b =  this->matchToken(RBRACE, &FOLLOW_RBRACE_in_body4317);
        	        if  (this->hasException())
        	        {
        	            goto rulebodyEx;
        	        }


        	        {
        	             node = WN_SCRIPTNODE_NEW(WNInstructionList()); SetLocation(node, a); SetEndLocation(node, b); 
        	        }


        	    }
        	    break;
        	case 2:
        	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:591:10: d= LBRACE instructionList e= RBRACE
        	    {
        	        d =  this->matchToken(LBRACE, &FOLLOW_LBRACE_in_body4332);
        	        if  (this->hasException())
        	        {
        	            goto rulebodyEx;
        	        }


        	        this->followPush(FOLLOW_instructionList_in_body4334);
        	        instructionList51=instructionList();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulebodyEx;
        	        }


        	        e =  this->matchToken(RBRACE, &FOLLOW_RBRACE_in_body4338);
        	        if  (this->hasException())
        	        {
        	            goto rulebodyEx;
        	        }


        	        {
        	            node = instructionList51
        	            ; SetLocation(node, d); SetEndLocation(node, e); 
        	        }


        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto rulebodyEx; /* Prevent compiler warnings */
    rulebodyEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}
/* $ANTLR end body */

/**
 * $ANTLR start function
 * C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:594:1: function returns [WNFunction* node] : decl parameterList body ;
 */
WNFunction*
WNScriptASTDeprecatedParser::function()
{
        WNScriptASTDeprecatedParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    WNFunction* node;


    WNDeclaration* decl52;
    WNDeclList* parameterList53;
    WNInstructionList* body54;
    /* Initialize rule variables
     */
     




 
    {
        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:597:5: ( decl parameterList body )
        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:597:10: decl parameterList body
        {
            this->followPush(FOLLOW_decl_in_function4368);
            decl52=decl();

            this->followPop();
            if  (this->hasException())
            {
                goto rulefunctionEx;
            }


            this->followPush(FOLLOW_parameterList_in_function4370);
            parameterList53=parameterList();

            this->followPop();
            if  (this->hasException())
            {
                goto rulefunctionEx;
            }


            this->followPush(FOLLOW_body_in_function4372);
            body54=body();

            this->followPop();
            if  (this->hasException())
            {
                goto rulefunctionEx;
            }


            {
                 node = WN_SCRIPTNODE_NEW(WNFunction(decl52
                , parameterList53
                , body54
                )); SetLocationFromNode(node, decl52
                ); SetEndLocationFromNode(node, body54
                ); 
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto rulefunctionEx; /* Prevent compiler warnings */
    rulefunctionEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}
/* $ANTLR end function */

/**
 * $ANTLR start structDecl
 * C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:600:1: structDecl returns [WNStruct* node] : STRUCT TYPE LBRACE (a= declaration SEMICOLON )* RBRACE ;
 */
WNStruct*
WNScriptASTDeprecatedParser::structDecl()
{
        WNScriptASTDeprecatedParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    WNStruct* node;


    const ImplTraits::CommonTokenType* TYPE55 = NULL;
    const ImplTraits::CommonTokenType* STRUCT56 = NULL;
    const ImplTraits::CommonTokenType* RBRACE57 = NULL;
    WNDeclaration* a;
    /* Initialize rule variables
     */
     


 
    {
        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:601:5: ( STRUCT TYPE LBRACE (a= declaration SEMICOLON )* RBRACE )
        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:601:10: STRUCT TYPE LBRACE (a= declaration SEMICOLON )* RBRACE
        {
            STRUCT56 =  this->matchToken(STRUCT, &FOLLOW_STRUCT_in_structDecl4397);
            if  (this->hasException())
            {
                goto rulestructDeclEx;
            }


            TYPE55 =  this->matchToken(TYPE, &FOLLOW_TYPE_in_structDecl4399);
            if  (this->hasException())
            {
                goto rulestructDeclEx;
            }


            {
                node= WN_SCRIPTNODE_NEW(WNStruct((TYPE55->getText()).c_str())); SetLocation(node, STRUCT56); 
            }


             this->matchToken(LBRACE, &FOLLOW_LBRACE_in_structDecl4415);
            if  (this->hasException())
            {
                goto rulestructDeclEx;
            }


            // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:602:20: (a= declaration SEMICOLON )*

            for (;;)
            {
                int alt39=2;
                switch ( this->LA(1) )
                {
                case TYPE:
                	{
                		alt39=1;
                	}
                    break;

                }

                switch (alt39)
                {
            	case 1:
            	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:602:21: a= declaration SEMICOLON
            	    {
            	        this->followPush(FOLLOW_declaration_in_structDecl4420);
            	        a=declaration();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulestructDeclEx;
            	        }


            	        {
            	             node->AddStructElem(a
            	            );
            	        }


            	         this->matchToken(SEMICOLON, &FOLLOW_SEMICOLON_in_structDecl4424);
            	        if  (this->hasException())
            	        {
            	            goto rulestructDeclEx;
            	        }


            	    }
            	    break;

            	default:
            	    goto loop39;	/* break out of the loop */
            	    break;
                }
            }
            loop39: ; /* Jump out to here if this rule does not match */


            RBRACE57 =  this->matchToken(RBRACE, &FOLLOW_RBRACE_in_structDecl4429);
            if  (this->hasException())
            {
                goto rulestructDeclEx;
            }


            {
                 SetEndLocation(node, RBRACE57); 
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto rulestructDeclEx; /* Prevent compiler warnings */
    rulestructDeclEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}
/* $ANTLR end structDecl */

/**
 * $ANTLR start classDecl
 * C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:605:1: classDecl returns [WNStruct* node] : ( (f= CLASS c= TYPE ) | (g= CLASS d= TYPE COLON e= TYPE ) ) LBRACE ( (a= declaration SEMICOLON ) | (b= function ) | ( VIRTUAL h= function ) | ( OVERRIDE i= function ) )* RBRACE ;
 */
WNStruct*
WNScriptASTDeprecatedParser::classDecl()
{
        WNScriptASTDeprecatedParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    WNStruct* node;


    const ImplTraits::CommonTokenType* f = NULL;
    const ImplTraits::CommonTokenType* c = NULL;
    const ImplTraits::CommonTokenType* g = NULL;
    const ImplTraits::CommonTokenType* d = NULL;
    const ImplTraits::CommonTokenType* e = NULL;
    const ImplTraits::CommonTokenType* RBRACE58 = NULL;
    WNDeclaration* a;
    WNFunction* b;
    WNFunction* h;
    WNFunction* i;
    /* Initialize rule variables
     */
     


 
    {
        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:606:5: ( ( (f= CLASS c= TYPE ) | (g= CLASS d= TYPE COLON e= TYPE ) ) LBRACE ( (a= declaration SEMICOLON ) | (b= function ) | ( VIRTUAL h= function ) | ( OVERRIDE i= function ) )* RBRACE )
        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:607:9: ( (f= CLASS c= TYPE ) | (g= CLASS d= TYPE COLON e= TYPE ) ) LBRACE ( (a= declaration SEMICOLON ) | (b= function ) | ( VIRTUAL h= function ) | ( OVERRIDE i= function ) )* RBRACE
        {
            // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:607:9: ( (f= CLASS c= TYPE ) | (g= CLASS d= TYPE COLON e= TYPE ) )
            {
                int alt40=2;
                switch ( this->LA(1) )
                {
                case CLASS:
                	{
                		switch ( this->LA(2) )
                		{
                		case TYPE:
                			{
                				switch ( this->LA(3) )
                				{
                				case COLON:
                					{
                						alt40=2;
                					}
                				    break;
                				case LBRACE:
                					{
                						alt40=1;
                					}
                				    break;

                				default:
                				    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTDeprecatedParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                				    ex->set_decisionNum( 40 );
                				    ex->set_state( 2 );


                				    goto ruleclassDeclEx;

                				}

                			}
                		    break;

                		default:
                		    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTDeprecatedParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		    ex->set_decisionNum( 40 );
                		    ex->set_state( 1 );


                		    goto ruleclassDeclEx;

                		}

                	}
                    break;

                default:
                    ExceptionBaseType* ex = new ANTLR_Exception< WNScriptASTDeprecatedParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 40 );
                    ex->set_state( 0 );


                    goto ruleclassDeclEx;

                }

                switch (alt40)
                {
            	case 1:
            	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:608:13: (f= CLASS c= TYPE )
            	    {
            	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:608:13: (f= CLASS c= TYPE )
            	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:608:14: f= CLASS c= TYPE
            	        {
            	            f =  this->matchToken(CLASS, &FOLLOW_CLASS_in_classDecl4477);
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            c =  this->matchToken(TYPE, &FOLLOW_TYPE_in_classDecl4481);
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            {
            	                node= WN_SCRIPTNODE_NEW(WNStruct((c->getText()).c_str(), true)); SetLocation(node, f); 
            	            }


            	        }


            	    }
            	    break;
            	case 2:
            	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:609:13: (g= CLASS d= TYPE COLON e= TYPE )
            	    {
            	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:609:13: (g= CLASS d= TYPE COLON e= TYPE )
            	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:609:14: g= CLASS d= TYPE COLON e= TYPE
            	        {
            	            g =  this->matchToken(CLASS, &FOLLOW_CLASS_in_classDecl4501);
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            d =  this->matchToken(TYPE, &FOLLOW_TYPE_in_classDecl4505);
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	             this->matchToken(COLON, &FOLLOW_COLON_in_classDecl4507);
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            e =  this->matchToken(TYPE, &FOLLOW_TYPE_in_classDecl4511);
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            {
            	                node= WN_SCRIPTNODE_NEW(WNStruct((d->getText()).c_str(), true, (e->getText()).c_str())); SetLocation(node, g); 
            	            }


            	        }


            	    }
            	    break;

                }
            }

             this->matchToken(LBRACE, &FOLLOW_LBRACE_in_classDecl4538);
            if  (this->hasException())
            {
                goto ruleclassDeclEx;
            }


            // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:612:17: ( (a= declaration SEMICOLON ) | (b= function ) | ( VIRTUAL h= function ) | ( OVERRIDE i= function ) )*

            for (;;)
            {
                int alt41=5;
                alt41 = cdfa41.predict(this, this->get_rec(), this->get_istream(), cdfa41 );
                if  (this->hasException())
                {
                    goto ruleclassDeclEx;
                }

                switch (alt41)
                {
            	case 1:
            	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:613:21: (a= declaration SEMICOLON )
            	    {
            	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:613:21: (a= declaration SEMICOLON )
            	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:613:22: a= declaration SEMICOLON
            	        {
            	            this->followPush(FOLLOW_declaration_in_classDecl4581);
            	            a=declaration();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            {
            	                 node->AddStructElem(a
            	                );
            	            }


            	             this->matchToken(SEMICOLON, &FOLLOW_SEMICOLON_in_classDecl4585);
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	        }


            	    }
            	    break;
            	case 2:
            	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:614:21: (b= function )
            	    {
            	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:614:21: (b= function )
            	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:614:22: b= function
            	        {
            	            this->followPush(FOLLOW_function_in_classDecl4611);
            	            b=function();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            {
            	                 node->AddFunction(b
            	                ); 
            	            }


            	        }


            	    }
            	    break;
            	case 3:
            	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:615:21: ( VIRTUAL h= function )
            	    {
            	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:615:21: ( VIRTUAL h= function )
            	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:615:22: VIRTUAL h= function
            	        {
            	             this->matchToken(VIRTUAL, &FOLLOW_VIRTUAL_in_classDecl4640);
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            this->followPush(FOLLOW_function_in_classDecl4644);
            	            h=function();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            {
            	                 node->AddFunction(h
            	                ); h
            	                ->SetVirtual(); 
            	            }


            	        }


            	    }
            	    break;
            	case 4:
            	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:616:21: ( OVERRIDE i= function )
            	    {
            	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:616:21: ( OVERRIDE i= function )
            	        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:616:22: OVERRIDE i= function
            	        {
            	             this->matchToken(OVERRIDE, &FOLLOW_OVERRIDE_in_classDecl4670);
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            this->followPush(FOLLOW_function_in_classDecl4674);
            	            i=function();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto ruleclassDeclEx;
            	            }


            	            {
            	                 node->AddFunction(i
            	                ); i
            	                ->SetOverride(); 
            	            }


            	        }


            	    }
            	    break;

            	default:
            	    goto loop41;	/* break out of the loop */
            	    break;
                }
            }
            loop41: ; /* Jump out to here if this rule does not match */


            RBRACE58 =  this->matchToken(RBRACE, &FOLLOW_RBRACE_in_classDecl4710);
            if  (this->hasException())
            {
                goto ruleclassDeclEx;
            }


            {
                 SetEndLocation(node, RBRACE58); 
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleclassDeclEx; /* Prevent compiler warnings */
    ruleclassDeclEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}
/* $ANTLR end classDecl */

/**
 * $ANTLR start inc
 * C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:621:1: inc returns [wn_char* file] : INCLUDE STRING ;
 */
wn_char*
WNScriptASTDeprecatedParser::inc()
{
        WNScriptASTDeprecatedParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    wn_char* file;


    const ImplTraits::CommonTokenType* STRING59 = NULL;

    /* Initialize rule variables
     */
     


 
    {
        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:622:5: ( INCLUDE STRING )
        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:622:9: INCLUDE STRING
        {
             this->matchToken(INCLUDE, &FOLLOW_INCLUDE_in_inc4735);
            if  (this->hasException())
            {
                goto ruleincEx;
            }


            STRING59 =  this->matchToken(STRING, &FOLLOW_STRING_in_inc4737);
            if  (this->hasException())
            {
                goto ruleincEx;
            }


            {
                 COPY_STRING((STRING59->getText()).c_str(), file); 
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleincEx; /* Prevent compiler warnings */
    ruleincEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return file;
}
/* $ANTLR end inc */

/**
 * $ANTLR start program
 * C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:625:1: program returns [WNScriptFile* node] : ( function | structDecl | classDecl | inc )* ;
 */
WNScriptFile*
WNScriptASTDeprecatedParser::program()
{
        WNScriptASTDeprecatedParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    WNScriptFile* node;


    WNFunction* function60;
    WNStruct* structDecl61;
    WNStruct* classDecl62;
    wn_char* inc63;
    /* Initialize rule variables
     */
     


        node = WN_SCRIPTNODE_NEW(WNScriptFile());


 
    {
        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:629:5: ( ( function | structDecl | classDecl | inc )* )
        // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:629:9: ( function | structDecl | classDecl | inc )*
        {
            // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:629:9: ( function | structDecl | classDecl | inc )*

            for (;;)
            {
                int alt42=5;
                switch ( this->LA(1) )
                {
                case TYPE:
                	{
                		alt42=1;
                	}
                    break;
                case STRUCT:
                	{
                		alt42=2;
                	}
                    break;
                case CLASS:
                	{
                		alt42=3;
                	}
                    break;
                case INCLUDE:
                	{
                		alt42=4;
                	}
                    break;

                }

                switch (alt42)
                {
            	case 1:
            	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:630:17: function
            	    {
            	        this->followPush(FOLLOW_function_in_program4783);
            	        function60=function();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleprogramEx;
            	        }


            	        {
            	             node->AddFunction(function60
            	            ); 
            	        }


            	    }
            	    break;
            	case 2:
            	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:631:17: structDecl
            	    {
            	        this->followPush(FOLLOW_structDecl_in_program4805);
            	        structDecl61=structDecl();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleprogramEx;
            	        }


            	        {
            	             node->AddStruct(structDecl61
            	            ); 
            	        }


            	    }
            	    break;
            	case 3:
            	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:632:17: classDecl
            	    {
            	        this->followPush(FOLLOW_classDecl_in_program4825);
            	        classDecl62=classDecl();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleprogramEx;
            	        }


            	        {
            	             node->AddStruct(classDecl62
            	            ); 
            	        }


            	    }
            	    break;
            	case 4:
            	    // C:\\Users\\Andre\\Documents\\Development\\WNFramework\\Libraries\\WNScripting\\lang\\WNScriptASTDeprecated.g:633:17: inc
            	    {
            	        this->followPush(FOLLOW_inc_in_program4846);
            	        inc63=inc();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleprogramEx;
            	        }


            	        {
            	             node->AddInclude(inc63
            	            ); 
            	        }


            	    }
            	    break;

            	default:
            	    goto loop42;	/* break out of the loop */
            	    break;
                }
            }
            loop42: ; /* Jump out to here if this rule does not match */


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleprogramEx; /* Prevent compiler warnings */
    ruleprogramEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return node;
}
/* $ANTLR end program */
/* End of parsing rules
 * ==============================================
 */

/* ==============================================
 * Syntactic predicates
 */
/* End of syntactic predicates
 * ==============================================
 */



/* End of code
 * =============================================================================
 */
