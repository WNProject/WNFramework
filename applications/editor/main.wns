// Copyright (c) 2022, WNProject Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

include "renderer/render_data.wns"
include "renderer/render_description.wns"
include "application/application.wns"

class MyPass : PassData {
  .render_targets = shared RenderTargetUsage[](
    RenderTargetUsage(0, clear_mode_clear, store_mode_store)
  );
  .depth_target = RenderTargetUsage(1, clear_mode_clear, store_mode_dont_care);
  .pass_name = "Initial Pass";
}

class MainTarget: RTDescription(shared RenderContext rnd) {
  .name = "MainRT";
  .format = format_r8g8b8a8_unorm;
  shared RenderContext renderer = rnd;
  override Int get_width() {
    return renderer.width();
  }
  override Int get_height() {
    return renderer.height();
  }
}

class DepthTarget: MainTarget(RenderContext rnd) {
  .name = "DepthRT";
  .format = format_d32_float;
  .depth = true;
}

class MainDesc: RenderDescription(shared RenderContext rnd) {
  .render_targets = shared RTDescription[](
    shared MainTarget(rnd),
    shared DepthTarget(rnd)
  );
  .passes = PassData[](MyPass());
  .output_target = 0;
}

Actor Editor : Application(Context ctx_) {
  Context ctx = ctx_;
  shared UI ui = null;
  shared Window window = null;
  shared RenderContext context = null;

  @action override Void setup_application() {
    IntParam adapter = @IntParam("{\"name\":\"adapter\",\"short\":\"a\", \"description\": \"Which graphics adapter to use\"}");
    window = get_window(ctx, 1920, 1080);
    context = get_render_context(ctx, window, adapter.get_param());

    MainDesc desc = MainDesc(context);
    context.register_description(desc);

    ui = get_ui_renderer(ctx);
    context.add_renderable_to_passes(ui, CString[]("Initial Pass"){0:1});
    
    ui.add_document(@UIResource("assets/ui/main.rml"), 100, 100);
    ui.add_document(@UIResource("assets/ui/main.rml"), 200, 200);
    ui.add_document(@UIResource("assets/ui/main.rml"), 300, 300);
    render->next();
  }
  @action Void render() {
    context.render();
    render->next();
  }
}

Application main(Context ctx) {
  Application e = Editor(ctx);
  return e;
}
