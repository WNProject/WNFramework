name: CI
on:
  workflow_call:
    inputs:
      run-build:
        required: false
        default: true
        type: boolean
      run-check-licenses:
        required: false
        default: true
        type: boolean
      run-format-check-c-cpp:
        required: false
        default: true
        type: boolean
      run-format-check-md:
        required: false
        default: true
        type: boolean
      changes-externals:
        required: false
        default: externals/!(CMakeLists.txt)
        type: string
      changes-c-cpp:
        required: false
        default: '**/*.+(c|cpp|h|hpp|inl)'
        type: string
      changes-md:
        required: false
        default: '**/*.md'
        type: string
      use-sccache:
        required: true
        type: boolean
      sccache-write:
        required: false
        default: false
        type: boolean
permissions:
  contents: read
jobs:
  check-licenses:
    name: Check Licenses
    if: inputs.run-check-licenses
    timeout-minutes: 5
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3.2.0
        with:
          submodules: true
      - name: Check external licenses
        run: |
          shopt -s extglob globstar nullglob
          declare -A externals_array
          IFS=$'\n'
          for FILE in $INPUTS_CHANGES; do
              externals_array["$(echo "$FILE" | cut -d/ -f2 | cut -d. -f2)"]=0
          done
          externals=( $(sort <<< "${!externals_array[*]}") )
          unset IFS
          ignore_list=(
            librocket
          )
          manual_mappings=(
            'llvm-project:llvm'
          )
          manual_path_mappings=(
            'llvm:llvm-project/llvm'
          )
          manual_file_mappings=(
            'freetype:freetype/docs/FTL.TXT:Explicitly choosing FTL license for freetype'
            'mit:rlottie/licenses/COPYING.MIT:rlottie uses an unadorned mit copying'
            'mozilla:rlottie/licenses/COPYING.MPL:rlottie copies some files in that are MPL licensed'
            'pix:rlottie/licenses/COPYING.PIX:rlottie copies some files in that are from pixman'
            'skia:rlottie/licenses/COPYING.SKIA:rlottie copies some skia files in'
            'rlottie:rlottie/COPYING:rlottie uses COPYING instead of LICENSE'
          )
          manual_overrides=(
            'antlr3:9a0008a487843ac42b0ffcaf4b6de998f1869094:no single file'
          )
          sanitized_externals=()
          for external in $externals; do
            skip=false
            for manual_mapping in ${manual_mappings[@]}; do
              chunks=(${manual_mapping//:/ })
              if [ "${chunks[0]}" == "$external" ]; then
                echo "$external: (remapped to ${chunks[1]})"
                external=${chunks[1]}
                break
              fi
            done
            for sanitized_external in ${sanitized_externals[@]}; do
              if [ "$sanitized_external" == "$external" ]; then
                skip=true
                break
              fi
            done
            if $skip; then
              continue
            fi
            sanitized_externals+=("$external")
          done
          result=true
          for external in ${sanitized_externals[@]}; do
            skip=false
            for ignore in ${ignore_list[@]}; do
              if [ "$ignore" == "$external" ]; then
                skip=true
                break
              fi
            done
            if $skip; then
              echo "$external: (ignoring)"
              continue
            fi
            license="./externals/LICENSE.$external"
            if [ ! -f "$license" ]; then
              echo "$external: (not found)"
              result=false
              continue
            fi
            path=''
            for manual_path_mapping in ${manual_path_mappings[@]}; do
                chunks=(${manual_path_mapping//:/ })
                if [ "${chunks[0]}" == "$external" ]; then
                  path=${chunks[1]}
                  break
                fi
            done
            if [ -z "$path" ]; then
              path=$external
            fi
            copy_hash=$(cat $license | sha1sum | awk '{print $1}')
            original_hash=''
            reason=''
            for manual_override in "${manual_overrides[@]}"; do
              chunks=()
              IFS=':'; read -ra chunks <<< "$manual_override"; IFS=' '
              if [ "${chunks[0]}" == "$external" ]; then
                original_hash=${chunks[1]}
                reason="${chunks[2]}"
                break
              fi
            done
            for manual_file_mapping in "${manual_file_mappings[@]}"; do
              chunks=()
              IFS=':'; read -ra chunks <<< "$manual_file_mapping"; IFS=' '
              if [ "${chunks[0]}" == "$external" ]; then
                original_hash=$(
                  cat "./externals/${chunks[1]}" | sha1sum | awk '{print $1}'
                )
                reason="${chunks[2]}"
                break
              fi
            done
            if [ -z "$original_hash" ]; then
              original_license=$(
                find ./externals/$path -maxdepth 1 -mindepth 1 \
                -type f -iregex '^\.\/externals\/.+\/license\(\..+\)?$'
              )
              if [ -z "$original_license" ]; then
                echo "$external: (original not found)"
                result=false
                continue
              fi
              original_hash=$(
                cat "$original_license" | sha1sum | awk '{print $1}'
              )
              if [ "$copy_hash" == "$original_hash" ]; then
                echo "$external: $copy_hash (matches)"
              else
                echo "$external: $copy_hash (does not match)"
                result=false
              fi
            else
              echo "$external: $original_hash (overridden: $reason)"
            fi
          done
          if ! $result; then
            exit 1
          fi
        env:
          INPUTS_CHANGES: ${{inputs.changes-externals}}
  check-formatting-c-cpp:
    name: Check Formatting (C/C++)
    if: inputs.run-format-check-c-cpp
    timeout-minutes: 5
    runs-on: ubuntu-latest
    container: ghcr.io/wnproject/clang-format
    steps:
      - name: Checkout
        uses: actions/checkout@v3.2.0
      - name: Check formatting
        shell: bash
        run: |
          shopt -s extglob globstar nullglob
          IFS=$'\n'
          for FILE in $INPUTS_CHANGES; do
            clang-format --dry-run --Werror "$FILE"
          done
        env:
          INPUTS_CHANGES: ${{inputs.changes-c-cpp}}
  check-formatting-md:
    name: Check Formatting (Markdown)
    if: inputs.run-format-check-md
    timeout-minutes: 5
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3.2.0
      - name: Check formatting
        uses: davidanson/markdownlint-cli2-action@v8.0.0
        with:
          globs: ${{inputs.changes-md}}
  build-android:
    name: Build Android
    if: inputs.run-build
    timeout-minutes: 120
    runs-on: ubuntu-latest
    container: ghcr.io/wnproject/build-android
    strategy:
      fail-fast: false
      matrix:
        architecture:
          - armeabi-v7a
          - arm64-v8a
          - x86
        build-type:
          - Debug
          - Release
    steps:
      - name: Set up build environment
        run: mkdir build
      - name: Checkout
        uses: actions/checkout@v3.2.0
        with:
          path: ./source
          submodules: true
      - name: Set up GCS for sccache
        if: inputs.use-sccache
        shell: bash
        run: |
          KEY_PATH="$RUNNER_TEMP/gcs_key.json"
          echo "$GCS_KEY" > "$KEY_PATH"
          echo "SCCACHE_GCS_BUCKET=$GCS_BUCKET" >> $GITHUB_ENV
          echo "SCCACHE_GCS_KEY_PATH=$KEY_PATH" >> $GITHUB_ENV
          RW_MODE=$(
            [ "$INPUTS_SCCACHE_WRITE" == 'true' ] &&
            echo 'READ_WRITE' ||
            echo 'READ_ONLY'
          )
          echo "SCCACHE_GCS_RW_MODE=$RW_MODE" >> $GITHUB_ENV
          echo "SCCACHE_IGNORE_SERVER_IO_ERROR=1" >> $GITHUB_ENV
        env:
          INPUTS_SCCACHE_WRITE: ${{inputs.sccache-write}}
          GCS_BUCKET: ${{secrets.SCCACHE_GCS_BUCKET}}
          GCS_KEY: ${{secrets.SCCACHE_GCS_KEY}}
      - name: Run configuration
        working-directory: ./build
        run: >
          cmake -GNinja
          -DCMAKE_BUILD_TYPE="$BUILT_TYPE"
          -DCMAKE_TOOLCHAIN_FILE="$OVERLAY/android.toolchain.cmake"
          -DWN_ANDROID_ABIS="$ARCHITECTURE"
          -DWN_ANDROID_SDK=/opt/android-sdk
          -DWN_ANDROID_NDK=/opt/android-sdk/ndk/23.2.8568313
          -DWN_LOW_RESOURCE_MODE=ON
          -DWN_USE_SCCACHE="$USE_SCCACHE"
          ../source
        env:
          ARCHITECTURE: ${{matrix.architecture}}
          BUILT_TYPE: ${{matrix.build-type}}
          OVERLAY: ${{github.workspace}}/source/Overlays/Posix/Overlays/Android
          USE_SCCACHE: ${{inputs.use-sccache && 'ON' || 'OFF' }}
      - name: Run build (host tools)
        working-directory: ./build/host/externals/llvm-project/llvm
        run: cmake --build . --target llvm-tblgen
      - name: 'Run build (platform: ${{matrix.architecture}})'
        working-directory: ./build/${{matrix.architecture}}
        run: cmake --build .
      - name: Run build (apks)
        working-directory: ./build
        run: cmake --build .
      - name: Run tests
        working-directory: ./build
        run: ctest -C "$BUILD_TYPE" -LE REQUIRES_HARDWARE --output-on-failure
        env:
          BUILD_TYPE: ${{matrix.build-type}}
      - name: Report build details
        run: du -hbcs ./source ./build
  build-linux:
    name: Build Linux
    if: inputs.run-build
    timeout-minutes: 120
    runs-on: ubuntu-latest
    container: ghcr.io/wnproject/build-linux:${{matrix.compiler}}
    strategy:
      fail-fast: false
      matrix:
        compiler:
          - clang-10
          - clang-11
          - clang-12
          - gcc-9
          - gcc-10
          - gcc-11
        build-type:
          - Debug
          - Release
    steps:
      - name: Set up build environment
        run: mkdir build
      - name: Checkout
        uses: actions/checkout@v3.2.0
        with:
          path: ./source
          submodules: true
      - name: Set up GCS for sccache
        if: inputs.use-sccache
        shell: bash
        run: |
          KEY_PATH="$RUNNER_TEMP/gcs_key.json"
          echo "$GCS_KEY" > "$KEY_PATH"
          echo "SCCACHE_GCS_BUCKET=$GCS_BUCKET" >> $GITHUB_ENV
          echo "SCCACHE_GCS_KEY_PATH=$KEY_PATH" >> $GITHUB_ENV
          RW_MODE=$(
            [ "$INPUTS_SCCACHE_WRITE" == 'true' ] &&
            echo 'READ_WRITE' ||
            echo 'READ_ONLY'
          )
          echo "SCCACHE_GCS_RW_MODE=$RW_MODE" >> $GITHUB_ENV
          echo "SCCACHE_IGNORE_SERVER_IO_ERROR=1" >> $GITHUB_ENV
        env:
          INPUTS_SCCACHE_WRITE: ${{inputs.sccache-write}}
          GCS_BUCKET: ${{secrets.SCCACHE_GCS_BUCKET}}
          GCS_KEY: ${{secrets.SCCACHE_GCS_KEY}}
      - name: Run configuration
        working-directory: ./build
        run: >
          cmake -GNinja
          -DCMAKE_BUILD_TYPE="$BUILD_TYPE"
          -DWN_LOW_RESOURCE_MODE=ON
          -DWN_USE_SCCACHE="$USE_SCCACHE"
          ../source
        env:
          BUILD_TYPE: ${{matrix.build-type}}
          USE_SCCACHE: ${{inputs.use-sccache && 'ON' || 'OFF' }}
      - name: Run build
        working-directory: ./build
        run: cmake --build .
      - name: Run tests
        working-directory: ./build
        run: ctest -C "$BUILD_TYPE" -LE REQUIRES_HARDWARE --output-on-failure
        env:
          BUILD_TYPE: ${{matrix.build-type}}
      - name: Report build details
        run: du -hbcs ./source ./build
  build-windows:
    name: Build Windows
    if: inputs.run-build
    timeout-minutes: 120
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        compiler:
          - msvc-15
          - msvc-16
        build-type:
          - Debug
          - Release
    steps:
      - name: Set up build environment
        id: build-environment
        run: |
          mkdir build
          $package = 'ghcr.io/wnproject/build-windows'
          $docker_image = "${package}:$env:COMPILER".ToLower()
          "docker-image=$docker_image" >> $env:GITHUB_OUTPUT
        env:
          COMPILER: ${{matrix.compiler}}
      - name: Checkout
        uses: actions/checkout@v3.2.0
        with:
          path: ./source
          submodules: true
      - name: Set up GCS for sccache
        if: inputs.use-sccache
        shell: bash
        run: |
          KEY_PATH="$GITHUB_WORKSPACE/gcs_key.json"
          echo "$GCS_KEY" > "$KEY_PATH"
          echo "SCCACHE_GCS_BUCKET=$GCS_BUCKET" >> $GITHUB_ENV
          RW_MODE=$(
            [ "$INPUTS_SCCACHE_WRITE" == 'true' ] &&
            echo 'READ_WRITE' ||
            echo 'READ_ONLY'
          )
          echo "SCCACHE_GCS_RW_MODE=$RW_MODE" >> $GITHUB_ENV
          echo "SCCACHE_IGNORE_SERVER_IO_ERROR=1" >> $GITHUB_ENV
        env:
          INPUTS_SCCACHE_WRITE: ${{inputs.sccache-write}}
          GCS_BUCKET: ${{secrets.SCCACHE_GCS_BUCKET}}
          GCS_KEY: ${{secrets.SCCACHE_GCS_KEY}}
      - name: Pull container
        run: docker pull $env:DOCKER_IMAGE
        env:
          DOCKER_IMAGE: ${{steps.build-environment.outputs.docker-image}}
      - name: Run configuration
        run: >
          docker run --rm
          -e SCCACHE_GCS_BUCKET="$env:SCCACHE_GCS_BUCKET"
          -e SCCACHE_GCS_KEY_PATH=C:\workspace\gcs_key.json
          -e SCCACHE_GCS_RW_MODE="$env:SCCACHE_GCS_RW_MODE"
          -e SCCACHE_IGNORE_SERVER_IO_ERROR="$env:SCCACHE_IGNORE_SERVER_IO_ERROR"
          -v ${{github.workspace}}:C:\workspace
          $env:DOCKER_IMAGE
          cmake -GNinja -S C:\workspace\source -B C:\workspace\build
          -DCMAKE_BUILD_TYPE="$env:BUILD_TYPE"
          -DWN_LOW_RESOURCE_MODE=ON
          -DWN_USE_SCCACHE="$env:USE_SCCACHE"
        env:
          BUILD_TYPE: ${{matrix.build-type}}
          DOCKER_IMAGE: ${{steps.build-environment.outputs.docker-image}}
          USE_SCCACHE: ${{inputs.use-sccache && 'ON' || 'OFF' }}
      - name: Run build
        run: >
          docker run --rm
          -e SCCACHE_GCS_BUCKET="$env:SCCACHE_GCS_BUCKET"
          -e SCCACHE_GCS_KEY_PATH=C:\workspace\gcs_key.json
          -e SCCACHE_GCS_RW_MODE="$env:SCCACHE_GCS_RW_MODE"
          -e SCCACHE_IGNORE_SERVER_IO_ERROR="$env:SCCACHE_IGNORE_SERVER_IO_ERROR"
          -v ${{github.workspace}}:C:\workspace
          $env:DOCKER_IMAGE
          cmake --build C:\workspace\build
        env:
          DOCKER_IMAGE: ${{steps.build-environment.outputs.docker-image}}
      - name: Run tests
        run: >
          docker run --rm
          -v ${{github.workspace}}:C:\workspace
          $env:DOCKER_IMAGE
          "cd C:\workspace\build;
          ctest -C $env:BUILD_TYPE
          -LE REQUIRES_HARDWARE
          --output-on-failure"
        env:
          BUILD_TYPE: ${{matrix.build-type}}
          DOCKER_IMAGE: ${{steps.build-environment.outputs.docker-image}}
      - name: Report build details
        shell: bash
        run: du -hbcs ./source ./build
  build:
    name: Build
    needs:
      - build-android
      - build-linux
      - build-windows
    if: always()
    timeout-minutes: 5
    runs-on: ubuntu-latest
    steps:
      - name: Accumulate build status
        shell: bash
        run: |
          results=( $BUILD_RESULTS )
          for result in "${results[@]}"; do
            if [ "$result" != success ] && [ "$result" != skipped ]; then
              echo Oh no...☹️ the build has failed!
              exit 1
            fi
          done
          echo Yay! The build has succeeded! 🎉
        env:
          BUILD_RESULTS: ${{join(needs.*.result, ' ')}}
