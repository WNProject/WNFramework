name: CI
on:
  pull_request:
    branches: master
  push:
    branches: master
concurrency: 
  group: ci-${{github.ref}}
  cancel-in-progress: ${{github.ref != 'refs/heads/master'}}
jobs:
  analyze-changes:
    name: Analyze changes
    runs-on: ubuntu-latest
    outputs:
      run-build: ${{steps.analysis.outputs.run-build}}
      run-check-licenses: ${{steps.analysis.outputs.run-check-licenses}}
      run-format-check-c-cpp: ${{steps.analysis.outputs.run-format-check-c-cpp}}
      run-format-check-md: ${{steps.analysis.outputs.run-format-check-md}}
      changes-externals: ${{steps.analysis.outputs.changes-externals}}
      changes-c-cpp: ${{steps.analysis.outputs.changes-c-cpp}}
      changes-md: ${{steps.analysis.outputs.changes-md}}
    steps:
      - name: Checkout
        uses: actions/checkout@v2.3.4
        with:
          fetch-depth: 0
      - name: Analyze changes
        id: analysis
        shell: bash
        run: |
          if [ ${{github.ref}} == refs/heads/master ]; then
            build=true
            check_licenses=true
            format_check_c_cpp=true
            format_check_md=true
            changes_externals=$(
              find externals/ -mindepth 1 -maxdepth 1 \
              -type f -iname LICENSE.* -or -type d -and -not -iname .patches |
              cut -d. -f2 | cut -d/ -f2 | sort | uniq
            )
            changes_c_cpp=$(
              find . -type f \
              -iregex '^.*\.\(c\|cpp\|h\|hpp\|inl\)$' -and -not \
              -iregex '^\.\/externals.*$' | sort
            )
            changes_md=$(find . -type f -iname '*.md' | sort)
          else
            build_ignore=()
            while IFS= read -r line || [[ "$line" ]]; do
              build_ignore+=(':!'"$line")
            done < .build-ignore
            build_changes=$(
              git diff --name-status origin/master HEAD -- ${build_ignore[@]} |
              sort
            )
            if [ -z "$build_changes" ]; then
              build=false
            else
              build=true
            fi
            changes_externals=$(
              git diff --name-only origin/master HEAD -- \
              externals/ ':!externals/CMakeLists.txt' ':!externals/*/*' |
              cut -d. -f2 | cut -d/ -f2 | sort | uniq
            )
            if [ -z "$changes_externals" ]; then
              check_licenses=false
            else
              check_licenses=true
            fi
            changes_c_cpp=$(
              git diff --diff-filter=d --name-only origin/master HEAD -- \
              ':!externals/*/*' '*.c' '*.cpp' '*.h' '*.hpp' '*.inl' \
              .clang-format
            )
            if [ -z "$changes_c_cpp" ]; then
              format_check_c_cpp=false
            else
              format_check_c_cpp=true
              changes_c_cpp=$(
                echo "$changes_c_cpp" | grep -v .clang-format || true | sort
              )
            fi
            changes_md=$(
              git diff --diff-filter=d --name-only origin/master HEAD -- \
              '*.md' .markdownlintrc .markdownlintignore
            )
            if [ -z "$changes_md" ]; then
              format_check_md=false
            else
              format_check_md=true
              changes_md=$(
                echo "$changes_md" | grep -v .markdownlint || true | sort
              )
            fi
          fi
          echo "Run build: $build"
          echo "Run license check: $check_licenses"
          echo "Run format check (C/C++): $format_check_c_cpp"
          echo "Run format check (Markdown): $format_check_md"
          if [ -z "$build_changes" ]; then
            echo 'Changes affecting build: [none]'
          else
            echo -e "Changes affecting build:\n$build_changes"
          fi
          if [ -z "$changes_externals" ]; then
            echo 'Changes (Externals): [none]'
          else
            echo -e "Changes (Externals):\n$changes_externals"
          fi
          if [ -z "$changes_c_cpp" ]; then
            echo 'Changes (C/C++): [none]'
          else
            echo -e "Changes (C/C++):\n$changes_c_cpp"
          fi
          if [ -z "$changes_md" ]; then
            echo 'Changes (Markdown): [none]'
          else
            echo -e "Changes (Markdown):\n$changes_md"
          fi
          changes_externals=${changes_externals//$'\n'/'\0'}
          changes_c_cpp=${changes_c_cpp//$'\n'/'\0'}
          changes_md=${changes_md//$'\n'/'\0'}
          echo "::set-output name=run-build::$build"
          echo "::set-output name=run-check-licenses::$check_licenses"
          echo "::set-output name=run-format-check-c-cpp::$format_check_c_cpp"
          echo "::set-output name=run-format-check-md::$format_check_md"
          echo "::set-output name=changes-externals::$changes_externals"
          echo "::set-output name=changes-c-cpp::$changes_c_cpp"
          echo "::set-output name=changes-md::$changes_md"
  check-licenses:
    name: Check licenses
    needs: analyze-changes
    if: needs.analyze-changes.outputs.run-check-licenses == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2.3.4
        with:
          submodules: true
      - name: Check external licenses
        run: |
          externals='${{needs.analyze-changes.outputs.changes-externals}}'
          externals=${externals//'\0'/$'\n'}
          ignore_list=(
            librocket
          )
          manual_mappings=(
            'llvm-project:llvm'
          )
          manual_path_mappings=(
            'llvm:llvm-project/llvm'
          )
          manual_overrides=(
            'xxhash:c4d6fd586b63b3e25a4ed28a23210791db46df98:only using xxhash'
            'antlr3:9a0008a487843ac42b0ffcaf4b6de998f1869094:no single file'
          )
          sanitized_externals=()
          for external in $externals; do
            skip=false
            for manual_mapping in ${manual_mappings[@]}; do
              chunks=(${manual_mapping//:/ })
              if [ "${chunks[0]}" == "$external" ]; then
                echo "$external: (remapped to ${chunks[1]})"
                external=${chunks[1]}
                break
              fi
            done
            for sanitized_external in ${sanitized_externals[@]}; do
              if [ "$sanitized_external" == "$external" ]; then
                skip=true
                break
              fi
            done
            if $skip; then
              continue
            fi
            sanitized_externals+=("$external")
          done
          result=true
          for external in ${sanitized_externals[@]}; do
            skip=false
            for ignore in ${ignore_list[@]}; do
              if [ "$ignore" == "$external" ]; then
                skip=true
                break
              fi
            done
            if $skip; then
              echo "$external: (ignoring)"
              continue
            fi
            license="./externals/LICENSE.$external"
            if [ ! -f "$license" ]; then
              echo "$external: (not found)"
              result=false
              continue
            fi
            path=''
            for manual_path_mapping in ${manual_path_mappings[@]}; do
                chunks=(${manual_path_mapping//:/ })
                if [ "${chunks[0]}" == "$external" ]; then
                  path=${chunks[1]}
                  break
                fi
            done
            if [ -z "$path" ]; then
              path=$external
            fi
            copy_hash=$(cat $license | sha1sum | awk '{print $1}')
            original_hash=''
            reason=''
            for manual_override in "${manual_overrides[@]}"; do
              chunks=()
              IFS=':'; read -ra chunks <<< "$manual_override"; IFS=' '
              if [ "${chunks[0]}" == "$external" ]; then
                original_hash=${chunks[1]}
                reason="${chunks[2]}"
                break
              fi
            done
            if [ -z "$original_hash" ]; then
              original_license=$(
                find ./externals/$path -maxdepth 1 -mindepth 1 \
                -type f -iname 'LICENSE*'
              )
              if [ -z "$original_license" ]; then
                echo "$external: (original not found)"
                result=false
                continue
              fi
              original_hash=$(
                cat "$original_license" | sha1sum | awk '{print $1}'
              )
              if [ "$copy_hash" == "$original_hash" ]; then
                echo "$external: $copy_hash (matches)"
              else
                echo "$external: $copy_hash (does not match)"
                result=false
              fi
            else
              echo "$external: $original_hash (overridden: $reason)"
            fi
          done
          if ! $result; then
            exit 1
          fi
  check-formatting-c-cpp:
    name: Check formatting (C/C++)
    needs: analyze-changes
    if: needs.analyze-changes.outputs.run-format-check-c-cpp == 'true'
    runs-on: ubuntu-latest
    container: ghcr.io/wnproject/clang-format
    steps:
      - name: Checkout
        uses: actions/checkout@v2.3.4
      - name: Check formatting
        run: >
          echo -n "${{needs.analyze-changes.outputs.changes-c-cpp}}" |
          xargs -0 clang-format --dry-run --Werror
  check-formatting-md:
    name: Check formatting (Markdown)
    needs: analyze-changes
    if: needs.analyze-changes.outputs.run-format-check-md == 'true'
    runs-on: ubuntu-latest
    container: ghcr.io/wnproject/markdown-lint
    steps:
      - name: Checkout
        uses: actions/checkout@v2.3.4
      - name: Check formatting
        run: >
          echo -n "${{needs.analyze-changes.outputs.changes-md}}" |
          xargs -0 markdownlint
  build-android:
    name: Build Android
    needs: analyze-changes
    if: needs.analyze-changes.outputs.run-build == 'true'
    runs-on: ubuntu-latest
    container: ghcr.io/wnproject/build-android
    strategy:
      fail-fast: false
      matrix:
        architecture:
          - armeabi-v7a
          - arm64-v8a
          - x86
        build-type:
          - Debug
          - Release
    steps:
      - name: Set up build environment
        run: mkdir build
      - name: Checkout
        uses: actions/checkout@v2.3.4
        with:
          path: ./source
          submodules: true
      - name: Set up gcs key
        shell: bash
        run: echo "$GCS_KEY" > /tmp/gcs_key.json
        env:
          GCS_KEY: ${{secrets.SCCACHE_GCS_KEY}}
      - name: Run configuration
        working-directory: ./build
        run: >
          cmake -GNinja
          -DCMAKE_BUILD_TYPE=${{matrix.build-type}}
          -DCMAKE_TOOLCHAIN_FILE=${OVERLAY}/android.toolchain.cmake
          -DWN_ANDROID_ABIS=${{matrix.architecture}}
          -DWN_ANDROID_SDK=/opt/android-sdk
          -DWN_LOW_RESOURCE_MODE=ON
          -DWN_USE_SCCACHE=ON
          ../source
        env:
          OVERLAY: ${{github.workspace}}/source/Overlays/Posix/Overlays/Android
          SCCACHE_GCS_BUCKET: ${{secrets.SCCACHE_GCS_BUCKET}}
          SCCACHE_GCS_KEY_PATH: /tmp/gcs_key.json
          SCCACHE_GCS_RW_MODE: READ_WRITE
      - name: Run build (host tools)
        working-directory: ./build/host/externals/llvm-project/llvm
        run: cmake --build . --target llvm-tblgen
        env:
          SCCACHE_GCS_BUCKET: ${{secrets.SCCACHE_GCS_BUCKET}}
          SCCACHE_GCS_KEY_PATH: /tmp/gcs_key.json
          SCCACHE_GCS_RW_MODE: READ_WRITE
      - name: 'Run build (platform: ${{matrix.architecture}})'
        working-directory: ./build/${{matrix.architecture}}
        run: cmake --build .
        env:
          SCCACHE_GCS_BUCKET: ${{secrets.SCCACHE_GCS_BUCKET}}
          SCCACHE_GCS_KEY_PATH: /tmp/gcs_key.json
          SCCACHE_GCS_RW_MODE: READ_WRITE
      - name: Run build (apks)
        working-directory: ./build
        run: cmake --build .
        env:
          SCCACHE_GCS_BUCKET: ${{secrets.SCCACHE_GCS_BUCKET}}
          SCCACHE_GCS_KEY_PATH: /tmp/gcs_key.json
          SCCACHE_GCS_RW_MODE: READ_WRITE
      - name: Run tests
        working-directory: ./build
        run: >
          ctest -C ${{matrix.build-type}}
          -LE REQUIRES_HARDWARE --output-on-failure
      - name: Report build details
        if: success() || failure()
        run: du -hbcs ./source ./build
  build-linux:
    name: Build Linux
    needs: analyze-changes
    if: needs.analyze-changes.outputs.run-build == 'true'
    runs-on: ubuntu-latest
    container: ghcr.io/wnproject/build-linux:${{matrix.compiler}}
    strategy:
      fail-fast: false
      matrix:
        compiler:
          - clang-9
          - clang-10
          - gcc-9
          - gcc-10
        build-type:
          - Debug
          - Release
    steps:
      - name: Set up build environment
        run: mkdir build
      - name: Checkout
        uses: actions/checkout@v2.3.4
        with:
          path: ./source
          submodules: true
      - name: Set up gcs key
        shell: bash
        run: echo "$GCS_KEY" > /tmp/gcs_key.json
        env:
          GCS_KEY: ${{secrets.SCCACHE_GCS_KEY}}
      - name: Run configuration
        working-directory: ./build
        run: >
          cmake -GNinja
          -DCMAKE_BUILD_TYPE=${{matrix.build-type}}
          -DWN_USE_SCCACHE=ON
          ../source
        env:
          SCCACHE_GCS_BUCKET: ${{secrets.SCCACHE_GCS_BUCKET}}
          SCCACHE_GCS_KEY_PATH: /tmp/gcs_key.json
          SCCACHE_GCS_RW_MODE: READ_WRITE
      - name: Run build
        working-directory: ./build
        run: cmake --build .
        env:
          SCCACHE_GCS_BUCKET: ${{secrets.SCCACHE_GCS_BUCKET}}
          SCCACHE_GCS_KEY_PATH: /tmp/gcs_key.json
          SCCACHE_GCS_RW_MODE: READ_WRITE
      - name: Run tests
        working-directory: ./build
        run: >
          ctest -C ${{matrix.build-type}}
          -LE REQUIRES_HARDWARE --output-on-failure
      - name: Report build details
        if: success() || failure()
        run: du -hbcs ./source ./build
  build-windows:
    name: Build Windows
    needs: analyze-changes
    if: needs.analyze-changes.outputs.run-build == 'true'
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        compiler:
          - msvc-15
          - msvc-16
        build-type:
          - Debug
          - Release
    steps:
      - name: Set up build environment
        id: build-environment
        run: |
          mkdir build
          $package = 'ghcr.io/wnproject/build-windows'
          $docker_image = "${package}:${{matrix.compiler}}".ToLower()
          echo "::set-output name=docker-image::$docker_image"
      - name: Checkout
        uses: actions/checkout@v2.3.4
        with:
          path: ./source
          submodules: true
      - name: Set up gcs key
        shell: bash
        run: echo "$GCS_KEY" > gcs_key.json
        env:
          GCS_KEY: ${{secrets.SCCACHE_GCS_KEY}}
      - name: Pull container
        run: docker pull ${{steps.build-environment.outputs.docker-image}}
      - name: Run configuration
        run: >
          docker run --rm
          -e SCCACHE_GCS_BUCKET=${{secrets.SCCACHE_GCS_BUCKET}}
          -e SCCACHE_GCS_KEY_PATH=C:\workspace\gcs_key.json
          -e SCCACHE_GCS_RW_MODE=READ_WRITE
          -v ${{github.workspace}}:C:\workspace
          ${{steps.build-environment.outputs.docker-image}}
          cmake -GNinja -S C:\workspace\source -B C:\workspace\build
          -DCMAKE_BUILD_TYPE=${{matrix.build-type}}
          -DWN_LOW_RESOURCE_MODE=ON
          -DWN_USE_SCCACHE=ON
      - name: Run build
        run: >
          docker run --rm
          -e SCCACHE_GCS_BUCKET=${{secrets.SCCACHE_GCS_BUCKET}}
          -e SCCACHE_GCS_KEY_PATH=C:\workspace\gcs_key.json
          -e SCCACHE_GCS_RW_MODE=READ_WRITE
          -v ${{github.workspace}}:C:\workspace
          ${{steps.build-environment.outputs.docker-image}}
          cmake --build C:\workspace\build
      - name: Run tests
        run: >
          docker run --rm
          -v ${{github.workspace}}:C:\workspace
          ${{steps.build-environment.outputs.docker-image}}
          "cd C:\workspace\build;
          ctest -C ${{matrix.build-type}}
          -LE REQUIRES_HARDWARE
          --output-on-failure"
      - name: Report build details
        if: success() || failure()
        shell: bash
        run: du -hbcs ./source ./build
  build:
    name: Build
    needs:
      - build-android
      - build-linux
      - build-windows
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Accumulate build status
        shell: bash
        run: |
          results=( ${{join(needs.*.result, ' ')}} )
          for result in "${results[@]}"; do
            if [ "$result" != success ] && [ "$result" != skipped ]; then
              echo Oh no...☹️ the build has failed!
              exit 1
            fi
          done
          echo Yay! The build has succeeded! 🎉
