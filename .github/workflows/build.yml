name: Build
on:
  pull_request:
  push:
    branches:
      - master
jobs:
  check-code-formatting-c-cpp:
    name: Check code formatting (C/C++)
    runs-on: ubuntu-latest
    container: ghcr.io/wnproject/clang-format
    steps:
      - name: Checkout code
        uses: actions/checkout@v2.3.3
      - name: Check code format
        run: >
          find . -type f
          -iregex '^.*\.\(c\|cpp\|h\|hpp\)$' -and -not
          -iregex '^\.\/\(externals\|build.*\).*$' |
          xargs clang-format --dry-run --Werror --verbose
  build-linux:
    name: 'Build (Linux: x86-64/${{matrix.compiler}}-${{matrix.version}}/${{matrix.build-type}})'
    runs-on: ubuntu-latest
    container: ghcr.io/wnproject/build-linux:${{matrix.compiler}}-${{matrix.version}}
    strategy:
      fail-fast: false
      matrix:
        compiler: [clang, gcc]
        version: [9, 10]
        build-type: [Debug, Release]
    steps:
      - name: Set up build environment
        run: mkdir build
      - name: Checkout code
        uses: actions/checkout@v2.3.3
        with:
          path: ./source
          submodules: true
      - name: Run configuration
        working-directory: ./build
        run: cmake -GNinja -DCMAKE_BUILD_TYPE=${{matrix.build-type}} ../source
      - name: Run build
        working-directory: ./build
        run: cmake --build .
      - name: Report build details
        if: success() || failure()
        run: du -hbcs ./source ./build
  build-windows:
    name: 'Build (Windows: ${{matrix.architecture}}/msvc-${{matrix.version}}/${{matrix.build-type}})'
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        version: [15, 16]
        architecture: [x86, x86-64]
        build-type: [Debug, Release]
    env:
      PACKAGE: ghcr.io/${{github.repository_owner}}/build-windows
    steps:
      - name: Determine additional info
        id: info
        run: |
          if ("${{matrix.architecture}}" -eq 'x86-64') {
            $cmake_host = 'x64'
            $cmake_architecture = $cmake_host
            $vs_arch = 'amd64'
          } else {
            $cmake_host = "${{matrix.architecture}}"
            $cmake_architecture = 'Win32'
            $vs_arch = "${{matrix.architecture}}"
          }
          $docker_image = "${{env.PACKAGE}}:msvc-${{matrix.version}}".ToLower()
          echo "::set-output name=cmake_host::$cmake_host"
          echo "::set-output name=cmake_architecture::$cmake_architecture"
          echo "::set-output name=vs_arch::$vs_arch"
          echo "::set-output name=docker_image::$docker_image"
      - name: Set up build environment
        run: mkdir build
      - name: Checkout code
        uses: actions/checkout@v2.3.3
        with:
          path: ./source
          submodules: true
      - name: Set up GCS Key
        run: echo $GCS_KEY > gcs_key.json
        shell: bash
        env:
          GCS_KEY: ${{secrets.SCCACHE_GCS_KEY}}
      - name: Pull container
        run: docker pull ${{steps.info.outputs.docker_image}}
      - name: Run configuration
        run: >
          docker run --rm
          -e VS_ARCH=${{steps.info.outputs.vs_arch}}
          -e DEBUG=1
          -v ${{github.workspace}}:C:\workspace
          -e SCCACHE_GCS_BUCKET=${{secrets.SCCACHE_GCS_BUCKET}}
          -e SCCACHE_GCS_KEY_PATH=C:\workspace\gcs_key.json
          -e SCCACHE_GCS_RW_MODE=READ_WRITE
          ${{steps.info.outputs.docker_image}}
          cmake -GNinja -S C:\workspace\source -B C:\workspace\build
          -DCMAKE_BUILD_TYPE=${{matrix.build-type}}
          -DWN_LOW_RESOURCE_MODE=ON
          -DWN_USE_SCCACHE=ON
      - name: Run build
        run: >
          docker run --rm
          -e VS_ARCH=${{steps.info.outputs.vs_arch}}
          -e DEBUG=1
          -v ${{github.workspace}}:C:\workspace
          -e SCCACHE_GCS_BUCKET=${{secrets.SCCACHE_GCS_BUCKET}}
          -e SCCACHE_GCS_KEY_PATH=C:\workspace\gcs_key.json
          -e SCCACHE_GCS_RW_MODE=READ_WRITE
          ${{steps.info.outputs.docker_image}}
          cmake --build C:\workspace\build
      - name: Report build details
        if: success() || failure()
        shell: bash
        run: du -hbcs ./source ./build
