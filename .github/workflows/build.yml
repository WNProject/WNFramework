name: Build
on:
  pull_request:
  push:
    branches:
      - master
jobs:
  analyze-changes:
    name: Analyze changes
    if: github.ref != 'refs/heads/master'
    runs-on: ubuntu-latest
    outputs:
      run-build: ${{steps.change-analysis.outputs.run-build}}
      run-format-check: ${{steps.change-analysis.outputs.run-format-check}}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2.3.4
        with:
          fetch-depth: 0
      - name: Analyze changes
        id: change-analysis
        shell: bash
        run: >
          changes=$(
            git diff --name-only origin/master HEAD -- \
            ':!*.md' ':!*.asciidoc' ':!.github/CODEOWNERS' ':!externals/*/*' \
            ':!.github/workflows/rebase.yml' ':!.github/labels.yml' \
            ':!.github/dependabot.yml' ':!.github/workflows/sync-labels.yml' |
            wc -l
          );
          (( $changes != 0 )) && changes='true' || changes='false';
          echo "::set-output name=run-build::$changes";
          echo "Run build: $changes";
          changes=$(
            git diff --name-only origin/master HEAD -- \
            ':!externals/*/*' *.c *.cpp *.h *.hpp *.inl |
            wc -l
          );
          (( $changes != 0 )) && changes='true' || changes='false';
          echo "::set-output name=run-format-check::$changes";
          echo "Run format check: $changes"
  check-code-formatting:
    name: Check code formatting
    needs: analyze-changes
    if:
      needs.analyze-changes.outputs.run-format-check == 'true' ||
      github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    container: ghcr.io/wnproject/clang-format
    steps:
      - name: Checkout code
        uses: actions/checkout@v2.3.4
        with:
          fetch-depth: 0
      - name: Check code format
        run: >
          git diff --name-only origin/master HEAD --
          ':!externals/*/*' *.c *.cpp *.h *.hpp *.inl |
          xargs clang-format --dry-run --Werror
  build-android:
    name: 'Build: Android'
    needs: analyze-changes
    if:
      needs.analyze-changes.outputs.run-build == 'true' ||
      github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    container: ghcr.io/wnproject/build-android
    strategy:
      fail-fast: false
      matrix:
        architecture: [armeabi-v7a, arm64-v8a, x86]
        build-type: [Debug, Release]
    steps:
      - name: Set up build environment
        run: mkdir build
  build-linux:
    name: 'Build: Linux'
    needs: analyze-changes
    if:
      needs.analyze-changes.outputs.run-build == 'true' ||
      github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    container: ghcr.io/wnproject/build-linux:${{matrix.compiler}}
    strategy:
      fail-fast: false
      matrix:
        compiler: [clang-9, clang-10, gcc-9, gcc-10]
        build-type: [Debug, Release]
    steps:
      - name: Set up build environment
        run: mkdir build
  build-windows:
    name: 'Build: Windows'
    needs: analyze-changes
    if:
      needs.analyze-changes.outputs.run-build == 'true' ||
      github.ref == 'refs/heads/master'
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        compiler: [msvc-15, msvc-16]
        build-type: [Debug, Release]
    env:
      PACKAGE: ghcr.io/${{github.repository_owner}}/build-windows
    steps:
      - name: Determine additional info
        id: info
        run: |
          $docker_image = "${{env.PACKAGE}}:${{matrix.compiler}}".ToLower()
          echo "::set-output name=docker_image::$docker_image"
      - name: Set up build environment
        run: mkdir build; exit 1
  build:
    name: Build
    needs:
      - build-android
      - build-linux
      - build-windows
    if: (!contains(needs.*.result, 'skipped') && !cancelled())
    runs-on: ubuntu-latest
    steps:
      - name: Accumulate build status
        run: |
          results=( ${{join(needs.*.result, ' ')}} )
          for result in "${results[@]}"; do
            if [[ "$result" != 'success' ]]; then
              exit 1
            fi
          done
