name: Build
on:
  pull_request:
  push:
    branches:
      - master
jobs:
  analyze-changes:
    name: Analyze changes
    runs-on: ubuntu-latest
    outputs:
      run-build: ${{steps.analysis.outputs.run-build}}
      run-format-check-c-cpp: ${{steps.analysis.outputs.run-format-check-c-cpp}}
      code-changes-c-cpp: ${{steps.analysis.outputs.code-changes-c-cpp}}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2.3.4
        with:
          fetch-depth: 0
      - name: Analyze changes
        id: analysis
        shell: bash
        run: |
          if [ ${{github.ref}} == refs/heads/master ]; then
            build_changes=true
            format_changes_c_cpp=true
            code_changes_c_cpp=$(
              find . -type f \
              -iregex '^.*\.\(c\|cpp\|h\|hpp\|inl\)$' -and -not \
              -iregex '^\.\/externals.*$'
            )
          else
            build_changes=$(
              git diff --name-only origin/master HEAD -- \
              ':!*.md' ':!*.asciidoc' ':!.github/CODEOWNERS' ':!externals/*/*' \
              ':!.github/workflows/rebase.yml' ':!.github/labels.yml' \
              ':!.github/dependabot.yml' ':!.github/workflows/sync-labels.yml'
            )
            if [ -z "$build_changes" ]; then
              build_changes=false
            else
              build_changes=true
            fi
            code_changes_c_cpp=$(
              git diff --name-only origin/master HEAD -- \
              ':!externals/*/*' *.c *.cpp *.h *.hpp *.inl .clang-format
            )
            if [ -z "$code_changes_c_cpp" ]; then
              format_changes_c_cpp=false
            else
              format_changes_c_cpp=true
              code_changes_c_cpp=$(
                echo "$code_changes_c_cpp" | grep -v .clang-format || true
              )
            fi
          fi
          echo "Run build: $build_changes"
          echo "Run format check (C/C++): $format_changes_c_cpp"
          if [ -z "$code_changes_c_cpp" ]; then
            echo 'Code changes (C/C++): [none]'
          else
            echo "Code changes (C/C++): $code_changes_c_cpp"
          fi
          echo "::set-output name=run-build::$build_changes"
          echo "::set-output name=run-format-check-c-cpp::$format_changes_c_cpp"
          echo "::set-output name=code-changes-c-cpp::$code_changes_c_cpp"
  check-code-formatting-c-cpp:
    name: Check code formatting (C/C++)
    needs: analyze-changes
    if: needs.analyze-changes.outputs.run-format-check-c-cpp == 'true'
    runs-on: ubuntu-latest
    container: ghcr.io/wnproject/clang-format
    steps:
      - name: Checkout code
        uses: actions/checkout@v2.3.4
      - name: Check code format
        run: >
          echo "${{needs.analyze-changes.outputs.code-changes-c-cpp}}" |
          xargs clang-format --dry-run --Werror
  build-android:
    name: Build Android
    needs: analyze-changes
    if: needs.analyze-changes.outputs.run-build == 'true'
    runs-on: ubuntu-latest
    container: ghcr.io/wnproject/build-android
    strategy:
      fail-fast: false
      matrix:
        architecture: [armeabi-v7a, arm64-v8a, x86]
        build-type: [Debug, Release]
    steps:
      - name: Set up build environment
        run: mkdir build
      - name: Checkout code
        uses: actions/checkout@v2.3.4
        with:
          path: ./source
          submodules: true
      - name: Set up gcs key
        shell: bash
        run: echo "$GCS_KEY" > /tmp/gcs_key.json
        env:
          GCS_KEY: ${{secrets.SCCACHE_GCS_KEY}}
      - name: Run configuration
        working-directory: ./build
        run: >
          cmake -GNinja
          -DCMAKE_BUILD_TYPE=${{matrix.build-type}}
          -DCMAKE_TOOLCHAIN_FILE=${OVERLAY}/android.toolchain.cmake
          -DWN_ANDROID_ABIS=${{matrix.architecture}}
          -DWN_ANDROID_SDK=/opt/android-sdk
          -DWN_LOW_RESOURCE_MODE=ON
          -DWN_USE_SCCACHE=ON
          ../source
        env:
          OVERLAY: ${{github.workspace}}/source/Overlays/Posix/Overlays/Android
          SCCACHE_GCS_BUCKET: ${{secrets.SCCACHE_GCS_BUCKET}}
          SCCACHE_GCS_KEY_PATH: /tmp/gcs_key.json
          SCCACHE_GCS_RW_MODE: READ_WRITE
      - name: Run build (host tools)
        working-directory: ./build/host/externals/llvm-project/llvm
        run: cmake --build . --target llvm-tblgen
        env:
          SCCACHE_GCS_BUCKET: ${{secrets.SCCACHE_GCS_BUCKET}}
          SCCACHE_GCS_KEY_PATH: /tmp/gcs_key.json
          SCCACHE_GCS_RW_MODE: READ_WRITE
      - name: 'Run build (platform: ${{matrix.architecture}})'
        working-directory: ./build/${{matrix.architecture}}
        run: cmake --build .
        env:
          SCCACHE_GCS_BUCKET: ${{secrets.SCCACHE_GCS_BUCKET}}
          SCCACHE_GCS_KEY_PATH: /tmp/gcs_key.json
          SCCACHE_GCS_RW_MODE: READ_WRITE
      - name: Run build (apks)
        working-directory: ./build
        run: cmake --build .
        env:
          SCCACHE_GCS_BUCKET: ${{secrets.SCCACHE_GCS_BUCKET}}
          SCCACHE_GCS_KEY_PATH: /tmp/gcs_key.json
          SCCACHE_GCS_RW_MODE: READ_WRITE
      - name: Run tests
        working-directory: ./build
        run: >
          ctest -C ${{matrix.build-type}}
          -LE REQUIRES_HARDWARE --output-on-failure
      - name: Report build details
        if: success() || failure()
        run: du -hbcs ./source ./build
  build-linux:
    name: Build Linux
    needs: analyze-changes
    if: needs.analyze-changes.outputs.run-build == 'true'
    runs-on: ubuntu-latest
    container: ghcr.io/wnproject/build-linux:${{matrix.compiler}}
    strategy:
      fail-fast: false
      matrix:
        compiler: [clang-9, clang-10, gcc-9, gcc-10]
        build-type: [Debug, Release]
    steps:
      - name: Set up build environment
        run: mkdir build
      - name: Checkout code
        uses: actions/checkout@v2.3.4
        with:
          path: ./source
          submodules: true
      - name: Set up gcs key
        shell: bash
        run: echo "$GCS_KEY" > /tmp/gcs_key.json
        env:
          GCS_KEY: ${{secrets.SCCACHE_GCS_KEY}}
      - name: Run configuration
        working-directory: ./build
        run: >
          cmake -GNinja
          -DCMAKE_BUILD_TYPE=${{matrix.build-type}}
          -DWN_USE_SCCACHE=ON
          ../source
        env:
          SCCACHE_GCS_BUCKET: ${{secrets.SCCACHE_GCS_BUCKET}}
          SCCACHE_GCS_KEY_PATH: /tmp/gcs_key.json
          SCCACHE_GCS_RW_MODE: READ_WRITE
      - name: Run build
        working-directory: ./build
        run: cmake --build .
        env:
          SCCACHE_GCS_BUCKET: ${{secrets.SCCACHE_GCS_BUCKET}}
          SCCACHE_GCS_KEY_PATH: /tmp/gcs_key.json
          SCCACHE_GCS_RW_MODE: READ_WRITE
      - name: Run tests
        working-directory: ./build
        run: >
          ctest -C ${{matrix.build-type}}
          -LE REQUIRES_HARDWARE --output-on-failure
      - name: Report build details
        if: success() || failure()
        run: du -hbcs ./source ./build
  build-windows:
    name: Build Windows
    needs: analyze-changes
    if: needs.analyze-changes.outputs.run-build == 'true'
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        compiler: [msvc-15, msvc-16]
        build-type: [Debug, Release]
    env:
      PACKAGE: ghcr.io/${{github.repository_owner}}/build-windows
    steps:
      - name: Determine additional info
        id: info
        run: |
          $docker_image = "${{env.PACKAGE}}:${{matrix.compiler}}".ToLower()
          echo "::set-output name=docker_image::$docker_image"
      - name: Set up build environment
        run: mkdir build
      - name: Checkout code
        uses: actions/checkout@v2.3.4
        with:
          path: ./source
          submodules: true
      - name: Set up gcs key
        shell: bash
        run: echo "$GCS_KEY" > gcs_key.json
        env:
          GCS_KEY: ${{secrets.SCCACHE_GCS_KEY}}
      - name: Pull container
        run: docker pull ${{steps.info.outputs.docker_image}}
      - name: Run configuration
        run: >
          docker run --rm
          -e SCCACHE_GCS_BUCKET=${{secrets.SCCACHE_GCS_BUCKET}}
          -e SCCACHE_GCS_KEY_PATH=C:\workspace\gcs_key.json
          -e SCCACHE_GCS_RW_MODE=READ_WRITE
          -v ${{github.workspace}}:C:\workspace
          ${{steps.info.outputs.docker_image}}
          cmake -GNinja -S C:\workspace\source -B C:\workspace\build
          -DCMAKE_BUILD_TYPE=${{matrix.build-type}}
          -DWN_LOW_RESOURCE_MODE=ON
          -DWN_USE_SCCACHE=ON
      - name: Run build
        run: >
          docker run --rm
          -e SCCACHE_GCS_BUCKET=${{secrets.SCCACHE_GCS_BUCKET}}
          -e SCCACHE_GCS_KEY_PATH=C:\workspace\gcs_key.json
          -e SCCACHE_GCS_RW_MODE=READ_WRITE
          -v ${{github.workspace}}:C:\workspace
          ${{steps.info.outputs.docker_image}}
          cmake --build C:\workspace\build
      - name: Run tests
        run: >
          docker run --rm
          -v ${{github.workspace}}:C:\workspace
          ${{steps.info.outputs.docker_image}}
          "cd C:\workspace\build;
          ctest -C ${{matrix.build-type}}
          -LE REQUIRES_HARDWARE
          --output-on-failure"
      - name: Report build details
        if: success() || failure()
        shell: bash
        run: du -hbcs ./source ./build
  build:
    name: Build
    needs:
      - build-android
      - build-linux
      - build-windows
    if: success() || failure()
    runs-on: ubuntu-latest
    steps:
      - name: Accumulate build status
        shell: bash
        run: |
          results=( ${{join(needs.*.result, ' ')}} )
          for result in "${results[@]}"; do
            if [ "$result" != success ]; then
              echo Build failed
              exit 1
            fi
          done
