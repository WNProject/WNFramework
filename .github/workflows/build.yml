name: Build
on:
  pull_request:
  push:
    branches:
      - master
jobs:
  check-code-formatting-c-cpp:
    name: Check code formatting (C/C++)
    runs-on: ubuntu-latest
    container: ghcr.io/wnproject/clang-format
    steps:
      - name: Checkout code
        uses: actions/checkout@v2.3.4
      - name: Check code format
        run: >
          find . -type f
          -iregex '^.*\.\(c\|cpp\|h\|hpp\|inl\)$' -and -not
          -iregex '^\.\/externals.*$' |
          xargs clang-format --dry-run --Werror --verbose
  build-android:
    name: 'Build (Android: ${{matrix.architecture}}/${{matrix.build-type}})'
    runs-on: ubuntu-latest
    container: ghcr.io/wnproject/build-android
    strategy:
      fail-fast: false
      matrix:
        architecture: [armeabi-v7a, arm64-v8a, x86]
        build-type: [Debug, Release]
    steps:
      - name: Set up build environment
        run: mkdir build
      - name: Checkout code
        uses: actions/checkout@v2.3.4
        with:
          path: ./source
          submodules: true
      - name: Set up GCS Key
        run: echo $GCS_KEY > /tmp/gcs_key.json
        shell: bash
        env:
          GCS_KEY: ${{secrets.SCCACHE_GCS_KEY}}
      - name: Run configuration
        working-directory: ./build
        run: >
          cmake -GNinja
          -DCMAKE_BUILD_TYPE=${{matrix.build-type}}
          -DCMAKE_TOOLCHAIN_FILE=${OVERLAY}/android.toolchain.cmake
          -DWN_ANDROID_ABIS=${{matrix.architecture}}
          -DWN_ANDROID_SDK=/opt/android-sdk
          -DWN_LOW_RESOURCE_MODE=ON
          -DWN_USE_SCCACHE=ON
          ../source
        env:
          OVERLAY: ${{github.workspace}}/source/Overlays/Posix/Overlays/Android
          SCCACHE_GCS_BUCKET: ${{secrets.SCCACHE_GCS_BUCKET}}
          SCCACHE_GCS_KEY_PATH: /tmp/gcs_key.json
          SCCACHE_GCS_RW_MODE: READ_WRITE
      - name: Run build - host_tools
        working-directory: ./build/host/externals/llvm-project/llvm
        run: cmake --build . --target llvm-tblgen
        env:
          SCCACHE_GCS_BUCKET: ${{secrets.SCCACHE_GCS_BUCKET}}
          SCCACHE_GCS_KEY_PATH: /tmp/gcs_key.json
          SCCACHE_GCS_RW_MODE: READ_WRITE
      - name: Run build - arch
        working-directory: ./build/${{matrix.architecture}}
        run: cmake --build .
        env:
          SCCACHE_GCS_BUCKET: ${{secrets.SCCACHE_GCS_BUCKET}}
          SCCACHE_GCS_KEY_PATH: /tmp/gcs_key.json
          SCCACHE_GCS_RW_MODE: READ_WRITE
      - name: Run build - apks
        working-directory: ./build
        run: cmake --build .
        env:
          SCCACHE_GCS_BUCKET: ${{secrets.SCCACHE_GCS_BUCKET}}
          SCCACHE_GCS_KEY_PATH: /tmp/gcs_key.json
          SCCACHE_GCS_RW_MODE: READ_WRITE
      - name: Report build details
        run: du -hbcs ./source ./build
  build-linux:
    name: 'Build (Linux: x86-64/${{matrix.compiler}}-${{matrix.version}}/${{matrix.build-type}})'
    runs-on: ubuntu-latest
    container: ghcr.io/wnproject/build-linux:${{matrix.compiler}}-${{matrix.version}}
    strategy:
      fail-fast: false
      matrix:
        compiler: [clang, gcc]
        version: [9, 10]
        build-type: [Debug, Release]
    steps:
      - name: Set up build environment
        run: mkdir build
      - name: Checkout code
        uses: actions/checkout@v2.3.4
        with:
          path: ./source
          submodules: true
      - name: Set up GCS Key
        run: echo $GCS_KEY > /tmp/gcs_key.json
        shell: bash
        env:
          GCS_KEY: ${{secrets.SCCACHE_GCS_KEY}}
      - name: Run configuration
        working-directory: ./build
        run: cmake -GNinja -DCMAKE_BUILD_TYPE=${{matrix.build-type}} ../source -DWN_USE_SCCACHE=ON
        env:
          SCCACHE_GCS_BUCKET: ${{secrets.SCCACHE_GCS_BUCKET}}
          SCCACHE_GCS_KEY_PATH: /tmp/gcs_key.json
          SCCACHE_GCS_RW_MODE: READ_WRITE
      - name: Run build
        working-directory: ./build
        run: cmake --build .
        env:
          SCCACHE_GCS_BUCKET: ${{secrets.SCCACHE_GCS_BUCKET}}
          SCCACHE_GCS_KEY_PATH: /tmp/gcs_key.json
          SCCACHE_GCS_RW_MODE: READ_WRITE
      - name: Report build details
        if: success() || failure()
        run: du -hbcs ./source ./build
  build-windows:
    name: 'Build (Windows: x86-64/msvc-${{matrix.version}}/${{matrix.build-type}})'
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        version: [15, 16]
        build-type: [Debug, Release]
    env:
      PACKAGE: ghcr.io/${{github.repository_owner}}/build-windows
    steps:
      - name: Determine additional info
        id: info
        run: |
          $docker_image = "${{env.PACKAGE}}:msvc-${{matrix.version}}".ToLower()
          echo "::set-output name=docker_image::$docker_image"
      - name: Set up build environment
        run: mkdir build
      - name: Checkout code
        uses: actions/checkout@v2.3.4
        with:
          path: ./source
          submodules: true
      - name: Set up GCS Key
        run: echo $GCS_KEY > gcs_key.json
        shell: bash
        env:
          GCS_KEY: ${{secrets.SCCACHE_GCS_KEY}}
      - name: Pull container
        run: docker pull ${{steps.info.outputs.docker_image}}
      - name: Run configuration
        run: >
          docker run --rm
          -e VS_ARCH=amd64
          -e SCCACHE_GCS_BUCKET=${{secrets.SCCACHE_GCS_BUCKET}}
          -e SCCACHE_GCS_KEY_PATH=C:\workspace\gcs_key.json
          -e SCCACHE_GCS_RW_MODE=READ_WRITE
          -v ${{github.workspace}}:C:\workspace
          ${{steps.info.outputs.docker_image}}
          cmake -GNinja -S C:\workspace\source -B C:\workspace\build
          -DCMAKE_BUILD_TYPE=${{matrix.build-type}}
          -DWN_LOW_RESOURCE_MODE=ON
          -DWN_USE_SCCACHE=ON
      - name: Run build
        run: >
          docker run --rm
          -e VS_ARCH=amd64
          -e SCCACHE_GCS_BUCKET=${{secrets.SCCACHE_GCS_BUCKET}}
          -e SCCACHE_GCS_KEY_PATH=C:\workspace\gcs_key.json
          -e SCCACHE_GCS_RW_MODE=READ_WRITE
          -v ${{github.workspace}}:C:\workspace
          ${{steps.info.outputs.docker_image}}
          cmake --build C:\workspace\build
      - name: Report build details
        if: success() || failure()
        shell: bash
        run: du -hbcs ./source ./build
